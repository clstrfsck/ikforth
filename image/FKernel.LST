Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 1
FKernel.asm



      1					 ;******************************************************************************
      2					 ;
      3					 ;  FKernel.asm
      4					 ;
      5					 ;  Copyright (C) 1999-2003 Illya Kysil
      6					 ;
      7					 ;******************************************************************************
      8					 ;
      9					 ;  This is minimal IKForth kernel, which supports meta-compilation from files.
     10					 ;
     11					 ;******************************************************************************
     12					 ;
     13					 ;  Register usage:
     14					 ;  * EDI - UDP	user data area pointer
     15					 ;  * ESI - IP	instruction pointer
     16					 ;  * ESP - DSP	data stack pointer
     17					 ;  * EBP - RSP	return stack pointer
     18					 ;
     19					 ;    EBX - W pointer
     20					 ;
     21					 ;  * -	register should	remain unchanged in low-level primitives if
     22					 ;	such operation is not primitive's function
     23					 ;
     24					 ;  All	other registers	have no	special	meaning.
     25					 ;
     26					 ;******************************************************************************
     27
     28								 IDEAL
     29								 P386
     30
     31	00000000						 SEGMENT MAIN USE32
     32
     33								 ASSUME	 CS:MAIN,DS:MAIN,ES:MAIN,SS:MAIN
     34
     35								 INCLUDE "macro.inc"
1    36					 ;******************************************************************************
1    37					 ;
1    38					 ;  macro.inc
1    39					 ;  IKForth
1    40					 ;
1    41					 ;  Copyright (C) 1999-2003 Illya Kysil
1    42					 ;
1    43					 ;******************************************************************************
1    44
1    45		  = 0FFFFFFFFh		 F_TRUE			 EQU	 0FFFFFFFFh
1    46		  = 0			 F_FALSE		 EQU	 0
1    47
1    48		  = 4			 CELL_SIZE		 EQU	 4
1    49
1    50		  = 32			 MAX_NAME_LENGTH	 EQU	 32
1    51
1    52					 ;******************************************************************************
1    53					 ;
1    54					 ;******************************************************************************
1    55								 MACRO	 $JMP
1    56								 MOV	 EBX,[DWORD PTR	EAX]
1    57								 JMP	 EBX			 ; execute
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 2
FKernel.asm



1    58								 ENDM	 $JMP
1    59
1    60					 ;******************************************************************************
1    61					 ;  Because of usage of	indirect threaded code the $NEXT macro is used at the end
1    62					 ;  of each definition to perform execution of next word.
1    63					 ;  Simply fetch a code	pointer	[DWORD PTR ESI]	and jump there.
1    64					 ;******************************************************************************
1    65								 MACRO	 $NEXT			 ;
1    66								 LODSD				 ; fetch address
1    67								 $JMP
1    68								 ENDM	 $NEXT
1    69
1    70		  =0000			 VOC_LINK		 =	 0			 ; link	to previous word
1    71					 ;******************************************************************************
1    72					 ;  Vocabulary entry flags
1    73					 ;******************************************************************************
1    74		  = 00h			 VEF_USUAL		 EQU	 00h
1    75		  = 01h			 VEF_IMMEDIATE		 EQU	 01h			 ; IMMEDIATE entry
1    76		  = 02h			 VEF_HIDDEN		 EQU	 02h			 ; hidden word
1    77		  = 04h			 VEF_COMPILE_ONLY	 EQU	 04h			 ; compile only	mode
1    78
1    79					 ;******************************************************************************
1    80					 ;  Macro $DEF defines a vocabulary entry.
1    81					 ;  Parameters:
1    82					 ;    NAME	 the name of the entry to be created
1    83					 ;    CODE	 label of the CFA
1    84					 ;    EXECUTOR	 the executor of a word	( = [DWORD PTR CODE] if	ommited)
1    85					 ;    FLAGS	 entry flags
1    86					 ;  Vocabulary entry layout
1    87					 ;  Offset Length // bytes
1    88					 ;  +0	   1	  FLAGS	(VEF_XXX)
1    89					 ;  +1	   1	  name length (or 0)			   // NFA
1    90					 ;  +2	   n	  name (in OEM codepage)
1    91					 ;  +2+n   1	  n + 2
1    92					 ;  +2+n+1 4	  link to previous word	or 0 if	first word // LFA
1    93					 ;  +2+n+5 4	  address of internal interpreter	   // CFA
1    94					 ;  +2+n+9 x						   // PFA
1    95					 ;******************************************************************************
1    96								 MACRO	 $DEF NAME,CODE,EXECUTOR,FLAGS
1    97								 LOCAL	 $$DEF,$$PREVFLD,$$LBLNAME,$$CODE
1    98					 $$DEF:
1    99					 LASTWORD		 =	 $$DEF
1   100								 IFNB	 <FLAGS>
1   101								   DB	 FLAGS
1   102								 ELSE
1   103								   DB	 VEF_USUAL
1   104								 ENDIF
1   105					 ;; NFA
1   106								 DB	 $$PREVFLD - $ - 1
1   107								 DB	 NAME
1   108					 $$PREVFLD:
1   109								 DB	 $$PREVFLD - $$DEF
1   110					 ;; LFA
1   111								 DD	 VOC_LINK
1   112					 VOC_LINK		 =	 $$DEF + DESIRED_BASE_EQU
1   113
1   114					 ;; CFA
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 3
FKernel.asm



1   115								 IFNB	 <CODE>
1   116								   LABEL   &CODE FAR
1   117								 ENDIF
1   118								 IFNB	 <EXECUTOR>
1   119								   DD	   EXECUTOR + DESIRED_BASE_EQU
1   120								 ELSE
1   121								   DD	   $$CODE + DESIRED_BASE_EQU
1   122								 ENDIF
1   123					 $$CODE:
1   124					 ;; PFA
1   125								 ENDM	 $DEF
1   126
1   127					 ;******************************************************************************
1   128					 ;  Use	this macro to compile FORTH threaded definitions
1   129					 ;******************************************************************************
1   130								 MACRO	 CW NAME
1   131								 DD	 NAME +	DESIRED_BASE_EQU
1   132								 ENDM	 CW
1   133
1   134								 MACRO	 CWLIT VALUE
1   135								 CW	 $LIT
1   136								 CW	 VALUE
1   137								 ENDM	 CWLIT
1   138
1   139					 ;******************************************************************************
1   140					 ;  Use	this macro to compile constants
1   141					 ;******************************************************************************
1   142								 MACRO	 CC VALUE
1   143								 DD	 VALUE
1   144								 ENDM	 CC
1   145
1   146								 MACRO	 CCLIT VALUE
1   147								 CW	 $LIT
1   148								 CC	 VALUE
1   149								 ENDM	 CCLIT
1   150
1   151					 ;******************************************************************************
1   152					 ;  Compile @
1   153					 ;******************************************************************************
1   154								 MACRO	 CFETCH	ADDR
1   155								 CW	 ADDR
1   156								 CW	 $FETCH
1   157								 ENDM	 CFETCH
1   158
1   159					 ;******************************************************************************
1   160					 ;  Compile !
1   161					 ;******************************************************************************
1   162								 MACRO	 CSTORE	ADDR
1   163								 CW	 ADDR
1   164								 CW	 $STORE
1   165								 ENDM	 CSTORE
1   166
1   167					 ;******************************************************************************
1   168					 ;  Compile a conditional branch ?BRANCH
1   169					 ;******************************************************************************
1   170								 MACRO	 CQBR VALUE
1   171								 CW	 $QBRANCH
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 4
FKernel.asm



1   172								 CW	 VALUE
1   173								 ENDM	 CQBR
1   174
1   175					 ;******************************************************************************
1   176					 ;  Compile an unconditional branch BRANCH
1   177					 ;******************************************************************************
1   178								 MACRO	 CBR VALUE
1   179								 CW	 $BRANCH
1   180								 CW	 VALUE
1   181								 ENDM	 CBR
1   182
1   183					 ;******************************************************************************
1   184					 ;  Compile THROW
1   185					 ;******************************************************************************
1   186								 MACRO	 CTHROW	VALUE
1   187								 CCLIT	 VALUE
1   188								 CW	 $THROW
1   189								 ENDM	 CTHROW
1   190
1   191					 ;******************************************************************************
1   192					 ;  Compile EXIT
1   193					 ;******************************************************************************
1   194								 MACRO	 CEXIT
1   195								 CW	 $EXIT
1   196								 ENDM	 CEXIT
1   197
1   198					 ;******************************************************************************
1   199					 ;  Push a value to return stack
1   200					 ;******************************************************************************
1   201								 MACRO	 PUSHRS	SRC
1   202								 SUB	 EBP,CELL_SIZE
1   203								 MOV	 [DWORD	PTR EBP],SRC
1   204								 ENDM	 PUSHRS
1   205
1   206					 ;******************************************************************************
1   207					 ;  Pop	a value	from return stack
1   208					 ;******************************************************************************
1   209								 MACRO	 POPRS DST
1   210								 MOV	 DST,[DWORD PTR	EBP]
1   211								 ADD	 EBP,CELL_SIZE
1   212								 ENDM	 POPRS
1   213
1   214					 ;******************************************************************************
1   215					 ;  Fetch a value from the return stack
1   216					 ;******************************************************************************
1   217								 MACRO	 FETCHRS DST,NUM
1   218								 IFNB	  <NUM>
1   219								   MOV	   DST,[DWORD PTR EBP +	&NUM * CELL_SIZE]
1   220								 ELSE
1   221								   MOV	   DST,[DWORD PTR EBP]
1   222								 ENDIF
1   223								 ENDM	 FETCHRS
1   224
1   225					 ;******************************************************************************
1   226					 ;  Push a value to data stack
1   227					 ;******************************************************************************
1   228								 MACRO	 PUSHDS	SRC
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 5
FKernel.asm



1   229								 PUSH	 SRC
1   230								 ENDM	 PUSHDS
1   231
1   232					 ;******************************************************************************
1   233					 ;  Pop	a value	from data stack
1   234					 ;******************************************************************************
1   235								 MACRO	 POPDS DST
1   236								 POP	 DST
1   237								 ENDM	 POPDS
1   238
1   239					 ;******************************************************************************
1   240					 ;  Fetch a value from the data	stack
1   241					 ;******************************************************************************
1   242								 MACRO	 FETCHDS DST,NUM
1   243								 IFNB	  <NUM>
1   244								   MOV	   DST,[DWORD PTR ESP +	&NUM * CELL_SIZE]
1   245								 ELSE
1   246								   MOV	   DST,[DWORD PTR ESP]
1   247								 ENDIF
1   248								 ENDM	 FETCHDS
1   249
1   250					 ;******************************************************************************
1   251					 ;
1   252					 ;******************************************************************************
1   253								 MACRO	 $CONST	NAME,CODE
1   254								 $DEF	 NAME,CODE,$DOCONST
1   255								 ENDM	 $CONST
1   256
1   257								 MACRO	 $VAR NAME,CODE
1   258								 $DEF	 NAME,CODE,$DOVAR
1   259								 ENDM	 $VAR
1   260
1   261								 MACRO	 $USER NAME,CODE
1   262								 $DEF	 NAME,CODE,$DOUSER
1   263								 ENDM	 $USER
1   264
1   265								 MACRO	 $COLON	NAME,CODE,FLAGS
1   266								 $DEF	 NAME,CODE,$ENTER,FLAGS
1   267								 ENDM	 $COLON
1   268
1   269								 MACRO	 $DEFER	NAME,CODE,FLAGS
1   270								 $DEF	 NAME,CODE,$DODEFER,FLAGS
1   271								 ENDM	 $DEFER
1   272
1   273					 ;******************************************************************************
1   274					 ;
1   275					 ;******************************************************************************
1   276								 MACRO	 $WRITE	TEXT
1   277								 LOCAL	 @@S_END
1   278								 CW	 $PTYPE
1   279								 DB	 @@S_END - $ - 1,'&TEXT'
1   280					 @@S_END:
1   281								 ENDM	 $WRITE
1   282
1   283					 ;******************************************************************************
1   284					 ;
1   285					 ;******************************************************************************
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 6
FKernel.asm



1   286								 MACRO	 $CR
1   287								 CW	 $LIT
1   288								 CC	 13
1   289								 CW	 $EMIT
1   290								 CW	 $LIT
1   291								 CC	 10
1   292								 CW	 $EMIT
1   293								 ENDM	 $CR
1   294
    295
    296					 ;******************************************************************************
    297					 ;  Header
    298					 ;******************************************************************************
    299	00000000			 SIGN:
    300	00000000  49 4B	46 49					 DB	 'IKFI'			 ; MAX.	15 bytes !!!
    301
    302	00000004  0C*(00)					 DB	 16 - (	$ - SIGN ) DUP ( 0 )
    303
    304		  = 20000000h		 DESIRED_BASE_EQU	 EQU	 20000000h
    305		  = 00040000h		 DESIRED_SIZE_EQU	 EQU	 00040000h		 ; 256KB
    306
    307		  = 00001000h		 DATA_STACK_SIZE	 EQU	 00001000h		 ; 4KB
    308		  = 00001000h		 RETURN_STACK_SIZE	 EQU	 00001000h		 ; 4KB
    309
    310		  = 00010000h		 USER_AREA_SIZE0	 EQU	 00010000h		 ; 64KB
    311
    312	00000010  20000000					 DD	 DESIRED_BASE_EQU
    313	00000014			 DESIRED_SIZE_VAR:
    314	00000014  00040000					 DD	 DESIRED_SIZE_EQU
    315	00000018  20002C36					 DD	 OFFSET	START +	DESIRED_BASE_EQU
    316	0000001C  20000CF2					 DD	 OFFSET	THREAD_PROC + DESIRED_BASE_EQU
    317	00000020			 FUNC_TABLE_PTR:
    318	00000020  00000000					 DD	 0
    319	00000024  0001226C					 DD	 USER_AREA_SIZE0 + USER_AREA_SIZE
    320	00000028  00001000					 DD	 DATA_STACK_SIZE
    321
    322					 ;******************************************************************************
    323					 ;  Include functions table
    324					 ;******************************************************************************
    325	0000002C			 FUNC_TABLE:
    326								 INCLUDE "ftable.inc"
1   327					 ;******************************************************************************
1   328					 ;
1   329					 ;  ftable.inc
1   330					 ;  IKForth
1   331					 ;
1   332					 ;  Copyright (C) 1999-2003 Illya Kysil
1   333					 ;
1   334					 ;******************************************************************************
1   335					 ;  Functions provided by loader.
1   336					 ;  Define these functions as stdcall.
1   337					 ;  First argument is on the top of the	data stack.
1   338					 ;  Result ( if	any ) is returned via EAX ( int	), EDX:EAX ( long int ).
1   339					 ;******************************************************************************
1   340		  =0000			 FUNC_AREA_SIZE		 =	 0
1   341								 MACRO	 FUNC_ALLOC SIZE
1   342					 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ SIZE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 7
FKernel.asm



1   343								 ENDM	 FUNC_ALLOC
1   344
1   345								 MACRO	 $FUNC NAME
1   346					 &NAME&_FUNC		 =	 FUNC_AREA_SIZE
1   347								 FUNC_ALLOC  1
1   348								 ENDM	 $FUNC
1   349
1   350								 MACRO	 FUNC_ALIGN
1   351					 FUNC_AREA_SIZE		 =	 ( FUNC_AREA_SIZE / CELL_SIZE +	1 ) * CELL_SIZE
1   352								 ENDM	 FUNC_ALIGN
1   353
1   354								 MACRO	 $CALL NAME
1   355								 PUSHRS	 EDI
1   356								 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
1   357								 MOV	 EBX,[DWORD PTR	EBX + &NAME * CELL_SIZE]
1   358								 CALL	 EBX
1   359								 POPRS	 EDI
1   360								 ENDM	 $CALL
1   361
1   362								 $FUNC	 GET_LAST_ERROR
2   363		  =0000			 GET_LAST_ERROR_FUNC		 =	 FUNC_AREA_SIZE
2   364								 FUNC_ALLOC  1
3   365		  =0001			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   366								 $FUNC	 LOAD_LIBRARY
2   367		  =0001			 LOAD_LIBRARY_FUNC	       =       FUNC_AREA_SIZE
2   368								 FUNC_ALLOC  1
3   369		  =0002			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   370								 $FUNC	 FREE_LIBRARY
2   371		  =0002			 FREE_LIBRARY_FUNC	       =       FUNC_AREA_SIZE
2   372								 FUNC_ALLOC  1
3   373		  =0003			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   374								 $FUNC	 GET_PROC_ADDRESS
2   375		  =0003			 GET_PROC_ADDRESS_FUNC		   =	   FUNC_AREA_SIZE
2   376								 FUNC_ALLOC  1
3   377		  =0004			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   378								 $FUNC	 BYE
2   379		  =0004			 BYE_FUNC	      =	      FUNC_AREA_SIZE
2   380								 FUNC_ALLOC  1
3   381		  =0005			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   382								 $FUNC	 EMIT
2   383		  =0005			 EMIT_FUNC	       =       FUNC_AREA_SIZE
2   384								 FUNC_ALLOC  1
3   385		  =0006			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   386								 $FUNC	 TYPE
2   387		  =0006			 TYPE_FUNC	       =       FUNC_AREA_SIZE
2   388								 FUNC_ALLOC  1
3   389		  =0007			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   390								 $FUNC	 ACCEPT
2   391		  =0007			 ACCEPT_FUNC		 =	 FUNC_AREA_SIZE
2   392								 FUNC_ALLOC  1
3   393		  =0008			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   394								 $FUNC	 READ_BLOCK
2   395		  =0008			 READ_BLOCK_FUNC	     =	     FUNC_AREA_SIZE
2   396								 FUNC_ALLOC  1
3   397		  =0009			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   398								 $FUNC	 WRITE_BLOCK
2   399		  =0009			 WRITE_BLOCK_FUNC	      =	      FUNC_AREA_SIZE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 8
FKernel.asm



2   400								 FUNC_ALLOC  1
3   401		  =000A			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   402								 $FUNC	 FILE_CLOSE
2   403		  =000A			 FILE_CLOSE_FUNC	     =	     FUNC_AREA_SIZE
2   404								 FUNC_ALLOC  1
3   405		  =000B			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   406								 $FUNC	 FILE_CREATE
2   407		  =000B			 FILE_CREATE_FUNC	      =	      FUNC_AREA_SIZE
2   408								 FUNC_ALLOC  1
3   409		  =000C			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   410								 $FUNC	 FILE_POSITION
2   411		  =000C			 FILE_POSITION_FUNC		=	FUNC_AREA_SIZE
2   412								 FUNC_ALLOC  1
3   413		  =000D			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   414								 $FUNC	 FILE_OPEN
2   415		  =000D			 FILE_OPEN_FUNC		    =	    FUNC_AREA_SIZE
2   416								 FUNC_ALLOC  1
3   417		  =000E			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   418								 $FUNC	 FILE_READ
2   419		  =000E			 FILE_READ_FUNC		    =	    FUNC_AREA_SIZE
2   420								 FUNC_ALLOC  1
3   421		  =000F			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   422								 $FUNC	 FILE_REPOSITION
2   423		  =000F			 FILE_REPOSITION_FUNC		  =	  FUNC_AREA_SIZE
2   424								 FUNC_ALLOC  1
3   425		  =0010			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   426								 $FUNC	 FILE_WRITE
2   427		  =0010			 FILE_WRITE_FUNC	     =	     FUNC_AREA_SIZE
2   428								 FUNC_ALLOC  1
3   429		  =0011			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   430								 $FUNC	 FILE_READ_LINE
2   431		  =0011			 FILE_READ_LINE_FUNC		 =	 FUNC_AREA_SIZE
2   432								 FUNC_ALLOC  1
3   433		  =0012			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   434								 $FUNC	 FILE_RESIZE
2   435		  =0012			 FILE_RESIZE_FUNC	      =	      FUNC_AREA_SIZE
2   436								 FUNC_ALLOC  1
3   437		  =0013			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   438								 $FUNC	 AT_XY
2   439		  =0013			 AT_XY_FUNC		=	FUNC_AREA_SIZE
2   440								 FUNC_ALLOC  1
3   441		  =0014			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   442								 $FUNC	 START_THREAD
2   443		  =0014			 START_THREAD_FUNC	       =       FUNC_AREA_SIZE
2   444								 FUNC_ALLOC  1
3   445		  =0015			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   446								 $FUNC	 COMPARE
2   447		  =0015			 COMPARE_FUNC		  =	  FUNC_AREA_SIZE
2   448								 FUNC_ALLOC  1
3   449		  =0016			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   450								 $FUNC	 PAGE
2   451		  =0016			 PAGE_FUNC	       =       FUNC_AREA_SIZE
2   452								 FUNC_ALLOC  1
3   453		  =0017			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   454								 $FUNC	 ALLOCATE
2   455		  =0017			 ALLOCATE_FUNC		   =	   FUNC_AREA_SIZE
2   456								 FUNC_ALLOC  1
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 9
FKernel.asm



3   457		  =0018			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   458								 $FUNC	 FREE
2   459		  =0018			 FREE_FUNC	       =       FUNC_AREA_SIZE
2   460								 FUNC_ALLOC  1
3   461		  =0019			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   462								 $FUNC	 REALLOCATE
2   463		  =0019			 REALLOCATE_FUNC	     =	     FUNC_AREA_SIZE
2   464								 FUNC_ALLOC  1
3   465		  =001A			 FUNC_AREA_SIZE		 =	 FUNC_AREA_SIZE	+ 1
1   466
    467
    468					 ;******************************************************************************
    469					 ;  Include user area variables. These variables are unique to any thread.
    470					 ;******************************************************************************
    471								 INCLUDE "user.inc"
1   472					 ;******************************************************************************
1   473					 ;
1   474					 ;  user.inc
1   475					 ;  IKForth
1   476					 ;
1   477					 ;  Copyright (C) 1999-2003 Illya Kysil
1   478					 ;
1   479					 ;******************************************************************************
1   480					 ;
1   481					 ;******************************************************************************
1   482
1   483		  =0000			 USER_AREA_SIZE		 =	 0
1   484								 MACRO	 _ALLOC	SIZE
1   485					 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ SIZE
1   486								 ENDM	 _ALLOC
1   487
1   488								 MACRO	 _VAR  NAME,SIZE
1   489					 &NAME&_VAR		 =	 USER_AREA_SIZE
1   490								 IFNB	 <SIZE>
1   491								   _ALLOC  SIZE
1   492								 ELSE
1   493								   _ALLOC  CELL_SIZE
1   494								 ENDIF
1   495								 ENDM	 _VAR
1   496
1   497								 MACRO	 _ALIGN
1   498					 USER_AREA_SIZE		 =	 ( USER_AREA_SIZE / CELL_SIZE +	1 ) * CELL_SIZE
1   499								 ENDM	 _ALIGN
1   500
1   501								 _VAR	 RETURN_ADDR
2   502		  =0000			 RETURN_ADDR_VAR	      =	      USER_AREA_SIZE
2   503								 IFNB	 <>
2   504								   _ALLOC
2   505								 ELSE
2   506								   _ALLOC  CELL_SIZE
3   507		  =0004			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   508								 ENDIF
1   509								 _VAR	 EDI
2   510		  =0004			 EDI_VAR	      =	      USER_AREA_SIZE
2   511								 IFNB	 <>
2   512								   _ALLOC
2   513								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 10
FKernel.asm



2   514								   _ALLOC  CELL_SIZE
3   515		  =0008			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   516								 ENDIF
1   517								 _VAR	 ESI
2   518		  =0008			 ESI_VAR	      =	      USER_AREA_SIZE
2   519								 IFNB	 <>
2   520								   _ALLOC
2   521								 ELSE
2   522								   _ALLOC  CELL_SIZE
3   523		  =000C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   524								 ENDIF
1   525								 _VAR	 EBP
2   526		  =000C			 EBP_VAR	      =	      USER_AREA_SIZE
2   527								 IFNB	 <>
2   528								   _ALLOC
2   529								 ELSE
2   530								   _ALLOC  CELL_SIZE
3   531		  =0010			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   532								 ENDIF
1   533								 _VAR	 EBX
2   534		  =0010			 EBX_VAR	      =	      USER_AREA_SIZE
2   535								 IFNB	 <>
2   536								   _ALLOC
2   537								 ELSE
2   538								   _ALLOC  CELL_SIZE
3   539		  =0014			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   540								 ENDIF
1   541								 _VAR	 ESP
2   542		  =0014			 ESP_VAR	      =	      USER_AREA_SIZE
2   543								 IFNB	 <>
2   544								   _ALLOC
2   545								 ELSE
2   546								   _ALLOC  CELL_SIZE
3   547		  =0018			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   548								 ENDIF
1   549								 _VAR	 STATE
2   550		  =0018			 STATE_VAR		=	USER_AREA_SIZE
2   551								 IFNB	 <>
2   552								   _ALLOC
2   553								 ELSE
2   554								   _ALLOC  CELL_SIZE
3   555		  =001C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   556								 ENDIF
1   557								 _VAR	 BASE
2   558		  =001C			 BASE_VAR	       =       USER_AREA_SIZE
2   559								 IFNB	 <>
2   560								   _ALLOC
2   561								 ELSE
2   562								   _ALLOC  CELL_SIZE
3   563		  =0020			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   564								 ENDIF
1   565								 _VAR	 TOIN
2   566		  =0020			 TOIN_VAR	       =       USER_AREA_SIZE
2   567								 IFNB	 <>
2   568								   _ALLOC
2   569								 ELSE
2   570								   _ALLOC  CELL_SIZE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 11
FKernel.asm



3   571		  =0024			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   572								 ENDIF
1   573								 _VAR	 SOURCE_ID
2   574		  =0024			 SOURCE_ID_VAR		    =	    USER_AREA_SIZE
2   575								 IFNB	 <>
2   576								   _ALLOC
2   577								 ELSE
2   578								   _ALLOC  CELL_SIZE
3   579		  =0028			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   580								 ENDIF
1   581								 _VAR	 CASE_SENSITIVE
2   582		  =0028			 CASE_SENSITIVE_VAR		 =	 USER_AREA_SIZE
2   583								 IFNB	 <>
2   584								   _ALLOC
2   585								 ELSE
2   586								   _ALLOC  CELL_SIZE
3   587		  =002C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   588								 ENDIF
1   589								 _VAR	 TONUMBER_SIGNED
2   590		  =002C			 TONUMBER_SIGNED_VAR		  =	  USER_AREA_SIZE
2   591								 IFNB	 <>
2   592								   _ALLOC
2   593								 ELSE
2   594								   _ALLOC  CELL_SIZE
3   595		  =0030			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   596								 ENDIF
1   597								 _VAR	 #EVAL
2   598		  =0030			 #EVAL_VAR		=	USER_AREA_SIZE
2   599								 IFNB	 <>
2   600								   _ALLOC
2   601								 ELSE
2   602								   _ALLOC  CELL_SIZE
3   603		  =0034			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   604								 ENDIF
1   605								 _VAR	 EVAL
2   606		  =0034			 EVAL_VAR	       =       USER_AREA_SIZE
2   607								 IFNB	 <>
2   608								   _ALLOC
2   609								 ELSE
2   610								   _ALLOC  CELL_SIZE
3   611		  =0038			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   612								 ENDIF
1   613
1   614								 _VAR	 CURR_FILE_POS
2   615		  =0038			 CURR_FILE_POS_VAR		=	USER_AREA_SIZE
2   616								 IFNB	 <>
2   617								   _ALLOC
2   618								 ELSE
2   619								   _ALLOC  CELL_SIZE
3   620		  =003C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   621								 ENDIF
1   622								 _ALLOC	 CELL_SIZE
2   623		  =0040			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
1   624
1   625		  = 1024		 MAX_LINE_LENGTH	 EQU	 1024
1   626								 _VAR	 #LINE
2   627		  =0040			 #LINE_VAR		=	USER_AREA_SIZE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 12
FKernel.asm



2   628								 IFNB	 <>
2   629								   _ALLOC
2   630								 ELSE
2   631								   _ALLOC  CELL_SIZE
3   632		  =0044			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   633								 ENDIF
1   634								 _VAR	 LINE,<MAX_LINE_LENGTH + 1>
2   635		  =0044			 LINE_VAR	       =       USER_AREA_SIZE
2   636								 IFNB	 <MAX_LINE_LENGTH + 1>
2   637								   _ALLOC  MAX_LINE_LENGTH + 1
3   638		  =0444			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ MAX_LINE_LENGTH
2   639								 ELSE
2   640								   _ALLOC  CELL_SIZE
2   641								 ENDIF
1   642
1   643		  = 1024		 MAX_TIB_LENGTH		 EQU	 1024
1   644								 _VAR	 #TIB
2   645		  =0444			 #TIB_VAR	       =       USER_AREA_SIZE
2   646								 IFNB	 <>
2   647								   _ALLOC
2   648								 ELSE
2   649								   _ALLOC  CELL_SIZE
3   650		  =0448			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   651								 ENDIF
1   652								 _VAR	 TIB,<MAX_TIB_LENGTH + 1>
2   653		  =0448			 TIB_VAR	      =	      USER_AREA_SIZE
2   654								 IFNB	 <MAX_TIB_LENGTH + 1>
2   655								   _ALLOC  MAX_TIB_LENGTH + 1
3   656		  =0848			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ MAX_TIB_LENGTH
2   657								 ELSE
2   658								   _ALLOC  CELL_SIZE
2   659								 ENDIF
1   660
1   661								 _VAR	 CURRENT
2   662		  =0848			 CURRENT_VAR		  =	  USER_AREA_SIZE
2   663								 IFNB	 <>
2   664								   _ALLOC
2   665								 ELSE
2   666								   _ALLOC  CELL_SIZE
3   667		  =084C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   668								 ENDIF
1   669
1   670								 _VAR	 BLK
2   671		  =084C			 BLK_VAR	      =	      USER_AREA_SIZE
2   672								 IFNB	 <>
2   673								   _ALLOC
2   674								 ELSE
2   675								   _ALLOC  CELL_SIZE
3   676		  =0850			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   677								 ENDIF
1   678
1   679								 _VAR	 BLOCK_NUM
2   680		  =0850			 BLOCK_NUM_VAR		    =	    USER_AREA_SIZE
2   681								 IFNB	 <>
2   682								   _ALLOC
2   683								 ELSE
2   684								   _ALLOC  CELL_SIZE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 13
FKernel.asm



3   685		  =0854			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   686								 ENDIF
1   687								 _VAR	 BLOCK_UPDATED
2   688		  =0854			 BLOCK_UPDATED_VAR		=	USER_AREA_SIZE
2   689								 IFNB	 <>
2   690								   _ALLOC
2   691								 ELSE
2   692								   _ALLOC  CELL_SIZE
3   693		  =0858			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   694								 ENDIF
1   695								 _VAR	 BLOCK,<1024 + 1>
2   696		  =0858			 BLOCK_VAR		=	USER_AREA_SIZE
2   697								 IFNB	 <1024 + 1>
2   698								   _ALLOC  1024	+ 1
3   699		  =0C58			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ 1024
2   700								 ELSE
2   701								   _ALLOC  CELL_SIZE
2   702								 ENDIF
1   703
1   704								 _VAR	 EXCEPTION_HANDLER
2   705		  =0C58			 EXCEPTION_HANDLER_VAR		    =	    USER_AREA_SIZE
2   706								 IFNB	 <>
2   707								   _ALLOC
2   708								 ELSE
2   709								   _ALLOC  CELL_SIZE
3   710		  =0C5C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   711								 ENDIF
1   712								 _VAR	 THROW_ADDRESS
2   713		  =0C5C			 THROW_ADDRESS_VAR		=	USER_AREA_SIZE
2   714								 IFNB	 <>
2   715								   _ALLOC
2   716								 ELSE
2   717								   _ALLOC  CELL_SIZE
3   718		  =0C60			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   719								 ENDIF
1   720								 _VAR	 THROW_WORD
2   721		  =0C60			 THROW_WORD_VAR		     =	     USER_AREA_SIZE
2   722								 IFNB	 <>
2   723								   _ALLOC
2   724								 ELSE
2   725								   _ALLOC  CELL_SIZE
3   726		  =0C64			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   727								 ENDIF
1   728
1   729								 _VAR	 WIN32_EXCEPTION_CONTEXT,256
2   730		  =0C64			 WIN32_EXCEPTION_CONTEXT_VAR		  =	  USER_AREA_SIZE
2   731								 IFNB	 <256>
2   732								   _ALLOC  256
3   733		  =0D64			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ 256
2   734								 ELSE
2   735								   _ALLOC  CELL_SIZE
2   736								 ENDIF
1   737								 _VAR	 SQUOTE_BUFFER,1024
2   738		  =0D64			 SQUOTE_BUFFER_VAR		=	USER_AREA_SIZE
2   739								 IFNB	 <1024>
2   740								   _ALLOC  1024
3   741		  =1164			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ 1024
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 14
FKernel.asm



2   742								 ELSE
2   743								   _ALLOC  CELL_SIZE
2   744								 ENDIF
1   745
1   746								 _VAR	 POCKET,256
2   747		  =1164			 POCKET_VAR		 =	 USER_AREA_SIZE
2   748								 IFNB	 <256>
2   749								   _ALLOC  256
3   750		  =1264			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ 256
2   751								 ELSE
2   752								   _ALLOC  CELL_SIZE
2   753								 ENDIF
1   754
1   755								 _ALIGN
2   756		  =1268			 USER_AREA_SIZE		 =	 ( USER_AREA_SIZE / CELL_SIZE +	1 ) * CELL_SIZE
1   757
1   758								 _ALLOC	 RETURN_STACK_SIZE
2   759		  =2268			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ RETURN_STACK_SIZE
1   760								 _VAR	 RSTACK
2   761		  =2268			 RSTACK_VAR		 =	 USER_AREA_SIZE
2   762								 IFNB	 <>
2   763								   _ALLOC
2   764								 ELSE
2   765								   _ALLOC  CELL_SIZE
3   766		  =226C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   767								 ENDIF
1   768
    769
    770					 ;******************************************************************************
    771					 ;  Include core Forth definitions.
    772					 ;******************************************************************************
    773	0000002C  02*(87 DB)					 ALIGN	 16
    774
    775								 INCLUDE "words.inc"
1   776					 ;******************************************************************************
1   777					 ;
1   778					 ;  words.inc
1   779					 ;  IKForth
1   780					 ;
1   781					 ;  Copyright (C) 1999-2003 Illya Kysil
1   782					 ;
1   783					 ;******************************************************************************
1   784
1   785								 INCLUDE "primitives.inc"
2   786					 ;******************************************************************************
2   787					 ;
2   788					 ;  primitives.inc
2   789					 ;  IKForth
2   790					 ;
2   791					 ;  Copyright (C) 1999-2003 Illya Kysil
2   792					 ;
2   793					 ;******************************************************************************
2   794					 ;  Primitives
2   795					 ;******************************************************************************
2   796
2   797					 ;  ?BRANCH
2   798					 ;  Branch to address compiled next if flag on stack is	zero
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 15
FKernel.asm



2   799					 ;  D: flag --
2   800								 $DEF	 '?BRANCH',$QBRANCH
3   801	00000030			 ??0000:
3   802		  =MAIN:0030		 LASTWORD		 =	 ??0000
3   803								 IFNB	 <>
3   804								   DB
3   805								 ELSE
3   806	00000030  00						   DB	 VEF_USUAL
3   807								 ENDIF
3   808	00000031  07						 DB	 ??0001	- $ - 1
3   809	00000032  3F 42	52 41 4E 43 48				 DB	 '?BRANCH'
3   810	00000039			 ??0001:
3   811	00000039  09						 DB	 ??0001	- ??0000
3   812	0000003A  00000000					 DD	 VOC_LINK
3   813		  =MAIN:20000030	 VOC_LINK		 =	 ??0000	+ DESIRED_BASE_EQU
3   814
3   815								 IFNB	 <$QBRANCH>
3   816	0000003E						   LABEL   $QBRANCH FAR
3   817								 ENDIF
3   818								 IFNB	 <>
3   819								   DD	    + DESIRED_BASE_EQU
3   820								 ELSE
3   821	0000003E  20000042					   DD	   ??0003 + DESIRED_BASE_EQU
3   822								 ENDIF
3   823	00000042			 ??0003:
2   824								 POPDS	 EAX
3   825	00000042  58						 POP	 EAX
2   826	00000043  0B C0						 OR	 EAX,EAX
2   827	00000045  AD						 LODSD
2   828	00000046  75 02						 JNZ	 SHORT NOQBRANCH
2   829	00000048  8B F0						 MOV	 ESI,EAX
2   830	0000004A			 NOQBRANCH:
2   831								 $NEXT
3   832	0000004A  AD						 LODSD				 ; fetch address
3   833								 $JMP
4   834	0000004B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   835	0000004D  FF E3						 JMP	 EBX			 ; execute
2   836
2   837					 ;  BRANCH
2   838					 ;  Branch to address compiled next
2   839								 $DEF	 'BRANCH',$BRANCH
3   840	0000004F			 ??0004:
3   841		  =MAIN:004F		 LASTWORD		 =	 ??0004
3   842								 IFNB	 <>
3   843								   DB
3   844								 ELSE
3   845	0000004F  00						   DB	 VEF_USUAL
3   846								 ENDIF
3   847	00000050  06						 DB	 ??0005	- $ - 1
3   848	00000051  42 52	41 4E 43 48				 DB	 'BRANCH'
3   849	00000057			 ??0005:
3   850	00000057  08						 DB	 ??0005	- ??0004
3   851	00000058  20000030					 DD	 VOC_LINK
3   852		  =MAIN:2000004F	 VOC_LINK		 =	 ??0004	+ DESIRED_BASE_EQU
3   853
3   854								 IFNB	 <$BRANCH>
3   855	0000005C						   LABEL   $BRANCH FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 16
FKernel.asm



3   856								 ENDIF
3   857								 IFNB	 <>
3   858								   DD	    + DESIRED_BASE_EQU
3   859								 ELSE
3   860	0000005C  20000060					   DD	   ??0007 + DESIRED_BASE_EQU
3   861								 ENDIF
3   862	00000060			 ??0007:
2   863	00000060  AD						 LODSD
2   864	00000061  8B F0						 MOV	 ESI,EAX
2   865								 $NEXT
3   866	00000063  AD						 LODSD				 ; fetch address
3   867								 $JMP
4   868	00000064  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   869	00000066  FF E3						 JMP	 EBX			 ; execute
2   870
2   871					 ;  LIT
2   872					 ;  Compiled by	LITERAL
2   873								 $DEF	 'LIT',$LIT
3   874	00000068			 ??0008:
3   875		  =MAIN:0068		 LASTWORD		 =	 ??0008
3   876								 IFNB	 <>
3   877								   DB
3   878								 ELSE
3   879	00000068  00						   DB	 VEF_USUAL
3   880								 ENDIF
3   881	00000069  03						 DB	 ??0009	- $ - 1
3   882	0000006A  4C 49	54					 DB	 'LIT'
3   883	0000006D			 ??0009:
3   884	0000006D  05						 DB	 ??0009	- ??0008
3   885	0000006E  2000004F					 DD	 VOC_LINK
3   886		  =MAIN:20000068	 VOC_LINK		 =	 ??0008	+ DESIRED_BASE_EQU
3   887
3   888								 IFNB	 <$LIT>
3   889	00000072						   LABEL   $LIT	FAR
3   890								 ENDIF
3   891								 IFNB	 <>
3   892								   DD	    + DESIRED_BASE_EQU
3   893								 ELSE
3   894	00000072  20000076					   DD	   ??000B + DESIRED_BASE_EQU
3   895								 ENDIF
3   896	00000076			 ??000B:
2   897	00000076  AD						 LODSD
2   898								 PUSHDS	 EAX
3   899	00000077  50						 PUSH	 EAX
2   900								 $NEXT
3   901	00000078  AD						 LODSD				 ; fetch address
3   902								 $JMP
4   903	00000079  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   904	0000007B  FF E3						 JMP	 EBX			 ; execute
2   905
2   906					 ;  2LIT
2   907					 ;  Compiled by	2LITERAL
2   908								 $DEF	 '2LIT',$2LIT
3   909	0000007D			 ??000C:
3   910		  =MAIN:007D		 LASTWORD		 =	 ??000C
3   911								 IFNB	 <>
3   912								   DB
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 17
FKernel.asm



3   913								 ELSE
3   914	0000007D  00						   DB	 VEF_USUAL
3   915								 ENDIF
3   916	0000007E  04						 DB	 ??000D	- $ - 1
3   917	0000007F  32 4C	49 54					 DB	 '2LIT'
3   918	00000083			 ??000D:
3   919	00000083  06						 DB	 ??000D	- ??000C
3   920	00000084  20000068					 DD	 VOC_LINK
3   921		  =MAIN:2000007D	 VOC_LINK		 =	 ??000C	+ DESIRED_BASE_EQU
3   922
3   923								 IFNB	 <$2LIT>
3   924	00000088						   LABEL   $2LIT FAR
3   925								 ENDIF
3   926								 IFNB	 <>
3   927								   DD	    + DESIRED_BASE_EQU
3   928								 ELSE
3   929	00000088  2000008C					   DD	   ??000F + DESIRED_BASE_EQU
3   930								 ENDIF
3   931	0000008C			 ??000F:
2   932	0000008C  AD						 LODSD
2   933								 PUSHDS	 EAX
3   934	0000008D  50						 PUSH	 EAX
2   935	0000008E  AD						 LODSD
2   936								 PUSHDS	 EAX
3   937	0000008F  50						 PUSH	 EAX
2   938								 $NEXT
3   939	00000090  AD						 LODSD				 ; fetch address
3   940								 $JMP
4   941	00000091  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   942	00000093  FF E3						 JMP	 EBX			 ; execute
2   943
2   944					 ;  (DO-VARIABLE)
2   945								 $DEF	 '(DO-VARIABLE)',,$DOVAR
3   946	00000095			 ??0010:
3   947		  =MAIN:0095		 LASTWORD		 =	 ??0010
3   948								 IFNB	 <>
3   949								   DB
3   950								 ELSE
3   951	00000095  00						   DB	 VEF_USUAL
3   952								 ENDIF
3   953	00000096  0D						 DB	 ??0011	- $ - 1
3   954	00000097  28 44	4F 2D 56 41 52+				 DB	 '(DO-VARIABLE)'
    955		  49 41	42 4C 45 29
3   956	000000A4			 ??0011:
3   957	000000A4  0F						 DB	 ??0011	- ??0010
3   958	000000A5  2000007D					 DD	 VOC_LINK
3   959		  =MAIN:20000095	 VOC_LINK		 =	 ??0010	+ DESIRED_BASE_EQU
3   960
3   961								 IFNB	 <>
3   962								   LABEL    FAR
3   963								 ENDIF
3   964								 IFNB	 <$DOVAR>
3   965	000000A9  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
3   966								 ELSE
3   967								   DD	   ??0013 + DESIRED_BASE_EQU
3   968								 ENDIF
3   969	000000AD			 ??0013:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 18
FKernel.asm



2   970	000000AD						 LABEL	 $DOVAR	FAR
2   971	000000AD  83 C0	04					 ADD	 EAX,CELL_SIZE
2   972								 PUSHDS	 EAX
3   973	000000B0  50						 PUSH	 EAX
2   974								 $NEXT
3   975	000000B1  AD						 LODSD				 ; fetch address
3   976								 $JMP
4   977	000000B2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   978	000000B4  FF E3						 JMP	 EBX			 ; execute
2   979
2   980					 ;  (DO-:)
2   981								 $DEF	 '(DO-:)',,$DOVAR
3   982	000000B6			 ??0014:
3   983		  =MAIN:00B6		 LASTWORD		 =	 ??0014
3   984								 IFNB	 <>
3   985								   DB
3   986								 ELSE
3   987	000000B6  00						   DB	 VEF_USUAL
3   988								 ENDIF
3   989	000000B7  06						 DB	 ??0015	- $ - 1
3   990	000000B8  28 44	4F 2D 3A 29				 DB	 '(DO-:)'
3   991	000000BE			 ??0015:
3   992	000000BE  08						 DB	 ??0015	- ??0014
3   993	000000BF  20000095					 DD	 VOC_LINK
3   994		  =MAIN:200000B6	 VOC_LINK		 =	 ??0014	+ DESIRED_BASE_EQU
3   995
3   996								 IFNB	 <>
3   997								   LABEL    FAR
3   998								 ENDIF
3   999								 IFNB	 <$DOVAR>
3  1000	000000C3  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
3  1001								 ELSE
3  1002								   DD	   ??0017 + DESIRED_BASE_EQU
3  1003								 ENDIF
3  1004	000000C7			 ??0017:
2  1005	000000C7						 LABEL	 $ENTER	FAR
2  1006								 PUSHRS	 ESI			 ; push	current	IP on return stack
3  1007	000000C7  83 ED	04					 SUB	 EBP,CELL_SIZE
3  1008	000000CA  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  1009	000000CD  83 C0	04					 ADD	 EAX,CELL_SIZE
2  1010	000000D0  8B F0						 MOV	 ESI,EAX
2  1011								 $NEXT				 ; fetch next word address and	    +
   1012					 execute it
3  1013	000000D2  AD						 LODSD				 ; fetch address
3  1014								 $JMP
4  1015	000000D3  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1016	000000D5  FF E3						 JMP	 EBX			 ; execute
2  1017
2  1018					 ;  (DO-CREATE)
2  1019								 $DEF	 '(DO-CREATE)',,$DOVAR
3  1020	000000D7			 ??0018:
3  1021		  =MAIN:00D7		 LASTWORD		 =	 ??0018
3  1022								 IFNB	 <>
3  1023								   DB
3  1024								 ELSE
3  1025	000000D7  00						   DB	 VEF_USUAL
3  1026								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 19
FKernel.asm



3  1027	000000D8  0B						 DB	 ??0019	- $ - 1
3  1028	000000D9  28 44	4F 2D 43 52 45+				 DB	 '(DO-CREATE)'
   1029		  41 54	45 29
3  1030	000000E4			 ??0019:
3  1031	000000E4  0D						 DB	 ??0019	- ??0018
3  1032	000000E5  200000B6					 DD	 VOC_LINK
3  1033		  =MAIN:200000D7	 VOC_LINK		 =	 ??0018	+ DESIRED_BASE_EQU
3  1034
3  1035								 IFNB	 <>
3  1036								   LABEL    FAR
3  1037								 ENDIF
3  1038								 IFNB	 <$DOVAR>
3  1039	000000E9  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
3  1040								 ELSE
3  1041								   DD	   ??001B + DESIRED_BASE_EQU
3  1042								 ENDIF
3  1043	000000ED			 ??001B:
2  1044	000000ED  83 C0	04					 ADD	 EAX,CELL_SIZE
2  1045								 PUSHDS	 EAX
3  1046	000000F0  50						 PUSH	 EAX
2  1047								 $NEXT
3  1048	000000F1  AD						 LODSD				 ; fetch address
3  1049								 $JMP
4  1050	000000F2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1051	000000F4  FF E3						 JMP	 EBX			 ; execute
2  1052
2  1053					 ;  (DO-CONSTANT)
2  1054								 $DEF	 '(DO-CONSTANT)',,$DOVAR
3  1055	000000F6			 ??001C:
3  1056		  =MAIN:00F6		 LASTWORD		 =	 ??001C
3  1057								 IFNB	 <>
3  1058								   DB
3  1059								 ELSE
3  1060	000000F6  00						   DB	 VEF_USUAL
3  1061								 ENDIF
3  1062	000000F7  0D						 DB	 ??001D	- $ - 1
3  1063	000000F8  28 44	4F 2D 43 4F 4E+				 DB	 '(DO-CONSTANT)'
   1064		  53 54	41 4E 54 29
3  1065	00000105			 ??001D:
3  1066	00000105  0F						 DB	 ??001D	- ??001C
3  1067	00000106  200000D7					 DD	 VOC_LINK
3  1068		  =MAIN:200000F6	 VOC_LINK		 =	 ??001C	+ DESIRED_BASE_EQU
3  1069
3  1070								 IFNB	 <>
3  1071								   LABEL    FAR
3  1072								 ENDIF
3  1073								 IFNB	 <$DOVAR>
3  1074	0000010A  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
3  1075								 ELSE
3  1076								   DD	   ??001F + DESIRED_BASE_EQU
3  1077								 ENDIF
3  1078	0000010E			 ??001F:
2  1079	0000010E						 LABEL	 $DOCONST FAR
2  1080								 PUSHDS	 <[DWORD PTR EAX + CELL_SIZE]>
3  1081	0000010E  FF 70	04					 PUSH	 [DWORD	PTR EAX	+ CELL_SIZE]
2  1082								 $NEXT
3  1083	00000111  AD						 LODSD				 ; fetch address
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 20
FKernel.asm



3  1084								 $JMP
4  1085	00000112  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1086	00000114  FF E3						 JMP	 EBX			 ; execute
2  1087
2  1088					 ;  (DO-USER)
2  1089								 $DEF	 '(DO-USER)',,$DOVAR
3  1090	00000116			 ??0020:
3  1091		  =MAIN:0116		 LASTWORD		 =	 ??0020
3  1092								 IFNB	 <>
3  1093								   DB
3  1094								 ELSE
3  1095	00000116  00						   DB	 VEF_USUAL
3  1096								 ENDIF
3  1097	00000117  09						 DB	 ??0021	- $ - 1
3  1098	00000118  28 44	4F 2D 55 53 45+				 DB	 '(DO-USER)'
   1099		  52 29
3  1100	00000121			 ??0021:
3  1101	00000121  0B						 DB	 ??0021	- ??0020
3  1102	00000122  200000F6					 DD	 VOC_LINK
3  1103		  =MAIN:20000116	 VOC_LINK		 =	 ??0020	+ DESIRED_BASE_EQU
3  1104
3  1105								 IFNB	 <>
3  1106								   LABEL    FAR
3  1107								 ENDIF
3  1108								 IFNB	 <$DOVAR>
3  1109	00000126  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
3  1110								 ELSE
3  1111								   DD	   ??0023 + DESIRED_BASE_EQU
3  1112								 ENDIF
3  1113	0000012A			 ??0023:
2  1114	0000012A						 LABEL	 $DOUSER FAR
2  1115	0000012A  8B 58	04					 MOV	 EBX,[DWORD PTR	EAX + CELL_SIZE]
2  1116	0000012D  03 DF						 ADD	 EBX,EDI
2  1117								 PUSHDS	 EBX
3  1118	0000012F  53						 PUSH	 EBX
2  1119								 $NEXT
3  1120	00000130  AD						 LODSD				 ; fetch address
3  1121								 $JMP
4  1122	00000131  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1123	00000133  FF E3						 JMP	 EBX			 ; execute
2  1124
2  1125					 ;  (DO-DEFER)
2  1126								 $DEF	 '(DO-DEFER)',,$DOVAR
3  1127	00000135			 ??0024:
3  1128		  =MAIN:0135		 LASTWORD		 =	 ??0024
3  1129								 IFNB	 <>
3  1130								   DB
3  1131								 ELSE
3  1132	00000135  00						   DB	 VEF_USUAL
3  1133								 ENDIF
3  1134	00000136  0A						 DB	 ??0025	- $ - 1
3  1135	00000137  28 44	4F 2D 44 45 46+				 DB	 '(DO-DEFER)'
   1136		  45 52	29
3  1137	00000141			 ??0025:
3  1138	00000141  0C						 DB	 ??0025	- ??0024
3  1139	00000142  20000116					 DD	 VOC_LINK
3  1140		  =MAIN:20000135	 VOC_LINK		 =	 ??0024	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 21
FKernel.asm



3  1141
3  1142								 IFNB	 <>
3  1143								   LABEL    FAR
3  1144								 ENDIF
3  1145								 IFNB	 <$DOVAR>
3  1146	00000146  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
3  1147								 ELSE
3  1148								   DD	   ??0027 + DESIRED_BASE_EQU
3  1149								 ENDIF
3  1150	0000014A			 ??0027:
2  1151	0000014A						 LABEL	 $DODEFER FAR
2  1152	0000014A  8B 40	04					 MOV	 EAX,[DWORD PTR	EAX + CELL_SIZE]
2  1153								 $JMP
3  1154	0000014D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
3  1155	0000014F  FF E3						 JMP	 EBX			 ; execute
2  1156
2  1157					 ;  (DO-INT/COMP)
2  1158								 $DEF	 '(DO-INT/COMP)',,$DOVAR
3  1159	00000151			 ??0028:
3  1160		  =MAIN:0151		 LASTWORD		 =	 ??0028
3  1161								 IFNB	 <>
3  1162								   DB
3  1163								 ELSE
3  1164	00000151  00						   DB	 VEF_USUAL
3  1165								 ENDIF
3  1166	00000152  0D						 DB	 ??0029	- $ - 1
3  1167	00000153  28 44	4F 2D 49 4E 54+				 DB	 '(DO-INT/COMP)'
   1168		  2F 43	4F 4D 50 29
3  1169	00000160			 ??0029:
3  1170	00000160  0F						 DB	 ??0029	- ??0028
3  1171	00000161  20000135					 DD	 VOC_LINK
3  1172		  =MAIN:20000151	 VOC_LINK		 =	 ??0028	+ DESIRED_BASE_EQU
3  1173
3  1174								 IFNB	 <>
3  1175								   LABEL    FAR
3  1176								 ENDIF
3  1177								 IFNB	 <$DOVAR>
3  1178	00000165  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
3  1179								 ELSE
3  1180								   DD	   ??002B + DESIRED_BASE_EQU
3  1181								 ENDIF
3  1182	00000169			 ??002B:
2  1183	00000169						 LABEL	 $PDO_INT_COMP FAR
2  1184	00000169  83 C0	04					 ADD	 EAX,CELL_SIZE
2  1185	0000016C  83 7F	18 00					 CMP	 [DWORD	PTR EDI	+ STATE_VAR],F_FALSE
2  1186	00000170  74 07	90 90 90 90				 JZ	 PDIC_INT
2  1187	00000176  83 C0	04					 ADD	 EAX,CELL_SIZE
2  1188	00000179			 PDIC_INT:
2  1189	00000179  8B 00						 MOV	 EAX,[DWORD PTR	EAX]
2  1190								 $JMP
3  1191	0000017B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
3  1192	0000017D  FF E3						 JMP	 EBX			 ; execute
2  1193
2  1194					 ;  (DO-DOES>)
2  1195								 $DEF	 '(DO-DOES>)',,$DOVAR
3  1196	0000017F			 ??002C:
3  1197		  =MAIN:017F		 LASTWORD		 =	 ??002C
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 22
FKernel.asm



3  1198								 IFNB	 <>
3  1199								   DB
3  1200								 ELSE
3  1201	0000017F  00						   DB	 VEF_USUAL
3  1202								 ENDIF
3  1203	00000180  0A						 DB	 ??002D	- $ - 1
3  1204	00000181  28 44	4F 2D 44 4F 45+				 DB	 '(DO-DOES>)'
   1205		  53 3E	29
3  1206	0000018B			 ??002D:
3  1207	0000018B  0C						 DB	 ??002D	- ??002C
3  1208	0000018C  20000151					 DD	 VOC_LINK
3  1209		  =MAIN:2000017F	 VOC_LINK		 =	 ??002C	+ DESIRED_BASE_EQU
3  1210
3  1211								 IFNB	 <>
3  1212								   LABEL    FAR
3  1213								 ENDIF
3  1214								 IFNB	 <$DOVAR>
3  1215	00000190  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
3  1216								 ELSE
3  1217								   DD	   ??002F + DESIRED_BASE_EQU
3  1218								 ENDIF
3  1219	00000194			 ??002F:
2  1220	00000194						 LABEL	 $DODOES FAR
2  1221								 PUSHRS	 ESI
3  1222	00000194  83 ED	04					 SUB	 EBP,CELL_SIZE
3  1223	00000197  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  1224								 POPDS	 ESI
3  1225	0000019A  5E						 POP	 ESI
2  1226	0000019B  83 C0	04					 ADD	 EAX,CELL_SIZE
2  1227								 PUSHDS	 EAX
3  1228	0000019E  50						 PUSH	 EAX
2  1229								 $NEXT
3  1230	0000019F  AD						 LODSD				 ; fetch address
3  1231								 $JMP
4  1232	000001A0  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1233	000001A2  FF E3						 JMP	 EBX			 ; execute
2  1234
2  1235
1  1236								 INCLUDE "varconst.inc"
2  1237					 ;******************************************************************************
2  1238					 ;
2  1239					 ;  varconst.inc
2  1240					 ;  IKForth
2  1241					 ;
2  1242					 ;  Copyright (C) 1999-2003 Illya Kysil
2  1243					 ;
2  1244					 ;******************************************************************************
2  1245					 ;  Variables &	constants
2  1246					 ;******************************************************************************
2  1247
2  1248					 ;  D: -- 0
2  1249								 $CONST	 '0',$ZERO
3  1250								 $DEF	 '0',$ZERO,$DOCONST
4  1251	000001A4			 ??0030:
4  1252		  =MAIN:01A4		 LASTWORD		 =	 ??0030
4  1253								 IFNB	 <>
4  1254								   DB
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 23
FKernel.asm



4  1255								 ELSE
4  1256	000001A4  00						   DB	 VEF_USUAL
4  1257								 ENDIF
4  1258	000001A5  01						 DB	 ??0031	- $ - 1
4  1259	000001A6  30						 DB	 '0'
4  1260	000001A7			 ??0031:
4  1261	000001A7  03						 DB	 ??0031	- ??0030
4  1262	000001A8  2000017F					 DD	 VOC_LINK
4  1263		  =MAIN:200001A4	 VOC_LINK		 =	 ??0030	+ DESIRED_BASE_EQU
4  1264
4  1265								 IFNB	 <$ZERO>
4  1266	000001AC						   LABEL   $ZERO FAR
4  1267								 ENDIF
4  1268								 IFNB	 <$DOCONST>
4  1269	000001AC  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1270								 ELSE
4  1271								   DD	   ??0033 + DESIRED_BASE_EQU
4  1272								 ENDIF
4  1273	000001B0			 ??0033:
2  1274								 CC	 0
3  1275	000001B0  00000000					 DD	 0
2  1276
2  1277					 ;  CASE-SENSITIVE
2  1278					 ;  If CASE-SENSITIVE is true, then FIND is case sensitive
2  1279								 $USER	 'CASE-SENSITIVE',$CASE_SENSITIVE
3  1280								 $DEF	 'CASE-SENSITIVE',$CASE_SENSITIVE,$DOUSER
4  1281	000001B4			 ??0034:
4  1282		  =MAIN:01B4		 LASTWORD		 =	 ??0034
4  1283								 IFNB	 <>
4  1284								   DB
4  1285								 ELSE
4  1286	000001B4  00						   DB	 VEF_USUAL
4  1287								 ENDIF
4  1288	000001B5  0E						 DB	 ??0035	- $ - 1
4  1289	000001B6  43 41	53 45 2D 53 45+				 DB	 'CASE-SENSITIVE'
   1290		  4E 53	49 54 49 56 45
4  1291	000001C4			 ??0035:
4  1292	000001C4  10						 DB	 ??0035	- ??0034
4  1293	000001C5  200001A4					 DD	 VOC_LINK
4  1294		  =MAIN:200001B4	 VOC_LINK		 =	 ??0034	+ DESIRED_BASE_EQU
4  1295
4  1296								 IFNB	 <$CASE_SENSITIVE>
4  1297	000001C9						   LABEL   $CASE_SENSITIVE FAR
4  1298								 ENDIF
4  1299								 IFNB	 <$DOUSER>
4  1300	000001C9  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1301								 ELSE
4  1302								   DD	   ??0037 + DESIRED_BASE_EQU
4  1303								 ENDIF
4  1304	000001CD			 ??0037:
2  1305								 CC	 CASE_SENSITIVE_VAR
3  1306	000001CD  00000028					 DD	 CASE_SENSITIVE_VAR
2  1307
2  1308					 ;  TIB
2  1309					 ;  String address of Terminal Input Buffer
2  1310								 $USER	 'TIB',$TIB
3  1311								 $DEF	 'TIB',$TIB,$DOUSER
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 24
FKernel.asm



4  1312	000001D1			 ??0038:
4  1313		  =MAIN:01D1		 LASTWORD		 =	 ??0038
4  1314								 IFNB	 <>
4  1315								   DB
4  1316								 ELSE
4  1317	000001D1  00						   DB	 VEF_USUAL
4  1318								 ENDIF
4  1319	000001D2  03						 DB	 ??0039	- $ - 1
4  1320	000001D3  54 49	42					 DB	 'TIB'
4  1321	000001D6			 ??0039:
4  1322	000001D6  05						 DB	 ??0039	- ??0038
4  1323	000001D7  200001B4					 DD	 VOC_LINK
4  1324		  =MAIN:200001D1	 VOC_LINK		 =	 ??0038	+ DESIRED_BASE_EQU
4  1325
4  1326								 IFNB	 <$TIB>
4  1327	000001DB						   LABEL   $TIB	FAR
4  1328								 ENDIF
4  1329								 IFNB	 <$DOUSER>
4  1330	000001DB  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1331								 ELSE
4  1332								   DD	   ??003B + DESIRED_BASE_EQU
4  1333								 ENDIF
4  1334	000001DF			 ??003B:
2  1335								 CC	 TIB_VAR
3  1336	000001DF  00000448					 DD	 TIB_VAR
2  1337
2  1338					 ;  #TIB
2  1339					 ;  String length of Terminal Input Buffer
2  1340								 $USER	 '#TIB',$#TIB
3  1341								 $DEF	 '#TIB',$#TIB,$DOUSER
4  1342	000001E3			 ??003C:
4  1343		  =MAIN:01E3		 LASTWORD		 =	 ??003C
4  1344								 IFNB	 <>
4  1345								   DB
4  1346								 ELSE
4  1347	000001E3  00						   DB	 VEF_USUAL
4  1348								 ENDIF
4  1349	000001E4  04						 DB	 ??003D	- $ - 1
4  1350	000001E5  23 54	49 42					 DB	 '#TIB'
4  1351	000001E9			 ??003D:
4  1352	000001E9  06						 DB	 ??003D	- ??003C
4  1353	000001EA  200001D1					 DD	 VOC_LINK
4  1354		  =MAIN:200001E3	 VOC_LINK		 =	 ??003C	+ DESIRED_BASE_EQU
4  1355
4  1356								 IFNB	 <$#TIB>
4  1357	000001EE						   LABEL   $#TIB FAR
4  1358								 ENDIF
4  1359								 IFNB	 <$DOUSER>
4  1360	000001EE  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1361								 ELSE
4  1362								   DD	   ??003F + DESIRED_BASE_EQU
4  1363								 ENDIF
4  1364	000001F2			 ??003F:
2  1365								 CC	 #TIB_VAR
3  1366	000001F2  00000444					 DD	 #TIB_VAR
2  1367
2  1368					 ;  EVAL
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 25
FKernel.asm



2  1369					 ;  String address for EVALUATE
2  1370								 $USER	 'EVAL',$EVAL
3  1371								 $DEF	 'EVAL',$EVAL,$DOUSER
4  1372	000001F6			 ??0040:
4  1373		  =MAIN:01F6		 LASTWORD		 =	 ??0040
4  1374								 IFNB	 <>
4  1375								   DB
4  1376								 ELSE
4  1377	000001F6  00						   DB	 VEF_USUAL
4  1378								 ENDIF
4  1379	000001F7  04						 DB	 ??0041	- $ - 1
4  1380	000001F8  45 56	41 4C					 DB	 'EVAL'
4  1381	000001FC			 ??0041:
4  1382	000001FC  06						 DB	 ??0041	- ??0040
4  1383	000001FD  200001E3					 DD	 VOC_LINK
4  1384		  =MAIN:200001F6	 VOC_LINK		 =	 ??0040	+ DESIRED_BASE_EQU
4  1385
4  1386								 IFNB	 <$EVAL>
4  1387	00000201						   LABEL   $EVAL FAR
4  1388								 ENDIF
4  1389								 IFNB	 <$DOUSER>
4  1390	00000201  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1391								 ELSE
4  1392								   DD	   ??0043 + DESIRED_BASE_EQU
4  1393								 ENDIF
4  1394	00000205			 ??0043:
2  1395								 CC	 EVAL_VAR
3  1396	00000205  00000034					 DD	 EVAL_VAR
2  1397
2  1398					 ;  #EVAL
2  1399					 ;  String length for EVALUATE
2  1400								 $USER	 '#EVAL',$#EVAL
3  1401								 $DEF	 '#EVAL',$#EVAL,$DOUSER
4  1402	00000209			 ??0044:
4  1403		  =MAIN:0209		 LASTWORD		 =	 ??0044
4  1404								 IFNB	 <>
4  1405								   DB
4  1406								 ELSE
4  1407	00000209  00						   DB	 VEF_USUAL
4  1408								 ENDIF
4  1409	0000020A  05						 DB	 ??0045	- $ - 1
4  1410	0000020B  23 45	56 41 4C				 DB	 '#EVAL'
4  1411	00000210			 ??0045:
4  1412	00000210  07						 DB	 ??0045	- ??0044
4  1413	00000211  200001F6					 DD	 VOC_LINK
4  1414		  =MAIN:20000209	 VOC_LINK		 =	 ??0044	+ DESIRED_BASE_EQU
4  1415
4  1416								 IFNB	 <$#EVAL>
4  1417	00000215						   LABEL   $#EVAL FAR
4  1418								 ENDIF
4  1419								 IFNB	 <$DOUSER>
4  1420	00000215  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1421								 ELSE
4  1422								   DD	   ??0047 + DESIRED_BASE_EQU
4  1423								 ENDIF
4  1424	00000219			 ??0047:
2  1425								 CC	 #EVAL_VAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 26
FKernel.asm



3  1426	00000219  00000030					 DD	 #EVAL_VAR
2  1427
2  1428					 ;  CURRENT-FILE-POSITION
2  1429								 $USER	 'CURRENT-FILE-POSITION',$CURRENT_FILE_POSITION
3  1430								 $DEF	 'CURRENT-FILE-POSITION',$CURRENT_FILE_POSITION,$DOUSER
4  1431	0000021D			 ??0048:
4  1432		  =MAIN:021D		 LASTWORD		 =	 ??0048
4  1433								 IFNB	 <>
4  1434								   DB
4  1435								 ELSE
4  1436	0000021D  00						   DB	 VEF_USUAL
4  1437								 ENDIF
4  1438	0000021E  15						 DB	 ??0049	- $ - 1
4  1439	0000021F  43 55	52 52 45 4E 54+				 DB	 'CURRENT-FILE-POSITION'
   1440		  2D 46	49 4C 45 2D 50+
   1441		  4F 53	49 54 49 4F 4E
4  1442	00000234			 ??0049:
4  1443	00000234  17						 DB	 ??0049	- ??0048
4  1444	00000235  20000209					 DD	 VOC_LINK
4  1445		  =MAIN:2000021D	 VOC_LINK		 =	 ??0048	+ DESIRED_BASE_EQU
4  1446
4  1447								 IFNB	 <$CURRENT_FILE_POSITION>
4  1448	00000239						   LABEL   $CURRENT_FILE_POSITION FAR
4  1449								 ENDIF
4  1450								 IFNB	 <$DOUSER>
4  1451	00000239  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1452								 ELSE
4  1453								   DD	   ??004B + DESIRED_BASE_EQU
4  1454								 ENDIF
4  1455	0000023D			 ??004B:
2  1456								 CC	 CURR_FILE_POS_VAR
3  1457	0000023D  00000038					 DD	 CURR_FILE_POS_VAR
2  1458
2  1459					 ;  LINE
2  1460					 ;  Line address for INCLUDED
2  1461								 $USER	 'LINE',$LINE
3  1462								 $DEF	 'LINE',$LINE,$DOUSER
4  1463	00000241			 ??004C:
4  1464		  =MAIN:0241		 LASTWORD		 =	 ??004C
4  1465								 IFNB	 <>
4  1466								   DB
4  1467								 ELSE
4  1468	00000241  00						   DB	 VEF_USUAL
4  1469								 ENDIF
4  1470	00000242  04						 DB	 ??004D	- $ - 1
4  1471	00000243  4C 49	4E 45					 DB	 'LINE'
4  1472	00000247			 ??004D:
4  1473	00000247  06						 DB	 ??004D	- ??004C
4  1474	00000248  2000021D					 DD	 VOC_LINK
4  1475		  =MAIN:20000241	 VOC_LINK		 =	 ??004C	+ DESIRED_BASE_EQU
4  1476
4  1477								 IFNB	 <$LINE>
4  1478	0000024C						   LABEL   $LINE FAR
4  1479								 ENDIF
4  1480								 IFNB	 <$DOUSER>
4  1481	0000024C  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1482								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 27
FKernel.asm



4  1483								   DD	   ??004F + DESIRED_BASE_EQU
4  1484								 ENDIF
4  1485	00000250			 ??004F:
2  1486								 CC	 LINE_VAR
3  1487	00000250  00000044					 DD	 LINE_VAR
2  1488
2  1489					 ;  #LINE
2  1490					 ;  Line length	for INCLUDED
2  1491								 $USER	 '#LINE',$#LINE
3  1492								 $DEF	 '#LINE',$#LINE,$DOUSER
4  1493	00000254			 ??0050:
4  1494		  =MAIN:0254		 LASTWORD		 =	 ??0050
4  1495								 IFNB	 <>
4  1496								   DB
4  1497								 ELSE
4  1498	00000254  00						   DB	 VEF_USUAL
4  1499								 ENDIF
4  1500	00000255  05						 DB	 ??0051	- $ - 1
4  1501	00000256  23 4C	49 4E 45				 DB	 '#LINE'
4  1502	0000025B			 ??0051:
4  1503	0000025B  07						 DB	 ??0051	- ??0050
4  1504	0000025C  20000241					 DD	 VOC_LINK
4  1505		  =MAIN:20000254	 VOC_LINK		 =	 ??0050	+ DESIRED_BASE_EQU
4  1506
4  1507								 IFNB	 <$#LINE>
4  1508	00000260						   LABEL   $#LINE FAR
4  1509								 ENDIF
4  1510								 IFNB	 <$DOUSER>
4  1511	00000260  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1512								 ELSE
4  1513								   DD	   ??0053 + DESIRED_BASE_EQU
4  1514								 ENDIF
4  1515	00000264			 ??0053:
2  1516								 CC	 #LINE_VAR
3  1517	00000264  00000040					 DD	 #LINE_VAR
2  1518
2  1519					 ;  USER-SIZE-VAR
2  1520								 $VAR	 'USER-SIZE-VAR'
3  1521								 $DEF	 'USER-SIZE-VAR',,$DOVAR
4  1522	00000268			 ??0054:
4  1523		  =MAIN:0268		 LASTWORD		 =	 ??0054
4  1524								 IFNB	 <>
4  1525								   DB
4  1526								 ELSE
4  1527	00000268  00						   DB	 VEF_USUAL
4  1528								 ENDIF
4  1529	00000269  0D						 DB	 ??0055	- $ - 1
4  1530	0000026A  55 53	45 52 2D 53 49+				 DB	 'USER-SIZE-VAR'
   1531		  5A 45	2D 56 41 52
4  1532	00000277			 ??0055:
4  1533	00000277  0F						 DB	 ??0055	- ??0054
4  1534	00000278  20000254					 DD	 VOC_LINK
4  1535		  =MAIN:20000268	 VOC_LINK		 =	 ??0054	+ DESIRED_BASE_EQU
4  1536
4  1537								 IFNB	 <>
4  1538								   LABEL    FAR
4  1539								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 28
FKernel.asm



4  1540								 IFNB	 <$DOVAR>
4  1541	0000027C  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1542								 ELSE
4  1543								   DD	   ??0057 + DESIRED_BASE_EQU
4  1544								 ENDIF
4  1545	00000280			 ??0057:
2  1546								 CC	 USER_AREA_SIZE
3  1547	00000280  0000226C					 DD	 USER_AREA_SIZE
2  1548
2  1549					 ;  EXCEPTION-HANDLER
2  1550								 $USER	 'EXCEPTION-HANDLER',$EXCEPTION_HANDLER
3  1551								 $DEF	 'EXCEPTION-HANDLER',$EXCEPTION_HANDLER,$DOUSER
4  1552	00000284			 ??0058:
4  1553		  =MAIN:0284		 LASTWORD		 =	 ??0058
4  1554								 IFNB	 <>
4  1555								   DB
4  1556								 ELSE
4  1557	00000284  00						   DB	 VEF_USUAL
4  1558								 ENDIF
4  1559	00000285  11						 DB	 ??0059	- $ - 1
4  1560	00000286  45 58	43 45 50 54 49+				 DB	 'EXCEPTION-HANDLER'
   1561		  4F 4E	2D 48 41 4E 44+
   1562		  4C 45	52
4  1563	00000297			 ??0059:
4  1564	00000297  13						 DB	 ??0059	- ??0058
4  1565	00000298  20000268					 DD	 VOC_LINK
4  1566		  =MAIN:20000284	 VOC_LINK		 =	 ??0058	+ DESIRED_BASE_EQU
4  1567
4  1568								 IFNB	 <$EXCEPTION_HANDLER>
4  1569	0000029C						   LABEL   $EXCEPTION_HANDLER FAR
4  1570								 ENDIF
4  1571								 IFNB	 <$DOUSER>
4  1572	0000029C  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1573								 ELSE
4  1574								   DD	   ??005B + DESIRED_BASE_EQU
4  1575								 ENDIF
4  1576	000002A0			 ??005B:
2  1577								 CC	 EXCEPTION_HANDLER_VAR
3  1578	000002A0  00000C58					 DD	 EXCEPTION_HANDLER_VAR
2  1579
2  1580					 ;  THROW-ADDRESS
2  1581								 $USER	 'THROW-ADDRESS',$THROW_ADDRESS
3  1582								 $DEF	 'THROW-ADDRESS',$THROW_ADDRESS,$DOUSER
4  1583	000002A4			 ??005C:
4  1584		  =MAIN:02A4		 LASTWORD		 =	 ??005C
4  1585								 IFNB	 <>
4  1586								   DB
4  1587								 ELSE
4  1588	000002A4  00						   DB	 VEF_USUAL
4  1589								 ENDIF
4  1590	000002A5  0D						 DB	 ??005D	- $ - 1
4  1591	000002A6  54 48	52 4F 57 2D 41+				 DB	 'THROW-ADDRESS'
   1592		  44 44	52 45 53 53
4  1593	000002B3			 ??005D:
4  1594	000002B3  0F						 DB	 ??005D	- ??005C
4  1595	000002B4  20000284					 DD	 VOC_LINK
4  1596		  =MAIN:200002A4	 VOC_LINK		 =	 ??005C	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 29
FKernel.asm



4  1597
4  1598								 IFNB	 <$THROW_ADDRESS>
4  1599	000002B8						   LABEL   $THROW_ADDRESS FAR
4  1600								 ENDIF
4  1601								 IFNB	 <$DOUSER>
4  1602	000002B8  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1603								 ELSE
4  1604								   DD	   ??005F + DESIRED_BASE_EQU
4  1605								 ENDIF
4  1606	000002BC			 ??005F:
2  1607								 CC	 THROW_ADDRESS_VAR
3  1608	000002BC  00000C5C					 DD	 THROW_ADDRESS_VAR
2  1609
2  1610					 ;  THROW-WORD
2  1611								 $USER	 'THROW-WORD',$THROW_WORD
3  1612								 $DEF	 'THROW-WORD',$THROW_WORD,$DOUSER
4  1613	000002C0			 ??0060:
4  1614		  =MAIN:02C0		 LASTWORD		 =	 ??0060
4  1615								 IFNB	 <>
4  1616								   DB
4  1617								 ELSE
4  1618	000002C0  00						   DB	 VEF_USUAL
4  1619								 ENDIF
4  1620	000002C1  0A						 DB	 ??0061	- $ - 1
4  1621	000002C2  54 48	52 4F 57 2D 57+				 DB	 'THROW-WORD'
   1622		  4F 52	44
4  1623	000002CC			 ??0061:
4  1624	000002CC  0C						 DB	 ??0061	- ??0060
4  1625	000002CD  200002A4					 DD	 VOC_LINK
4  1626		  =MAIN:200002C0	 VOC_LINK		 =	 ??0060	+ DESIRED_BASE_EQU
4  1627
4  1628								 IFNB	 <$THROW_WORD>
4  1629	000002D1						   LABEL   $THROW_WORD FAR
4  1630								 ENDIF
4  1631								 IFNB	 <$DOUSER>
4  1632	000002D1  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1633								 ELSE
4  1634								   DD	   ??0063 + DESIRED_BASE_EQU
4  1635								 ENDIF
4  1636	000002D5			 ??0063:
2  1637								 CC	 THROW_WORD_VAR
3  1638	000002D5  00000C60					 DD	 THROW_WORD_VAR
2  1639
2  1640					 ;  S"-BUFFER
2  1641								 $USER	 'S"-BUFFER',$SQUOTE_BUFFER
3  1642								 $DEF	 'S"-BUFFER',$SQUOTE_BUFFER,$DOUSER
4  1643	000002D9			 ??0064:
4  1644		  =MAIN:02D9		 LASTWORD		 =	 ??0064
4  1645								 IFNB	 <>
4  1646								   DB
4  1647								 ELSE
4  1648	000002D9  00						   DB	 VEF_USUAL
4  1649								 ENDIF
4  1650	000002DA  09						 DB	 ??0065	- $ - 1
4  1651	000002DB  53 22	2D 42 55 46 46+				 DB	 'S"-BUFFER'
   1652		  45 52
4  1653	000002E4			 ??0065:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 30
FKernel.asm



4  1654	000002E4  0B						 DB	 ??0065	- ??0064
4  1655	000002E5  200002C0					 DD	 VOC_LINK
4  1656		  =MAIN:200002D9	 VOC_LINK		 =	 ??0064	+ DESIRED_BASE_EQU
4  1657
4  1658								 IFNB	 <$SQUOTE_BUFFER>
4  1659	000002E9						   LABEL   $SQUOTE_BUFFER FAR
4  1660								 ENDIF
4  1661								 IFNB	 <$DOUSER>
4  1662	000002E9  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1663								 ELSE
4  1664								   DD	   ??0067 + DESIRED_BASE_EQU
4  1665								 ENDIF
4  1666	000002ED			 ??0067:
2  1667								 CC	 SQUOTE_BUFFER_VAR
3  1668	000002ED  00000D64					 DD	 SQUOTE_BUFFER_VAR
2  1669
2  1670					 ;  POCKET
2  1671								 $USER	 'POCKET',$POCKET
3  1672								 $DEF	 'POCKET',$POCKET,$DOUSER
4  1673	000002F1			 ??0068:
4  1674		  =MAIN:02F1		 LASTWORD		 =	 ??0068
4  1675								 IFNB	 <>
4  1676								   DB
4  1677								 ELSE
4  1678	000002F1  00						   DB	 VEF_USUAL
4  1679								 ENDIF
4  1680	000002F2  06						 DB	 ??0069	- $ - 1
4  1681	000002F3  50 4F	43 4B 45 54				 DB	 'POCKET'
4  1682	000002F9			 ??0069:
4  1683	000002F9  08						 DB	 ??0069	- ??0068
4  1684	000002FA  200002D9					 DD	 VOC_LINK
4  1685		  =MAIN:200002F1	 VOC_LINK		 =	 ??0068	+ DESIRED_BASE_EQU
4  1686
4  1687								 IFNB	 <$POCKET>
4  1688	000002FE						   LABEL   $POCKET FAR
4  1689								 ENDIF
4  1690								 IFNB	 <$DOUSER>
4  1691	000002FE  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1692								 ELSE
4  1693								   DD	   ??006B + DESIRED_BASE_EQU
4  1694								 ENDIF
4  1695	00000302			 ??006B:
2  1696								 CC	 POCKET_VAR
3  1697	00000302  00001164					 DD	 POCKET_VAR
2  1698
2  1699					 ;  CURRENT
2  1700								 $USER	 'CURRENT',$CURRENT
3  1701								 $DEF	 'CURRENT',$CURRENT,$DOUSER
4  1702	00000306			 ??006C:
4  1703		  =MAIN:0306		 LASTWORD		 =	 ??006C
4  1704								 IFNB	 <>
4  1705								   DB
4  1706								 ELSE
4  1707	00000306  00						   DB	 VEF_USUAL
4  1708								 ENDIF
4  1709	00000307  07						 DB	 ??006D	- $ - 1
4  1710	00000308  43 55	52 52 45 4E 54				 DB	 'CURRENT'
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 31
FKernel.asm



4  1711	0000030F			 ??006D:
4  1712	0000030F  09						 DB	 ??006D	- ??006C
4  1713	00000310  200002F1					 DD	 VOC_LINK
4  1714		  =MAIN:20000306	 VOC_LINK		 =	 ??006C	+ DESIRED_BASE_EQU
4  1715
4  1716								 IFNB	 <$CURRENT>
4  1717	00000314						   LABEL   $CURRENT FAR
4  1718								 ENDIF
4  1719								 IFNB	 <$DOUSER>
4  1720	00000314  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1721								 ELSE
4  1722								   DD	   ??006F + DESIRED_BASE_EQU
4  1723								 ENDIF
4  1724	00000318			 ??006F:
2  1725								 CC	 CURRENT_VAR
3  1726	00000318  00000848					 DD	 CURRENT_VAR
2  1727
2  1728					 ;  Start file name
2  1729					 ;  #SF
2  1730								 $VAR	 '#SF',$#SF
3  1731								 $DEF	 '#SF',$#SF,$DOVAR
4  1732	0000031C			 ??0070:
4  1733		  =MAIN:031C		 LASTWORD		 =	 ??0070
4  1734								 IFNB	 <>
4  1735								   DB
4  1736								 ELSE
4  1737	0000031C  00						   DB	 VEF_USUAL
4  1738								 ENDIF
4  1739	0000031D  03						 DB	 ??0071	- $ - 1
4  1740	0000031E  23 53	46					 DB	 '#SF'
4  1741	00000321			 ??0071:
4  1742	00000321  05						 DB	 ??0071	- ??0070
4  1743	00000322  20000306					 DD	 VOC_LINK
4  1744		  =MAIN:2000031C	 VOC_LINK		 =	 ??0070	+ DESIRED_BASE_EQU
4  1745
4  1746								 IFNB	 <$#SF>
4  1747	00000326						   LABEL   $#SF	FAR
4  1748								 ENDIF
4  1749								 IFNB	 <$DOVAR>
4  1750	00000326  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1751								 ELSE
4  1752								   DD	   ??0073 + DESIRED_BASE_EQU
4  1753								 ENDIF
4  1754	0000032A			 ??0073:
2  1755	0000032A			 #SF_VAR:
2  1756								 CC	 0
3  1757	0000032A  00000000					 DD	 0
2  1758
2  1759					 ;  SF
2  1760								 $VAR	 'SF',$SF
3  1761								 $DEF	 'SF',$SF,$DOVAR
4  1762	0000032E			 ??0074:
4  1763		  =MAIN:032E		 LASTWORD		 =	 ??0074
4  1764								 IFNB	 <>
4  1765								   DB
4  1766								 ELSE
4  1767	0000032E  00						   DB	 VEF_USUAL
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 32
FKernel.asm



4  1768								 ENDIF
4  1769	0000032F  02						 DB	 ??0075	- $ - 1
4  1770	00000330  53 46						 DB	 'SF'
4  1771	00000332			 ??0075:
4  1772	00000332  04						 DB	 ??0075	- ??0074
4  1773	00000333  2000031C					 DD	 VOC_LINK
4  1774		  =MAIN:2000032E	 VOC_LINK		 =	 ??0074	+ DESIRED_BASE_EQU
4  1775
4  1776								 IFNB	 <$SF>
4  1777	00000337						   LABEL   $SF FAR
4  1778								 ENDIF
4  1779								 IFNB	 <$DOVAR>
4  1780	00000337  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1781								 ELSE
4  1782								   DD	   ??0077 + DESIRED_BASE_EQU
4  1783								 ENDIF
4  1784	0000033B			 ??0077:
2  1785	0000033B			 SF_VAR:
2  1786								 CC	 0
3  1787	0000033B  00000000					 DD	 0
2  1788
2  1789					 ;  DATA-AREA-BASE
2  1790								 $CONST	 'DATA-AREA-BASE'
3  1791								 $DEF	 'DATA-AREA-BASE',,$DOCONST
4  1792	0000033F			 ??0078:
4  1793		  =MAIN:033F		 LASTWORD		 =	 ??0078
4  1794								 IFNB	 <>
4  1795								   DB
4  1796								 ELSE
4  1797	0000033F  00						   DB	 VEF_USUAL
4  1798								 ENDIF
4  1799	00000340  0E						 DB	 ??0079	- $ - 1
4  1800	00000341  44 41	54 41 2D 41 52+				 DB	 'DATA-AREA-BASE'
   1801		  45 41	2D 42 41 53 45
4  1802	0000034F			 ??0079:
4  1803	0000034F  10						 DB	 ??0079	- ??0078
4  1804	00000350  2000032E					 DD	 VOC_LINK
4  1805		  =MAIN:2000033F	 VOC_LINK		 =	 ??0078	+ DESIRED_BASE_EQU
4  1806
4  1807								 IFNB	 <>
4  1808								   LABEL    FAR
4  1809								 ENDIF
4  1810								 IFNB	 <$DOCONST>
4  1811	00000354  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1812								 ELSE
4  1813								   DD	   ??007B + DESIRED_BASE_EQU
4  1814								 ENDIF
4  1815	00000358			 ??007B:
2  1816								 CC	 DESIRED_BASE_EQU
3  1817	00000358  20000000					 DD	 DESIRED_BASE_EQU
2  1818
2  1819					 ;  DATA-AREA-SIZE
2  1820								 $CONST	 'DATA-AREA-SIZE'
3  1821								 $DEF	 'DATA-AREA-SIZE',,$DOCONST
4  1822	0000035C			 ??007C:
4  1823		  =MAIN:035C		 LASTWORD		 =	 ??007C
4  1824								 IFNB	 <>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 33
FKernel.asm



4  1825								   DB
4  1826								 ELSE
4  1827	0000035C  00						   DB	 VEF_USUAL
4  1828								 ENDIF
4  1829	0000035D  0E						 DB	 ??007D	- $ - 1
4  1830	0000035E  44 41	54 41 2D 41 52+				 DB	 'DATA-AREA-SIZE'
   1831		  45 41	2D 53 49 5A 45
4  1832	0000036C			 ??007D:
4  1833	0000036C  10						 DB	 ??007D	- ??007C
4  1834	0000036D  2000033F					 DD	 VOC_LINK
4  1835		  =MAIN:2000035C	 VOC_LINK		 =	 ??007C	+ DESIRED_BASE_EQU
4  1836
4  1837								 IFNB	 <>
4  1838								   LABEL    FAR
4  1839								 ENDIF
4  1840								 IFNB	 <$DOCONST>
4  1841	00000371  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1842								 ELSE
4  1843								   DD	   ??007F + DESIRED_BASE_EQU
4  1844								 ENDIF
4  1845	00000375			 ??007F:
2  1846								 CW	 DESIRED_SIZE_VAR
3  1847	00000375  20000014					 DD	 DESIRED_SIZE_VAR + DESIRED_BASE_EQU
2  1848
2  1849					 ;  DP
2  1850					 ;  HERE = DP @
2  1851								 $VAR	 'DP',$DP
3  1852								 $DEF	 'DP',$DP,$DOVAR
4  1853	00000379			 ??0080:
4  1854		  =MAIN:0379		 LASTWORD		 =	 ??0080
4  1855								 IFNB	 <>
4  1856								   DB
4  1857								 ELSE
4  1858	00000379  00						   DB	 VEF_USUAL
4  1859								 ENDIF
4  1860	0000037A  02						 DB	 ??0081	- $ - 1
4  1861	0000037B  44 50						 DB	 'DP'
4  1862	0000037D			 ??0081:
4  1863	0000037D  04						 DB	 ??0081	- ??0080
4  1864	0000037E  2000035C					 DD	 VOC_LINK
4  1865		  =MAIN:20000379	 VOC_LINK		 =	 ??0080	+ DESIRED_BASE_EQU
4  1866
4  1867								 IFNB	 <$DP>
4  1868	00000382						   LABEL   $DP FAR
4  1869								 ENDIF
4  1870								 IFNB	 <$DOVAR>
4  1871	00000382  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1872								 ELSE
4  1873								   DD	   ??0083 + DESIRED_BASE_EQU
4  1874								 ENDIF
4  1875	00000386			 ??0083:
2  1876	00000386			 DP_VAR:
2  1877								 CW	 HERE
3  1878	00000386  20002DBF					 DD	 HERE +	DESIRED_BASE_EQU
2  1879
2  1880					 ;  6.1.2250 STATE
2  1881					 ;  D: -- a-addr
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 34
FKernel.asm



2  1882					 ;  a-addr is the address of a cell containing the compilation-state flag.
2  1883					 ;  STATE is true when in compilation state, false otherwise.
2  1884					 ;  The	true value in STATE is non-zero, but is	otherwise implementation-defined.
2  1885								 $USER	 'STATE',$STATE
3  1886								 $DEF	 'STATE',$STATE,$DOUSER
4  1887	0000038A			 ??0084:
4  1888		  =MAIN:038A		 LASTWORD		 =	 ??0084
4  1889								 IFNB	 <>
4  1890								   DB
4  1891								 ELSE
4  1892	0000038A  00						   DB	 VEF_USUAL
4  1893								 ENDIF
4  1894	0000038B  05						 DB	 ??0085	- $ - 1
4  1895	0000038C  53 54	41 54 45				 DB	 'STATE'
4  1896	00000391			 ??0085:
4  1897	00000391  07						 DB	 ??0085	- ??0084
4  1898	00000392  20000379					 DD	 VOC_LINK
4  1899		  =MAIN:2000038A	 VOC_LINK		 =	 ??0084	+ DESIRED_BASE_EQU
4  1900
4  1901								 IFNB	 <$STATE>
4  1902	00000396						   LABEL   $STATE FAR
4  1903								 ENDIF
4  1904								 IFNB	 <$DOUSER>
4  1905	00000396  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1906								 ELSE
4  1907								   DD	   ??0087 + DESIRED_BASE_EQU
4  1908								 ENDIF
4  1909	0000039A			 ??0087:
2  1910								 CC	 STATE_VAR
3  1911	0000039A  00000018					 DD	 STATE_VAR
2  1912
2  1913					 ;  6.1.0750 BASE
2  1914					 ;  a-addr is the address of a cell containing the current number-conversion
2  1915					 ;  radix {{2...36}}.
2  1916					 ;  D: -- a-addr
2  1917								 $USER	 'BASE',$BASE
3  1918								 $DEF	 'BASE',$BASE,$DOUSER
4  1919	0000039E			 ??0088:
4  1920		  =MAIN:039E		 LASTWORD		 =	 ??0088
4  1921								 IFNB	 <>
4  1922								   DB
4  1923								 ELSE
4  1924	0000039E  00						   DB	 VEF_USUAL
4  1925								 ENDIF
4  1926	0000039F  04						 DB	 ??0089	- $ - 1
4  1927	000003A0  42 41	53 45					 DB	 'BASE'
4  1928	000003A4			 ??0089:
4  1929	000003A4  06						 DB	 ??0089	- ??0088
4  1930	000003A5  2000038A					 DD	 VOC_LINK
4  1931		  =MAIN:2000039E	 VOC_LINK		 =	 ??0088	+ DESIRED_BASE_EQU
4  1932
4  1933								 IFNB	 <$BASE>
4  1934	000003A9						   LABEL   $BASE FAR
4  1935								 ENDIF
4  1936								 IFNB	 <$DOUSER>
4  1937	000003A9  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1938								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 35
FKernel.asm



4  1939								   DD	   ??008B + DESIRED_BASE_EQU
4  1940								 ENDIF
4  1941	000003AD			 ??008B:
2  1942								 CC	 BASE_VAR
3  1943	000003AD  0000001C					 DD	 BASE_VAR
2  1944
2  1945					 ;  6.1.0770 BL
2  1946					 ;  Push space character on stack
2  1947					 ;  D: -- char
2  1948								 $CONST	 'BL',$BL
3  1949								 $DEF	 'BL',$BL,$DOCONST
4  1950	000003B1			 ??008C:
4  1951		  =MAIN:03B1		 LASTWORD		 =	 ??008C
4  1952								 IFNB	 <>
4  1953								   DB
4  1954								 ELSE
4  1955	000003B1  00						   DB	 VEF_USUAL
4  1956								 ENDIF
4  1957	000003B2  02						 DB	 ??008D	- $ - 1
4  1958	000003B3  42 4C						 DB	 'BL'
4  1959	000003B5			 ??008D:
4  1960	000003B5  04						 DB	 ??008D	- ??008C
4  1961	000003B6  2000039E					 DD	 VOC_LINK
4  1962		  =MAIN:200003B1	 VOC_LINK		 =	 ??008C	+ DESIRED_BASE_EQU
4  1963
4  1964								 IFNB	 <$BL>
4  1965	000003BA						   LABEL   $BL FAR
4  1966								 ENDIF
4  1967								 IFNB	 <$DOCONST>
4  1968	000003BA  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1969								 ELSE
4  1970								   DD	   ??008F + DESIRED_BASE_EQU
4  1971								 ENDIF
4  1972	000003BE			 ??008F:
2  1973								 CC	 ' '
3  1974	000003BE  00000020					 DD	 ' '
2  1975
2  1976					 ;  MAIN
2  1977					 ;  First Forth	word to	EXECUTE
2  1978								 $DEFER	 'MAIN',$MAIN
3  1979								 $DEF	 'MAIN',$MAIN,$DODEFER,
4  1980	000003C2			 ??0090:
4  1981		  =MAIN:03C2		 LASTWORD		 =	 ??0090
4  1982								 IFNB	 <>
4  1983								   DB
4  1984								 ELSE
4  1985	000003C2  00						   DB	 VEF_USUAL
4  1986								 ENDIF
4  1987	000003C3  04						 DB	 ??0091	- $ - 1
4  1988	000003C4  4D 41	49 4E					 DB	 'MAIN'
4  1989	000003C8			 ??0091:
4  1990	000003C8  06						 DB	 ??0091	- ??0090
4  1991	000003C9  200003B1					 DD	 VOC_LINK
4  1992		  =MAIN:200003C2	 VOC_LINK		 =	 ??0090	+ DESIRED_BASE_EQU
4  1993
4  1994								 IFNB	 <$MAIN>
4  1995	000003CD						   LABEL   $MAIN FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 36
FKernel.asm



4  1996								 ENDIF
4  1997								 IFNB	 <$DODEFER>
4  1998	000003CD  2000014A					   DD	   $DODEFER + DESIRED_BASE_EQU
4  1999								 ELSE
4  2000								   DD	   ??0093 + DESIRED_BASE_EQU
4  2001								 ENDIF
4  2002	000003D1			 ??0093:
2  2003	000003D1			 MAIN_PROC:
2  2004								 CW	 $DO_FORTH
3  2005	000003D1  20002C6B					 DD	 $DO_FORTH + DESIRED_BASE_EQU
2  2006
2  2007					 ;  MAX-ORDER-COUNT
2  2008		  = 16			 MAX_ORDER_COUNT	 EQU	 16
2  2009								 $CONST	 'MAX-ORDER-COUNT'
3  2010								 $DEF	 'MAX-ORDER-COUNT',,$DOCONST
4  2011	000003D5			 ??0094:
4  2012		  =MAIN:03D5		 LASTWORD		 =	 ??0094
4  2013								 IFNB	 <>
4  2014								   DB
4  2015								 ELSE
4  2016	000003D5  00						   DB	 VEF_USUAL
4  2017								 ENDIF
4  2018	000003D6  0F						 DB	 ??0095	- $ - 1
4  2019	000003D7  4D 41	58 2D 4F 52 44+				 DB	 'MAX-ORDER-COUNT'
   2020		  45 52	2D 43 4F 55 4E+
   2021		  54
4  2022	000003E6			 ??0095:
4  2023	000003E6  11						 DB	 ??0095	- ??0094
4  2024	000003E7  200003C2					 DD	 VOC_LINK
4  2025		  =MAIN:200003D5	 VOC_LINK		 =	 ??0094	+ DESIRED_BASE_EQU
4  2026
4  2027								 IFNB	 <>
4  2028								   LABEL    FAR
4  2029								 ENDIF
4  2030								 IFNB	 <$DOCONST>
4  2031	000003EB  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  2032								 ELSE
4  2033								   DD	   ??0097 + DESIRED_BASE_EQU
4  2034								 ENDIF
4  2035	000003EF			 ??0097:
2  2036								 CC	 MAX_ORDER_COUNT
3  2037	000003EF  00000010					 DD	 MAX_ORDER_COUNT
2  2038
2  2039
1  2040								 INCLUDE "host.inc"
2  2041					 ;******************************************************************************
2  2042					 ;
2  2043					 ;  host.inc
2  2044					 ;  IKForth
2  2045					 ;
2  2046					 ;  Copyright (C) 1999-2003 Illya Kysil
2  2047					 ;
2  2048					 ;******************************************************************************
2  2049					 ;  Contains words, provided my	hosting	application.
2  2050					 ;******************************************************************************
2  2051
2  2052					 ;******************************************************************************
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 37
FKernel.asm



2  2053					 ;  FACILITY words
2  2054					 ;******************************************************************************
2  2055
2  2056					 ;  10.6.1.0742	AT-XY
2  2057								 $DEF	 'AT-XY',$AT_XY
3  2058	000003F3			 ??0098:
3  2059		  =MAIN:03F3		 LASTWORD		 =	 ??0098
3  2060								 IFNB	 <>
3  2061								   DB
3  2062								 ELSE
3  2063	000003F3  00						   DB	 VEF_USUAL
3  2064								 ENDIF
3  2065	000003F4  05						 DB	 ??0099	- $ - 1
3  2066	000003F5  41 54	2D 58 59				 DB	 'AT-XY'
3  2067	000003FA			 ??0099:
3  2068	000003FA  07						 DB	 ??0099	- ??0098
3  2069	000003FB  200003D5					 DD	 VOC_LINK
3  2070		  =MAIN:200003F3	 VOC_LINK		 =	 ??0098	+ DESIRED_BASE_EQU
3  2071
3  2072								 IFNB	 <$AT_XY>
3  2073	000003FF						   LABEL   $AT_XY FAR
3  2074								 ENDIF
3  2075								 IFNB	 <>
3  2076								   DD	    + DESIRED_BASE_EQU
3  2077								 ELSE
3  2078	000003FF  20000403					   DD	   ??009B + DESIRED_BASE_EQU
3  2079								 ENDIF
3  2080	00000403			 ??009B:
2  2081								 $CALL	 AT_XY_FUNC
3  2082								 PUSHRS	 EDI
4  2083	00000403  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2084	00000406  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2085	00000409  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2086	0000040F  8B 5B	4C					 MOV	 EBX,[DWORD PTR	EBX + AT_XY_FUNC * CELL_SIZE]
3  2087	00000412  FF D3						 CALL	 EBX
3  2088								 POPRS	 EDI
4  2089	00000414  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2090	00000417  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2091								 $NEXT
3  2092	0000041A  AD						 LODSD				 ; fetch address
3  2093								 $JMP
4  2094	0000041B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2095	0000041D  FF E3						 JMP	 EBX			 ; execute
2  2096
2  2097					 ;  10.6.1.2005	PAGE
2  2098								 $DEF	 'PAGE'
3  2099	0000041F			 ??009C:
3  2100		  =MAIN:041F		 LASTWORD		 =	 ??009C
3  2101								 IFNB	 <>
3  2102								   DB
3  2103								 ELSE
3  2104	0000041F  00						   DB	 VEF_USUAL
3  2105								 ENDIF
3  2106	00000420  04						 DB	 ??009D	- $ - 1
3  2107	00000421  50 41	47 45					 DB	 'PAGE'
3  2108	00000425			 ??009D:
3  2109	00000425  06						 DB	 ??009D	- ??009C
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 38
FKernel.asm



3  2110	00000426  200003F3					 DD	 VOC_LINK
3  2111		  =MAIN:2000041F	 VOC_LINK		 =	 ??009C	+ DESIRED_BASE_EQU
3  2112
3  2113								 IFNB	 <>
3  2114								   LABEL    FAR
3  2115								 ENDIF
3  2116								 IFNB	 <>
3  2117								   DD	    + DESIRED_BASE_EQU
3  2118								 ELSE
3  2119	0000042A  2000042E					   DD	   ??009F + DESIRED_BASE_EQU
3  2120								 ENDIF
3  2121	0000042E			 ??009F:
2  2122								 $CALL	 PAGE_FUNC
3  2123								 PUSHRS	 EDI
4  2124	0000042E  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2125	00000431  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2126	00000434  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2127	0000043A  8B 5B	58					 MOV	 EBX,[DWORD PTR	EBX + PAGE_FUNC	* CELL_SIZE]
3  2128	0000043D  FF D3						 CALL	 EBX
3  2129								 POPRS	 EDI
4  2130	0000043F  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2131	00000442  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2132								 $NEXT
3  2133	00000445  AD						 LODSD				 ; fetch address
3  2134								 $JMP
4  2135	00000446  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2136	00000448  FF E3						 JMP	 EBX			 ; execute
2  2137
2  2138					 ;  (BYE)
2  2139								 $DEF	 '(BYE)',$PBYE
3  2140	0000044A			 ??00A0:
3  2141		  =MAIN:044A		 LASTWORD		 =	 ??00A0
3  2142								 IFNB	 <>
3  2143								   DB
3  2144								 ELSE
3  2145	0000044A  00						   DB	 VEF_USUAL
3  2146								 ENDIF
3  2147	0000044B  05						 DB	 ??00A1	- $ - 1
3  2148	0000044C  28 42	59 45 29				 DB	 '(BYE)'
3  2149	00000451			 ??00A1:
3  2150	00000451  07						 DB	 ??00A1	- ??00A0
3  2151	00000452  2000041F					 DD	 VOC_LINK
3  2152		  =MAIN:2000044A	 VOC_LINK		 =	 ??00A0	+ DESIRED_BASE_EQU
3  2153
3  2154								 IFNB	 <$PBYE>
3  2155	00000456						   LABEL   $PBYE FAR
3  2156								 ENDIF
3  2157								 IFNB	 <>
3  2158								   DD	    + DESIRED_BASE_EQU
3  2159								 ELSE
3  2160	00000456  2000045A					   DD	   ??00A3 + DESIRED_BASE_EQU
3  2161								 ENDIF
3  2162	0000045A			 ??00A3:
2  2163								 $CALL	 BYE_FUNC
3  2164								 PUSHRS	 EDI
4  2165	0000045A  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2166	0000045D  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 39
FKernel.asm



3  2167	00000460  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2168	00000466  8B 5B	10					 MOV	 EBX,[DWORD PTR	EBX + BYE_FUNC * CELL_SIZE]
3  2169	00000469  FF D3						 CALL	 EBX
3  2170								 POPRS	 EDI
4  2171	0000046B  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2172	0000046E  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2173								 $NEXT
3  2174	00000471  AD						 LODSD				 ; fetch address
3  2175								 $JMP
4  2176	00000472  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2177	00000474  FF E3						 JMP	 EBX			 ; execute
2  2178
2  2179					 ;******************************************************************************
2  2180					 ;  DLL	support
2  2181					 ;******************************************************************************
2  2182
2  2183					 ;  GetLastError
2  2184								 $DEF	 'GetLastError'
3  2185	00000476			 ??00A4:
3  2186		  =MAIN:0476		 LASTWORD		 =	 ??00A4
3  2187								 IFNB	 <>
3  2188								   DB
3  2189								 ELSE
3  2190	00000476  00						   DB	 VEF_USUAL
3  2191								 ENDIF
3  2192	00000477  0C						 DB	 ??00A5	- $ - 1
3  2193	00000478  47 65	74 4C 61 73 74+				 DB	 'GetLastError'
   2194		  45 72	72 6F 72
3  2195	00000484			 ??00A5:
3  2196	00000484  0E						 DB	 ??00A5	- ??00A4
3  2197	00000485  2000044A					 DD	 VOC_LINK
3  2198		  =MAIN:20000476	 VOC_LINK		 =	 ??00A4	+ DESIRED_BASE_EQU
3  2199
3  2200								 IFNB	 <>
3  2201								   LABEL    FAR
3  2202								 ENDIF
3  2203								 IFNB	 <>
3  2204								   DD	    + DESIRED_BASE_EQU
3  2205								 ELSE
3  2206	00000489  2000048D					   DD	   ??00A7 + DESIRED_BASE_EQU
3  2207								 ENDIF
3  2208	0000048D			 ??00A7:
2  2209								 $CALL	 GET_LAST_ERROR_FUNC
3  2210								 PUSHRS	 EDI
4  2211	0000048D  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2212	00000490  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2213	00000493  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2214	00000499  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2215	0000049B  FF D3						 CALL	 EBX
3  2216								 POPRS	 EDI
4  2217	0000049D  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2218	000004A0  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2219								 PUSHDS	 EAX
3  2220	000004A3  50						 PUSH	 EAX
2  2221								 $NEXT
3  2222	000004A4  AD						 LODSD				 ; fetch address
3  2223								 $JMP
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 40
FKernel.asm



4  2224	000004A5  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2225	000004A7  FF E3						 JMP	 EBX			 ; execute
2  2226
2  2227					 ;  (LoadLibrary)
2  2228								 $DEF	 '(LoadLibrary)',$LOAD_LIBRARY
3  2229	000004A9			 ??00A8:
3  2230		  =MAIN:04A9		 LASTWORD		 =	 ??00A8
3  2231								 IFNB	 <>
3  2232								   DB
3  2233								 ELSE
3  2234	000004A9  00						   DB	 VEF_USUAL
3  2235								 ENDIF
3  2236	000004AA  0D						 DB	 ??00A9	- $ - 1
3  2237	000004AB  28 4C	6F 61 64 4C 69+				 DB	 '(LoadLibrary)'
   2238		  62 72	61 72 79 29
3  2239	000004B8			 ??00A9:
3  2240	000004B8  0F						 DB	 ??00A9	- ??00A8
3  2241	000004B9  20000476					 DD	 VOC_LINK
3  2242		  =MAIN:200004A9	 VOC_LINK		 =	 ??00A8	+ DESIRED_BASE_EQU
3  2243
3  2244								 IFNB	 <$LOAD_LIBRARY>
3  2245	000004BD						   LABEL   $LOAD_LIBRARY FAR
3  2246								 ENDIF
3  2247								 IFNB	 <>
3  2248								   DD	    + DESIRED_BASE_EQU
3  2249								 ELSE
3  2250	000004BD  200004C1					   DD	   ??00AB + DESIRED_BASE_EQU
3  2251								 ENDIF
3  2252	000004C1			 ??00AB:
2  2253								 $CALL	 LOAD_LIBRARY_FUNC
3  2254								 PUSHRS	 EDI
4  2255	000004C1  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2256	000004C4  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2257	000004C7  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2258	000004CD  8B 5B	04					 MOV	 EBX,[DWORD PTR	EBX + LOAD_LIBRARY_FUNC	* CELL_SIZE]
3  2259	000004D0  FF D3						 CALL	 EBX
3  2260								 POPRS	 EDI
4  2261	000004D2  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2262	000004D5  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2263								 PUSHDS	 EAX
3  2264	000004D8  50						 PUSH	 EAX
2  2265								 $NEXT
3  2266	000004D9  AD						 LODSD				 ; fetch address
3  2267								 $JMP
4  2268	000004DA  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2269	000004DC  FF E3						 JMP	 EBX			 ; execute
2  2270
2  2271					 ;  FreeLibrary
2  2272								 $DEF	 'FreeLibrary',$FREE_LIBRARY
3  2273	000004DE			 ??00AC:
3  2274		  =MAIN:04DE		 LASTWORD		 =	 ??00AC
3  2275								 IFNB	 <>
3  2276								   DB
3  2277								 ELSE
3  2278	000004DE  00						   DB	 VEF_USUAL
3  2279								 ENDIF
3  2280	000004DF  0B						 DB	 ??00AD	- $ - 1
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 41
FKernel.asm



3  2281	000004E0  46 72	65 65 4C 69 62+				 DB	 'FreeLibrary'
   2282		  72 61	72 79
3  2283	000004EB			 ??00AD:
3  2284	000004EB  0D						 DB	 ??00AD	- ??00AC
3  2285	000004EC  200004A9					 DD	 VOC_LINK
3  2286		  =MAIN:200004DE	 VOC_LINK		 =	 ??00AC	+ DESIRED_BASE_EQU
3  2287
3  2288								 IFNB	 <$FREE_LIBRARY>
3  2289	000004F0						   LABEL   $FREE_LIBRARY FAR
3  2290								 ENDIF
3  2291								 IFNB	 <>
3  2292								   DD	    + DESIRED_BASE_EQU
3  2293								 ELSE
3  2294	000004F0  200004F4					   DD	   ??00AF + DESIRED_BASE_EQU
3  2295								 ENDIF
3  2296	000004F4			 ??00AF:
2  2297								 $CALL	 FREE_LIBRARY_FUNC
3  2298								 PUSHRS	 EDI
4  2299	000004F4  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2300	000004F7  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2301	000004FA  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2302	00000500  8B 5B	08					 MOV	 EBX,[DWORD PTR	EBX + FREE_LIBRARY_FUNC	* CELL_SIZE]
3  2303	00000503  FF D3						 CALL	 EBX
3  2304								 POPRS	 EDI
4  2305	00000505  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2306	00000508  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2307								 $NEXT
3  2308	0000050B  AD						 LODSD				 ; fetch address
3  2309								 $JMP
4  2310	0000050C  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2311	0000050E  FF E3						 JMP	 EBX			 ; execute
2  2312
2  2313					 ;  (GetProcAddress)
2  2314								 $DEF	 '(GetProcAddress)'
3  2315	00000510			 ??00B0:
3  2316		  =MAIN:0510		 LASTWORD		 =	 ??00B0
3  2317								 IFNB	 <>
3  2318								   DB
3  2319								 ELSE
3  2320	00000510  00						   DB	 VEF_USUAL
3  2321								 ENDIF
3  2322	00000511  10						 DB	 ??00B1	- $ - 1
3  2323	00000512  28 47	65 74 50 72 6F+				 DB	 '(GetProcAddress)'
   2324		  63 41	64 64 72 65 73+
   2325		  73 29
3  2326	00000522			 ??00B1:
3  2327	00000522  12						 DB	 ??00B1	- ??00B0
3  2328	00000523  200004DE					 DD	 VOC_LINK
3  2329		  =MAIN:20000510	 VOC_LINK		 =	 ??00B0	+ DESIRED_BASE_EQU
3  2330
3  2331								 IFNB	 <>
3  2332								   LABEL    FAR
3  2333								 ENDIF
3  2334								 IFNB	 <>
3  2335								   DD	    + DESIRED_BASE_EQU
3  2336								 ELSE
3  2337	00000527  2000052B					   DD	   ??00B3 + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 42
FKernel.asm



3  2338								 ENDIF
3  2339	0000052B			 ??00B3:
2  2340								 $CALL	 GET_PROC_ADDRESS_FUNC
3  2341								 PUSHRS	 EDI
4  2342	0000052B  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2343	0000052E  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2344	00000531  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2345	00000537  8B 5B	0C					 MOV	 EBX,[DWORD PTR	EBX + GET_PROC_ADDRESS_FUNC * CELL_SIZE]
3  2346	0000053A  FF D3						 CALL	 EBX
3  2347								 POPRS	 EDI
4  2348	0000053C  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2349	0000053F  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2350								 PUSHDS	 EAX
3  2351	00000542  50						 PUSH	 EAX
2  2352								 $NEXT
3  2353	00000543  AD						 LODSD				 ; fetch address
3  2354								 $JMP
4  2355	00000544  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2356	00000546  FF E3						 JMP	 EBX			 ; execute
2  2357
2  2358					 ;******************************************************************************
2  2359					 ;  Block words
2  2360					 ;******************************************************************************
2  2361
2  2362					 ;  READ-BLOCK
2  2363								 $DEF	 'READ-BLOCK'
3  2364	00000548			 ??00B4:
3  2365		  =MAIN:0548		 LASTWORD		 =	 ??00B4
3  2366								 IFNB	 <>
3  2367								   DB
3  2368								 ELSE
3  2369	00000548  00						   DB	 VEF_USUAL
3  2370								 ENDIF
3  2371	00000549  0A						 DB	 ??00B5	- $ - 1
3  2372	0000054A  52 45	41 44 2D 42 4C+				 DB	 'READ-BLOCK'
   2373		  4F 43	4B
3  2374	00000554			 ??00B5:
3  2375	00000554  0C						 DB	 ??00B5	- ??00B4
3  2376	00000555  20000510					 DD	 VOC_LINK
3  2377		  =MAIN:20000548	 VOC_LINK		 =	 ??00B4	+ DESIRED_BASE_EQU
3  2378
3  2379								 IFNB	 <>
3  2380								   LABEL    FAR
3  2381								 ENDIF
3  2382								 IFNB	 <>
3  2383								   DD	    + DESIRED_BASE_EQU
3  2384								 ELSE
3  2385	00000559  2000055D					   DD	   ??00B7 + DESIRED_BASE_EQU
3  2386								 ENDIF
3  2387	0000055D			 ??00B7:
2  2388								 $CALL	 READ_BLOCK_FUNC
3  2389								 PUSHRS	 EDI
4  2390	0000055D  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2391	00000560  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2392	00000563  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2393	00000569  8B 5B	20					 MOV	 EBX,[DWORD PTR	EBX + READ_BLOCK_FUNC *	CELL_SIZE]
3  2394	0000056C  FF D3						 CALL	 EBX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 43
FKernel.asm



3  2395								 POPRS	 EDI
4  2396	0000056E  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2397	00000571  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2398								 $NEXT
3  2399	00000574  AD						 LODSD				 ; fetch address
3  2400								 $JMP
4  2401	00000575  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2402	00000577  FF E3						 JMP	 EBX			 ; execute
2  2403
2  2404					 ;  WRITE-BLOCK
2  2405								 $DEF	 'WRITE-BLOCK'
3  2406	00000579			 ??00B8:
3  2407		  =MAIN:0579		 LASTWORD		 =	 ??00B8
3  2408								 IFNB	 <>
3  2409								   DB
3  2410								 ELSE
3  2411	00000579  00						   DB	 VEF_USUAL
3  2412								 ENDIF
3  2413	0000057A  0B						 DB	 ??00B9	- $ - 1
3  2414	0000057B  57 52	49 54 45 2D 42+				 DB	 'WRITE-BLOCK'
   2415		  4C 4F	43 4B
3  2416	00000586			 ??00B9:
3  2417	00000586  0D						 DB	 ??00B9	- ??00B8
3  2418	00000587  20000548					 DD	 VOC_LINK
3  2419		  =MAIN:20000579	 VOC_LINK		 =	 ??00B8	+ DESIRED_BASE_EQU
3  2420
3  2421								 IFNB	 <>
3  2422								   LABEL    FAR
3  2423								 ENDIF
3  2424								 IFNB	 <>
3  2425								   DD	    + DESIRED_BASE_EQU
3  2426								 ELSE
3  2427	0000058B  2000058F					   DD	   ??00BB + DESIRED_BASE_EQU
3  2428								 ENDIF
3  2429	0000058F			 ??00BB:
2  2430								 $CALL	 WRITE_BLOCK_FUNC
3  2431								 PUSHRS	 EDI
4  2432	0000058F  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2433	00000592  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2434	00000595  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2435	0000059B  8B 5B	24					 MOV	 EBX,[DWORD PTR	EBX + WRITE_BLOCK_FUNC * CELL_SIZE]
3  2436	0000059E  FF D3						 CALL	 EBX
3  2437								 POPRS	 EDI
4  2438	000005A0  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2439	000005A3  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2440								 $NEXT
3  2441	000005A6  AD						 LODSD				 ; fetch address
3  2442								 $JMP
4  2443	000005A7  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2444	000005A9  FF E3						 JMP	 EBX			 ; execute
2  2445
2  2446					 ;******************************************************************************
2  2447					 ;  FILE access	words
2  2448					 ;******************************************************************************
2  2449
2  2450								 $DEF	 'CLOSE-FILE',$CLOSE_FILE
3  2451	000005AB			 ??00BC:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 44
FKernel.asm



3  2452		  =MAIN:05AB		 LASTWORD		 =	 ??00BC
3  2453								 IFNB	 <>
3  2454								   DB
3  2455								 ELSE
3  2456	000005AB  00						   DB	 VEF_USUAL
3  2457								 ENDIF
3  2458	000005AC  0A						 DB	 ??00BD	- $ - 1
3  2459	000005AD  43 4C	4F 53 45 2D 46+				 DB	 'CLOSE-FILE'
   2460		  49 4C	45
3  2461	000005B7			 ??00BD:
3  2462	000005B7  0C						 DB	 ??00BD	- ??00BC
3  2463	000005B8  20000579					 DD	 VOC_LINK
3  2464		  =MAIN:200005AB	 VOC_LINK		 =	 ??00BC	+ DESIRED_BASE_EQU
3  2465
3  2466								 IFNB	 <$CLOSE_FILE>
3  2467	000005BC						   LABEL   $CLOSE_FILE FAR
3  2468								 ENDIF
3  2469								 IFNB	 <>
3  2470								   DD	    + DESIRED_BASE_EQU
3  2471								 ELSE
3  2472	000005BC  200005C0					   DD	   ??00BF + DESIRED_BASE_EQU
3  2473								 ENDIF
3  2474	000005C0			 ??00BF:
2  2475								 $CALL	 FILE_CLOSE_FUNC
3  2476								 PUSHRS	 EDI
4  2477	000005C0  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2478	000005C3  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2479	000005C6  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2480	000005CC  8B 5B	28					 MOV	 EBX,[DWORD PTR	EBX + FILE_CLOSE_FUNC *	CELL_SIZE]
3  2481	000005CF  FF D3						 CALL	 EBX
3  2482								 POPRS	 EDI
4  2483	000005D1  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2484	000005D4  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2485								 $CALL	 GET_LAST_ERROR_FUNC
3  2486								 PUSHRS	 EDI
4  2487	000005D7  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2488	000005DA  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2489	000005DD  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2490	000005E3  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2491	000005E5  FF D3						 CALL	 EBX
3  2492								 POPRS	 EDI
4  2493	000005E7  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2494	000005EA  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2495								 PUSHDS	 EAX
3  2496	000005ED  50						 PUSH	 EAX
2  2497								 $NEXT
3  2498	000005EE  AD						 LODSD				 ; fetch address
3  2499								 $JMP
4  2500	000005EF  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2501	000005F1  FF E3						 JMP	 EBX			 ; execute
2  2502
2  2503								 $DEF	 'CREATE-FILE',$CREATE_FILE
3  2504	000005F3			 ??00C0:
3  2505		  =MAIN:05F3		 LASTWORD		 =	 ??00C0
3  2506								 IFNB	 <>
3  2507								   DB
3  2508								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 45
FKernel.asm



3  2509	000005F3  00						   DB	 VEF_USUAL
3  2510								 ENDIF
3  2511	000005F4  0B						 DB	 ??00C1	- $ - 1
3  2512	000005F5  43 52	45 41 54 45 2D+				 DB	 'CREATE-FILE'
   2513		  46 49	4C 45
3  2514	00000600			 ??00C1:
3  2515	00000600  0D						 DB	 ??00C1	- ??00C0
3  2516	00000601  200005AB					 DD	 VOC_LINK
3  2517		  =MAIN:200005F3	 VOC_LINK		 =	 ??00C0	+ DESIRED_BASE_EQU
3  2518
3  2519								 IFNB	 <$CREATE_FILE>
3  2520	00000605						   LABEL   $CREATE_FILE	FAR
3  2521								 ENDIF
3  2522								 IFNB	 <>
3  2523								   DD	    + DESIRED_BASE_EQU
3  2524								 ELSE
3  2525	00000605  20000609					   DD	   ??00C3 + DESIRED_BASE_EQU
3  2526								 ENDIF
3  2527	00000609			 ??00C3:
2  2528								 $CALL	 FILE_CREATE_FUNC
3  2529								 PUSHRS	 EDI
4  2530	00000609  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2531	0000060C  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2532	0000060F  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2533	00000615  8B 5B	2C					 MOV	 EBX,[DWORD PTR	EBX + FILE_CREATE_FUNC * CELL_SIZE]
3  2534	00000618  FF D3						 CALL	 EBX
3  2535								 POPRS	 EDI
4  2536	0000061A  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2537	0000061D  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2538								 PUSHDS	 EAX
3  2539	00000620  50						 PUSH	 EAX
2  2540								 $CALL	 GET_LAST_ERROR_FUNC
3  2541								 PUSHRS	 EDI
4  2542	00000621  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2543	00000624  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2544	00000627  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2545	0000062D  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2546	0000062F  FF D3						 CALL	 EBX
3  2547								 POPRS	 EDI
4  2548	00000631  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2549	00000634  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2550								 PUSHDS	 EAX
3  2551	00000637  50						 PUSH	 EAX
2  2552								 $NEXT
3  2553	00000638  AD						 LODSD				 ; fetch address
3  2554								 $JMP
4  2555	00000639  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2556	0000063B  FF E3						 JMP	 EBX			 ; execute
2  2557
2  2558								 $DEF	 'FILE-POSITION',$FILE_POSITION
3  2559	0000063D			 ??00C4:
3  2560		  =MAIN:063D		 LASTWORD		 =	 ??00C4
3  2561								 IFNB	 <>
3  2562								   DB
3  2563								 ELSE
3  2564	0000063D  00						   DB	 VEF_USUAL
3  2565								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 46
FKernel.asm



3  2566	0000063E  0D						 DB	 ??00C5	- $ - 1
3  2567	0000063F  46 49	4C 45 2D 50 4F+				 DB	 'FILE-POSITION'
   2568		  53 49	54 49 4F 4E
3  2569	0000064C			 ??00C5:
3  2570	0000064C  0F						 DB	 ??00C5	- ??00C4
3  2571	0000064D  200005F3					 DD	 VOC_LINK
3  2572		  =MAIN:2000063D	 VOC_LINK		 =	 ??00C4	+ DESIRED_BASE_EQU
3  2573
3  2574								 IFNB	 <$FILE_POSITION>
3  2575	00000651						   LABEL   $FILE_POSITION FAR
3  2576								 ENDIF
3  2577								 IFNB	 <>
3  2578								   DD	    + DESIRED_BASE_EQU
3  2579								 ELSE
3  2580	00000651  20000655					   DD	   ??00C7 + DESIRED_BASE_EQU
3  2581								 ENDIF
3  2582	00000655			 ??00C7:
2  2583								 $CALL	 FILE_POSITION_FUNC
3  2584								 PUSHRS	 EDI
4  2585	00000655  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2586	00000658  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2587	0000065B  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2588	00000661  8B 5B	30					 MOV	 EBX,[DWORD PTR	EBX + FILE_POSITION_FUNC * CELL_SIZE]
3  2589	00000664  FF D3						 CALL	 EBX
3  2590								 POPRS	 EDI
4  2591	00000666  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2592	00000669  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2593								 PUSHDS	 EAX
3  2594	0000066C  50						 PUSH	 EAX
2  2595								 PUSHDS	 EDX
3  2596	0000066D  52						 PUSH	 EDX
2  2597								 $CALL	 GET_LAST_ERROR_FUNC
3  2598								 PUSHRS	 EDI
4  2599	0000066E  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2600	00000671  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2601	00000674  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2602	0000067A  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2603	0000067C  FF D3						 CALL	 EBX
3  2604								 POPRS	 EDI
4  2605	0000067E  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2606	00000681  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2607								 PUSHDS	 EAX
3  2608	00000684  50						 PUSH	 EAX
2  2609								 $NEXT
3  2610	00000685  AD						 LODSD				 ; fetch address
3  2611								 $JMP
4  2612	00000686  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2613	00000688  FF E3						 JMP	 EBX			 ; execute
2  2614
2  2615								 $DEF	 'OPEN-FILE',$OPEN_FILE
3  2616	0000068A			 ??00C8:
3  2617		  =MAIN:068A		 LASTWORD		 =	 ??00C8
3  2618								 IFNB	 <>
3  2619								   DB
3  2620								 ELSE
3  2621	0000068A  00						   DB	 VEF_USUAL
3  2622								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 47
FKernel.asm



3  2623	0000068B  09						 DB	 ??00C9	- $ - 1
3  2624	0000068C  4F 50	45 4E 2D 46 49+				 DB	 'OPEN-FILE'
   2625		  4C 45
3  2626	00000695			 ??00C9:
3  2627	00000695  0B						 DB	 ??00C9	- ??00C8
3  2628	00000696  2000063D					 DD	 VOC_LINK
3  2629		  =MAIN:2000068A	 VOC_LINK		 =	 ??00C8	+ DESIRED_BASE_EQU
3  2630
3  2631								 IFNB	 <$OPEN_FILE>
3  2632	0000069A						   LABEL   $OPEN_FILE FAR
3  2633								 ENDIF
3  2634								 IFNB	 <>
3  2635								   DD	    + DESIRED_BASE_EQU
3  2636								 ELSE
3  2637	0000069A  2000069E					   DD	   ??00CB + DESIRED_BASE_EQU
3  2638								 ENDIF
3  2639	0000069E			 ??00CB:
2  2640								 $CALL	 FILE_OPEN_FUNC
3  2641								 PUSHRS	 EDI
4  2642	0000069E  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2643	000006A1  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2644	000006A4  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2645	000006AA  8B 5B	34					 MOV	 EBX,[DWORD PTR	EBX + FILE_OPEN_FUNC * CELL_SIZE]
3  2646	000006AD  FF D3						 CALL	 EBX
3  2647								 POPRS	 EDI
4  2648	000006AF  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2649	000006B2  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2650								 PUSHDS	 EAX
3  2651	000006B5  50						 PUSH	 EAX
2  2652								 $CALL	 GET_LAST_ERROR_FUNC
3  2653								 PUSHRS	 EDI
4  2654	000006B6  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2655	000006B9  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2656	000006BC  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2657	000006C2  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2658	000006C4  FF D3						 CALL	 EBX
3  2659								 POPRS	 EDI
4  2660	000006C6  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2661	000006C9  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2662								 PUSHDS	 EAX
3  2663	000006CC  50						 PUSH	 EAX
2  2664								 $NEXT
3  2665	000006CD  AD						 LODSD				 ; fetch address
3  2666								 $JMP
4  2667	000006CE  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2668	000006D0  FF E3						 JMP	 EBX			 ; execute
2  2669
2  2670								 $DEF	 'REPOSITION-FILE',$REPOSITION_FILE
3  2671	000006D2			 ??00CC:
3  2672		  =MAIN:06D2		 LASTWORD		 =	 ??00CC
3  2673								 IFNB	 <>
3  2674								   DB
3  2675								 ELSE
3  2676	000006D2  00						   DB	 VEF_USUAL
3  2677								 ENDIF
3  2678	000006D3  0F						 DB	 ??00CD	- $ - 1
3  2679	000006D4  52 45	50 4F 53 49 54+				 DB	 'REPOSITION-FILE'
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 48
FKernel.asm



   2680		  49 4F	4E 2D 46 49 4C+
   2681		  45
3  2682	000006E3			 ??00CD:
3  2683	000006E3  11						 DB	 ??00CD	- ??00CC
3  2684	000006E4  2000068A					 DD	 VOC_LINK
3  2685		  =MAIN:200006D2	 VOC_LINK		 =	 ??00CC	+ DESIRED_BASE_EQU
3  2686
3  2687								 IFNB	 <$REPOSITION_FILE>
3  2688	000006E8						   LABEL   $REPOSITION_FILE FAR
3  2689								 ENDIF
3  2690								 IFNB	 <>
3  2691								   DD	    + DESIRED_BASE_EQU
3  2692								 ELSE
3  2693	000006E8  200006EC					   DD	   ??00CF + DESIRED_BASE_EQU
3  2694								 ENDIF
3  2695	000006EC			 ??00CF:
2  2696								 $CALL	 FILE_REPOSITION_FUNC
3  2697								 PUSHRS	 EDI
4  2698	000006EC  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2699	000006EF  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2700	000006F2  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2701	000006F8  8B 5B	3C					 MOV	 EBX,[DWORD PTR	EBX + FILE_REPOSITION_FUNC * CELL_SIZE]
3  2702	000006FB  FF D3						 CALL	 EBX
3  2703								 POPRS	 EDI
4  2704	000006FD  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2705	00000700  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2706								 $CALL	 GET_LAST_ERROR_FUNC
3  2707								 PUSHRS	 EDI
4  2708	00000703  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2709	00000706  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2710	00000709  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2711	0000070F  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2712	00000711  FF D3						 CALL	 EBX
3  2713								 POPRS	 EDI
4  2714	00000713  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2715	00000716  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2716								 PUSHDS	 EAX
3  2717	00000719  50						 PUSH	 EAX
2  2718								 $NEXT
3  2719	0000071A  AD						 LODSD				 ; fetch address
3  2720								 $JMP
4  2721	0000071B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2722	0000071D  FF E3						 JMP	 EBX			 ; execute
2  2723
2  2724								 $DEF	 'WRITE-FILE',$WRITE_FILE
3  2725	0000071F			 ??00D0:
3  2726		  =MAIN:071F		 LASTWORD		 =	 ??00D0
3  2727								 IFNB	 <>
3  2728								   DB
3  2729								 ELSE
3  2730	0000071F  00						   DB	 VEF_USUAL
3  2731								 ENDIF
3  2732	00000720  0A						 DB	 ??00D1	- $ - 1
3  2733	00000721  57 52	49 54 45 2D 46+				 DB	 'WRITE-FILE'
   2734		  49 4C	45
3  2735	0000072B			 ??00D1:
3  2736	0000072B  0C						 DB	 ??00D1	- ??00D0
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 49
FKernel.asm



3  2737	0000072C  200006D2					 DD	 VOC_LINK
3  2738		  =MAIN:2000071F	 VOC_LINK		 =	 ??00D0	+ DESIRED_BASE_EQU
3  2739
3  2740								 IFNB	 <$WRITE_FILE>
3  2741	00000730						   LABEL   $WRITE_FILE FAR
3  2742								 ENDIF
3  2743								 IFNB	 <>
3  2744								   DD	    + DESIRED_BASE_EQU
3  2745								 ELSE
3  2746	00000730  20000734					   DD	   ??00D3 + DESIRED_BASE_EQU
3  2747								 ENDIF
3  2748	00000734			 ??00D3:
2  2749								 $CALL	 FILE_WRITE_FUNC
3  2750								 PUSHRS	 EDI
4  2751	00000734  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2752	00000737  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2753	0000073A  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2754	00000740  8B 5B	40					 MOV	 EBX,[DWORD PTR	EBX + FILE_WRITE_FUNC *	CELL_SIZE]
3  2755	00000743  FF D3						 CALL	 EBX
3  2756								 POPRS	 EDI
4  2757	00000745  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2758	00000748  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2759								 $CALL	 GET_LAST_ERROR_FUNC
3  2760								 PUSHRS	 EDI
4  2761	0000074B  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2762	0000074E  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2763	00000751  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2764	00000757  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2765	00000759  FF D3						 CALL	 EBX
3  2766								 POPRS	 EDI
4  2767	0000075B  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2768	0000075E  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2769								 PUSHDS	 EAX
3  2770	00000761  50						 PUSH	 EAX
2  2771								 $NEXT
3  2772	00000762  AD						 LODSD				 ; fetch address
3  2773								 $JMP
4  2774	00000763  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2775	00000765  FF E3						 JMP	 EBX			 ; execute
2  2776
2  2777					 ;  11.6.1.2080	READ-FILE
2  2778					 ;  (S c-addr u1 fileid	-- u2 ior )
2  2779								 $DEF	 'READ-FILE',$READ_FILE
3  2780	00000767			 ??00D4:
3  2781		  =MAIN:0767		 LASTWORD		 =	 ??00D4
3  2782								 IFNB	 <>
3  2783								   DB
3  2784								 ELSE
3  2785	00000767  00						   DB	 VEF_USUAL
3  2786								 ENDIF
3  2787	00000768  09						 DB	 ??00D5	- $ - 1
3  2788	00000769  52 45	41 44 2D 46 49+				 DB	 'READ-FILE'
   2789		  4C 45
3  2790	00000772			 ??00D5:
3  2791	00000772  0B						 DB	 ??00D5	- ??00D4
3  2792	00000773  2000071F					 DD	 VOC_LINK
3  2793		  =MAIN:20000767	 VOC_LINK		 =	 ??00D4	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 50
FKernel.asm



3  2794
3  2795								 IFNB	 <$READ_FILE>
3  2796	00000777						   LABEL   $READ_FILE FAR
3  2797								 ENDIF
3  2798								 IFNB	 <>
3  2799								   DD	    + DESIRED_BASE_EQU
3  2800								 ELSE
3  2801	00000777  2000077B					   DD	   ??00D7 + DESIRED_BASE_EQU
3  2802								 ENDIF
3  2803	0000077B			 ??00D7:
2  2804								 $CALL	 FILE_READ_FUNC
3  2805								 PUSHRS	 EDI
4  2806	0000077B  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2807	0000077E  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2808	00000781  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2809	00000787  8B 5B	38					 MOV	 EBX,[DWORD PTR	EBX + FILE_READ_FUNC * CELL_SIZE]
3  2810	0000078A  FF D3						 CALL	 EBX
3  2811								 POPRS	 EDI
4  2812	0000078C  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2813	0000078F  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2814								 PUSHDS	 EAX
3  2815	00000792  50						 PUSH	 EAX
2  2816								 $CALL	 GET_LAST_ERROR_FUNC
3  2817								 PUSHRS	 EDI
4  2818	00000793  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2819	00000796  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2820	00000799  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2821	0000079F  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2822	000007A1  FF D3						 CALL	 EBX
3  2823								 POPRS	 EDI
4  2824	000007A3  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2825	000007A6  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2826								 PUSHDS	 EAX
3  2827	000007A9  50						 PUSH	 EAX
2  2828								 $NEXT
3  2829	000007AA  AD						 LODSD				 ; fetch address
3  2830								 $JMP
4  2831	000007AB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2832	000007AD  FF E3						 JMP	 EBX			 ; execute
2  2833
2  2834								 $DEF	 '(READ-LINE)',$PREAD_LINE
3  2835	000007AF			 ??00D8:
3  2836		  =MAIN:07AF		 LASTWORD		 =	 ??00D8
3  2837								 IFNB	 <>
3  2838								   DB
3  2839								 ELSE
3  2840	000007AF  00						   DB	 VEF_USUAL
3  2841								 ENDIF
3  2842	000007B0  0B						 DB	 ??00D9	- $ - 1
3  2843	000007B1  28 52	45 41 44 2D 4C+				 DB	 '(READ-LINE)'
   2844		  49 4E	45 29
3  2845	000007BC			 ??00D9:
3  2846	000007BC  0D						 DB	 ??00D9	- ??00D8
3  2847	000007BD  20000767					 DD	 VOC_LINK
3  2848		  =MAIN:200007AF	 VOC_LINK		 =	 ??00D8	+ DESIRED_BASE_EQU
3  2849
3  2850								 IFNB	 <$PREAD_LINE>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 51
FKernel.asm



3  2851	000007C1						   LABEL   $PREAD_LINE FAR
3  2852								 ENDIF
3  2853								 IFNB	 <>
3  2854								   DD	    + DESIRED_BASE_EQU
3  2855								 ELSE
3  2856	000007C1  200007C5					   DD	   ??00DB + DESIRED_BASE_EQU
3  2857								 ENDIF
3  2858	000007C5			 ??00DB:
2  2859								 $CALL	 FILE_READ_LINE_FUNC
3  2860								 PUSHRS	 EDI
4  2861	000007C5  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2862	000007C8  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2863	000007CB  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2864	000007D1  8B 5B	44					 MOV	 EBX,[DWORD PTR	EBX + FILE_READ_LINE_FUNC * CELL_SIZE]
3  2865	000007D4  FF D3						 CALL	 EBX
3  2866								 POPRS	 EDI
4  2867	000007D6  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2868	000007D9  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2869								 PUSHDS	 EAX
3  2870	000007DC  50						 PUSH	 EAX
2  2871								 PUSHDS	 EDX
3  2872	000007DD  52						 PUSH	 EDX
2  2873								 $CALL	 GET_LAST_ERROR_FUNC
3  2874								 PUSHRS	 EDI
4  2875	000007DE  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2876	000007E1  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2877	000007E4  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2878	000007EA  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2879	000007EC  FF D3						 CALL	 EBX
3  2880								 POPRS	 EDI
4  2881	000007EE  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2882	000007F1  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2883								 PUSHDS	 EAX
3  2884	000007F4  50						 PUSH	 EAX
2  2885								 $NEXT
3  2886	000007F5  AD						 LODSD				 ; fetch address
3  2887								 $JMP
4  2888	000007F6  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2889	000007F8  FF E3						 JMP	 EBX			 ; execute
2  2890
2  2891					 ;  11.6.1.2147	RESIZE-FILE
2  2892					 ;  ( ud fileid	-- ior )
2  2893					 ;  Set	the size of the	file identified	by fileid to ud. ior is	the
2  2894					 ;  implementation-defined I/O result code.
2  2895					 ;  If the resultant file is larger than the file before the operation,
2  2896					 ;  the	portion	of the file added as a result of the operation might not have
2  2897					 ;  been written. At the conclusion of the operation, FILE-SIZE	returns
2  2898					 ;  the	value ud and FILE-POSITION returns an unspecified value.
2  2899								 $DEF	 'RESIZE-FILE',$RESIZE_FILE
3  2900	000007FA			 ??00DC:
3  2901		  =MAIN:07FA		 LASTWORD		 =	 ??00DC
3  2902								 IFNB	 <>
3  2903								   DB
3  2904								 ELSE
3  2905	000007FA  00						   DB	 VEF_USUAL
3  2906								 ENDIF
3  2907	000007FB  0B						 DB	 ??00DD	- $ - 1
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 52
FKernel.asm



3  2908	000007FC  52 45	53 49 5A 45 2D+				 DB	 'RESIZE-FILE'
   2909		  46 49	4C 45
3  2910	00000807			 ??00DD:
3  2911	00000807  0D						 DB	 ??00DD	- ??00DC
3  2912	00000808  200007AF					 DD	 VOC_LINK
3  2913		  =MAIN:200007FA	 VOC_LINK		 =	 ??00DC	+ DESIRED_BASE_EQU
3  2914
3  2915								 IFNB	 <$RESIZE_FILE>
3  2916	0000080C						   LABEL   $RESIZE_FILE	FAR
3  2917								 ENDIF
3  2918								 IFNB	 <>
3  2919								   DD	    + DESIRED_BASE_EQU
3  2920								 ELSE
3  2921	0000080C  20000810					   DD	   ??00DF + DESIRED_BASE_EQU
3  2922								 ENDIF
3  2923	00000810			 ??00DF:
2  2924								 $CALL	 FILE_RESIZE_FUNC
3  2925								 PUSHRS	 EDI
4  2926	00000810  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2927	00000813  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2928	00000816  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2929	0000081C  8B 5B	48					 MOV	 EBX,[DWORD PTR	EBX + FILE_RESIZE_FUNC * CELL_SIZE]
3  2930	0000081F  FF D3						 CALL	 EBX
3  2931								 POPRS	 EDI
4  2932	00000821  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2933	00000824  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2934								 $CALL	 GET_LAST_ERROR_FUNC
3  2935								 PUSHRS	 EDI
4  2936	00000827  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2937	0000082A  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2938	0000082D  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2939	00000833  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  2940	00000835  FF D3						 CALL	 EBX
3  2941								 POPRS	 EDI
4  2942	00000837  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2943	0000083A  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2944								 PUSHDS	 EAX
3  2945	0000083D  50						 PUSH	 EAX
2  2946								 $NEXT
3  2947	0000083E  AD						 LODSD				 ; fetch address
3  2948								 $JMP
4  2949	0000083F  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2950	00000841  FF E3						 JMP	 EBX			 ; execute
2  2951
2  2952					 ;  6.1.0695 ACCEPT
2  2953								 $DEF	 'ACCEPT',$ACCEPT
3  2954	00000843			 ??00E0:
3  2955		  =MAIN:0843		 LASTWORD		 =	 ??00E0
3  2956								 IFNB	 <>
3  2957								   DB
3  2958								 ELSE
3  2959	00000843  00						   DB	 VEF_USUAL
3  2960								 ENDIF
3  2961	00000844  06						 DB	 ??00E1	- $ - 1
3  2962	00000845  41 43	43 45 50 54				 DB	 'ACCEPT'
3  2963	0000084B			 ??00E1:
3  2964	0000084B  08						 DB	 ??00E1	- ??00E0
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 53
FKernel.asm



3  2965	0000084C  200007FA					 DD	 VOC_LINK
3  2966		  =MAIN:20000843	 VOC_LINK		 =	 ??00E0	+ DESIRED_BASE_EQU
3  2967
3  2968								 IFNB	 <$ACCEPT>
3  2969	00000850						   LABEL   $ACCEPT FAR
3  2970								 ENDIF
3  2971								 IFNB	 <>
3  2972								   DD	    + DESIRED_BASE_EQU
3  2973								 ELSE
3  2974	00000850  20000854					   DD	   ??00E3 + DESIRED_BASE_EQU
3  2975								 ENDIF
3  2976	00000854			 ??00E3:
2  2977								 $CALL	 ACCEPT_FUNC
3  2978								 PUSHRS	 EDI
4  2979	00000854  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2980	00000857  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2981	0000085A  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  2982	00000860  8B 5B	1C					 MOV	 EBX,[DWORD PTR	EBX + ACCEPT_FUNC * CELL_SIZE]
3  2983	00000863  FF D3						 CALL	 EBX
3  2984								 POPRS	 EDI
4  2985	00000865  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2986	00000868  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2987								 PUSHDS	 EAX
3  2988	0000086B  50						 PUSH	 EAX
2  2989								 $NEXT
3  2990	0000086C  AD						 LODSD				 ; fetch address
3  2991								 $JMP
4  2992	0000086D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2993	0000086F  FF E3						 JMP	 EBX			 ; execute
2  2994
2  2995					 ;  6.1.1320 EMIT
2  2996					 ;  Emit a char	to output
2  2997					 ;  D: char --
2  2998								 $DEF	 'EMIT',$EMIT
3  2999	00000871			 ??00E4:
3  3000		  =MAIN:0871		 LASTWORD		 =	 ??00E4
3  3001								 IFNB	 <>
3  3002								   DB
3  3003								 ELSE
3  3004	00000871  00						   DB	 VEF_USUAL
3  3005								 ENDIF
3  3006	00000872  04						 DB	 ??00E5	- $ - 1
3  3007	00000873  45 4D	49 54					 DB	 'EMIT'
3  3008	00000877			 ??00E5:
3  3009	00000877  06						 DB	 ??00E5	- ??00E4
3  3010	00000878  20000843					 DD	 VOC_LINK
3  3011		  =MAIN:20000871	 VOC_LINK		 =	 ??00E4	+ DESIRED_BASE_EQU
3  3012
3  3013								 IFNB	 <$EMIT>
3  3014	0000087C						   LABEL   $EMIT FAR
3  3015								 ENDIF
3  3016								 IFNB	 <>
3  3017								   DD	    + DESIRED_BASE_EQU
3  3018								 ELSE
3  3019	0000087C  20000880					   DD	   ??00E7 + DESIRED_BASE_EQU
3  3020								 ENDIF
3  3021	00000880			 ??00E7:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 54
FKernel.asm



2  3022								 $CALL	 EMIT_FUNC
3  3023								 PUSHRS	 EDI
4  3024	00000880  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3025	00000883  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3026	00000886  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3027	0000088C  8B 5B	14					 MOV	 EBX,[DWORD PTR	EBX + EMIT_FUNC	* CELL_SIZE]
3  3028	0000088F  FF D3						 CALL	 EBX
3  3029								 POPRS	 EDI
4  3030	00000891  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3031	00000894  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3032								 $NEXT
3  3033	00000897  AD						 LODSD				 ; fetch address
3  3034								 $JMP
4  3035	00000898  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3036	0000089A  FF E3						 JMP	 EBX			 ; execute
2  3037
2  3038					 ;  6.1.2310 TYPE
2  3039					 ;  Display the	character string specified by addr and length n
2  3040					 ;  D: addr n --
2  3041								 $DEF	 'TYPE',$TYPE
3  3042	0000089C			 ??00E8:
3  3043		  =MAIN:089C		 LASTWORD		 =	 ??00E8
3  3044								 IFNB	 <>
3  3045								   DB
3  3046								 ELSE
3  3047	0000089C  00						   DB	 VEF_USUAL
3  3048								 ENDIF
3  3049	0000089D  04						 DB	 ??00E9	- $ - 1
3  3050	0000089E  54 59	50 45					 DB	 'TYPE'
3  3051	000008A2			 ??00E9:
3  3052	000008A2  06						 DB	 ??00E9	- ??00E8
3  3053	000008A3  20000871					 DD	 VOC_LINK
3  3054		  =MAIN:2000089C	 VOC_LINK		 =	 ??00E8	+ DESIRED_BASE_EQU
3  3055
3  3056								 IFNB	 <$TYPE>
3  3057	000008A7						   LABEL   $TYPE FAR
3  3058								 ENDIF
3  3059								 IFNB	 <>
3  3060								   DD	    + DESIRED_BASE_EQU
3  3061								 ELSE
3  3062	000008A7  200008AB					   DD	   ??00EB + DESIRED_BASE_EQU
3  3063								 ENDIF
3  3064	000008AB			 ??00EB:
2  3065								 $CALL	 TYPE_FUNC
3  3066								 PUSHRS	 EDI
4  3067	000008AB  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3068	000008AE  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3069	000008B1  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3070	000008B7  8B 5B	18					 MOV	 EBX,[DWORD PTR	EBX + TYPE_FUNC	* CELL_SIZE]
3  3071	000008BA  FF D3						 CALL	 EBX
3  3072								 POPRS	 EDI
4  3073	000008BC  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3074	000008BF  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3075								 $NEXT
3  3076	000008C2  AD						 LODSD				 ; fetch address
3  3077								 $JMP
4  3078	000008C3  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 55
FKernel.asm



4  3079	000008C5  FF E3						 JMP	 EBX			 ; execute
2  3080
2  3081					 ;******************************************************************************
2  3082					 ;  String words
2  3083					 ;******************************************************************************
2  3084
2  3085								 $DEF	 'COMPARE',$COMPARE
3  3086	000008C7			 ??00EC:
3  3087		  =MAIN:08C7		 LASTWORD		 =	 ??00EC
3  3088								 IFNB	 <>
3  3089								   DB
3  3090								 ELSE
3  3091	000008C7  00						   DB	 VEF_USUAL
3  3092								 ENDIF
3  3093	000008C8  07						 DB	 ??00ED	- $ - 1
3  3094	000008C9  43 4F	4D 50 41 52 45				 DB	 'COMPARE'
3  3095	000008D0			 ??00ED:
3  3096	000008D0  09						 DB	 ??00ED	- ??00EC
3  3097	000008D1  2000089C					 DD	 VOC_LINK
3  3098		  =MAIN:200008C7	 VOC_LINK		 =	 ??00EC	+ DESIRED_BASE_EQU
3  3099
3  3100								 IFNB	 <$COMPARE>
3  3101	000008D5						   LABEL   $COMPARE FAR
3  3102								 ENDIF
3  3103								 IFNB	 <>
3  3104								   DD	    + DESIRED_BASE_EQU
3  3105								 ELSE
3  3106	000008D5  200008D9					   DD	   ??00EF + DESIRED_BASE_EQU
3  3107								 ENDIF
3  3108	000008D9			 ??00EF:
2  3109								 $CALL	 COMPARE_FUNC
3  3110								 PUSHRS	 EDI
4  3111	000008D9  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3112	000008DC  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3113	000008DF  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3114	000008E5  8B 5B	54					 MOV	 EBX,[DWORD PTR	EBX + COMPARE_FUNC * CELL_SIZE]
3  3115	000008E8  FF D3						 CALL	 EBX
3  3116								 POPRS	 EDI
4  3117	000008EA  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3118	000008ED  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3119								 PUSHDS	 EAX
3  3120	000008F0  50						 PUSH	 EAX
2  3121								 $NEXT
3  3122	000008F1  AD						 LODSD				 ; fetch address
3  3123								 $JMP
4  3124	000008F2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3125	000008F4  FF E3						 JMP	 EBX			 ; execute
2  3126
2  3127					 ;******************************************************************************
2  3128					 ;  Threads
2  3129					 ;******************************************************************************
2  3130
2  3131					 ;  THREAD
2  3132								 $DEF	 'THREAD',$THREAD
3  3133	000008F6			 ??00F0:
3  3134		  =MAIN:08F6		 LASTWORD		 =	 ??00F0
3  3135								 IFNB	 <>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 56
FKernel.asm



3  3136								   DB
3  3137								 ELSE
3  3138	000008F6  00						   DB	 VEF_USUAL
3  3139								 ENDIF
3  3140	000008F7  06						 DB	 ??00F1	- $ - 1
3  3141	000008F8  54 48	52 45 41 44				 DB	 'THREAD'
3  3142	000008FE			 ??00F1:
3  3143	000008FE  08						 DB	 ??00F1	- ??00F0
3  3144	000008FF  200008C7					 DD	 VOC_LINK
3  3145		  =MAIN:200008F6	 VOC_LINK		 =	 ??00F0	+ DESIRED_BASE_EQU
3  3146
3  3147								 IFNB	 <$THREAD>
3  3148	00000903						   LABEL   $THREAD FAR
3  3149								 ENDIF
3  3150								 IFNB	 <>
3  3151								   DD	    + DESIRED_BASE_EQU
3  3152								 ELSE
3  3153	00000903  20000907					   DD	   ??00F3 + DESIRED_BASE_EQU
3  3154								 ENDIF
3  3155	00000907			 ??00F3:
2  3156								 PUSHDS	 EDI
3  3157	00000907  57						 PUSH	 EDI
2  3158								 $CALL	 START_THREAD_FUNC
3  3159								 PUSHRS	 EDI
4  3160	00000908  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3161	0000090B  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3162	0000090E  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3163	00000914  8B 5B	50					 MOV	 EBX,[DWORD PTR	EBX + START_THREAD_FUNC	* CELL_SIZE]
3  3164	00000917  FF D3						 CALL	 EBX
3  3165								 POPRS	 EDI
4  3166	00000919  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3167	0000091C  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3168								 PUSHDS	 EAX
3  3169	0000091F  50						 PUSH	 EAX
2  3170								 $NEXT
3  3171	00000920  AD						 LODSD				 ; fetch address
3  3172								 $JMP
4  3173	00000921  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3174	00000923  FF E3						 JMP	 EBX			 ; execute
2  3175
2  3176					 ;******************************************************************************
2  3177					 ;  Memory
2  3178					 ;******************************************************************************
2  3179
2  3180								 $DEF	 'ALLOCATE',$ALLOCATE
3  3181	00000925			 ??00F4:
3  3182		  =MAIN:0925		 LASTWORD		 =	 ??00F4
3  3183								 IFNB	 <>
3  3184								   DB
3  3185								 ELSE
3  3186	00000925  00						   DB	 VEF_USUAL
3  3187								 ENDIF
3  3188	00000926  08						 DB	 ??00F5	- $ - 1
3  3189	00000927  41 4C	4C 4F 43 41 54+				 DB	 'ALLOCATE'
   3190		  45
3  3191	0000092F			 ??00F5:
3  3192	0000092F  0A						 DB	 ??00F5	- ??00F4
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 57
FKernel.asm



3  3193	00000930  200008F6					 DD	 VOC_LINK
3  3194		  =MAIN:20000925	 VOC_LINK		 =	 ??00F4	+ DESIRED_BASE_EQU
3  3195
3  3196								 IFNB	 <$ALLOCATE>
3  3197	00000934						   LABEL   $ALLOCATE FAR
3  3198								 ENDIF
3  3199								 IFNB	 <>
3  3200								   DD	    + DESIRED_BASE_EQU
3  3201								 ELSE
3  3202	00000934  20000938					   DD	   ??00F7 + DESIRED_BASE_EQU
3  3203								 ENDIF
3  3204	00000938			 ??00F7:
2  3205								 $CALL	 ALLOCATE_FUNC
3  3206								 PUSHRS	 EDI
4  3207	00000938  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3208	0000093B  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3209	0000093E  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3210	00000944  8B 5B	5C					 MOV	 EBX,[DWORD PTR	EBX + ALLOCATE_FUNC * CELL_SIZE]
3  3211	00000947  FF D3						 CALL	 EBX
3  3212								 POPRS	 EDI
4  3213	00000949  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3214	0000094C  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3215								 PUSHDS	 EAX
3  3216	0000094F  50						 PUSH	 EAX
2  3217								 $CALL	 GET_LAST_ERROR_FUNC
3  3218								 PUSHRS	 EDI
4  3219	00000950  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3220	00000953  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3221	00000956  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3222	0000095C  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  3223	0000095E  FF D3						 CALL	 EBX
3  3224								 POPRS	 EDI
4  3225	00000960  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3226	00000963  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3227								 PUSHDS	 EAX
3  3228	00000966  50						 PUSH	 EAX
2  3229								 $NEXT
3  3230	00000967  AD						 LODSD				 ; fetch address
3  3231								 $JMP
4  3232	00000968  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3233	0000096A  FF E3						 JMP	 EBX			 ; execute
2  3234
2  3235								 $DEF	 'FREE',$FREE
3  3236	0000096C			 ??00F8:
3  3237		  =MAIN:096C		 LASTWORD		 =	 ??00F8
3  3238								 IFNB	 <>
3  3239								   DB
3  3240								 ELSE
3  3241	0000096C  00						   DB	 VEF_USUAL
3  3242								 ENDIF
3  3243	0000096D  04						 DB	 ??00F9	- $ - 1
3  3244	0000096E  46 52	45 45					 DB	 'FREE'
3  3245	00000972			 ??00F9:
3  3246	00000972  06						 DB	 ??00F9	- ??00F8
3  3247	00000973  20000925					 DD	 VOC_LINK
3  3248		  =MAIN:2000096C	 VOC_LINK		 =	 ??00F8	+ DESIRED_BASE_EQU
3  3249
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 58
FKernel.asm



3  3250								 IFNB	 <$FREE>
3  3251	00000977						   LABEL   $FREE FAR
3  3252								 ENDIF
3  3253								 IFNB	 <>
3  3254								   DD	    + DESIRED_BASE_EQU
3  3255								 ELSE
3  3256	00000977  2000097B					   DD	   ??00FB + DESIRED_BASE_EQU
3  3257								 ENDIF
3  3258	0000097B			 ??00FB:
2  3259								 $CALL	 FREE_FUNC
3  3260								 PUSHRS	 EDI
4  3261	0000097B  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3262	0000097E  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3263	00000981  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3264	00000987  8B 5B	60					 MOV	 EBX,[DWORD PTR	EBX + FREE_FUNC	* CELL_SIZE]
3  3265	0000098A  FF D3						 CALL	 EBX
3  3266								 POPRS	 EDI
4  3267	0000098C  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3268	0000098F  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3269								 $CALL	 GET_LAST_ERROR_FUNC
3  3270								 PUSHRS	 EDI
4  3271	00000992  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3272	00000995  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3273	00000998  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3274	0000099E  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  3275	000009A0  FF D3						 CALL	 EBX
3  3276								 POPRS	 EDI
4  3277	000009A2  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3278	000009A5  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3279								 PUSHDS	 EAX
3  3280	000009A8  50						 PUSH	 EAX
2  3281								 $NEXT
3  3282	000009A9  AD						 LODSD				 ; fetch address
3  3283								 $JMP
4  3284	000009AA  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3285	000009AC  FF E3						 JMP	 EBX			 ; execute
2  3286
2  3287								 $DEF	 'RESIZE',$RESIZE
3  3288	000009AE			 ??00FC:
3  3289		  =MAIN:09AE		 LASTWORD		 =	 ??00FC
3  3290								 IFNB	 <>
3  3291								   DB
3  3292								 ELSE
3  3293	000009AE  00						   DB	 VEF_USUAL
3  3294								 ENDIF
3  3295	000009AF  06						 DB	 ??00FD	- $ - 1
3  3296	000009B0  52 45	53 49 5A 45				 DB	 'RESIZE'
3  3297	000009B6			 ??00FD:
3  3298	000009B6  08						 DB	 ??00FD	- ??00FC
3  3299	000009B7  2000096C					 DD	 VOC_LINK
3  3300		  =MAIN:200009AE	 VOC_LINK		 =	 ??00FC	+ DESIRED_BASE_EQU
3  3301
3  3302								 IFNB	 <$RESIZE>
3  3303	000009BB						   LABEL   $RESIZE FAR
3  3304								 ENDIF
3  3305								 IFNB	 <>
3  3306								   DD	    + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 59
FKernel.asm



3  3307								 ELSE
3  3308	000009BB  200009BF					   DD	   ??00FF + DESIRED_BASE_EQU
3  3309								 ENDIF
3  3310	000009BF			 ??00FF:
2  3311								 $CALL	 REALLOCATE_FUNC
3  3312								 PUSHRS	 EDI
4  3313	000009BF  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3314	000009C2  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3315	000009C5  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3316	000009CB  8B 5B	64					 MOV	 EBX,[DWORD PTR	EBX + REALLOCATE_FUNC *	CELL_SIZE]
3  3317	000009CE  FF D3						 CALL	 EBX
3  3318								 POPRS	 EDI
4  3319	000009D0  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3320	000009D3  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3321								 PUSHDS	 EAX
3  3322	000009D6  50						 PUSH	 EAX
2  3323								 $CALL	 GET_LAST_ERROR_FUNC
3  3324								 PUSHRS	 EDI
4  3325	000009D7  83 ED	04					 SUB	 EBP,CELL_SIZE
4  3326	000009DA  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  3327	000009DD  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3  3328	000009E3  8B 1B						 MOV	 EBX,[DWORD PTR	EBX + GET_LAST_ERROR_FUNC * CELL_SIZE]
3  3329	000009E5  FF D3						 CALL	 EBX
3  3330								 POPRS	 EDI
4  3331	000009E7  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  3332	000009EA  83 C5	04					 ADD	 EBP,CELL_SIZE
2  3333								 PUSHDS	 EAX
3  3334	000009ED  50						 PUSH	 EAX
2  3335								 $NEXT
3  3336	000009EE  AD						 LODSD				 ; fetch address
3  3337								 $JMP
4  3338	000009EF  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3339	000009F1  FF E3						 JMP	 EBX			 ; execute
2  3340
2  3341
1  3342								 INCLUDE "ik.inc"
2  3343					 ;******************************************************************************
2  3344					 ;
2  3345					 ;  ik.inc
2  3346					 ;  IKForth
2  3347					 ;
2  3348					 ;  Copyright (C) 1999-2003 Illya Kysil
2  3349					 ;
2  3350					 ;******************************************************************************
2  3351					 ;  IK words
2  3352					 ;******************************************************************************
2  3353
2  3354					 ;  INIT-USER
2  3355								 $DEF	 'INIT-USER',$INIT_USER
3  3356	000009F3			 ??0100:
3  3357		  =MAIN:09F3		 LASTWORD		 =	 ??0100
3  3358								 IFNB	 <>
3  3359								   DB
3  3360								 ELSE
3  3361	000009F3  00						   DB	 VEF_USUAL
3  3362								 ENDIF
3  3363	000009F4  09						 DB	 ??0101	- $ - 1
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 60
FKernel.asm



3  3364	000009F5  49 4E	49 54 2D 55 53+				 DB	 'INIT-USER'
   3365		  45 52
3  3366	000009FE			 ??0101:
3  3367	000009FE  0B						 DB	 ??0101	- ??0100
3  3368	000009FF  200009AE					 DD	 VOC_LINK
3  3369		  =MAIN:200009F3	 VOC_LINK		 =	 ??0100	+ DESIRED_BASE_EQU
3  3370
3  3371								 IFNB	 <$INIT_USER>
3  3372	00000A03						   LABEL   $INIT_USER FAR
3  3373								 ENDIF
3  3374								 IFNB	 <>
3  3375								   DD	    + DESIRED_BASE_EQU
3  3376								 ELSE
3  3377	00000A03  20000A07					   DD	   ??0103 + DESIRED_BASE_EQU
3  3378								 ENDIF
3  3379	00000A07			 ??0103:
2  3380	00000A07  FC						 CLD
2  3381	00000A08  C7 47	1C 0000000A				 MOV	 [DWORD	PTR EDI	+ BASE_VAR],10
2  3382	00000A0F  C7 47	18 00000000				 MOV	 [DWORD	PTR EDI	+ STATE_VAR],F_FALSE
2  3383	00000A16  C7 87	00000848      +				 MOV	 [DWORD	PTR EDI	+ CURRENT_VAR],OFFSET FORTH_WORDLIST_EQU +  +
   3384		  2000209A		 DESIRED_BASE_EQU
2  3385								 $NEXT
3  3386	00000A20  AD						 LODSD				 ; fetch address
3  3387								 $JMP
4  3388	00000A21  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3389	00000A23  FF E3						 JMP	 EBX			 ; execute
2  3390
2  3391					 ;******************************************************************************
2  3392					 ;  I/O
2  3393					 ;******************************************************************************
2  3394
2  3395					 ;  (TYPE)
2  3396								 $COLON	 '(TYPE)',$PTYPE
3  3397								 $DEF	 '(TYPE)',$PTYPE,$ENTER,
4  3398	00000A25			 ??0104:
4  3399		  =MAIN:0A25		 LASTWORD		 =	 ??0104
4  3400								 IFNB	 <>
4  3401								   DB
4  3402								 ELSE
4  3403	00000A25  00						   DB	 VEF_USUAL
4  3404								 ENDIF
4  3405	00000A26  06						 DB	 ??0105	- $ - 1
4  3406	00000A27  28 54	59 50 45 29				 DB	 '(TYPE)'
4  3407	00000A2D			 ??0105:
4  3408	00000A2D  08						 DB	 ??0105	- ??0104
4  3409	00000A2E  200009F3					 DD	 VOC_LINK
4  3410		  =MAIN:20000A25	 VOC_LINK		 =	 ??0104	+ DESIRED_BASE_EQU
4  3411
4  3412								 IFNB	 <$PTYPE>
4  3413	00000A32						   LABEL   $PTYPE FAR
4  3414								 ENDIF
4  3415								 IFNB	 <$ENTER>
4  3416	00000A32  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  3417								 ELSE
4  3418								   DD	   ??0107 + DESIRED_BASE_EQU
4  3419								 ENDIF
4  3420	00000A36			 ??0107:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 61
FKernel.asm



2  3421								 CW	 $RFROM			 ; a
3  3422	00000A36  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  3423								 CW	 $COUNT			 ; a+1 b
3  3424	00000A3A  20002807					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  3425								 CW	 $OVER			 ; a+1 b a+1
3  3426	00000A3E  2000198C					 DD	 $OVER + DESIRED_BASE_EQU
2  3427								 CW	 $OVER			 ; a+1 b a+1 b
3  3428	00000A42  2000198C					 DD	 $OVER + DESIRED_BASE_EQU
2  3429								 CW	 $ADD			 ; a+1 b a+1+b
3  3430	00000A46  20001C1F					 DD	 $ADD +	DESIRED_BASE_EQU
2  3431								 CW	 $TOR			 ; a+1 b
3  3432	00000A4A  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  3433								 CW	 $TYPE
3  3434	00000A4E  200008A7					 DD	 $TYPE + DESIRED_BASE_EQU
2  3435								 CEXIT
3  3436								 CW	 $EXIT
4  3437	00000A52  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  3438
2  3439
1  3440								 INCLUDE "source.inc"
2  3441					 ;******************************************************************************
2  3442					 ;
2  3443					 ;  source.inc
2  3444					 ;  IKForth
2  3445					 ;
2  3446					 ;  Copyright (C) 1999-2003 Illya Kysil
2  3447					 ;
2  3448					 ;******************************************************************************
2  3449					 ;
2  3450					 ;******************************************************************************
2  3451
2  3452					 ;  6.2.2218 SOURCE-ID
2  3453					 ;  Identifies the input source	as follows:
2  3454					 ;
2  3455					 ;  SOURCE-ID	    Input source
2  3456					 ;  -1		    String (via	EVALUATE)
2  3457					 ;   0		    User input device
2  3458					 ;  >0		    File handle
2  3459								 $DEF	 'SOURCE-ID',$SOURCE_ID
3  3460	00000A56			 ??0108:
3  3461		  =MAIN:0A56		 LASTWORD		 =	 ??0108
3  3462								 IFNB	 <>
3  3463								   DB
3  3464								 ELSE
3  3465	00000A56  00						   DB	 VEF_USUAL
3  3466								 ENDIF
3  3467	00000A57  09						 DB	 ??0109	- $ - 1
3  3468	00000A58  53 4F	55 52 43 45 2D+				 DB	 'SOURCE-ID'
   3469		  49 44
3  3470	00000A61			 ??0109:
3  3471	00000A61  0B						 DB	 ??0109	- ??0108
3  3472	00000A62  20000A25					 DD	 VOC_LINK
3  3473		  =MAIN:20000A56	 VOC_LINK		 =	 ??0108	+ DESIRED_BASE_EQU
3  3474
3  3475								 IFNB	 <$SOURCE_ID>
3  3476	00000A66						   LABEL   $SOURCE_ID FAR
3  3477								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 62
FKernel.asm



3  3478								 IFNB	 <>
3  3479								   DD	    + DESIRED_BASE_EQU
3  3480								 ELSE
3  3481	00000A66  20000A6A					   DD	   ??010B + DESIRED_BASE_EQU
3  3482								 ENDIF
3  3483	00000A6A			 ??010B:
2  3484								 PUSHDS	 <[DWORD PTR EDI + SOURCE_ID_VAR]>
3  3485	00000A6A  FF 77	24					 PUSH	 [DWORD	PTR EDI	+ SOURCE_ID_VAR]
2  3486								 $NEXT
3  3487	00000A6D  AD						 LODSD				 ; fetch address
3  3488								 $JMP
4  3489	00000A6E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3490	00000A70  FF E3						 JMP	 EBX			 ; execute
2  3491
2  3492					 ;  SOURCE-ID!
2  3493								 $DEF	 'SOURCE-ID!',$SOURCE_ID_STORE
3  3494	00000A72			 ??010C:
3  3495		  =MAIN:0A72		 LASTWORD		 =	 ??010C
3  3496								 IFNB	 <>
3  3497								   DB
3  3498								 ELSE
3  3499	00000A72  00						   DB	 VEF_USUAL
3  3500								 ENDIF
3  3501	00000A73  0A						 DB	 ??010D	- $ - 1
3  3502	00000A74  53 4F	55 52 43 45 2D+				 DB	 'SOURCE-ID!'
   3503		  49 44	21
3  3504	00000A7E			 ??010D:
3  3505	00000A7E  0C						 DB	 ??010D	- ??010C
3  3506	00000A7F  20000A56					 DD	 VOC_LINK
3  3507		  =MAIN:20000A72	 VOC_LINK		 =	 ??010C	+ DESIRED_BASE_EQU
3  3508
3  3509								 IFNB	 <$SOURCE_ID_STORE>
3  3510	00000A83						   LABEL   $SOURCE_ID_STORE FAR
3  3511								 ENDIF
3  3512								 IFNB	 <>
3  3513								   DD	    + DESIRED_BASE_EQU
3  3514								 ELSE
3  3515	00000A83  20000A87					   DD	   ??010F + DESIRED_BASE_EQU
3  3516								 ENDIF
3  3517	00000A87			 ??010F:
2  3518								 POPDS	 <[DWORD PTR EDI + SOURCE_ID_VAR]>
3  3519	00000A87  8F 47	24					 POP	 [DWORD	PTR EDI	+ SOURCE_ID_VAR]
2  3520								 $NEXT
3  3521	00000A8A  AD						 LODSD				 ; fetch address
3  3522								 $JMP
4  3523	00000A8B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3524	00000A8D  FF E3						 JMP	 EBX			 ; execute
2  3525
2  3526					 ;  6.1.2216 SOURCE
2  3527					 ;  c-addr is the address of, and u is the number of characters	in
2  3528					 ;  the	input buffer.
2  3529					 ;  D: -- c-addr u
2  3530								 $DEF	 'SOURCE',$SOURCE,$ENTER
3  3531	00000A8F			 ??0110:
3  3532		  =MAIN:0A8F		 LASTWORD		 =	 ??0110
3  3533								 IFNB	 <>
3  3534								   DB
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 63
FKernel.asm



3  3535								 ELSE
3  3536	00000A8F  00						   DB	 VEF_USUAL
3  3537								 ENDIF
3  3538	00000A90  06						 DB	 ??0111	- $ - 1
3  3539	00000A91  53 4F	55 52 43 45				 DB	 'SOURCE'
3  3540	00000A97			 ??0111:
3  3541	00000A97  08						 DB	 ??0111	- ??0110
3  3542	00000A98  20000A72					 DD	 VOC_LINK
3  3543		  =MAIN:20000A8F	 VOC_LINK		 =	 ??0110	+ DESIRED_BASE_EQU
3  3544
3  3545								 IFNB	 <$SOURCE>
3  3546	00000A9C						   LABEL   $SOURCE FAR
3  3547								 ENDIF
3  3548								 IFNB	 <$ENTER>
3  3549	00000A9C  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
3  3550								 ELSE
3  3551								   DD	   ??0113 + DESIRED_BASE_EQU
3  3552								 ENDIF
3  3553	00000AA0			 ??0113:
2  3554								 CFETCH	 $BLK
3  3555								 CW	 $BLK
4  3556	00000AA0  2000235D					 DD	 $BLK +	DESIRED_BASE_EQU
3  3557								 CW	 $FETCH
4  3558	00000AA4  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3559								 CW	 $QDUP
3  3560	00000AA8  200018BE					 DD	 $QDUP + DESIRED_BASE_EQU
2  3561								 CQBR	 SOURCE_NOT_BLOCK
3  3562								 CW	 $QBRANCH
4  3563	00000AAC  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3564								 CW	 SOURCE_NOT_BLOCK
4  3565	00000AB0  20000AC8					 DD	 SOURCE_NOT_BLOCK + DESIRED_BASE_EQU
2  3566								   CW	   $BLOCK
3  3567	00000AB4  200023BB					 DD	 $BLOCK	+ DESIRED_BASE_EQU
2  3568								   CCLIT   1024
3  3569								 CW	 $LIT
4  3570	00000AB8  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  3571								 CC	 1024
4  3572	00000ABC  00000400					 DD	 1024
2  3573								 CBR	 SOURCE_EXIT
3  3574								 CW	 $BRANCH
4  3575	00000AC0  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3576								 CW	 SOURCE_EXIT
4  3577	00000AC4  20000B20					 DD	 SOURCE_EXIT + DESIRED_BASE_EQU
2  3578	00000AC8			 SOURCE_NOT_BLOCK:
2  3579								   CW	   $SOURCE_ID
3  3580	00000AC8  20000A66					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2  3581								   CW	   $ZEROLE
3  3582	00000ACC  20001EE7					 DD	 $ZEROLE + DESIRED_BASE_EQU
2  3583								   CQBR	   SOURCE_NOT_EVALUATE
3  3584								 CW	 $QBRANCH
4  3585	00000AD0  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3586								 CW	 SOURCE_NOT_EVALUATE
4  3587	00000AD4  20000AF0					 DD	 SOURCE_NOT_EVALUATE + DESIRED_BASE_EQU
2  3588								     CFETCH  $EVAL
3  3589								 CW	 $EVAL
4  3590	00000AD8  20000201					 DD	 $EVAL + DESIRED_BASE_EQU
3  3591								 CW	 $FETCH
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 64
FKernel.asm



4  3592	00000ADC  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3593								     CFETCH  $#EVAL
3  3594								 CW	 $#EVAL
4  3595	00000AE0  20000215					 DD	 $#EVAL	+ DESIRED_BASE_EQU
3  3596								 CW	 $FETCH
4  3597	00000AE4  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3598								   CBR	   SOURCE_NOT_EVALUATE_EXIT
3  3599								 CW	 $BRANCH
4  3600	00000AE8  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3601								 CW	 SOURCE_NOT_EVALUATE_EXIT
4  3602	00000AEC  20000B20					 DD	 SOURCE_NOT_EVALUATE_EXIT + DESIRED_BASE_EQU
2  3603	00000AF0			 SOURCE_NOT_EVALUATE:
2  3604								   CW	   $SOURCE_ID
3  3605	00000AF0  20000A66					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2  3606								   CW	   $ZEROEQ
3  3607	00000AF4  20001F09					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  3608								   CQBR	   SOURCE_NOT_USER
3  3609								 CW	 $QBRANCH
4  3610	00000AF8  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3611								 CW	 SOURCE_NOT_USER
4  3612	00000AFC  20000B14					 DD	 SOURCE_NOT_USER + DESIRED_BASE_EQU
2  3613								     CW	     $TIB
3  3614	00000B00  200001DB					 DD	 $TIB +	DESIRED_BASE_EQU
2  3615								     CFETCH  $#TIB
3  3616								 CW	 $#TIB
4  3617	00000B04  200001EE					 DD	 $#TIB + DESIRED_BASE_EQU
3  3618								 CW	 $FETCH
4  3619	00000B08  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3620								   CBR	   SOURCE_NOT_USER_EXIT
3  3621								 CW	 $BRANCH
4  3622	00000B0C  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3623								 CW	 SOURCE_NOT_USER_EXIT
4  3624	00000B10  20000B20					 DD	 SOURCE_NOT_USER_EXIT +	DESIRED_BASE_EQU
2  3625	00000B14			 SOURCE_NOT_USER:
2  3626								     CW	     $LINE
3  3627	00000B14  2000024C					 DD	 $LINE + DESIRED_BASE_EQU
2  3628								     CFETCH  $#LINE
3  3629								 CW	 $#LINE
4  3630	00000B18  20000260					 DD	 $#LINE	+ DESIRED_BASE_EQU
3  3631								 CW	 $FETCH
4  3632	00000B1C  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3633	00000B20			 SOURCE_NOT_USER_EXIT:
2  3634	00000B20			 SOURCE_NOT_EVALUATE_EXIT:
2  3635	00000B20			 SOURCE_EXIT:
2  3636								 CEXIT
3  3637								 CW	 $EXIT
4  3638	00000B20  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  3639
2  3640					 ;  6.2.2125 REFILL
2  3641								 $DEF	 'REFILL',$REFILL,$ENTER
3  3642	00000B24			 ??0114:
3  3643		  =MAIN:0B24		 LASTWORD		 =	 ??0114
3  3644								 IFNB	 <>
3  3645								   DB
3  3646								 ELSE
3  3647	00000B24  00						   DB	 VEF_USUAL
3  3648								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 65
FKernel.asm



3  3649	00000B25  06						 DB	 ??0115	- $ - 1
3  3650	00000B26  52 45	46 49 4C 4C				 DB	 'REFILL'
3  3651	00000B2C			 ??0115:
3  3652	00000B2C  08						 DB	 ??0115	- ??0114
3  3653	00000B2D  20000A8F					 DD	 VOC_LINK
3  3654		  =MAIN:20000B24	 VOC_LINK		 =	 ??0114	+ DESIRED_BASE_EQU
3  3655
3  3656								 IFNB	 <$REFILL>
3  3657	00000B31						   LABEL   $REFILL FAR
3  3658								 ENDIF
3  3659								 IFNB	 <$ENTER>
3  3660	00000B31  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
3  3661								 ELSE
3  3662								   DD	   ??0117 + DESIRED_BASE_EQU
3  3663								 ENDIF
3  3664	00000B35			 ??0117:
2  3665								 CFETCH	 $BLK
3  3666								 CW	 $BLK
4  3667	00000B35  2000235D					 DD	 $BLK +	DESIRED_BASE_EQU
3  3668								 CW	 $FETCH
4  3669	00000B39  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3670								 CW	 $QDUP
3  3671	00000B3D  200018BE					 DD	 $QDUP + DESIRED_BASE_EQU
2  3672								 CQBR	 REFILL_NOT_BLOCK
3  3673								 CW	 $QBRANCH
4  3674	00000B41  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3675								 CW	 REFILL_NOT_BLOCK
4  3676	00000B45  20000B6D					 DD	 REFILL_NOT_BLOCK + DESIRED_BASE_EQU
2  3677								   CW	   $1ADD
3  3678	00000B49  20001C4C					 DD	 $1ADD + DESIRED_BASE_EQU
2  3679								   CSTORE  $BLK
3  3680								 CW	 $BLK
4  3681	00000B4D  2000235D					 DD	 $BLK +	DESIRED_BASE_EQU
3  3682								 CW	 $STORE
4  3683	00000B51  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3684								   CW	   $ZERO
3  3685	00000B55  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2  3686								   CSTORE  $TOIN
3  3687								 CW	 $TOIN
4  3688	00000B59  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3  3689								 CW	 $STORE
4  3690	00000B5D  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3691								   CW	   $TRUE
3  3692	00000B61  20001E4A					 DD	 $TRUE + DESIRED_BASE_EQU
2  3693								 CBR	 REFILL_EXIT
3  3694								 CW	 $BRANCH
4  3695	00000B65  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3696								 CW	 REFILL_EXIT
4  3697	00000B69  20000BF5					 DD	 REFILL_EXIT + DESIRED_BASE_EQU
2  3698	00000B6D			 REFILL_NOT_BLOCK:
2  3699								   CW	   $SOURCE_ID
3  3700	00000B6D  20000A66					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2  3701								   CW	   $QDUP
3  3702	00000B71  200018BE					 DD	 $QDUP + DESIRED_BASE_EQU
2  3703								   CQBR	   REFILL_FROM_USER
3  3704								 CW	 $QBRANCH
4  3705	00000B75  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 66
FKernel.asm



3  3706								 CW	 REFILL_FROM_USER
4  3707	00000B79  20000BCD					 DD	 REFILL_FROM_USER + DESIRED_BASE_EQU
2  3708								     CW	     $ZEROLE
3  3709	00000B7D  20001EE7					 DD	 $ZEROLE + DESIRED_BASE_EQU
2  3710								     CQBR    REFILL_FROM_FILE
3  3711								 CW	 $QBRANCH
4  3712	00000B81  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3713								 CW	 REFILL_FROM_FILE
4  3714	00000B85  20000B95					 DD	 REFILL_FROM_FILE + DESIRED_BASE_EQU
2  3715								       CW      $FALSE
3  3716	00000B89  20001E34					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  3717								     CBR     REFILL_EVAL_EXIT
3  3718								 CW	 $BRANCH
4  3719	00000B8D  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3720								 CW	 REFILL_EVAL_EXIT
4  3721	00000B91  20000BC5					 DD	 REFILL_EVAL_EXIT + DESIRED_BASE_EQU
2  3722	00000B95			 REFILL_FROM_FILE:
2  3723								       CW      $LINE
3  3724	00000B95  2000024C					 DD	 $LINE + DESIRED_BASE_EQU
2  3725								       CCLIT   MAX_LINE_LENGTH
3  3726								 CW	 $LIT
4  3727	00000B99  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  3728								 CC	 MAX_LINE_LENGTH
4  3729	00000B9D  00000400					 DD	 MAX_LINE_LENGTH
2  3730								       CW      $SOURCE_ID
3  3731	00000BA1  20000A66					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2  3732								       CW      $READ_LINE
3  3733	00000BA5  20002B5B					 DD	 $READ_LINE + DESIRED_BASE_EQU
2  3734								       CW      $DROP
3  3735	00000BA9  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  3736								       CW      $SWAP
3  3737	00000BAD  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  3738								       CSTORE  $#LINE
3  3739								 CW	 $#LINE
4  3740	00000BB1  20000260					 DD	 $#LINE	+ DESIRED_BASE_EQU
3  3741								 CW	 $STORE
4  3742	00000BB5  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3743								       CW      $ZERO
3  3744	00000BB9  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2  3745								       CSTORE  $TOIN
3  3746								 CW	 $TOIN
4  3747	00000BBD  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3  3748								 CW	 $STORE
4  3749	00000BC1  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3750	00000BC5			 REFILL_EVAL_EXIT:
2  3751								   CBR	   REFILL_EXIT
3  3752								 CW	 $BRANCH
4  3753	00000BC5  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3754								 CW	 REFILL_EXIT
4  3755	00000BC9  20000BF5					 DD	 REFILL_EXIT + DESIRED_BASE_EQU
2  3756	00000BCD			 REFILL_FROM_USER:
2  3757								     CW	     $TIB
3  3758	00000BCD  200001DB					 DD	 $TIB +	DESIRED_BASE_EQU
2  3759								     CCLIT   MAX_TIB_LENGTH
3  3760								 CW	 $LIT
4  3761	00000BD1  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  3762								 CC	 MAX_TIB_LENGTH
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 67
FKernel.asm



4  3763	00000BD5  00000400					 DD	 MAX_TIB_LENGTH
2  3764								     CW	     $ACCEPT
3  3765	00000BD9  20000850					 DD	 $ACCEPT + DESIRED_BASE_EQU
2  3766								     CSTORE  $#TIB
3  3767								 CW	 $#TIB
4  3768	00000BDD  200001EE					 DD	 $#TIB + DESIRED_BASE_EQU
3  3769								 CW	 $STORE
4  3770	00000BE1  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3771								     CW	     $ZERO
3  3772	00000BE5  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2  3773								     CSTORE  $TOIN
3  3774								 CW	 $TOIN
4  3775	00000BE9  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3  3776								 CW	 $STORE
4  3777	00000BED  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3778								     CW	     $TRUE
3  3779	00000BF1  20001E4A					 DD	 $TRUE + DESIRED_BASE_EQU
2  3780	00000BF5			 REFILL_EXIT:
2  3781								 CEXIT
3  3782								 CW	 $EXIT
4  3783	00000BF5  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  3784
2  3785					 ;  INPUT>R
2  3786								 $COLON	 'INPUT>R',$INPUTTOR,VEF_COMPILE_ONLY
3  3787								 $DEF	 'INPUT>R',$INPUTTOR,$ENTER,VEF_COMPILE_ONLY
4  3788	00000BF9			 ??0118:
4  3789		  =MAIN:0BF9		 LASTWORD		 =	 ??0118
4  3790								 IFNB	 <VEF_COMPILE_ONLY>
4  3791	00000BF9  04						   DB	 VEF_COMPILE_ONLY
4  3792								 ELSE
4  3793								   DB	 VEF_USUAL
4  3794								 ENDIF
4  3795	00000BFA  07						 DB	 ??0119	- $ - 1
4  3796	00000BFB  49 4E	50 55 54 3E 52				 DB	 'INPUT>R'
4  3797	00000C02			 ??0119:
4  3798	00000C02  09						 DB	 ??0119	- ??0118
4  3799	00000C03  20000B24					 DD	 VOC_LINK
4  3800		  =MAIN:20000BF9	 VOC_LINK		 =	 ??0118	+ DESIRED_BASE_EQU
4  3801
4  3802								 IFNB	 <$INPUTTOR>
4  3803	00000C07						   LABEL   $INPUTTOR FAR
4  3804								 ENDIF
4  3805								 IFNB	 <$ENTER>
4  3806	00000C07  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  3807								 ELSE
4  3808								   DD	   ??011B + DESIRED_BASE_EQU
4  3809								 ENDIF
4  3810	00000C0B			 ??011B:
2  3811								 CW	 $RFROM
3  3812	00000C0B  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  3813								 CW	 $SOURCE_ID
3  3814	00000C0F  20000A66					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2  3815								 CW	 $TOR
3  3816	00000C13  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  3817								 CFETCH	 $BLK
3  3818								 CW	 $BLK
4  3819	00000C17  2000235D					 DD	 $BLK +	DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 68
FKernel.asm



3  3820								 CW	 $FETCH
4  3821	00000C1B  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3822								 CW	 $TOR
3  3823	00000C1F  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  3824								 CFETCH	 $TOIN
3  3825								 CW	 $TOIN
4  3826	00000C23  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3  3827								 CW	 $FETCH
4  3828	00000C27  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3829								 CW	 $TOR
3  3830	00000C2B  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  3831								 CW	 $CURRENT_FILE_POSITION
3  3832	00000C2F  20000239					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2  3833								 CW	 $2FETCH
3  3834	00000C33  20001FF7					 DD	 $2FETCH + DESIRED_BASE_EQU
2  3835								 CW	 $2TOR
3  3836	00000C37  20001AF9					 DD	 $2TOR + DESIRED_BASE_EQU
2  3837								 CW	 $TOR
3  3838	00000C3B  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  3839								 CEXIT
3  3840								 CW	 $EXIT
4  3841	00000C3F  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  3842
2  3843					 ;  INPUT<R
2  3844								 $COLON	 'INPUT<R',$INPUTFROMR,VEF_COMPILE_ONLY
3  3845								 $DEF	 'INPUT<R',$INPUTFROMR,$ENTER,VEF_COMPILE_ONLY
4  3846	00000C43			 ??011C:
4  3847		  =MAIN:0C43		 LASTWORD		 =	 ??011C
4  3848								 IFNB	 <VEF_COMPILE_ONLY>
4  3849	00000C43  04						   DB	 VEF_COMPILE_ONLY
4  3850								 ELSE
4  3851								   DB	 VEF_USUAL
4  3852								 ENDIF
4  3853	00000C44  07						 DB	 ??011D	- $ - 1
4  3854	00000C45  49 4E	50 55 54 3C 52				 DB	 'INPUT<R'
4  3855	00000C4C			 ??011D:
4  3856	00000C4C  09						 DB	 ??011D	- ??011C
4  3857	00000C4D  20000BF9					 DD	 VOC_LINK
4  3858		  =MAIN:20000C43	 VOC_LINK		 =	 ??011C	+ DESIRED_BASE_EQU
4  3859
4  3860								 IFNB	 <$INPUTFROMR>
4  3861	00000C51						   LABEL   $INPUTFROMR FAR
4  3862								 ENDIF
4  3863								 IFNB	 <$ENTER>
4  3864	00000C51  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  3865								 ELSE
4  3866								   DD	   ??011F + DESIRED_BASE_EQU
4  3867								 ENDIF
4  3868	00000C55			 ??011F:
2  3869								 CW	 $RFROM
3  3870	00000C55  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  3871								 CW	 $2RFROM
3  3872	00000C59  20001B1A					 DD	 $2RFROM + DESIRED_BASE_EQU
2  3873								 CW	 $RFROM
3  3874	00000C5D  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  3875								 CW	 $DUP
3  3876	00000C61  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 69
FKernel.asm



2  3877								 CSTORE	 $TOIN
3  3878								 CW	 $TOIN
4  3879	00000C65  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3  3880								 CW	 $STORE
4  3881	00000C69  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3882								 CW	 $STOD
3  3883	00000C6D  20002A4E					 DD	 $STOD + DESIRED_BASE_EQU
2  3884								 CW	 $DADD
3  3885	00000C71  2000284F					 DD	 $DADD + DESIRED_BASE_EQU
2  3886								 CW	 $CURRENT_FILE_POSITION
3  3887	00000C75  20000239					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2  3888								 CW	 $2STORE
3  3889	00000C79  20001FDF					 DD	 $2STORE + DESIRED_BASE_EQU
2  3890								 CW	 $RFROM
3  3891	00000C7D  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  3892								 CSTORE	 $BLK
3  3893								 CW	 $BLK
4  3894	00000C81  2000235D					 DD	 $BLK +	DESIRED_BASE_EQU
3  3895								 CW	 $STORE
4  3896	00000C85  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3897								 CW	 $RFROM
3  3898	00000C89  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  3899								 CW	 $DUP
3  3900	00000C8D  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  3901								 CW	 $SOURCE_ID_STORE
3  3902	00000C91  20000A83					 DD	 $SOURCE_ID_STORE + DESIRED_BASE_EQU
2  3903								 CW	 $ZEROGR
3  3904	00000C95  20001F4E					 DD	 $ZEROGR + DESIRED_BASE_EQU
2  3905								 CQBR	 INPUTFROMR_EXIT
3  3906								 CW	 $QBRANCH
4  3907	00000C99  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3908								 CW	 INPUTFROMR_EXIT
4  3909	00000C9D  20000CB9					 DD	 INPUTFROMR_EXIT + DESIRED_BASE_EQU
2  3910								   CW	   $CURRENT_FILE_POSITION
3  3911	00000CA1  20000239					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2  3912								   CW	   $2FETCH
3  3913	00000CA5  20001FF7					 DD	 $2FETCH + DESIRED_BASE_EQU
2  3914								   CW	   $SOURCE_ID
3  3915	00000CA9  20000A66					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2  3916								   CW	   $REPOSITION_FILE
3  3917	00000CAD  200006E8					 DD	 $REPOSITION_FILE + DESIRED_BASE_EQU
2  3918								   CW	   $REFILL
3  3919	00000CB1  20000B31					 DD	 $REFILL + DESIRED_BASE_EQU
2  3920								   CW	   $2DROP
3  3921	00000CB5  200018DB					 DD	 $2DROP	+ DESIRED_BASE_EQU
2  3922	00000CB9			 INPUTFROMR_EXIT:
2  3923								 CW	 $TOR
3  3924	00000CB9  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  3925								 CEXIT
3  3926								 CW	 $EXIT
4  3927	00000CBD  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  3928
2  3929
1  3930								 INCLUDE "thread.inc"
2  3931					 ;******************************************************************************
2  3932					 ;
2  3933					 ;  thread.inc
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 70
FKernel.asm



2  3934					 ;  IKForth
2  3935					 ;
2  3936					 ;  Copyright (C) 1999-2003 Illya Kysil
2  3937					 ;
2  3938					 ;******************************************************************************
2  3939					 ;  THREAD & support words
2  3940					 ;******************************************************************************
2  3941
2  3942					 ;  THREAD-EXIT
2  3943								 $DEF	 'THREAD-EXIT',$THREAD_EXIT
3  3944	00000CC1			 ??0120:
3  3945		  =MAIN:0CC1		 LASTWORD		 =	 ??0120
3  3946								 IFNB	 <>
3  3947								   DB
3  3948								 ELSE
3  3949	00000CC1  00						   DB	 VEF_USUAL
3  3950								 ENDIF
3  3951	00000CC2  0B						 DB	 ??0121	- $ - 1
3  3952	00000CC3  54 48	52 45 41 44 2D+				 DB	 'THREAD-EXIT'
   3953		  45 58	49 54
3  3954	00000CCE			 ??0121:
3  3955	00000CCE  0D						 DB	 ??0121	- ??0120
3  3956	00000CCF  20000C43					 DD	 VOC_LINK
3  3957		  =MAIN:20000CC1	 VOC_LINK		 =	 ??0120	+ DESIRED_BASE_EQU
3  3958
3  3959								 IFNB	 <$THREAD_EXIT>
3  3960	00000CD3						   LABEL   $THREAD_EXIT	FAR
3  3961								 ENDIF
3  3962								 IFNB	 <>
3  3963								   DD	    + DESIRED_BASE_EQU
3  3964								 ELSE
3  3965	00000CD3  20000CD7					   DD	   ??0123 + DESIRED_BASE_EQU
3  3966								 ENDIF
3  3967	00000CD7			 ??0123:
2  3968	00000CD7  8B 77	08					 MOV	 ESI,[DWORD PTR	EDI + ESI_VAR]
2  3969	00000CDA  8B 6F	0C					 MOV	 EBP,[DWORD PTR	EDI + EBP_VAR]
2  3970	00000CDD  8B 67	14					 MOV	 ESP,[DWORD PTR	EDI + ESP_VAR]
2  3971	00000CE0  8B 5F	10					 MOV	 EBX,[DWORD PTR	EDI + EBX_VAR]
2  3972					 ; remove per-thread exception handler data
2  3973								 POPDS	 <[DWORD PTR FS:0]>
3  3974	00000CE3  64: 67| 8F 06	0000				 POP	 [DWORD	PTR FS:0]
2  3975	00000CE9  83 C4	04					 ADD	 ESP,4
2  3976
2  3977								 PUSHDS	 <[DWORD PTR EDI + RETURN_ADDR_VAR]>
3  3978	00000CEC  FF 37						 PUSH	 [DWORD	PTR EDI	+ RETURN_ADDR_VAR]
2  3979	00000CEE  8B 7F	04					 MOV	 EDI,[DWORD PTR	EDI + EDI_VAR]
2  3980	00000CF1  C3						 RET
2  3981
2  3982	00000CF2			 THREAD_PROC:
2  3983								 POPDS	 EDX			 ; return address
3  3984	00000CF2  5A						 POP	 EDX
2  3985	00000CF3  8B C7						 MOV	 EAX,EDI
2  3986								 POPDS	 EDI			 ; user	data pointer
3  3987	00000CF5  5F						 POP	 EDI
2  3988								 POPDS	 ECX			 ; xt
3  3989	00000CF6  59						 POP	 ECX
2  3990
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 71
FKernel.asm



2  3991					 ; setup per-thread exception handler
2  3992								 PUSHDS	 <OFFSET SEH_HANDLER + DESIRED_BASE_EQU>
3  3993	00000CF7  68 20000D38					 PUSH	 OFFSET	SEH_HANDLER + DESIRED_BASE_EQU
2  3994								 PUSHDS	 <[DWORD PTR FS:0]>
3  3995	00000CFC  64: 67| FF 36	0000				 PUSH	 [DWORD	PTR FS:0]
2  3996	00000D02  64: 67| 89 26	0000				 MOV	 [DWORD	PTR FS:0],ESP
2  3997
2  3998	00000D08  89 17						 MOV	 [DWORD	PTR EDI	+ RETURN_ADDR_VAR],EDX
2  3999	00000D0A  89 47	04					 MOV	 [DWORD	PTR EDI	+ EDI_VAR],EAX
2  4000	00000D0D  89 77	08					 MOV	 [DWORD	PTR EDI	+ ESI_VAR],ESI
2  4001	00000D10  89 6F	0C					 MOV	 [DWORD	PTR EDI	+ EBP_VAR],EBP
2  4002	00000D13  89 5F	10					 MOV	 [DWORD	PTR EDI	+ EBX_VAR],EBX
2  4003	00000D16  8B EF						 MOV	 EBP,EDI
2  4004	00000D18  81 C5	00002268				 ADD	 EBP,RSTACK_VAR
2  4005	00000D1E  89 67	14					 MOV	 [DWORD	PTR EDI	+ ESP_VAR],ESP
2  4006								 PUSHDS	 ECX
3  4007	00000D21  51						 PUSH	 ECX
2  4008	00000D22  BE 20000D2C					 MOV	 ESI,OFFSET DO_THREAD +	DESIRED_BASE_EQU
2  4009								 $NEXT
3  4010	00000D27  AD						 LODSD				 ; fetch address
3  4011								 $JMP
4  4012	00000D28  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  4013	00000D2A  FF E3						 JMP	 EBX			 ; execute
2  4014	00000D2C			 DO_THREAD:
2  4015								 CW	 $CATCH
3  4016	00000D2C  20002A67					 DD	 $CATCH	+ DESIRED_BASE_EQU
2  4017								 CW	 $DROP
3  4018	00000D30  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  4019								 CW	 $THREAD_EXIT
3  4020	00000D34  20000CD3					 DD	 $THREAD_EXIT +	DESIRED_BASE_EQU
2  4021
2  4022	00000D38			 SEH_HANDLER:
2  4023	00000D38  55						 PUSH	 EBP
2  4024	00000D39  8B EC						 MOV	 EBP,ESP
2  4025	00000D3B  53						 PUSH	 EBX
2  4026	00000D3C  57						 PUSH	 EDI
2  4027	00000D3D  56						 PUSH	 ESI
2  4028	00000D3E  8B 5D	08					 MOV	 EBX,[DWORD PTR	EBP + 08h] ; get pointer to ExceptionRecord
2  4029	00000D41  8B 03						 MOV	 EAX,[DWORD PTR	EBX]	   ; get exception code
2  4030	00000D43  8B 5D	10					 MOV	 EBX,[DWORD PTR	EBP + 10h] ; get pointer to CONTEXT
2  4031					 ; store CONTEXT
2  4032	00000D46  B9 000000CC					 MOV	 ECX,0CCh
2  4033	00000D4B  8B F3						 MOV	 ESI,EBX
2  4034					 ; load	EDI with UDP
2  4035	00000D4D  8B BB	0000009C				 MOV	 EDI,[DWORD PTR	EBX + 39 * 4]
2  4036	00000D53  81 C7	00000C64				 ADD	 EDI,WIN32_EXCEPTION_CONTEXT_VAR
2  4037	00000D59  F3> A4				 REP	 MOVSB
2  4038					 ; fixup CONTEXT.EIP
2  4039	00000D5B  C7 83	000000B8      +				 MOV	 [DWORD	PTR EBX	+ 46 * 4],OFFSET DO_SEH	+ DESIRED_BASE_EQU
   4040		  20000D77
2  4041					 ; fixup CONTEXT.EAX (=	Win32 exception	code)
2  4042	00000D65  89 83	000000B0				 MOV	 [DWORD	PTR EBX	+ 44 * 4],EAX
2  4043					 ; eax=0 reload	context	& continue execution
2  4044	00000D6B  B8 00000000					 MOV	 EAX,0
2  4045	00000D70  5E						 POP	 ESI
2  4046	00000D71  5F						 POP	 EDI
2  4047	00000D72  5B						 POP	 EBX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 72
FKernel.asm



2  4048	00000D73  8B E5						 MOV	 ESP,EBP
2  4049	00000D75  5D						 POP	 EBP
2  4050	00000D76  C3						 RET
2  4051	00000D77			 DO_SEH:
2  4052								 PUSHDS	 EAX
3  4053	00000D77  50						 PUSH	 EAX
2  4054	00000D78  BE 20000D82					 MOV	 ESI,OFFSET DO_FORTH_SEH + DESIRED_BASE_EQU
2  4055								 $NEXT
3  4056	00000D7D  AD						 LODSD				 ; fetch address
3  4057								 $JMP
4  4058	00000D7E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  4059	00000D80  FF E3						 JMP	 EBX			 ; execute
2  4060	00000D82			 DO_FORTH_SEH:
2  4061								 CW	 $SEH_HANDLER
3  4062	00000D82  20000DB8					 DD	 $SEH_HANDLER +	DESIRED_BASE_EQU
2  4063								 CW	 $THROW
3  4064	00000D86  20002AFD					 DD	 $THROW	+ DESIRED_BASE_EQU
2  4065
2  4066					 ;  (SEH-HANDLER)
2  4067					 ;  D: --
2  4068								 $COLON	 '(SEH-HANDLER)',$PSEH_HANDLER
3  4069								 $DEF	 '(SEH-HANDLER)',$PSEH_HANDLER,$ENTER,
4  4070	00000D8A			 ??0124:
4  4071		  =MAIN:0D8A		 LASTWORD		 =	 ??0124
4  4072								 IFNB	 <>
4  4073								   DB
4  4074								 ELSE
4  4075	00000D8A  00						   DB	 VEF_USUAL
4  4076								 ENDIF
4  4077	00000D8B  0D						 DB	 ??0125	- $ - 1
4  4078	00000D8C  28 53	45 48 2D 48 41+				 DB	 '(SEH-HANDLER)'
   4079		  4E 44	4C 45 52 29
4  4080	00000D99			 ??0125:
4  4081	00000D99  0F						 DB	 ??0125	- ??0124
4  4082	00000D9A  20000CC1					 DD	 VOC_LINK
4  4083		  =MAIN:20000D8A	 VOC_LINK		 =	 ??0124	+ DESIRED_BASE_EQU
4  4084
4  4085								 IFNB	 <$PSEH_HANDLER>
4  4086	00000D9E						   LABEL   $PSEH_HANDLER FAR
4  4087								 ENDIF
4  4088								 IFNB	 <$ENTER>
4  4089	00000D9E  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4090								 ELSE
4  4091								   DD	   ??0127 + DESIRED_BASE_EQU
4  4092								 ENDIF
4  4093	00000DA2			 ??0127:
2  4094								 CEXIT
3  4095								 CW	 $EXIT
4  4096	00000DA2  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4097
2  4098					 ;  SEH-HANDLER
2  4099								 $DEFER	 'SEH-HANDLER',$SEH_HANDLER
3  4100								 $DEF	 'SEH-HANDLER',$SEH_HANDLER,$DODEFER,
4  4101	00000DA6			 ??0128:
4  4102		  =MAIN:0DA6		 LASTWORD		 =	 ??0128
4  4103								 IFNB	 <>
4  4104								   DB
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 73
FKernel.asm



4  4105								 ELSE
4  4106	00000DA6  00						   DB	 VEF_USUAL
4  4107								 ENDIF
4  4108	00000DA7  0B						 DB	 ??0129	- $ - 1
4  4109	00000DA8  53 45	48 2D 48 41 4E+				 DB	 'SEH-HANDLER'
   4110		  44 4C	45 52
4  4111	00000DB3			 ??0129:
4  4112	00000DB3  0D						 DB	 ??0129	- ??0128
4  4113	00000DB4  20000D8A					 DD	 VOC_LINK
4  4114		  =MAIN:20000DA6	 VOC_LINK		 =	 ??0128	+ DESIRED_BASE_EQU
4  4115
4  4116								 IFNB	 <$SEH_HANDLER>
4  4117	00000DB8						   LABEL   $SEH_HANDLER	FAR
4  4118								 ENDIF
4  4119								 IFNB	 <$DODEFER>
4  4120	00000DB8  2000014A					   DD	   $DODEFER + DESIRED_BASE_EQU
4  4121								 ELSE
4  4122								   DD	   ??012B + DESIRED_BASE_EQU
4  4123								 ENDIF
4  4124	00000DBC			 ??012B:
2  4125								 CW	 $PSEH_HANDLER
3  4126	00000DBC  20000D9E					 DD	 $PSEH_HANDLER + DESIRED_BASE_EQU
2  4127
2  4128								 $USER	 'WIN32-EXCEPTION-CONTEXT',$WIN32_EXCEPTION_CONTEXT
3  4129								 $DEF	 'WIN32-EXCEPTION-CONTEXT',$WIN32_EXCEPTION_CONTEXT,$DOUSER
4  4130	00000DC0			 ??012C:
4  4131		  =MAIN:0DC0		 LASTWORD		 =	 ??012C
4  4132								 IFNB	 <>
4  4133								   DB
4  4134								 ELSE
4  4135	00000DC0  00						   DB	 VEF_USUAL
4  4136								 ENDIF
4  4137	00000DC1  17						 DB	 ??012D	- $ - 1
4  4138	00000DC2  57 49	4E 33 32 2D 45+				 DB	 'WIN32-EXCEPTION-CONTEXT'
   4139		  58 43	45 50 54 49 4F+
   4140		  4E 2D	43 4F 4E 54 45+
   4141		  58 54
4  4142	00000DD9			 ??012D:
4  4143	00000DD9  19						 DB	 ??012D	- ??012C
4  4144	00000DDA  20000DA6					 DD	 VOC_LINK
4  4145		  =MAIN:20000DC0	 VOC_LINK		 =	 ??012C	+ DESIRED_BASE_EQU
4  4146
4  4147								 IFNB	 <$WIN32_EXCEPTION_CONTEXT>
4  4148	00000DDE						   LABEL   $WIN32_EXCEPTION_CONTEXT FAR
4  4149								 ENDIF
4  4150								 IFNB	 <$DOUSER>
4  4151	00000DDE  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  4152								 ELSE
4  4153								   DD	   ??012F + DESIRED_BASE_EQU
4  4154								 ENDIF
4  4155	00000DE2			 ??012F:
2  4156								 CC	 WIN32_EXCEPTION_CONTEXT_VAR
3  4157	00000DE2  00000C64					 DD	 WIN32_EXCEPTION_CONTEXT_VAR
2  4158
2  4159
1  4160								 INCLUDE "int_comp.inc"
2  4161					 ;******************************************************************************
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 74
FKernel.asm



2  4162					 ;
2  4163					 ;  int_comp.inc
2  4164					 ;  IKForth
2  4165					 ;
2  4166					 ;  Copyright (C) 1999-2003 Illya Kysil
2  4167					 ;
2  4168					 ;******************************************************************************
2  4169					 ;  Interpretation/compilation time helper words
2  4170					 ;******************************************************************************
2  4171
2  4172					 ;  IS-INT/COMP?
2  4173								 $COLON	 'IS-INT/COMP?',$IS_INT_COMPQ
3  4174								 $DEF	 'IS-INT/COMP?',$IS_INT_COMPQ,$ENTER,
4  4175	00000DE6			 ??0130:
4  4176		  =MAIN:0DE6		 LASTWORD		 =	 ??0130
4  4177								 IFNB	 <>
4  4178								   DB
4  4179								 ELSE
4  4180	00000DE6  00						   DB	 VEF_USUAL
4  4181								 ENDIF
4  4182	00000DE7  0C						 DB	 ??0131	- $ - 1
4  4183	00000DE8  49 53	2D 49 4E 54 2F+				 DB	 'IS-INT/COMP?'
   4184		  43 4F	4D 50 3F
4  4185	00000DF4			 ??0131:
4  4186	00000DF4  0E						 DB	 ??0131	- ??0130
4  4187	00000DF5  20000DC0					 DD	 VOC_LINK
4  4188		  =MAIN:20000DE6	 VOC_LINK		 =	 ??0130	+ DESIRED_BASE_EQU
4  4189
4  4190								 IFNB	 <$IS_INT_COMPQ>
4  4191	00000DF9						   LABEL   $IS_INT_COMPQ FAR
4  4192								 ENDIF
4  4193								 IFNB	 <$ENTER>
4  4194	00000DF9  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4195								 ELSE
4  4196								   DD	   ??0133 + DESIRED_BASE_EQU
4  4197								 ENDIF
4  4198	00000DFD			 ??0133:
2  4199								 CW	 $FETCH
3  4200	00000DFD  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4201								 CWLIT	 $PDO_INT_COMP
3  4202								 CW	 $LIT
4  4203	00000E01  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  4204								 CW	 $PDO_INT_COMP
4  4205	00000E05  20000169					 DD	 $PDO_INT_COMP + DESIRED_BASE_EQU
2  4206								 CW	 $EQ
3  4207	00000E09  20001EA1					 DD	 $EQ + DESIRED_BASE_EQU
2  4208								 CEXIT
3  4209								 CW	 $EXIT
4  4210	00000E0D  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4211
2  4212					 ;  INT/COMP>INT
2  4213								 $COLON	 'INT/COMP>INT',$INT_COMP_TO_INT
3  4214								 $DEF	 'INT/COMP>INT',$INT_COMP_TO_INT,$ENTER,
4  4215	00000E11			 ??0134:
4  4216		  =MAIN:0E11		 LASTWORD		 =	 ??0134
4  4217								 IFNB	 <>
4  4218								   DB
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 75
FKernel.asm



4  4219								 ELSE
4  4220	00000E11  00						   DB	 VEF_USUAL
4  4221								 ENDIF
4  4222	00000E12  0C						 DB	 ??0135	- $ - 1
4  4223	00000E13  49 4E	54 2F 43 4F 4D+				 DB	 'INT/COMP>INT'
   4224		  50 3E	49 4E 54
4  4225	00000E1F			 ??0135:
4  4226	00000E1F  0E						 DB	 ??0135	- ??0134
4  4227	00000E20  20000DE6					 DD	 VOC_LINK
4  4228		  =MAIN:20000E11	 VOC_LINK		 =	 ??0134	+ DESIRED_BASE_EQU
4  4229
4  4230								 IFNB	 <$INT_COMP_TO_INT>
4  4231	00000E24						   LABEL   $INT_COMP_TO_INT FAR
4  4232								 ENDIF
4  4233								 IFNB	 <$ENTER>
4  4234	00000E24  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4235								 ELSE
4  4236								   DD	   ??0137 + DESIRED_BASE_EQU
4  4237								 ENDIF
4  4238	00000E28			 ??0137:
2  4239								 CW	 $TOBODY
3  4240	00000E28  20002973					 DD	 $TOBODY + DESIRED_BASE_EQU
2  4241								 CW	 $FETCH
3  4242	00000E2C  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4243								 CEXIT
3  4244								 CW	 $EXIT
4  4245	00000E30  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4246
2  4247					 ;  INT/COMP>COMP
2  4248								 $COLON	 'INT/COMP>COMP',$INT_COMP_TO_COMP
3  4249								 $DEF	 'INT/COMP>COMP',$INT_COMP_TO_COMP,$ENTER,
4  4250	00000E34			 ??0138:
4  4251		  =MAIN:0E34		 LASTWORD		 =	 ??0138
4  4252								 IFNB	 <>
4  4253								   DB
4  4254								 ELSE
4  4255	00000E34  00						   DB	 VEF_USUAL
4  4256								 ENDIF
4  4257	00000E35  0D						 DB	 ??0139	- $ - 1
4  4258	00000E36  49 4E	54 2F 43 4F 4D+				 DB	 'INT/COMP>COMP'
   4259		  50 3E	43 4F 4D 50
4  4260	00000E43			 ??0139:
4  4261	00000E43  0F						 DB	 ??0139	- ??0138
4  4262	00000E44  20000E11					 DD	 VOC_LINK
4  4263		  =MAIN:20000E34	 VOC_LINK		 =	 ??0138	+ DESIRED_BASE_EQU
4  4264
4  4265								 IFNB	 <$INT_COMP_TO_COMP>
4  4266	00000E48						   LABEL   $INT_COMP_TO_COMP FAR
4  4267								 ENDIF
4  4268								 IFNB	 <$ENTER>
4  4269	00000E48  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4270								 ELSE
4  4271								   DD	   ??013B + DESIRED_BASE_EQU
4  4272								 ENDIF
4  4273	00000E4C			 ??013B:
2  4274								 CW	 $TOBODY
3  4275	00000E4C  20002973					 DD	 $TOBODY + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 76
FKernel.asm



2  4276								 CW	 $CELLADD
3  4277	00000E50  20002040					 DD	 $CELLADD + DESIRED_BASE_EQU
2  4278								 CW	 $FETCH
3  4279	00000E54  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4280								 CEXIT
3  4281								 CW	 $EXIT
4  4282	00000E58  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4283
2  4284					 ;  COMP'
2  4285								 $COLON	 'COMP''',$COMP_TICK
3  4286								 $DEF	 'COMP''',$COMP_TICK,$ENTER,
4  4287	00000E5C			 ??013C:
4  4288		  =MAIN:0E5C		 LASTWORD		 =	 ??013C
4  4289								 IFNB	 <>
4  4290								   DB
4  4291								 ELSE
4  4292	00000E5C  00						   DB	 VEF_USUAL
4  4293								 ENDIF
4  4294	00000E5D  05						 DB	 ??013D	- $ - 1
4  4295	00000E5E  43 4F	4D 50 27				 DB	 'COMP'''
4  4296	00000E63			 ??013D:
4  4297	00000E63  07						 DB	 ??013D	- ??013C
4  4298	00000E64  20000E34					 DD	 VOC_LINK
4  4299		  =MAIN:20000E5C	 VOC_LINK		 =	 ??013C	+ DESIRED_BASE_EQU
4  4300
4  4301								 IFNB	 <$COMP_TICK>
4  4302	00000E68						   LABEL   $COMP_TICK FAR
4  4303								 ENDIF
4  4304								 IFNB	 <$ENTER>
4  4305	00000E68  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4306								 ELSE
4  4307								   DD	   ??013F + DESIRED_BASE_EQU
4  4308								 ENDIF
4  4309	00000E6C			 ??013F:
2  4310								 CW	 $BL
3  4311	00000E6C  200003BA					 DD	 $BL + DESIRED_BASE_EQU
2  4312								 CW	 $WORD
3  4313	00000E70  200024CA					 DD	 $WORD + DESIRED_BASE_EQU
2  4314								 CW	 $FIND
3  4315	00000E74  200021C6					 DD	 $FIND + DESIRED_BASE_EQU
2  4316								 CW	 $DUP
3  4317	00000E78  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  4318								 CW	 $ZEROEQ
3  4319	00000E7C  20001F09					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  4320								 CQBR	 CT_FOUND
3  4321								 CW	 $QBRANCH
4  4322	00000E80  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4323								 CW	 CT_FOUND
4  4324	00000E84  20000E94					 DD	 CT_FOUND + DESIRED_BASE_EQU
2  4325								   CTHROW  -13
3  4326								 CCLIT	 -13
4  4327								 CW	 $LIT
5  4328	00000E88  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
4  4329								 CC	 -13
5  4330	00000E8C  FFFFFFF3					 DD	 -13
3  4331								 CW	 $THROW
4  4332	00000E90  20002AFD					 DD	 $THROW	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 77
FKernel.asm



2  4333	00000E94			 CT_FOUND:
2  4334								 CW	 $OVER
3  4335	00000E94  2000198C					 DD	 $OVER + DESIRED_BASE_EQU
2  4336								 CW	 $IS_INT_COMPQ
3  4337	00000E98  20000DF9					 DD	 $IS_INT_COMPQ + DESIRED_BASE_EQU
2  4338								 CW	 $TRUE
3  4339	00000E9C  20001E4A					 DD	 $TRUE + DESIRED_BASE_EQU
2  4340								 CW	 $EQ
3  4341	00000EA0  20001EA1					 DD	 $EQ + DESIRED_BASE_EQU
2  4342								 CQBR	 CT_NO_I_C
3  4343								 CW	 $QBRANCH
4  4344	00000EA4  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4345								 CW	 CT_NO_I_C
4  4346	00000EA8  20000EB8					 DD	 CT_NO_I_C + DESIRED_BASE_EQU
2  4347								   CW	   $SWAP
3  4348	00000EAC  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  4349								   CW	   $INT_COMP_TO_COMP
3  4350	00000EB0  20000E48					 DD	 $INT_COMP_TO_COMP + DESIRED_BASE_EQU
2  4351								   CW	   $SWAP
3  4352	00000EB4  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  4353	00000EB8			 CT_NO_I_C:
2  4354								 CW	 $ZEROLE
3  4355	00000EB8  20001EE7					 DD	 $ZEROLE + DESIRED_BASE_EQU
2  4356								 CQBR	 CT_IMM
3  4357								 CW	 $QBRANCH
4  4358	00000EBC  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4359								 CW	 CT_IMM
4  4360	00000EC0  20000ED4					 DD	 CT_IMM	+ DESIRED_BASE_EQU
2  4361								   CWLIT   $COMPILEC
3  4362								 CW	 $LIT
4  4363	00000EC4  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  4364								 CW	 $COMPILEC
4  4365	00000EC8  20002695					 DD	 $COMPILEC + DESIRED_BASE_EQU
2  4366								   CBR	   CT_EXIT
3  4367								 CW	 $BRANCH
4  4368	00000ECC  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4369								 CW	 CT_EXIT
4  4370	00000ED0  20000EDC					 DD	 CT_EXIT + DESIRED_BASE_EQU
2  4371	00000ED4			 CT_IMM:
2  4372								   CWLIT   $EXECUTE
3  4373								 CW	 $LIT
4  4374	00000ED4  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  4375								 CW	 $EXECUTE
4  4376	00000ED8  20002243					 DD	 $EXECUTE + DESIRED_BASE_EQU
2  4377	00000EDC			 CT_EXIT:
2  4378								 CEXIT
3  4379								 CW	 $EXIT
4  4380	00000EDC  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4381
2  4382					 ;  POSTPONE,
2  4383								 $COLON	 'POSTPONE,',$POSTPONEC
3  4384								 $DEF	 'POSTPONE,',$POSTPONEC,$ENTER,
4  4385	00000EE0			 ??0140:
4  4386		  =MAIN:0EE0		 LASTWORD		 =	 ??0140
4  4387								 IFNB	 <>
4  4388								   DB
4  4389								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 78
FKernel.asm



4  4390	00000EE0  00						   DB	 VEF_USUAL
4  4391								 ENDIF
4  4392	00000EE1  09						 DB	 ??0141	- $ - 1
4  4393	00000EE2  50 4F	53 54 50 4F 4E+				 DB	 'POSTPONE,'
   4394		  45 2C
4  4395	00000EEB			 ??0141:
4  4396	00000EEB  0B						 DB	 ??0141	- ??0140
4  4397	00000EEC  20000E5C					 DD	 VOC_LINK
4  4398		  =MAIN:20000EE0	 VOC_LINK		 =	 ??0140	+ DESIRED_BASE_EQU
4  4399
4  4400								 IFNB	 <$POSTPONEC>
4  4401	00000EF0						   LABEL   $POSTPONEC FAR
4  4402								 ENDIF
4  4403								 IFNB	 <$ENTER>
4  4404	00000EF0  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4405								 ELSE
4  4406								   DD	   ??0143 + DESIRED_BASE_EQU
4  4407								 ENDIF
4  4408	00000EF4			 ??0143:
2  4409								 CW	 $SWAP
3  4410	00000EF4  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  4411								 CW	 $LITERAL
3  4412	00000EF8  20002752					 DD	 $LITERAL + DESIRED_BASE_EQU
2  4413								 CW	 $COMPILEC
3  4414	00000EFC  20002695					 DD	 $COMPILEC + DESIRED_BASE_EQU
2  4415								 CEXIT
3  4416								 CW	 $EXIT
4  4417	00000F00  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4418
2  4419					 ;  POSTPONE
2  4420								 $COLON	 'POSTPONE',$POSTPONE,VEF_IMMEDIATE
3  4421								 $DEF	 'POSTPONE',$POSTPONE,$ENTER,VEF_IMMEDIATE
4  4422	00000F04			 ??0144:
4  4423		  =MAIN:0F04		 LASTWORD		 =	 ??0144
4  4424								 IFNB	 <VEF_IMMEDIATE>
4  4425	00000F04  01						   DB	 VEF_IMMEDIATE
4  4426								 ELSE
4  4427								   DB	 VEF_USUAL
4  4428								 ENDIF
4  4429	00000F05  08						 DB	 ??0145	- $ - 1
4  4430	00000F06  50 4F	53 54 50 4F 4E+				 DB	 'POSTPONE'
   4431		  45
4  4432	00000F0E			 ??0145:
4  4433	00000F0E  0A						 DB	 ??0145	- ??0144
4  4434	00000F0F  20000EE0					 DD	 VOC_LINK
4  4435		  =MAIN:20000F04	 VOC_LINK		 =	 ??0144	+ DESIRED_BASE_EQU
4  4436
4  4437								 IFNB	 <$POSTPONE>
4  4438	00000F13						   LABEL   $POSTPONE FAR
4  4439								 ENDIF
4  4440								 IFNB	 <$ENTER>
4  4441	00000F13  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4442								 ELSE
4  4443								   DD	   ??0147 + DESIRED_BASE_EQU
4  4444								 ENDIF
4  4445	00000F17			 ??0147:
2  4446								 CW	 $COMP_TICK
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 79
FKernel.asm



3  4447	00000F17  20000E68					 DD	 $COMP_TICK + DESIRED_BASE_EQU
2  4448								 CW	 $POSTPONEC
3  4449	00000F1B  20000EF0					 DD	 $POSTPONEC + DESIRED_BASE_EQU
2  4450								 CEXIT
3  4451								 CW	 $EXIT
4  4452	00000F1F  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4453
2  4454					 ;  [COMPILE]
2  4455								 $COLON	 '[COMPILE]',,VEF_IMMEDIATE
3  4456								 $DEF	 '[COMPILE]',,$ENTER,VEF_IMMEDIATE
4  4457	00000F23			 ??0148:
4  4458		  =MAIN:0F23		 LASTWORD		 =	 ??0148
4  4459								 IFNB	 <VEF_IMMEDIATE>
4  4460	00000F23  01						   DB	 VEF_IMMEDIATE
4  4461								 ELSE
4  4462								   DB	 VEF_USUAL
4  4463								 ENDIF
4  4464	00000F24  09						 DB	 ??0149	- $ - 1
4  4465	00000F25  5B 43	4F 4D 50 49 4C+				 DB	 '[COMPILE]'
   4466		  45 5D
4  4467	00000F2E			 ??0149:
4  4468	00000F2E  0B						 DB	 ??0149	- ??0148
4  4469	00000F2F  20000F04					 DD	 VOC_LINK
4  4470		  =MAIN:20000F23	 VOC_LINK		 =	 ??0148	+ DESIRED_BASE_EQU
4  4471
4  4472								 IFNB	 <>
4  4473								   LABEL    FAR
4  4474								 ENDIF
4  4475								 IFNB	 <$ENTER>
4  4476	00000F33  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4477								 ELSE
4  4478								   DD	   ??014B + DESIRED_BASE_EQU
4  4479								 ENDIF
4  4480	00000F37			 ??014B:
2  4481								 CW	 $COMP_TICK
3  4482	00000F37  20000E68					 DD	 $COMP_TICK + DESIRED_BASE_EQU
2  4483								 CW	 $DROP
3  4484	00000F3B  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  4485								 CW	 $COMPILEC
3  4486	00000F3F  20002695					 DD	 $COMPILEC + DESIRED_BASE_EQU
2  4487								 CEXIT
3  4488								 CW	 $EXIT
4  4489	00000F43  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4490
2  4491
1  4492								 INCLUDE "interpret.inc"
2  4493					 ;******************************************************************************
2  4494					 ;
2  4495					 ;  interpret.inc
2  4496					 ;  IKForth
2  4497					 ;
2  4498					 ;  Copyright (C) 1999-2003 Illya Kysil
2  4499					 ;
2  4500					 ;******************************************************************************
2  4501					 ;  INTERPRET support
2  4502					 ;******************************************************************************
2  4503
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 80
FKernel.asm



2  4504					 ;  >NUMBER-SIGNED
2  4505								 $USER	 '>NUMBER-SIGNED',$TONUMBER_SIGNED
3  4506								 $DEF	 '>NUMBER-SIGNED',$TONUMBER_SIGNED,$DOUSER
4  4507	00000F47			 ??014C:
4  4508		  =MAIN:0F47		 LASTWORD		 =	 ??014C
4  4509								 IFNB	 <>
4  4510								   DB
4  4511								 ELSE
4  4512	00000F47  00						   DB	 VEF_USUAL
4  4513								 ENDIF
4  4514	00000F48  0E						 DB	 ??014D	- $ - 1
4  4515	00000F49  3E 4E	55 4D 42 45 52+				 DB	 '>NUMBER-SIGNED'
   4516		  2D 53	49 47 4E 45 44
4  4517	00000F57			 ??014D:
4  4518	00000F57  10						 DB	 ??014D	- ??014C
4  4519	00000F58  20000F23					 DD	 VOC_LINK
4  4520		  =MAIN:20000F47	 VOC_LINK		 =	 ??014C	+ DESIRED_BASE_EQU
4  4521
4  4522								 IFNB	 <$TONUMBER_SIGNED>
4  4523	00000F5C						   LABEL   $TONUMBER_SIGNED FAR
4  4524								 ENDIF
4  4525								 IFNB	 <$DOUSER>
4  4526	00000F5C  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4  4527								 ELSE
4  4528								   DD	   ??014F + DESIRED_BASE_EQU
4  4529								 ENDIF
4  4530	00000F60			 ??014F:
2  4531								 CC	 TONUMBER_SIGNED_VAR
3  4532	00000F60  0000002C					 DD	 TONUMBER_SIGNED_VAR
2  4533
2  4534					 ;  DO-INT-DEFINED
2  4535								 $COLON	 'DO-INT-DEFINED',$DO_INT_DEFINED
3  4536								 $DEF	 'DO-INT-DEFINED',$DO_INT_DEFINED,$ENTER,
4  4537	00000F64			 ??0150:
4  4538		  =MAIN:0F64		 LASTWORD		 =	 ??0150
4  4539								 IFNB	 <>
4  4540								   DB
4  4541								 ELSE
4  4542	00000F64  00						   DB	 VEF_USUAL
4  4543								 ENDIF
4  4544	00000F65  0E						 DB	 ??0151	- $ - 1
4  4545	00000F66  44 4F	2D 49 4E 54 2D+				 DB	 'DO-INT-DEFINED'
   4546		  44 45	46 49 4E 45 44
4  4547	00000F74			 ??0151:
4  4548	00000F74  10						 DB	 ??0151	- ??0150
4  4549	00000F75  20000F47					 DD	 VOC_LINK
4  4550		  =MAIN:20000F64	 VOC_LINK		 =	 ??0150	+ DESIRED_BASE_EQU
4  4551
4  4552								 IFNB	 <$DO_INT_DEFINED>
4  4553	00000F79						   LABEL   $DO_INT_DEFINED FAR
4  4554								 ENDIF
4  4555								 IFNB	 <$ENTER>
4  4556	00000F79  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4557								 ELSE
4  4558								   DD	   ??0153 + DESIRED_BASE_EQU
4  4559								 ENDIF
4  4560	00000F7D			 ??0153:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 81
FKernel.asm



2  4561								 CW	 $OVER
3  4562	00000F7D  2000198C					 DD	 $OVER + DESIRED_BASE_EQU
2  4563								 CW	 $TO_HEAD
3  4564	00000F81  20001781					 DD	 $TO_HEAD + DESIRED_BASE_EQU
2  4565								 CW	 $HFLAGS_FETCH
3  4566	00000F85  200016BE					 DD	 $HFLAGS_FETCH + DESIRED_BASE_EQU
2  4567								 CCLIT	 VEF_COMPILE_ONLY
3  4568								 CW	 $LIT
4  4569	00000F89  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  4570								 CC	 VEF_COMPILE_ONLY
4  4571	00000F8D  00000004					 DD	 VEF_COMPILE_ONLY
2  4572								 CW	 $AND
3  4573	00000F91  20001D79					 DD	 $AND +	DESIRED_BASE_EQU
2  4574								 CW	 $ZERONOEQ
3  4575	00000F95  20001F2C					 DD	 $ZERONOEQ + DESIRED_BASE_EQU
2  4576								 CQBR	 DID_INTERPRET
3  4577								 CW	 $QBRANCH
4  4578	00000F99  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4579								 CW	 DID_INTERPRET
4  4580	00000F9D  20000FAD					 DD	 DID_INTERPRET + DESIRED_BASE_EQU
2  4581								   CTHROW  -14
3  4582								 CCLIT	 -14
4  4583								 CW	 $LIT
5  4584	00000FA1  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
4  4585								 CC	 -14
5  4586	00000FA5  FFFFFFF2					 DD	 -14
3  4587								 CW	 $THROW
4  4588	00000FA9  20002AFD					 DD	 $THROW	+ DESIRED_BASE_EQU
2  4589	00000FAD			 DID_INTERPRET:
2  4590								 CW	 $DROP
3  4591	00000FAD  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  4592								 CW	 $EXECUTE
3  4593	00000FB1  20002243					 DD	 $EXECUTE + DESIRED_BASE_EQU
2  4594								 CEXIT
3  4595								 CW	 $EXIT
4  4596	00000FB5  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4597
2  4598					 ;  DO-COMP-DEFINED
2  4599								 $COLON	 'DO-COMP-DEFINED',$DO_COMP_DEFINED
3  4600								 $DEF	 'DO-COMP-DEFINED',$DO_COMP_DEFINED,$ENTER,
4  4601	00000FB9			 ??0154:
4  4602		  =MAIN:0FB9		 LASTWORD		 =	 ??0154
4  4603								 IFNB	 <>
4  4604								   DB
4  4605								 ELSE
4  4606	00000FB9  00						   DB	 VEF_USUAL
4  4607								 ENDIF
4  4608	00000FBA  0F						 DB	 ??0155	- $ - 1
4  4609	00000FBB  44 4F	2D 43 4F 4D 50+				 DB	 'DO-COMP-DEFINED'
   4610		  2D 44	45 46 49 4E 45+
   4611		  44
4  4612	00000FCA			 ??0155:
4  4613	00000FCA  11						 DB	 ??0155	- ??0154
4  4614	00000FCB  20000F64					 DD	 VOC_LINK
4  4615		  =MAIN:20000FB9	 VOC_LINK		 =	 ??0154	+ DESIRED_BASE_EQU
4  4616
4  4617								 IFNB	 <$DO_COMP_DEFINED>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 82
FKernel.asm



4  4618	00000FCF						   LABEL   $DO_COMP_DEFINED FAR
4  4619								 ENDIF
4  4620								 IFNB	 <$ENTER>
4  4621	00000FCF  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4622								 ELSE
4  4623								   DD	   ??0157 + DESIRED_BASE_EQU
4  4624								 ENDIF
4  4625	00000FD3			 ??0157:
2  4626								 CW	 $ZEROGR
3  4627	00000FD3  20001F4E					 DD	 $ZEROGR + DESIRED_BASE_EQU
2  4628								 CQBR	 DCD_NOT_IMMEDIATE
3  4629								 CW	 $QBRANCH
4  4630	00000FD7  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4631								 CW	 DCD_NOT_IMMEDIATE
4  4632	00000FDB  20000FEB					 DD	 DCD_NOT_IMMEDIATE + DESIRED_BASE_EQU
2  4633								   CW	   $EXECUTE
3  4634	00000FDF  20002243					 DD	 $EXECUTE + DESIRED_BASE_EQU
2  4635								 CBR	 DCD_EXIT
3  4636								 CW	 $BRANCH
4  4637	00000FE3  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4638								 CW	 DCD_EXIT
4  4639	00000FE7  20000FEF					 DD	 DCD_EXIT + DESIRED_BASE_EQU
2  4640	00000FEB			 DCD_NOT_IMMEDIATE:
2  4641								   CW	   $COMPILEC
3  4642	00000FEB  20002695					 DD	 $COMPILEC + DESIRED_BASE_EQU
2  4643	00000FEF			 DCD_EXIT:
2  4644								 CEXIT
3  4645								 CW	 $EXIT
4  4646	00000FEF  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4647
2  4648					 ;  DO-DEFINED
2  4649								 $COLON	 'DO-DEFINED',$DO_DEFINED
3  4650								 $DEF	 'DO-DEFINED',$DO_DEFINED,$ENTER,
4  4651	00000FF3			 ??0158:
4  4652		  =MAIN:0FF3		 LASTWORD		 =	 ??0158
4  4653								 IFNB	 <>
4  4654								   DB
4  4655								 ELSE
4  4656	00000FF3  00						   DB	 VEF_USUAL
4  4657								 ENDIF
4  4658	00000FF4  0A						 DB	 ??0159	- $ - 1
4  4659	00000FF5  44 4F	2D 44 45 46 49+				 DB	 'DO-DEFINED'
   4660		  4E 45	44
4  4661	00000FFF			 ??0159:
4  4662	00000FFF  0C						 DB	 ??0159	- ??0158
4  4663	00001000  20000FB9					 DD	 VOC_LINK
4  4664		  =MAIN:20000FF3	 VOC_LINK		 =	 ??0158	+ DESIRED_BASE_EQU
4  4665
4  4666								 IFNB	 <$DO_DEFINED>
4  4667	00001004						   LABEL   $DO_DEFINED FAR
4  4668								 ENDIF
4  4669								 IFNB	 <$ENTER>
4  4670	00001004  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4671								 ELSE
4  4672								   DD	   ??015B + DESIRED_BASE_EQU
4  4673								 ENDIF
4  4674	00001008			 ??015B:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 83
FKernel.asm



2  4675								 CFETCH	 $STATE
3  4676								 CW	 $STATE
4  4677	00001008  20000396					 DD	 $STATE	+ DESIRED_BASE_EQU
3  4678								 CW	 $FETCH
4  4679	0000100C  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4680								 CQBR	 DD_INTERPRETATION
3  4681								 CW	 $QBRANCH
4  4682	00001010  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4683								 CW	 DD_INTERPRETATION
4  4684	00001014  20001024					 DD	 DD_INTERPRETATION + DESIRED_BASE_EQU
2  4685								   CW	   $DO_COMP_DEFINED
3  4686	00001018  20000FCF					 DD	 $DO_COMP_DEFINED + DESIRED_BASE_EQU
2  4687								 CBR	 DD_EXIT
3  4688								 CW	 $BRANCH
4  4689	0000101C  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4690								 CW	 DD_EXIT
4  4691	00001020  20001028					 DD	 DD_EXIT + DESIRED_BASE_EQU
2  4692	00001024			 DD_INTERPRETATION:
2  4693								   CW	   $DO_INT_DEFINED
3  4694	00001024  20000F79					 DD	 $DO_INT_DEFINED + DESIRED_BASE_EQU
2  4695	00001028			 DD_EXIT:
2  4696								 CEXIT
3  4697								 CW	 $EXIT
4  4698	00001028  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4699
2  4700					 ;  IL-CHECK-SIGN
2  4701					 ;  ( C-ADDR --	C-ADDR U )
2  4702								 $COLON	 'IL-CHECK-SIGN',$ILCS
3  4703								 $DEF	 'IL-CHECK-SIGN',$ILCS,$ENTER,
4  4704	0000102C			 ??015C:
4  4705		  =MAIN:102C		 LASTWORD		 =	 ??015C
4  4706								 IFNB	 <>
4  4707								   DB
4  4708								 ELSE
4  4709	0000102C  00						   DB	 VEF_USUAL
4  4710								 ENDIF
4  4711	0000102D  0D						 DB	 ??015D	- $ - 1
4  4712	0000102E  49 4C	2D 43 48 45 43+				 DB	 'IL-CHECK-SIGN'
   4713		  4B 2D	53 49 47 4E
4  4714	0000103B			 ??015D:
4  4715	0000103B  0F						 DB	 ??015D	- ??015C
4  4716	0000103C  20000FF3					 DD	 VOC_LINK
4  4717		  =MAIN:2000102C	 VOC_LINK		 =	 ??015C	+ DESIRED_BASE_EQU
4  4718
4  4719								 IFNB	 <$ILCS>
4  4720	00001040						   LABEL   $ILCS FAR
4  4721								 ENDIF
4  4722								 IFNB	 <$ENTER>
4  4723	00001040  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4724								 ELSE
4  4725								   DD	   ??015F + DESIRED_BASE_EQU
4  4726								 ENDIF
4  4727	00001044			 ??015F:
2  4728								 CW	 $FALSE
3  4729	00001044  20001E34					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  4730								 CSTORE	 $TONUMBER_SIGNED
3  4731								 CW	 $TONUMBER_SIGNED
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 84
FKernel.asm



4  4732	00001048  20000F5C					 DD	 $TONUMBER_SIGNED + DESIRED_BASE_EQU
3  4733								 CW	 $STORE
4  4734	0000104C  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  4735								 CW	 $COUNT
3  4736	00001050  20002807					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  4737								 CW	 $OVER
3  4738	00001054  2000198C					 DD	 $OVER + DESIRED_BASE_EQU
2  4739								 CW	 $CFETCH
3  4740	00001058  20002025					 DD	 $CFETCH + DESIRED_BASE_EQU
2  4741								 CW	 $DUP
3  4742	0000105C  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  4743								 CCLIT	 '-'
3  4744								 CW	 $LIT
4  4745	00001060  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  4746								 CC	 '-'
4  4747	00001064  0000002D					 DD	 '-'
2  4748								 CW	 $NOEQ
3  4749	00001068  20001EC4					 DD	 $NOEQ + DESIRED_BASE_EQU
2  4750								 CQBR	 ILCS_SIGNED
3  4751								 CW	 $QBRANCH
4  4752	0000106C  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4753								 CW	 ILCS_SIGNED
4  4754	00001070  20001090					 DD	 ILCS_SIGNED + DESIRED_BASE_EQU
2  4755								 CCLIT	 '+'
3  4756								 CW	 $LIT
4  4757	00001074  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  4758								 CC	 '+'
4  4759	00001078  0000002B					 DD	 '+'
2  4760								 CW	 $NOEQ
3  4761	0000107C  20001EC4					 DD	 $NOEQ + DESIRED_BASE_EQU
2  4762								 CQBR	 ILCS_UNSIGNED
3  4763								 CW	 $QBRANCH
4  4764	00001080  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4765								 CW	 ILCS_UNSIGNED
4  4766	00001084  200010A0					 DD	 ILCS_UNSIGNED + DESIRED_BASE_EQU
2  4767								 CBR	 ILCS_EXIT
3  4768								 CW	 $BRANCH
4  4769	00001088  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4770								 CW	 ILCS_EXIT
4  4771	0000108C  200010B0					 DD	 ILCS_EXIT + DESIRED_BASE_EQU
2  4772	00001090			 ILCS_SIGNED:
2  4773								 CW	 $DROP
3  4774	00001090  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  4775								 CW	 $TRUE
3  4776	00001094  20001E4A					 DD	 $TRUE + DESIRED_BASE_EQU
2  4777								 CSTORE	 $TONUMBER_SIGNED
3  4778								 CW	 $TONUMBER_SIGNED
4  4779	00001098  20000F5C					 DD	 $TONUMBER_SIGNED + DESIRED_BASE_EQU
3  4780								 CW	 $STORE
4  4781	0000109C  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2  4782	000010A0			 ILCS_UNSIGNED:
2  4783								 CW	 $SWAP
3  4784	000010A0  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  4785								 CW	 $CHARADD
3  4786	000010A4  20002075					 DD	 $CHARADD + DESIRED_BASE_EQU
2  4787								 CW	 $SWAP
3  4788	000010A8  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 85
FKernel.asm



2  4789								 CW	 $1SUB
3  4790	000010AC  20001C61					 DD	 $1SUB + DESIRED_BASE_EQU
2  4791	000010B0			 ILCS_EXIT:
2  4792								 CEXIT
3  4793								 CW	 $EXIT
4  4794	000010B0  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4795
2  4796					 ;  IL-CHECK-LIT
2  4797					 ;  ( C-ADDR U - N TRUE	| C-ADDR U FALSE )
2  4798								 $COLON	 'IL-CHECK-LIT',$ILCL
3  4799								 $DEF	 'IL-CHECK-LIT',$ILCL,$ENTER,
4  4800	000010B4			 ??0160:
4  4801		  =MAIN:10B4		 LASTWORD		 =	 ??0160
4  4802								 IFNB	 <>
4  4803								   DB
4  4804								 ELSE
4  4805	000010B4  00						   DB	 VEF_USUAL
4  4806								 ENDIF
4  4807	000010B5  0C						 DB	 ??0161	- $ - 1
4  4808	000010B6  49 4C	2D 43 48 45 43+				 DB	 'IL-CHECK-LIT'
   4809		  4B 2D	4C 49 54
4  4810	000010C2			 ??0161:
4  4811	000010C2  0E						 DB	 ??0161	- ??0160
4  4812	000010C3  2000102C					 DD	 VOC_LINK
4  4813		  =MAIN:200010B4	 VOC_LINK		 =	 ??0160	+ DESIRED_BASE_EQU
4  4814
4  4815								 IFNB	 <$ILCL>
4  4816	000010C7						   LABEL   $ILCL FAR
4  4817								 ENDIF
4  4818								 IFNB	 <$ENTER>
4  4819	000010C7  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4820								 ELSE
4  4821								   DD	   ??0163 + DESIRED_BASE_EQU
4  4822								 ENDIF
4  4823	000010CB			 ??0163:
2  4824								 CW	 $ZERO
3  4825	000010CB  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2  4826								 CW	 $DUP
3  4827	000010CF  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  4828								 CW	 $2SWAP
3  4829	000010D3  2000192E					 DD	 $2SWAP	+ DESIRED_BASE_EQU
2  4830								 CW	 $TONUMBER
3  4831	000010D7  2000298D					 DD	 $TONUMBER + DESIRED_BASE_EQU
2  4832								 CW	 $DUP
3  4833	000010DB  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  4834								 CW	 $ZEROEQ
3  4835	000010DF  20001F09					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  4836								 CQBR	 ILCL_NO
3  4837								 CW	 $QBRANCH
4  4838	000010E3  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4839								 CW	 ILCL_NO
4  4840	000010E7  20001113					 DD	 ILCL_NO + DESIRED_BASE_EQU
2  4841								   CW	   $2DROP
3  4842	000010EB  200018DB					 DD	 $2DROP	+ DESIRED_BASE_EQU
2  4843								   CW	   $DROP
3  4844	000010EF  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  4845								   CFETCH  $TONUMBER_SIGNED
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 86
FKernel.asm



3  4846								 CW	 $TONUMBER_SIGNED
4  4847	000010F3  20000F5C					 DD	 $TONUMBER_SIGNED + DESIRED_BASE_EQU
3  4848								 CW	 $FETCH
4  4849	000010F7  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4850								   CQBR	   ILCL_UNSIGNED
3  4851								 CW	 $QBRANCH
4  4852	000010FB  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4853								 CW	 ILCL_UNSIGNED
4  4854	000010FF  20001107					 DD	 ILCL_UNSIGNED + DESIRED_BASE_EQU
2  4855								     CW	     $NEGATE
3  4856	00001103  20001D0F					 DD	 $NEGATE + DESIRED_BASE_EQU
2  4857	00001107			 ILCL_UNSIGNED:
2  4858								   CW	   $TRUE
3  4859	00001107  20001E4A					 DD	 $TRUE + DESIRED_BASE_EQU
2  4860								 CBR	 ILCL_EXIT
3  4861								 CW	 $BRANCH
4  4862	0000110B  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4863								 CW	 ILCL_EXIT
4  4864	0000110F  20001117					 DD	 ILCL_EXIT + DESIRED_BASE_EQU
2  4865	00001113			 ILCL_NO:
2  4866								   CW	   $FALSE
3  4867	00001113  20001E34					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  4868	00001117			 ILCL_EXIT:
2  4869								 CEXIT
3  4870								 CW	 $EXIT
4  4871	00001117  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4872
2  4873					 ;  DO-LIT
2  4874								 $COLON	 'DO-LIT',$DO_LIT
3  4875								 $DEF	 'DO-LIT',$DO_LIT,$ENTER,
4  4876	0000111B			 ??0164:
4  4877		  =MAIN:111B		 LASTWORD		 =	 ??0164
4  4878								 IFNB	 <>
4  4879								   DB
4  4880								 ELSE
4  4881	0000111B  00						   DB	 VEF_USUAL
4  4882								 ENDIF
4  4883	0000111C  06						 DB	 ??0165	- $ - 1
4  4884	0000111D  44 4F	2D 4C 49 54				 DB	 'DO-LIT'
4  4885	00001123			 ??0165:
4  4886	00001123  08						 DB	 ??0165	- ??0164
4  4887	00001124  200010B4					 DD	 VOC_LINK
4  4888		  =MAIN:2000111B	 VOC_LINK		 =	 ??0164	+ DESIRED_BASE_EQU
4  4889
4  4890								 IFNB	 <$DO_LIT>
4  4891	00001128						   LABEL   $DO_LIT FAR
4  4892								 ENDIF
4  4893								 IFNB	 <$ENTER>
4  4894	00001128  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4895								 ELSE
4  4896								   DD	   ??0167 + DESIRED_BASE_EQU
4  4897								 ENDIF
4  4898	0000112C			 ??0167:
2  4899								 CFETCH	 $STATE
3  4900								 CW	 $STATE
4  4901	0000112C  20000396					 DD	 $STATE	+ DESIRED_BASE_EQU
3  4902								 CW	 $FETCH
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 87
FKernel.asm



4  4903	00001130  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4904								 CQBR	 DL_EXIT
3  4905								 CW	 $QBRANCH
4  4906	00001134  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4907								 CW	 DL_EXIT
4  4908	00001138  20001140					 DD	 DL_EXIT + DESIRED_BASE_EQU
2  4909								   CW	   $LITERAL
3  4910	0000113C  20002752					 DD	 $LITERAL + DESIRED_BASE_EQU
2  4911	00001140			 DL_EXIT:
2  4912								 CEXIT
3  4913								 CW	 $EXIT
4  4914	00001140  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4915
2  4916					 ;  IL-CHECK-2LIT
2  4917					 ;  ( D	C-ADDR U - D TRUE | FALSE )
2  4918								 $COLON	 'IL-CHECK-2LIT',$ILC2L
3  4919								 $DEF	 'IL-CHECK-2LIT',$ILC2L,$ENTER,
4  4920	00001144			 ??0168:
4  4921		  =MAIN:1144		 LASTWORD		 =	 ??0168
4  4922								 IFNB	 <>
4  4923								   DB
4  4924								 ELSE
4  4925	00001144  00						   DB	 VEF_USUAL
4  4926								 ENDIF
4  4927	00001145  0D						 DB	 ??0169	- $ - 1
4  4928	00001146  49 4C	2D 43 48 45 43+				 DB	 'IL-CHECK-2LIT'
   4929		  4B 2D	32 4C 49 54
4  4930	00001153			 ??0169:
4  4931	00001153  0F						 DB	 ??0169	- ??0168
4  4932	00001154  2000111B					 DD	 VOC_LINK
4  4933		  =MAIN:20001144	 VOC_LINK		 =	 ??0168	+ DESIRED_BASE_EQU
4  4934
4  4935								 IFNB	 <$ILC2L>
4  4936	00001158						   LABEL   $ILC2L FAR
4  4937								 ENDIF
4  4938								 IFNB	 <$ENTER>
4  4939	00001158  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  4940								 ELSE
4  4941								   DD	   ??016B + DESIRED_BASE_EQU
4  4942								 ENDIF
4  4943	0000115C			 ??016B:
2  4944								 CW	 $1SUB
3  4945	0000115C  20001C61					 DD	 $1SUB + DESIRED_BASE_EQU
2  4946								 CW	 $ZEROEQ
3  4947	00001160  20001F09					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  4948								 CQBR	 ILC2L_EXIT2
3  4949								 CW	 $QBRANCH
4  4950	00001164  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4951								 CW	 ILC2L_EXIT2
4  4952	00001168  200011A4					 DD	 ILC2L_EXIT2 + DESIRED_BASE_EQU
2  4953								 CW	 $CFETCH
3  4954	0000116C  20002025					 DD	 $CFETCH + DESIRED_BASE_EQU
2  4955								 CCLIT	 '.'
3  4956								 CW	 $LIT
4  4957	00001170  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  4958								 CC	 '.'
4  4959	00001174  0000002E					 DD	 '.'
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 88
FKernel.asm



2  4960								 CW	 $EQ
3  4961	00001178  20001EA1					 DD	 $EQ + DESIRED_BASE_EQU
2  4962								 CQBR	 ILC2L_EXIT1
3  4963								 CW	 $QBRANCH
4  4964	0000117C  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4965								 CW	 ILC2L_EXIT1
4  4966	00001180  200011A8					 DD	 ILC2L_EXIT1 + DESIRED_BASE_EQU
2  4967								 CFETCH	 $TONUMBER_SIGNED
3  4968								 CW	 $TONUMBER_SIGNED
4  4969	00001184  20000F5C					 DD	 $TONUMBER_SIGNED + DESIRED_BASE_EQU
3  4970								 CW	 $FETCH
4  4971	00001188  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4972								 CQBR	 ILC2L_UNSIGNED
3  4973								 CW	 $QBRANCH
4  4974	0000118C  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4975								 CW	 ILC2L_UNSIGNED
4  4976	00001190  20001198					 DD	 ILC2L_UNSIGNED	+ DESIRED_BASE_EQU
2  4977								 CW	 $DNEGATE
3  4978	00001194  20002934					 DD	 $DNEGATE + DESIRED_BASE_EQU
2  4979	00001198			 ILC2L_UNSIGNED:
2  4980								 CW	 $TRUE
3  4981	00001198  20001E4A					 DD	 $TRUE + DESIRED_BASE_EQU
2  4982								 CBR	 ILC2L_EXIT
3  4983								 CW	 $BRANCH
4  4984	0000119C  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4985								 CW	 ILC2L_EXIT
4  4986	000011A0  200011B0					 DD	 ILC2L_EXIT + DESIRED_BASE_EQU
2  4987	000011A4			 ILC2L_EXIT2:
2  4988								 CW	 $DROP
3  4989	000011A4  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  4990	000011A8			 ILC2L_EXIT1:
2  4991								 CW	 $2DROP
3  4992	000011A8  200018DB					 DD	 $2DROP	+ DESIRED_BASE_EQU
2  4993								 CW	 $FALSE
3  4994	000011AC  20001E34					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  4995	000011B0			 ILC2L_EXIT:
2  4996								 CEXIT
3  4997								 CW	 $EXIT
4  4998	000011B0  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  4999
2  5000					 ;  DO-2LIT
2  5001								 $COLON	 'DO-2LIT',$DO_2LIT
3  5002								 $DEF	 'DO-2LIT',$DO_2LIT,$ENTER,
4  5003	000011B4			 ??016C:
4  5004		  =MAIN:11B4		 LASTWORD		 =	 ??016C
4  5005								 IFNB	 <>
4  5006								   DB
4  5007								 ELSE
4  5008	000011B4  00						   DB	 VEF_USUAL
4  5009								 ENDIF
4  5010	000011B5  07						 DB	 ??016D	- $ - 1
4  5011	000011B6  44 4F	2D 32 4C 49 54				 DB	 'DO-2LIT'
4  5012	000011BD			 ??016D:
4  5013	000011BD  09						 DB	 ??016D	- ??016C
4  5014	000011BE  20001144					 DD	 VOC_LINK
4  5015		  =MAIN:200011B4	 VOC_LINK		 =	 ??016C	+ DESIRED_BASE_EQU
4  5016
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 89
FKernel.asm



4  5017								 IFNB	 <$DO_2LIT>
4  5018	000011C2						   LABEL   $DO_2LIT FAR
4  5019								 ENDIF
4  5020								 IFNB	 <$ENTER>
4  5021	000011C2  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5022								 ELSE
4  5023								   DD	   ??016F + DESIRED_BASE_EQU
4  5024								 ENDIF
4  5025	000011C6			 ??016F:
2  5026								 CFETCH	 $STATE
3  5027								 CW	 $STATE
4  5028	000011C6  20000396					 DD	 $STATE	+ DESIRED_BASE_EQU
3  5029								 CW	 $FETCH
4  5030	000011CA  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  5031								 CQBR	 D2L_EXIT
3  5032								 CW	 $QBRANCH
4  5033	000011CE  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5034								 CW	 D2L_EXIT
4  5035	000011D2  200011DA					 DD	 D2L_EXIT + DESIRED_BASE_EQU
2  5036								   CW	   $2LITERAL
3  5037	000011D6  20002826					 DD	 $2LITERAL + DESIRED_BASE_EQU
2  5038	000011DA			 D2L_EXIT:
2  5039								 CEXIT
3  5040								 CW	 $EXIT
4  5041	000011DA  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5042
2  5043					 ;  INTERPRET-LITERAL
2  5044					 ;  ( C-ADDR --	)
2  5045								 $COLON	 'INTERPRET-LITERAL',$INTERPRET_LITERAL
3  5046								 $DEF	 'INTERPRET-LITERAL',$INTERPRET_LITERAL,$ENTER,
4  5047	000011DE			 ??0170:
4  5048		  =MAIN:11DE		 LASTWORD		 =	 ??0170
4  5049								 IFNB	 <>
4  5050								   DB
4  5051								 ELSE
4  5052	000011DE  00						   DB	 VEF_USUAL
4  5053								 ENDIF
4  5054	000011DF  11						 DB	 ??0171	- $ - 1
4  5055	000011E0  49 4E	54 45 52 50 52+				 DB	 'INTERPRET-LITERAL'
   5056		  45 54	2D 4C 49 54 45+
   5057		  52 41	4C
4  5058	000011F1			 ??0171:
4  5059	000011F1  13						 DB	 ??0171	- ??0170
4  5060	000011F2  200011B4					 DD	 VOC_LINK
4  5061		  =MAIN:200011DE	 VOC_LINK		 =	 ??0170	+ DESIRED_BASE_EQU
4  5062
4  5063								 IFNB	 <$INTERPRET_LITERAL>
4  5064	000011F6						   LABEL   $INTERPRET_LITERAL FAR
4  5065								 ENDIF
4  5066								 IFNB	 <$ENTER>
4  5067	000011F6  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5068								 ELSE
4  5069								   DD	   ??0173 + DESIRED_BASE_EQU
4  5070								 ENDIF
4  5071	000011FA			 ??0173:
2  5072								 CW	 $ILCS		 ; c-addr u
3  5073	000011FA  20001040					 DD	 $ILCS + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 90
FKernel.asm



2  5074								 CW	 $DUP		 ; c-addr u u
3  5075	000011FE  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  5076								 CCLIT	 1
3  5077								 CW	 $LIT
4  5078	00001202  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  5079								 CC	 1
4  5080	00001206  00000001					 DD	 1
2  5081								 CW	 $EQ
3  5082	0000120A  20001EA1					 DD	 $EQ + DESIRED_BASE_EQU
2  5083								 CQBR	 IL_OK1		 ; branch if u <> 1
3  5084								 CW	 $QBRANCH
4  5085	0000120E  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5086								 CW	 IL_OK1
4  5087	00001212  2000123E					 DD	 IL_OK1	+ DESIRED_BASE_EQU
2  5088								 CW	 $OVER		 ; c-addr u c-addr
3  5089	00001216  2000198C					 DD	 $OVER + DESIRED_BASE_EQU
2  5090								 CW	 $CFETCH
3  5091	0000121A  20002025					 DD	 $CFETCH + DESIRED_BASE_EQU
2  5092								 CCLIT	 '.'
3  5093								 CW	 $LIT
4  5094	0000121E  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  5095								 CC	 '.'
4  5096	00001222  0000002E					 DD	 '.'
2  5097								 CW	 $EQ
3  5098	00001226  20001EA1					 DD	 $EQ + DESIRED_BASE_EQU
2  5099								 CQBR	 IL_OK1		 ; branch if c-addr @ <> '.'
3  5100								 CW	 $QBRANCH
4  5101	0000122A  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5102								 CW	 IL_OK1
4  5103	0000122E  2000123E					 DD	 IL_OK1	+ DESIRED_BASE_EQU
2  5104								 CW	 $2DROP
3  5105	00001232  200018DB					 DD	 $2DROP	+ DESIRED_BASE_EQU
2  5106								 CW	 $FALSE
3  5107	00001236  20001E34					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  5108								 CEXIT
3  5109								 CW	 $EXIT
4  5110	0000123A  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5111	0000123E			 IL_OK1:
2  5112								 CW	 $ILCL
3  5113	0000123E  200010C7					 DD	 $ILCL + DESIRED_BASE_EQU
2  5114								 CQBR	 IL_CHECK_2LIT
3  5115								 CW	 $QBRANCH
4  5116	00001242  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5117								 CW	 IL_CHECK_2LIT
4  5118	00001246  20001256					 DD	 IL_CHECK_2LIT + DESIRED_BASE_EQU
2  5119								   CW	   $DO_LIT
3  5120	0000124A  20001128					 DD	 $DO_LIT + DESIRED_BASE_EQU
2  5121								   CW	   $TRUE
3  5122	0000124E  20001E4A					 DD	 $TRUE + DESIRED_BASE_EQU
2  5123								   CEXIT
3  5124								 CW	 $EXIT
4  5125	00001252  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5126	00001256			 IL_CHECK_2LIT:
2  5127								 CW	 $ILC2L
3  5128	00001256  20001158					 DD	 $ILC2L	+ DESIRED_BASE_EQU
2  5129								 CQBR	 IL_UNKNOWN
3  5130								 CW	 $QBRANCH
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 91
FKernel.asm



4  5131	0000125A  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5132								 CW	 IL_UNKNOWN
4  5133	0000125E  2000126E					 DD	 IL_UNKNOWN + DESIRED_BASE_EQU
2  5134								   CW	   $DO_2LIT
3  5135	00001262  200011C2					 DD	 $DO_2LIT + DESIRED_BASE_EQU
2  5136								   CW	   $TRUE
3  5137	00001266  20001E4A					 DD	 $TRUE + DESIRED_BASE_EQU
2  5138								   CEXIT
3  5139								 CW	 $EXIT
4  5140	0000126A  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5141	0000126E			 IL_UNKNOWN:
2  5142								 CW	 $FALSE
3  5143	0000126E  20001E34					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  5144								 CEXIT
3  5145								 CW	 $EXIT
4  5146	00001272  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5147
2  5148					 ;  INTERPRET-WORD
2  5149					 ;  ( C-ADDR --	)
2  5150								 $COLON	 'INTERPRET-WORD',$INTERPRET_WORD
3  5151								 $DEF	 'INTERPRET-WORD',$INTERPRET_WORD,$ENTER,
4  5152	00001276			 ??0174:
4  5153		  =MAIN:1276		 LASTWORD		 =	 ??0174
4  5154								 IFNB	 <>
4  5155								   DB
4  5156								 ELSE
4  5157	00001276  00						   DB	 VEF_USUAL
4  5158								 ENDIF
4  5159	00001277  0E						 DB	 ??0175	- $ - 1
4  5160	00001278  49 4E	54 45 52 50 52+				 DB	 'INTERPRET-WORD'
   5161		  45 54	2D 57 4F 52 44
4  5162	00001286			 ??0175:
4  5163	00001286  10						 DB	 ??0175	- ??0174
4  5164	00001287  200011DE					 DD	 VOC_LINK
4  5165		  =MAIN:20001276	 VOC_LINK		 =	 ??0174	+ DESIRED_BASE_EQU
4  5166
4  5167								 IFNB	 <$INTERPRET_WORD>
4  5168	0000128B						   LABEL   $INTERPRET_WORD FAR
4  5169								 ENDIF
4  5170								 IFNB	 <$ENTER>
4  5171	0000128B  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5172								 ELSE
4  5173								   DD	   ??0177 + DESIRED_BASE_EQU
4  5174								 ENDIF
4  5175	0000128F			 ??0177:
2  5176								 CW	 $FIND
3  5177	0000128F  200021C6					 DD	 $FIND + DESIRED_BASE_EQU
2  5178								 CW	 $QDUP
3  5179	00001293  200018BE					 DD	 $QDUP + DESIRED_BASE_EQU
2  5180								 CQBR	 IW_NOT_FOUND
3  5181								 CW	 $QBRANCH
4  5182	00001297  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5183								 CW	 IW_NOT_FOUND
4  5184	0000129B  200012AB					 DD	 IW_NOT_FOUND +	DESIRED_BASE_EQU
2  5185								   CW	   $DO_DEFINED
3  5186	0000129F  20001004					 DD	 $DO_DEFINED + DESIRED_BASE_EQU
2  5187								 CBR	 IW_EXIT
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 92
FKernel.asm



3  5188								 CW	 $BRANCH
4  5189	000012A3  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  5190								 CW	 IW_EXIT
4  5191	000012A7  200012C7					 DD	 IW_EXIT + DESIRED_BASE_EQU
2  5192	000012AB			 IW_NOT_FOUND:
2  5193								   CW	   $INTERPRET_LITERAL
3  5194	000012AB  200011F6					 DD	 $INTERPRET_LITERAL + DESIRED_BASE_EQU
2  5195								   CW	   $INVERT
3  5196	000012AF  20001D94					 DD	 $INVERT + DESIRED_BASE_EQU
2  5197								   CQBR	   IW_EXIT
3  5198								 CW	 $QBRANCH
4  5199	000012B3  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5200								 CW	 IW_EXIT
4  5201	000012B7  200012C7					 DD	 IW_EXIT + DESIRED_BASE_EQU
2  5202								     CTHROW  -13
3  5203								 CCLIT	 -13
4  5204								 CW	 $LIT
5  5205	000012BB  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
4  5206								 CC	 -13
5  5207	000012BF  FFFFFFF3					 DD	 -13
3  5208								 CW	 $THROW
4  5209	000012C3  20002AFD					 DD	 $THROW	+ DESIRED_BASE_EQU
2  5210	000012C7			 IW_EXIT:
2  5211								 CEXIT
3  5212								 CW	 $EXIT
4  5213	000012C7  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5214
2  5215					 ;  INTERPRET
2  5216								 $COLON	 'INTERPRET',$INTERPRET
3  5217								 $DEF	 'INTERPRET',$INTERPRET,$ENTER,
4  5218	000012CB			 ??0178:
4  5219		  =MAIN:12CB		 LASTWORD		 =	 ??0178
4  5220								 IFNB	 <>
4  5221								   DB
4  5222								 ELSE
4  5223	000012CB  00						   DB	 VEF_USUAL
4  5224								 ENDIF
4  5225	000012CC  09						 DB	 ??0179	- $ - 1
4  5226	000012CD  49 4E	54 45 52 50 52+				 DB	 'INTERPRET'
   5227		  45 54
4  5228	000012D6			 ??0179:
4  5229	000012D6  0B						 DB	 ??0179	- ??0178
4  5230	000012D7  20001276					 DD	 VOC_LINK
4  5231		  =MAIN:200012CB	 VOC_LINK		 =	 ??0178	+ DESIRED_BASE_EQU
4  5232
4  5233								 IFNB	 <$INTERPRET>
4  5234	000012DB						   LABEL   $INTERPRET FAR
4  5235								 ENDIF
4  5236								 IFNB	 <$ENTER>
4  5237	000012DB  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5238								 ELSE
4  5239								   DD	   ??017B + DESIRED_BASE_EQU
4  5240								 ENDIF
4  5241	000012DF			 ??017B:
2  5242	000012DF			 INT_LOOP:
2  5243								 CW	 $BL
3  5244	000012DF  200003BA					 DD	 $BL + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 93
FKernel.asm



2  5245								 CW	 $WORD			 ; c-addr
3  5246	000012E3  200024CA					 DD	 $WORD + DESIRED_BASE_EQU
2  5247								 CW	 $DUP			 ; c-addr c-addr
3  5248	000012E7  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  5249								 CW	 $COUNT			 ; c-addr c-addr1 count
3  5250	000012EB  20002807					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  5251								 CW	 $NIP			 ; c-addr count
3  5252	000012EF  20001975					 DD	 $NIP +	DESIRED_BASE_EQU
2  5253								 CQBR	 INT_EXIT		 ; exit	loop if	parse area is	    +
   5254					 exhausted
3  5255								 CW	 $QBRANCH
4  5256	000012F3  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5257								 CW	 INT_EXIT
4  5258	000012F7  20001307					 DD	 INT_EXIT + DESIRED_BASE_EQU
2  5259								   CW	   $INTERPRET_WORD
3  5260	000012FB  2000128B					 DD	 $INTERPRET_WORD + DESIRED_BASE_EQU
2  5261								 CBR	 INT_LOOP
3  5262								 CW	 $BRANCH
4  5263	000012FF  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  5264								 CW	 INT_LOOP
4  5265	00001303  200012DF					 DD	 INT_LOOP + DESIRED_BASE_EQU
2  5266	00001307			 INT_EXIT:
2  5267								 CW	 $DROP
3  5268	00001307  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  5269								 CEXIT
3  5270								 CW	 $EXIT
4  5271	0000130B  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5272
2  5273
1  5274								 INCLUDE "header.inc"
2  5275					 ;******************************************************************************
2  5276					 ;
2  5277					 ;  header.inc
2  5278					 ;  IKForth
2  5279					 ;
2  5280					 ;  Copyright (C) 1999-2003 Illya Kysil
2  5281					 ;
2  5282					 ;******************************************************************************
2  5283					 ;  HEADER & support words
2  5284					 ;******************************************************************************
2  5285
2  5286					 ;  CREATE-REPORT
2  5287								 $VAR	 'CREATE-REPORT',$CREATE_REPORT
3  5288								 $DEF	 'CREATE-REPORT',$CREATE_REPORT,$DOVAR
4  5289	0000130F			 ??017C:
4  5290		  =MAIN:130F		 LASTWORD		 =	 ??017C
4  5291								 IFNB	 <>
4  5292								   DB
4  5293								 ELSE
4  5294	0000130F  00						   DB	 VEF_USUAL
4  5295								 ENDIF
4  5296	00001310  0D						 DB	 ??017D	- $ - 1
4  5297	00001311  43 52	45 41 54 45 2D+				 DB	 'CREATE-REPORT'
   5298		  52 45	50 4F 52 54
4  5299	0000131E			 ??017D:
4  5300	0000131E  0F						 DB	 ??017D	- ??017C
4  5301	0000131F  200012CB					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 94
FKernel.asm



4  5302		  =MAIN:2000130F	 VOC_LINK		 =	 ??017C	+ DESIRED_BASE_EQU
4  5303
4  5304								 IFNB	 <$CREATE_REPORT>
4  5305	00001323						   LABEL   $CREATE_REPORT FAR
4  5306								 ENDIF
4  5307								 IFNB	 <$DOVAR>
4  5308	00001323  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
4  5309								 ELSE
4  5310								   DD	   ??017F + DESIRED_BASE_EQU
4  5311								 ENDIF
4  5312	00001327			 ??017F:
2  5313								 CC	 F_FALSE
3  5314	00001327  00000000					 DD	 F_FALSE
2  5315
2  5316					 ;  CREATE-WARN-ON-DUPLICATE
2  5317								 $VAR	 'CREATE-WARN-ON-DUPLICATE',$CREATE_WOD
3  5318								 $DEF	 'CREATE-WARN-ON-DUPLICATE',$CREATE_WOD,$DOVAR
4  5319	0000132B			 ??0180:
4  5320		  =MAIN:132B		 LASTWORD		 =	 ??0180
4  5321								 IFNB	 <>
4  5322								   DB
4  5323								 ELSE
4  5324	0000132B  00						   DB	 VEF_USUAL
4  5325								 ENDIF
4  5326	0000132C  18						 DB	 ??0181	- $ - 1
4  5327	0000132D  43 52	45 41 54 45 2D+				 DB	 'CREATE-WARN-ON-DUPLICATE'
   5328		  57 41	52 4E 2D 4F 4E+
   5329		  2D 44	55 50 4C 49 43+
   5330		  41 54	45
4  5331	00001345			 ??0181:
4  5332	00001345  1A						 DB	 ??0181	- ??0180
4  5333	00001346  2000130F					 DD	 VOC_LINK
4  5334		  =MAIN:2000132B	 VOC_LINK		 =	 ??0180	+ DESIRED_BASE_EQU
4  5335
4  5336								 IFNB	 <$CREATE_WOD>
4  5337	0000134A						   LABEL   $CREATE_WOD FAR
4  5338								 ENDIF
4  5339								 IFNB	 <$DOVAR>
4  5340	0000134A  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
4  5341								 ELSE
4  5342								   DD	   ??0183 + DESIRED_BASE_EQU
4  5343								 ENDIF
4  5344	0000134E			 ??0183:
2  5345								 CC	 F_FALSE
3  5346	0000134E  00000000					 DD	 F_FALSE
2  5347
2  5348					 ;  MAX-NAME-LENGTH
2  5349								 $VAR	 'MAX-NAME-LENGTH',$MAX_NAME_LENGTH
3  5350								 $DEF	 'MAX-NAME-LENGTH',$MAX_NAME_LENGTH,$DOVAR
4  5351	00001352			 ??0184:
4  5352		  =MAIN:1352		 LASTWORD		 =	 ??0184
4  5353								 IFNB	 <>
4  5354								   DB
4  5355								 ELSE
4  5356	00001352  00						   DB	 VEF_USUAL
4  5357								 ENDIF
4  5358	00001353  0F						 DB	 ??0185	- $ - 1
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 95
FKernel.asm



4  5359	00001354  4D 41	58 2D 4E 41 4D+				 DB	 'MAX-NAME-LENGTH'
   5360		  45 2D	4C 45 4E 47 54+
   5361		  48
4  5362	00001363			 ??0185:
4  5363	00001363  11						 DB	 ??0185	- ??0184
4  5364	00001364  2000132B					 DD	 VOC_LINK
4  5365		  =MAIN:20001352	 VOC_LINK		 =	 ??0184	+ DESIRED_BASE_EQU
4  5366
4  5367								 IFNB	 <$MAX_NAME_LENGTH>
4  5368	00001368						   LABEL   $MAX_NAME_LENGTH FAR
4  5369								 ENDIF
4  5370								 IFNB	 <$DOVAR>
4  5371	00001368  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
4  5372								 ELSE
4  5373								   DD	   ??0187 + DESIRED_BASE_EQU
4  5374								 ENDIF
4  5375	0000136C			 ??0187:
2  5376								 CC	 MAX_NAME_LENGTH
3  5377	0000136C  00000020					 DD	 MAX_NAME_LENGTH
2  5378
2  5379					 ;  &USUAL
2  5380					 ;  D: -- VEF-USUAL
2  5381								 $CONST	 '&USUAL',$AMP_USUAL
3  5382								 $DEF	 '&USUAL',$AMP_USUAL,$DOCONST
4  5383	00001370			 ??0188:
4  5384		  =MAIN:1370		 LASTWORD		 =	 ??0188
4  5385								 IFNB	 <>
4  5386								   DB
4  5387								 ELSE
4  5388	00001370  00						   DB	 VEF_USUAL
4  5389								 ENDIF
4  5390	00001371  06						 DB	 ??0189	- $ - 1
4  5391	00001372  26 55	53 55 41 4C				 DB	 '&USUAL'
4  5392	00001378			 ??0189:
4  5393	00001378  08						 DB	 ??0189	- ??0188
4  5394	00001379  20001352					 DD	 VOC_LINK
4  5395		  =MAIN:20001370	 VOC_LINK		 =	 ??0188	+ DESIRED_BASE_EQU
4  5396
4  5397								 IFNB	 <$AMP_USUAL>
4  5398	0000137D						   LABEL   $AMP_USUAL FAR
4  5399								 ENDIF
4  5400								 IFNB	 <$DOCONST>
4  5401	0000137D  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  5402								 ELSE
4  5403								   DD	   ??018B + DESIRED_BASE_EQU
4  5404								 ENDIF
4  5405	00001381			 ??018B:
2  5406								 CC	 VEF_USUAL
3  5407	00001381  00000000					 DD	 VEF_USUAL
2  5408
2  5409					 ;  &IMMEDIATE
2  5410					 ;  D: -- VEF-IMMEDIATE
2  5411								 $CONST	 '&IMMEDIATE',$AMP_IMMEDIATE
3  5412								 $DEF	 '&IMMEDIATE',$AMP_IMMEDIATE,$DOCONST
4  5413	00001385			 ??018C:
4  5414		  =MAIN:1385		 LASTWORD		 =	 ??018C
4  5415								 IFNB	 <>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 96
FKernel.asm



4  5416								   DB
4  5417								 ELSE
4  5418	00001385  00						   DB	 VEF_USUAL
4  5419								 ENDIF
4  5420	00001386  0A						 DB	 ??018D	- $ - 1
4  5421	00001387  26 49	4D 4D 45 44 49+				 DB	 '&IMMEDIATE'
   5422		  41 54	45
4  5423	00001391			 ??018D:
4  5424	00001391  0C						 DB	 ??018D	- ??018C
4  5425	00001392  20001370					 DD	 VOC_LINK
4  5426		  =MAIN:20001385	 VOC_LINK		 =	 ??018C	+ DESIRED_BASE_EQU
4  5427
4  5428								 IFNB	 <$AMP_IMMEDIATE>
4  5429	00001396						   LABEL   $AMP_IMMEDIATE FAR
4  5430								 ENDIF
4  5431								 IFNB	 <$DOCONST>
4  5432	00001396  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  5433								 ELSE
4  5434								   DD	   ??018F + DESIRED_BASE_EQU
4  5435								 ENDIF
4  5436	0000139A			 ??018F:
2  5437								 CC	 VEF_IMMEDIATE
3  5438	0000139A  00000001					 DD	 VEF_IMMEDIATE
2  5439
2  5440					 ;  &HIDDEN
2  5441					 ;  D: -- VEF-HIDDEN
2  5442								 $CONST	 '&HIDDEN',$AMP_HIDDEN
3  5443								 $DEF	 '&HIDDEN',$AMP_HIDDEN,$DOCONST
4  5444	0000139E			 ??0190:
4  5445		  =MAIN:139E		 LASTWORD		 =	 ??0190
4  5446								 IFNB	 <>
4  5447								   DB
4  5448								 ELSE
4  5449	0000139E  00						   DB	 VEF_USUAL
4  5450								 ENDIF
4  5451	0000139F  07						 DB	 ??0191	- $ - 1
4  5452	000013A0  26 48	49 44 44 45 4E				 DB	 '&HIDDEN'
4  5453	000013A7			 ??0191:
4  5454	000013A7  09						 DB	 ??0191	- ??0190
4  5455	000013A8  20001385					 DD	 VOC_LINK
4  5456		  =MAIN:2000139E	 VOC_LINK		 =	 ??0190	+ DESIRED_BASE_EQU
4  5457
4  5458								 IFNB	 <$AMP_HIDDEN>
4  5459	000013AC						   LABEL   $AMP_HIDDEN FAR
4  5460								 ENDIF
4  5461								 IFNB	 <$DOCONST>
4  5462	000013AC  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  5463								 ELSE
4  5464								   DD	   ??0193 + DESIRED_BASE_EQU
4  5465								 ENDIF
4  5466	000013B0			 ??0193:
2  5467								 CC	 VEF_HIDDEN
3  5468	000013B0  00000002					 DD	 VEF_HIDDEN
2  5469
2  5470					 ;  &COMPILE-ONLY
2  5471					 ;  D: -- VEF-COMPILE-ONLY
2  5472								 $CONST	 '&COMPILE-ONLY',$AMP_COMPILE_ONLY
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 97
FKernel.asm



3  5473								 $DEF	 '&COMPILE-ONLY',$AMP_COMPILE_ONLY,$DOCONST
4  5474	000013B4			 ??0194:
4  5475		  =MAIN:13B4		 LASTWORD		 =	 ??0194
4  5476								 IFNB	 <>
4  5477								   DB
4  5478								 ELSE
4  5479	000013B4  00						   DB	 VEF_USUAL
4  5480								 ENDIF
4  5481	000013B5  0D						 DB	 ??0195	- $ - 1
4  5482	000013B6  26 43	4F 4D 50 49 4C+				 DB	 '&COMPILE-ONLY'
   5483		  45 2D	4F 4E 4C 59
4  5484	000013C3			 ??0195:
4  5485	000013C3  0F						 DB	 ??0195	- ??0194
4  5486	000013C4  2000139E					 DD	 VOC_LINK
4  5487		  =MAIN:200013B4	 VOC_LINK		 =	 ??0194	+ DESIRED_BASE_EQU
4  5488
4  5489								 IFNB	 <$AMP_COMPILE_ONLY>
4  5490	000013C8						   LABEL   $AMP_COMPILE_ONLY FAR
4  5491								 ENDIF
4  5492								 IFNB	 <$DOCONST>
4  5493	000013C8  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  5494								 ELSE
4  5495								   DD	   ??0197 + DESIRED_BASE_EQU
4  5496								 ENDIF
4  5497	000013CC			 ??0197:
2  5498								 CC	 VEF_COMPILE_ONLY
3  5499	000013CC  00000004					 DD	 VEF_COMPILE_ONLY
2  5500
2  5501					 ;  &IMMEDIATE/COMPILE-ONLY
2  5502					 ;  D: -- VEF-IMMEDIATE	or VEF-COMPILE-ONLY
2  5503								 $CONST	 '&IMMEDIATE/COMPILE-ONLY',$AMP_IMMEDIATE_COMPILE_ONLY
3  5504								 $DEF	 '&IMMEDIATE/COMPILE-ONLY',$AMP_IMMEDIATE_COMPILE_ONLY,	    +
   5505					 $DOCONST
4  5506	000013D0			 ??0198:
4  5507		  =MAIN:13D0		 LASTWORD		 =	 ??0198
4  5508								 IFNB	 <>
4  5509								   DB
4  5510								 ELSE
4  5511	000013D0  00						   DB	 VEF_USUAL
4  5512								 ENDIF
4  5513	000013D1  17						 DB	 ??0199	- $ - 1
4  5514	000013D2  26 49	4D 4D 45 44 49+				 DB	 '&IMMEDIATE/COMPILE-ONLY'
   5515		  41 54	45 2F 43 4F 4D+
   5516		  50 49	4C 45 2D 4F 4E+
   5517		  4C 59
4  5518	000013E9			 ??0199:
4  5519	000013E9  19						 DB	 ??0199	- ??0198
4  5520	000013EA  200013B4					 DD	 VOC_LINK
4  5521		  =MAIN:200013D0	 VOC_LINK		 =	 ??0198	+ DESIRED_BASE_EQU
4  5522
4  5523								 IFNB	 <$AMP_IMMEDIATE_COMPILE_ONLY>
4  5524	000013EE						   LABEL   $AMP_IMMEDIATE_COMPILE_ONLY FAR
4  5525								 ENDIF
4  5526								 IFNB	 <$DOCONST>
4  5527	000013EE  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  5528								 ELSE
4  5529								   DD	   ??019B + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 98
FKernel.asm



4  5530								 ENDIF
4  5531	000013F2			 ??019B:
2  5532								 CC	 <VEF_IMMEDIATE	OR VEF_COMPILE_ONLY>
3  5533	000013F2  00000005					 DD	 VEF_IMMEDIATE OR VEF_COMPILE_ONLY
2  5534
2  5535					 ;  LATEST-HEAD@
2  5536					 ;  addr is the	link address of	the last compiled word in compilation wordlist.
2  5537					 ;  D: -- addr
2  5538								 $DEF	 'LATEST-HEAD@',$LATEST_HEAD_FETCH
3  5539	000013F6			 ??019C:
3  5540		  =MAIN:13F6		 LASTWORD		 =	 ??019C
3  5541								 IFNB	 <>
3  5542								   DB
3  5543								 ELSE
3  5544	000013F6  00						   DB	 VEF_USUAL
3  5545								 ENDIF
3  5546	000013F7  0C						 DB	 ??019D	- $ - 1
3  5547	000013F8  4C 41	54 45 53 54 2D+				 DB	 'LATEST-HEAD@'
   5548		  48 45	41 44 40
3  5549	00001404			 ??019D:
3  5550	00001404  0E						 DB	 ??019D	- ??019C
3  5551	00001405  200013D0					 DD	 VOC_LINK
3  5552		  =MAIN:200013F6	 VOC_LINK		 =	 ??019C	+ DESIRED_BASE_EQU
3  5553
3  5554								 IFNB	 <$LATEST_HEAD_FETCH>
3  5555	00001409						   LABEL   $LATEST_HEAD_FETCH FAR
3  5556								 ENDIF
3  5557								 IFNB	 <>
3  5558								   DD	    + DESIRED_BASE_EQU
3  5559								 ELSE
3  5560	00001409  2000140D					   DD	   ??019F + DESIRED_BASE_EQU
3  5561								 ENDIF
3  5562	0000140D			 ??019F:
2  5563	0000140D  8B 87	00000848				 MOV	 EAX,[DWORD PTR	EDI + CURRENT_VAR]	 ; get CURRENT wid
2  5564								 PUSHDS	 <[DWORD PTR EAX]>
3  5565	00001413  FF 30						 PUSH	 [DWORD	PTR EAX]
2  5566								 $NEXT
3  5567	00001415  AD						 LODSD				 ; fetch address
3  5568								 $JMP
4  5569	00001416  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  5570	00001418  FF E3						 JMP	 EBX			 ; execute
2  5571
2  5572					 ;  LATEST-HEAD!
2  5573					 ;  addr is the	link address of	the last compiled word in compilation wordlist.
2  5574					 ;  D: addr --
2  5575								 $DEF	 'LATEST-HEAD!',$LATEST_HEAD_STORE
3  5576	0000141A			 ??01A0:
3  5577		  =MAIN:141A		 LASTWORD		 =	 ??01A0
3  5578								 IFNB	 <>
3  5579								   DB
3  5580								 ELSE
3  5581	0000141A  00						   DB	 VEF_USUAL
3  5582								 ENDIF
3  5583	0000141B  0C						 DB	 ??01A1	- $ - 1
3  5584	0000141C  4C 41	54 45 53 54 2D+				 DB	 'LATEST-HEAD!'
   5585		  48 45	41 44 21
3  5586	00001428			 ??01A1:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 99
FKernel.asm



3  5587	00001428  0E						 DB	 ??01A1	- ??01A0
3  5588	00001429  200013F6					 DD	 VOC_LINK
3  5589		  =MAIN:2000141A	 VOC_LINK		 =	 ??01A0	+ DESIRED_BASE_EQU
3  5590
3  5591								 IFNB	 <$LATEST_HEAD_STORE>
3  5592	0000142D						   LABEL   $LATEST_HEAD_STORE FAR
3  5593								 ENDIF
3  5594								 IFNB	 <>
3  5595								   DD	    + DESIRED_BASE_EQU
3  5596								 ELSE
3  5597	0000142D  20001431					   DD	   ??01A3 + DESIRED_BASE_EQU
3  5598								 ENDIF
3  5599	00001431			 ??01A3:
2  5600	00001431  8B 87	00000848				 MOV	 EAX,[DWORD PTR	EDI + CURRENT_VAR]	 ; get CURRENT wid
2  5601								 POPDS	 <[DWORD PTR EAX]>
3  5602	00001437  8F 00						 POP	 [DWORD	PTR EAX]
2  5603								 $NEXT
3  5604	00001439  AD						 LODSD				 ; fetch address
3  5605								 $JMP
4  5606	0000143A  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  5607	0000143C  FF E3						 JMP	 EBX			 ; execute
2  5608
2  5609					 ;  CHECK-NAME
2  5610					 ;  D: c-addr count -- c-addr count
2  5611								 $COLON	 'CHECK-NAME',$CHECK_NAME
3  5612								 $DEF	 'CHECK-NAME',$CHECK_NAME,$ENTER,
4  5613	0000143E			 ??01A4:
4  5614		  =MAIN:143E		 LASTWORD		 =	 ??01A4
4  5615								 IFNB	 <>
4  5616								   DB
4  5617								 ELSE
4  5618	0000143E  00						   DB	 VEF_USUAL
4  5619								 ENDIF
4  5620	0000143F  0A						 DB	 ??01A5	- $ - 1
4  5621	00001440  43 48	45 43 4B 2D 4E+				 DB	 'CHECK-NAME'
   5622		  41 4D	45
4  5623	0000144A			 ??01A5:
4  5624	0000144A  0C						 DB	 ??01A5	- ??01A4
4  5625	0000144B  2000141A					 DD	 VOC_LINK
4  5626		  =MAIN:2000143E	 VOC_LINK		 =	 ??01A4	+ DESIRED_BASE_EQU
4  5627
4  5628								 IFNB	 <$CHECK_NAME>
4  5629	0000144F						   LABEL   $CHECK_NAME FAR
4  5630								 ENDIF
4  5631								 IFNB	 <$ENTER>
4  5632	0000144F  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5633								 ELSE
4  5634								   DD	   ??01A7 + DESIRED_BASE_EQU
4  5635								 ENDIF
4  5636	00001453			 ??01A7:
2  5637								 CW	 $DUP
3  5638	00001453  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  5639								 CW	 $ZEROEQ
3  5640	00001457  20001F09					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  5641								 CQBR	 NAME_ZEROGR
3  5642								 CW	 $QBRANCH
4  5643	0000145B  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 100
FKernel.asm



3  5644								 CW	 NAME_ZEROGR
4  5645	0000145F  2000146F					 DD	 NAME_ZEROGR + DESIRED_BASE_EQU
2  5646								   CTHROW  -16
3  5647								 CCLIT	 -16
4  5648								 CW	 $LIT
5  5649	00001463  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
4  5650								 CC	 -16
5  5651	00001467  FFFFFFF0					 DD	 -16
3  5652								 CW	 $THROW
4  5653	0000146B  20002AFD					 DD	 $THROW	+ DESIRED_BASE_EQU
2  5654	0000146F			 NAME_ZEROGR:
2  5655								 CW	 $DUP
3  5656	0000146F  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  5657								 CFETCH	 $MAX_NAME_LENGTH
3  5658								 CW	 $MAX_NAME_LENGTH
4  5659	00001473  20001368					 DD	 $MAX_NAME_LENGTH + DESIRED_BASE_EQU
3  5660								 CW	 $FETCH
4  5661	00001477  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  5662								 CW	 $GR
3  5663	0000147B  20001E7F					 DD	 $GR + DESIRED_BASE_EQU
2  5664								 CQBR	 NAME_OK
3  5665								 CW	 $QBRANCH
4  5666	0000147F  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5667								 CW	 NAME_OK
4  5668	00001483  20001493					 DD	 NAME_OK + DESIRED_BASE_EQU
2  5669								   CTHROW  -19
3  5670								 CCLIT	 -19
4  5671								 CW	 $LIT
5  5672	00001487  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
4  5673								 CC	 -19
5  5674	0000148B  FFFFFFED					 DD	 -19
3  5675								 CW	 $THROW
4  5676	0000148F  20002AFD					 DD	 $THROW	+ DESIRED_BASE_EQU
2  5677	00001493			 NAME_OK:
2  5678								 CEXIT
3  5679								 CW	 $EXIT
4  5680	00001493  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5681
2  5682					 ;  REPORT-NAME
2  5683					 ;  D: c-addr count -- c-addr count
2  5684								 $COLON	 'REPORT-NAME',$REPORT_NAME
3  5685								 $DEF	 'REPORT-NAME',$REPORT_NAME,$ENTER,
4  5686	00001497			 ??01A8:
4  5687		  =MAIN:1497		 LASTWORD		 =	 ??01A8
4  5688								 IFNB	 <>
4  5689								   DB
4  5690								 ELSE
4  5691	00001497  00						   DB	 VEF_USUAL
4  5692								 ENDIF
4  5693	00001498  0B						 DB	 ??01A9	- $ - 1
4  5694	00001499  52 45	50 4F 52 54 2D+				 DB	 'REPORT-NAME'
   5695		  4E 41	4D 45
4  5696	000014A4			 ??01A9:
4  5697	000014A4  0D						 DB	 ??01A9	- ??01A8
4  5698	000014A5  2000143E					 DD	 VOC_LINK
4  5699		  =MAIN:20001497	 VOC_LINK		 =	 ??01A8	+ DESIRED_BASE_EQU
4  5700
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 101
FKernel.asm



4  5701								 IFNB	 <$REPORT_NAME>
4  5702	000014A9						   LABEL   $REPORT_NAME	FAR
4  5703								 ENDIF
4  5704								 IFNB	 <$ENTER>
4  5705	000014A9  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5706								 ELSE
4  5707								   DD	   ??01AB + DESIRED_BASE_EQU
4  5708								 ENDIF
4  5709	000014AD			 ??01AB:
2  5710								 CFETCH	 $CREATE_REPORT
3  5711								 CW	 $CREATE_REPORT
4  5712	000014AD  20001323					 DD	 $CREATE_REPORT	+ DESIRED_BASE_EQU
3  5713								 CW	 $FETCH
4  5714	000014B1  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  5715								 CQBR	 NO_REPORT
3  5716								 CW	 $QBRANCH
4  5717	000014B5  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5718								 CW	 NO_REPORT
4  5719	000014B9  200014CB					 DD	 NO_REPORT + DESIRED_BASE_EQU
2  5720								   CW	   $2DUP
3  5721	000014BD  200018F1					 DD	 $2DUP + DESIRED_BASE_EQU
2  5722								   CW	   $TYPE
3  5723	000014C1  200008A7					 DD	 $TYPE + DESIRED_BASE_EQU
2  5724								   $WRITE  < >
3  5725								 CW	 $PTYPE
4  5726	000014C5  20000A32					 DD	 $PTYPE	+ DESIRED_BASE_EQU
3  5727	000014C9  01 20						 DB	 @@01AC	- $ - 1,' '
3  5728	000014CB			 @@01AC:
2  5729	000014CB			 NO_REPORT:
2  5730								 CEXIT
3  5731								 CW	 $EXIT
4  5732	000014CB  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5733
2  5734					 ;  CHECK-DUPLICATE-NAME
2  5735					 ;  D: c-addr count -- c-addr count
2  5736								 $COLON	 'CHECK-DUPLICATE-NAME',$CHECK_DUPLICATE_NAME
3  5737								 $DEF	 'CHECK-DUPLICATE-NAME',$CHECK_DUPLICATE_NAME,$ENTER,
4  5738	000014CF			 ??01AD:
4  5739		  =MAIN:14CF		 LASTWORD		 =	 ??01AD
4  5740								 IFNB	 <>
4  5741								   DB
4  5742								 ELSE
4  5743	000014CF  00						   DB	 VEF_USUAL
4  5744								 ENDIF
4  5745	000014D0  14						 DB	 ??01AE	- $ - 1
4  5746	000014D1  43 48	45 43 4B 2D 44+				 DB	 'CHECK-DUPLICATE-NAME'
   5747		  55 50	4C 49 43 41 54+
   5748		  45 2D	4E 41 4D 45
4  5749	000014E5			 ??01AE:
4  5750	000014E5  16						 DB	 ??01AE	- ??01AD
4  5751	000014E6  20001497					 DD	 VOC_LINK
4  5752		  =MAIN:200014CF	 VOC_LINK		 =	 ??01AD	+ DESIRED_BASE_EQU
4  5753
4  5754								 IFNB	 <$CHECK_DUPLICATE_NAME>
4  5755	000014EA						   LABEL   $CHECK_DUPLICATE_NAME FAR
4  5756								 ENDIF
4  5757								 IFNB	 <$ENTER>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 102
FKernel.asm



4  5758	000014EA  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5759								 ELSE
4  5760								   DD	   ??01B0 + DESIRED_BASE_EQU
4  5761								 ENDIF
4  5762	000014EE			 ??01B0:
2  5763								 CFETCH	 $CREATE_WOD
3  5764								 CW	 $CREATE_WOD
4  5765	000014EE  2000134A					 DD	 $CREATE_WOD + DESIRED_BASE_EQU
3  5766								 CW	 $FETCH
4  5767	000014F2  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  5768								 CQBR	 CDN_OK
3  5769								 CW	 $QBRANCH
4  5770	000014F6  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5771								 CW	 CDN_OK
4  5772	000014FA  20001541					 DD	 CDN_OK	+ DESIRED_BASE_EQU
2  5773								 CW	 $2DUP
3  5774	000014FE  200018F1					 DD	 $2DUP + DESIRED_BASE_EQU
2  5775								 CFETCH	 $CURRENT
3  5776								 CW	 $CURRENT
4  5777	00001502  20000314					 DD	 $CURRENT + DESIRED_BASE_EQU
3  5778								 CW	 $FETCH
4  5779	00001506  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  5780								 CW	 $SEARCH_WORDLIST	 ; c-addr u 0 |	c-addr u xt +/-1
3  5781	0000150A  200020BC					 DD	 $SEARCH_WORDLIST + DESIRED_BASE_EQU
2  5782								 CW	 $ZERONOEQ
3  5783	0000150E  20001F2C					 DD	 $ZERONOEQ + DESIRED_BASE_EQU
2  5784								 CQBR	 CDN_OK
3  5785								 CW	 $QBRANCH
4  5786	00001512  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5787								 CW	 CDN_OK
4  5788	00001516  20001541					 DD	 CDN_OK	+ DESIRED_BASE_EQU
2  5789								   CW	   $DROP
3  5790	0000151A  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  5791								   $WRITE  <Redefinition of >
3  5792								 CW	 $PTYPE
4  5793	0000151E  20000A32					 DD	 $PTYPE	+ DESIRED_BASE_EQU
3  5794	00001522  10 52	65 64 65 66 69+				 DB	 @@01B1	- $ - 1,'Redefinition of '
   5795		  6E 69	74 69 6F 6E 20+
   5796		  6F 66	20
3  5797	00001533			 @@01B1:
2  5798								   CW	   $2DUP
3  5799	00001533  200018F1					 DD	 $2DUP + DESIRED_BASE_EQU
2  5800								   CW	   $TYPE
3  5801	00001537  200008A7					 DD	 $TYPE + DESIRED_BASE_EQU
2  5802								   $WRITE  < >
3  5803								 CW	 $PTYPE
4  5804	0000153B  20000A32					 DD	 $PTYPE	+ DESIRED_BASE_EQU
3  5805	0000153F  01 20						 DB	 @@01B2	- $ - 1,' '
3  5806	00001541			 @@01B2:
2  5807	00001541			 CDN_OK:
2  5808								 CEXIT
3  5809								 CW	 $EXIT
4  5810	00001541  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5811
2  5812					 ;  (HEADER,)
2  5813					 ;  Compile header without CFA
2  5814					 ;  D: [ 0 0 | c-addr count ] flags --
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 103
FKernel.asm



2  5815								 $COLON	 '(HEADER,)',$PHEADERC
3  5816								 $DEF	 '(HEADER,)',$PHEADERC,$ENTER,
4  5817	00001545			 ??01B3:
4  5818		  =MAIN:1545		 LASTWORD		 =	 ??01B3
4  5819								 IFNB	 <>
4  5820								   DB
4  5821								 ELSE
4  5822	00001545  00						   DB	 VEF_USUAL
4  5823								 ENDIF
4  5824	00001546  09						 DB	 ??01B4	- $ - 1
4  5825	00001547  28 48	45 41 44 45 52+				 DB	 '(HEADER,)'
   5826		  2C 29
4  5827	00001550			 ??01B4:
4  5828	00001550  0B						 DB	 ??01B4	- ??01B3
4  5829	00001551  200014CF					 DD	 VOC_LINK
4  5830		  =MAIN:20001545	 VOC_LINK		 =	 ??01B3	+ DESIRED_BASE_EQU
4  5831
4  5832								 IFNB	 <$PHEADERC>
4  5833	00001555						   LABEL   $PHEADERC FAR
4  5834								 ENDIF
4  5835								 IFNB	 <$ENTER>
4  5836	00001555  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5837								 ELSE
4  5838								   DD	   ??01B6 + DESIRED_BASE_EQU
4  5839								 ENDIF
4  5840	00001559			 ??01B6:
2  5841								 CW	 $HERE
3  5842	00001559  20002775					 DD	 $HERE + DESIRED_BASE_EQU
2  5843								 CW	 $TOR
3  5844	0000155D  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  5845								 CW	 $CCOMMA		 ; compile flags
3  5846	00001561  200026C6					 DD	 $CCOMMA + DESIRED_BASE_EQU
2  5847								 CW	 $SWAP			 ; count c-addr
3  5848	00001565  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  5849								 CW	 $OVER			 ; count c-addr	count
3  5850	00001569  2000198C					 DD	 $OVER + DESIRED_BASE_EQU
2  5851								 CW	 $DUP
3  5852	0000156D  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  5853								 CW	 $CCOMMA		 ; compile length
3  5854	00001571  200026C6					 DD	 $CCOMMA + DESIRED_BASE_EQU
2  5855								 CW	 $QDUP
3  5856	00001575  200018BE					 DD	 $QDUP + DESIRED_BASE_EQU
2  5857								 CQBR	 NO_NAME
3  5858								 CW	 $QBRANCH
4  5859	00001579  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5860								 CW	 NO_NAME
4  5861	0000157D  2000159D					 DD	 NO_NAME + DESIRED_BASE_EQU
2  5862								   CW	   $HERE		   ; count c-addr count	here
3  5863	00001581  20002775					 DD	 $HERE + DESIRED_BASE_EQU
2  5864								   CW	   $SWAP		   ; count c-addr here count
3  5865	00001585  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  5866								   CW	   $DUP
3  5867	00001589  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  5868								   CW	   $ALLOT
3  5869	0000158D  200026AD					 DD	 $ALLOT	+ DESIRED_BASE_EQU
2  5870								   CW	   $CMOVE		   ; put name
3  5871	00001591  20002791					 DD	 $CMOVE	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 104
FKernel.asm



2  5872								 CBR	 NAME_EXIT
3  5873								 CW	 $BRANCH
4  5874	00001595  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  5875								 CW	 NAME_EXIT
4  5876	00001599  200015A1					 DD	 NAME_EXIT + DESIRED_BASE_EQU
2  5877	0000159D			 NO_NAME:
2  5878								   CW	   $DROP
3  5879	0000159D  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  5880	000015A1			 NAME_EXIT:
2  5881								 CCLIT	 2
3  5882								 CW	 $LIT
4  5883	000015A1  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  5884								 CC	 2
4  5885	000015A5  00000002					 DD	 2
2  5886								 CW	 $ADD
3  5887	000015A9  20001C1F					 DD	 $ADD +	DESIRED_BASE_EQU
2  5888								 CW	 $CCOMMA		 ; compile (length + 2)
3  5889	000015AD  200026C6					 DD	 $CCOMMA + DESIRED_BASE_EQU
2  5890								 CW	 $LATEST_HEAD_FETCH
3  5891	000015B1  20001409					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
2  5892								 CW	 $COMMA
3  5893	000015B5  2000266D					 DD	 $COMMA	+ DESIRED_BASE_EQU
2  5894								 CW	 $RFROM
3  5895	000015B9  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  5896								 CW	 $LATEST_HEAD_STORE
3  5897	000015BD  2000142D					 DD	 $LATEST_HEAD_STORE + DESIRED_BASE_EQU
2  5898								 CEXIT
3  5899								 CW	 $EXIT
4  5900	000015C1  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5901
2  5902					 ;  (CFA,)
2  5903					 ;  Compile CFA	after (HEADER,)
2  5904					 ;  D: executor-xt | 0 -- xt
2  5905								 $COLON	 '(CFA,)',$PCFA_C
3  5906								 $DEF	 '(CFA,)',$PCFA_C,$ENTER,
4  5907	000015C5			 ??01B7:
4  5908		  =MAIN:15C5		 LASTWORD		 =	 ??01B7
4  5909								 IFNB	 <>
4  5910								   DB
4  5911								 ELSE
4  5912	000015C5  00						   DB	 VEF_USUAL
4  5913								 ENDIF
4  5914	000015C6  06						 DB	 ??01B8	- $ - 1
4  5915	000015C7  28 43	46 41 2C 29				 DB	 '(CFA,)'
4  5916	000015CD			 ??01B8:
4  5917	000015CD  08						 DB	 ??01B8	- ??01B7
4  5918	000015CE  20001545					 DD	 VOC_LINK
4  5919		  =MAIN:200015C5	 VOC_LINK		 =	 ??01B7	+ DESIRED_BASE_EQU
4  5920
4  5921								 IFNB	 <$PCFA_C>
4  5922	000015D2						   LABEL   $PCFA_C FAR
4  5923								 ENDIF
4  5924								 IFNB	 <$ENTER>
4  5925	000015D2  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5926								 ELSE
4  5927								   DD	   ??01BA + DESIRED_BASE_EQU
4  5928								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 105
FKernel.asm



4  5929	000015D6			 ??01BA:
2  5930								 CW	 $DUP
3  5931	000015D6  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  5932								 CW	 $ZEROEQ
3  5933	000015DA  20001F09					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  5934								 CQBR	 EXECUTOR_XT
3  5935								 CW	 $QBRANCH
4  5936	000015DE  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5937								 CW	 EXECUTOR_XT
4  5938	000015E2  200015FA					 DD	 EXECUTOR_XT + DESIRED_BASE_EQU
2  5939								   CW	   $DROP
3  5940	000015E6  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  5941								   CW	   $HERE
3  5942	000015EA  20002775					 DD	 $HERE + DESIRED_BASE_EQU
2  5943								   CCLIT   CELL_SIZE
3  5944								 CW	 $LIT
4  5945	000015EE  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  5946								 CC	 CELL_SIZE
4  5947	000015F2  00000004					 DD	 CELL_SIZE
2  5948								   CW	   $ADD
3  5949	000015F6  20001C1F					 DD	 $ADD +	DESIRED_BASE_EQU
2  5950	000015FA			 EXECUTOR_XT:
2  5951								 CW	 $HERE
3  5952	000015FA  20002775					 DD	 $HERE + DESIRED_BASE_EQU
2  5953								 CW	 $SWAP
3  5954	000015FE  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  5955								 CW	 $COMMA
3  5956	00001602  2000266D					 DD	 $COMMA	+ DESIRED_BASE_EQU
2  5957								 CEXIT
3  5958								 CW	 $EXIT
4  5959	00001606  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5960
2  5961					 ;  HEADER,
2  5962					 ;  D: [ executor-xt | 0 ] [ 0 0 | c-addr count	] flags	-- xt
2  5963								 $COLON	 'HEADER,',$HEADERC
3  5964								 $DEF	 'HEADER,',$HEADERC,$ENTER,
4  5965	0000160A			 ??01BB:
4  5966		  =MAIN:160A		 LASTWORD		 =	 ??01BB
4  5967								 IFNB	 <>
4  5968								   DB
4  5969								 ELSE
4  5970	0000160A  00						   DB	 VEF_USUAL
4  5971								 ENDIF
4  5972	0000160B  07						 DB	 ??01BC	- $ - 1
4  5973	0000160C  48 45	41 44 45 52 2C				 DB	 'HEADER,'
4  5974	00001613			 ??01BC:
4  5975	00001613  09						 DB	 ??01BC	- ??01BB
4  5976	00001614  200015C5					 DD	 VOC_LINK
4  5977		  =MAIN:2000160A	 VOC_LINK		 =	 ??01BB	+ DESIRED_BASE_EQU
4  5978
4  5979								 IFNB	 <$HEADERC>
4  5980	00001618						   LABEL   $HEADERC FAR
4  5981								 ENDIF
4  5982								 IFNB	 <$ENTER>
4  5983	00001618  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  5984								 ELSE
4  5985								   DD	   ??01BE + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 106
FKernel.asm



4  5986								 ENDIF
4  5987	0000161C			 ??01BE:
2  5988								 CW	 $PHEADERC
3  5989	0000161C  20001555					 DD	 $PHEADERC + DESIRED_BASE_EQU
2  5990								 CW	 $PCFA_C
3  5991	00001620  200015D2					 DD	 $PCFA_C + DESIRED_BASE_EQU
2  5992								 CEXIT
3  5993								 CW	 $EXIT
4  5994	00001624  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  5995
2  5996					 ;  CHECK-HEADER,
2  5997					 ;  D: [ executor-xt | 0 ] [ 0 0 | c-addr count	] flags	-- xt
2  5998								 $COLON	 'CHECK-HEADER,',$CHECK_HEADERC
3  5999								 $DEF	 'CHECK-HEADER,',$CHECK_HEADERC,$ENTER,
4  6000	00001628			 ??01BF:
4  6001		  =MAIN:1628		 LASTWORD		 =	 ??01BF
4  6002								 IFNB	 <>
4  6003								   DB
4  6004								 ELSE
4  6005	00001628  00						   DB	 VEF_USUAL
4  6006								 ENDIF
4  6007	00001629  0D						 DB	 ??01C0	- $ - 1
4  6008	0000162A  43 48	45 43 4B 2D 48+				 DB	 'CHECK-HEADER,'
   6009		  45 41	44 45 52 2C
4  6010	00001637			 ??01C0:
4  6011	00001637  0F						 DB	 ??01C0	- ??01BF
4  6012	00001638  2000160A					 DD	 VOC_LINK
4  6013		  =MAIN:20001628	 VOC_LINK		 =	 ??01BF	+ DESIRED_BASE_EQU
4  6014
4  6015								 IFNB	 <$CHECK_HEADERC>
4  6016	0000163C						   LABEL   $CHECK_HEADERC FAR
4  6017								 ENDIF
4  6018								 IFNB	 <$ENTER>
4  6019	0000163C  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6020								 ELSE
4  6021								   DD	   ??01C2 + DESIRED_BASE_EQU
4  6022								 ENDIF
4  6023	00001640			 ??01C2:
2  6024								 CW	 $TOR
3  6025	00001640  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  6026								 CW	 $CHECK_NAME
3  6027	00001644  2000144F					 DD	 $CHECK_NAME + DESIRED_BASE_EQU
2  6028								 CW	 $REPORT_NAME
3  6029	00001648  200014A9					 DD	 $REPORT_NAME +	DESIRED_BASE_EQU
2  6030								 CW	 $CHECK_DUPLICATE_NAME
3  6031	0000164C  200014EA					 DD	 $CHECK_DUPLICATE_NAME + DESIRED_BASE_EQU
2  6032								 CW	 $RFROM
3  6033	00001650  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  6034								 CW	 $HEADERC
3  6035	00001654  20001618					 DD	 $HEADERC + DESIRED_BASE_EQU
2  6036								 CEXIT
3  6037								 CW	 $EXIT
4  6038	00001658  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6039
2  6040					 ;  PARSE-CHECK-HEADER,
2  6041					 ;  D: [ executor-xt | 0 ] flags "name"	-- xt
2  6042								 $COLON	 'PARSE-CHECK-HEADER,',$PARSE_CHECK_HEADERC
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 107
FKernel.asm



3  6043								 $DEF	 'PARSE-CHECK-HEADER,',$PARSE_CHECK_HEADERC,$ENTER,
4  6044	0000165C			 ??01C3:
4  6045		  =MAIN:165C		 LASTWORD		 =	 ??01C3
4  6046								 IFNB	 <>
4  6047								   DB
4  6048								 ELSE
4  6049	0000165C  00						   DB	 VEF_USUAL
4  6050								 ENDIF
4  6051	0000165D  13						 DB	 ??01C4	- $ - 1
4  6052	0000165E  50 41	52 53 45 2D 43+				 DB	 'PARSE-CHECK-HEADER,'
   6053		  48 45	43 4B 2D 48 45+
   6054		  41 44	45 52 2C
4  6055	00001671			 ??01C4:
4  6056	00001671  15						 DB	 ??01C4	- ??01C3
4  6057	00001672  20001628					 DD	 VOC_LINK
4  6058		  =MAIN:2000165C	 VOC_LINK		 =	 ??01C3	+ DESIRED_BASE_EQU
4  6059
4  6060								 IFNB	 <$PARSE_CHECK_HEADERC>
4  6061	00001676						   LABEL   $PARSE_CHECK_HEADERC	FAR
4  6062								 ENDIF
4  6063								 IFNB	 <$ENTER>
4  6064	00001676  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6065								 ELSE
4  6066								   DD	   ??01C6 + DESIRED_BASE_EQU
4  6067								 ENDIF
4  6068	0000167A			 ??01C6:
2  6069								 CW	 $TOR
3  6070	0000167A  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  6071								 CW	 $BL
3  6072	0000167E  200003BA					 DD	 $BL + DESIRED_BASE_EQU
2  6073								 CW	 $WORD
3  6074	00001682  200024CA					 DD	 $WORD + DESIRED_BASE_EQU
2  6075								 CW	 $COUNT
3  6076	00001686  20002807					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  6077								 CW	 $RFROM
3  6078	0000168A  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  6079								 CW	 $CHECK_HEADERC
3  6080	0000168E  2000163C					 DD	 $CHECK_HEADERC	+ DESIRED_BASE_EQU
2  6081								 CEXIT
3  6082								 CW	 $EXIT
4  6083	00001692  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6084
2  6085					 ;  HFLAGS!
2  6086					 ;  D: x h-id --
2  6087					 ;  Store flags	specified by x to the flags field of the header
2  6088								 $COLON	 'HFLAGS!',$HFLAGS_STORE
3  6089								 $DEF	 'HFLAGS!',$HFLAGS_STORE,$ENTER,
4  6090	00001696			 ??01C7:
4  6091		  =MAIN:1696		 LASTWORD		 =	 ??01C7
4  6092								 IFNB	 <>
4  6093								   DB
4  6094								 ELSE
4  6095	00001696  00						   DB	 VEF_USUAL
4  6096								 ENDIF
4  6097	00001697  07						 DB	 ??01C8	- $ - 1
4  6098	00001698  48 46	4C 41 47 53 21				 DB	 'HFLAGS!'
4  6099	0000169F			 ??01C8:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 108
FKernel.asm



4  6100	0000169F  09						 DB	 ??01C8	- ??01C7
4  6101	000016A0  2000165C					 DD	 VOC_LINK
4  6102		  =MAIN:20001696	 VOC_LINK		 =	 ??01C7	+ DESIRED_BASE_EQU
4  6103
4  6104								 IFNB	 <$HFLAGS_STORE>
4  6105	000016A4						   LABEL   $HFLAGS_STORE FAR
4  6106								 ENDIF
4  6107								 IFNB	 <$ENTER>
4  6108	000016A4  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6109								 ELSE
4  6110								   DD	   ??01CA + DESIRED_BASE_EQU
4  6111								 ENDIF
4  6112	000016A8			 ??01CA:
2  6113								 CW	 $CSTORE
3  6114	000016A8  2000200F					 DD	 $CSTORE + DESIRED_BASE_EQU
2  6115								 CEXIT
3  6116								 CW	 $EXIT
4  6117	000016AC  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6118
2  6119					 ;  HFLAGS@
2  6120					 ;  D: h-id -- x
2  6121					 ;  Get	flags from the flags field of the header
2  6122								 $COLON	 'HFLAGS@',$HFLAGS_FETCH
3  6123								 $DEF	 'HFLAGS@',$HFLAGS_FETCH,$ENTER,
4  6124	000016B0			 ??01CB:
4  6125		  =MAIN:16B0		 LASTWORD		 =	 ??01CB
4  6126								 IFNB	 <>
4  6127								   DB
4  6128								 ELSE
4  6129	000016B0  00						   DB	 VEF_USUAL
4  6130								 ENDIF
4  6131	000016B1  07						 DB	 ??01CC	- $ - 1
4  6132	000016B2  48 46	4C 41 47 53 40				 DB	 'HFLAGS@'
4  6133	000016B9			 ??01CC:
4  6134	000016B9  09						 DB	 ??01CC	- ??01CB
4  6135	000016BA  20001696					 DD	 VOC_LINK
4  6136		  =MAIN:200016B0	 VOC_LINK		 =	 ??01CB	+ DESIRED_BASE_EQU
4  6137
4  6138								 IFNB	 <$HFLAGS_FETCH>
4  6139	000016BE						   LABEL   $HFLAGS_FETCH FAR
4  6140								 ENDIF
4  6141								 IFNB	 <$ENTER>
4  6142	000016BE  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6143								 ELSE
4  6144								   DD	   ??01CE + DESIRED_BASE_EQU
4  6145								 ENDIF
4  6146	000016C2			 ??01CE:
2  6147								 CW	 $CFETCH
3  6148	000016C2  20002025					 DD	 $CFETCH + DESIRED_BASE_EQU
2  6149								 CEXIT
3  6150								 CW	 $EXIT
4  6151	000016C6  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6152
2  6153					 ;  SET-HFLAGS!
2  6154					 ;  D: flags --
2  6155								 $COLON	 'SET-HFLAGS!',$SET_HFLAGS_STORE
3  6156								 $DEF	 'SET-HFLAGS!',$SET_HFLAGS_STORE,$ENTER,
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 109
FKernel.asm



4  6157	000016CA			 ??01CF:
4  6158		  =MAIN:16CA		 LASTWORD		 =	 ??01CF
4  6159								 IFNB	 <>
4  6160								   DB
4  6161								 ELSE
4  6162	000016CA  00						   DB	 VEF_USUAL
4  6163								 ENDIF
4  6164	000016CB  0B						 DB	 ??01D0	- $ - 1
4  6165	000016CC  53 45	54 2D 48 46 4C+				 DB	 'SET-HFLAGS!'
   6166		  41 47	53 21
4  6167	000016D7			 ??01D0:
4  6168	000016D7  0D						 DB	 ??01D0	- ??01CF
4  6169	000016D8  200016B0					 DD	 VOC_LINK
4  6170		  =MAIN:200016CA	 VOC_LINK		 =	 ??01CF	+ DESIRED_BASE_EQU
4  6171
4  6172								 IFNB	 <$SET_HFLAGS_STORE>
4  6173	000016DC						   LABEL   $SET_HFLAGS_STORE FAR
4  6174								 ENDIF
4  6175								 IFNB	 <$ENTER>
4  6176	000016DC  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6177								 ELSE
4  6178								   DD	   ??01D2 + DESIRED_BASE_EQU
4  6179								 ENDIF
4  6180	000016E0			 ??01D2:
2  6181								 CW	 $LATEST_HEAD_FETCH
3  6182	000016E0  20001409					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
2  6183								 CW	 $DUP
3  6184	000016E4  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  6185								 CW	 $HFLAGS_FETCH
3  6186	000016E8  200016BE					 DD	 $HFLAGS_FETCH + DESIRED_BASE_EQU
2  6187								 CW	 $ROT
3  6188	000016EC  200019A4					 DD	 $ROT +	DESIRED_BASE_EQU
2  6189								 CW	 $OR
3  6190	000016F0  20001DAA					 DD	 $OR + DESIRED_BASE_EQU
2  6191								 CW	 $SWAP
3  6192	000016F4  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  6193								 CW	 $HFLAGS_STORE
3  6194	000016F8  200016A4					 DD	 $HFLAGS_STORE + DESIRED_BASE_EQU
2  6195								 CEXIT
3  6196								 CW	 $EXIT
4  6197	000016FC  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6198
2  6199					 ;  RESET-HFLAGS!
2  6200					 ;  D: flags --
2  6201								 $COLON	 'RESET-HFLAGS!',$RESET_HFLAGS_STORE
3  6202								 $DEF	 'RESET-HFLAGS!',$RESET_HFLAGS_STORE,$ENTER,
4  6203	00001700			 ??01D3:
4  6204		  =MAIN:1700		 LASTWORD		 =	 ??01D3
4  6205								 IFNB	 <>
4  6206								   DB
4  6207								 ELSE
4  6208	00001700  00						   DB	 VEF_USUAL
4  6209								 ENDIF
4  6210	00001701  0D						 DB	 ??01D4	- $ - 1
4  6211	00001702  52 45	53 45 54 2D 48+				 DB	 'RESET-HFLAGS!'
   6212		  46 4C	41 47 53 21
4  6213	0000170F			 ??01D4:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 110
FKernel.asm



4  6214	0000170F  0F						 DB	 ??01D4	- ??01D3
4  6215	00001710  200016CA					 DD	 VOC_LINK
4  6216		  =MAIN:20001700	 VOC_LINK		 =	 ??01D3	+ DESIRED_BASE_EQU
4  6217
4  6218								 IFNB	 <$RESET_HFLAGS_STORE>
4  6219	00001714						   LABEL   $RESET_HFLAGS_STORE FAR
4  6220								 ENDIF
4  6221								 IFNB	 <$ENTER>
4  6222	00001714  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6223								 ELSE
4  6224								   DD	   ??01D6 + DESIRED_BASE_EQU
4  6225								 ENDIF
4  6226	00001718			 ??01D6:
2  6227								 CW	 $LATEST_HEAD_FETCH
3  6228	00001718  20001409					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
2  6229								 CW	 $DUP
3  6230	0000171C  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  6231								 CW	 $HFLAGS_FETCH
3  6232	00001720  200016BE					 DD	 $HFLAGS_FETCH + DESIRED_BASE_EQU
2  6233								 CW	 $ROT
3  6234	00001724  200019A4					 DD	 $ROT +	DESIRED_BASE_EQU
2  6235								 CW	 $INVERT
3  6236	00001728  20001D94					 DD	 $INVERT + DESIRED_BASE_EQU
2  6237								 CW	 $AND
3  6238	0000172C  20001D79					 DD	 $AND +	DESIRED_BASE_EQU
2  6239								 CW	 $SWAP
3  6240	00001730  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  6241								 CW	 $HFLAGS_STORE
3  6242	00001734  200016A4					 DD	 $HFLAGS_STORE + DESIRED_BASE_EQU
2  6243								 CEXIT
3  6244								 CW	 $EXIT
4  6245	00001738  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6246
2  6247					 ;  INVERT-HFLAGS!
2  6248					 ;  D: flags --
2  6249								 $COLON	 'INVERT-HFLAGS!',$INVERT_HFLAGS_STORE
3  6250								 $DEF	 'INVERT-HFLAGS!',$INVERT_HFLAGS_STORE,$ENTER,
4  6251	0000173C			 ??01D7:
4  6252		  =MAIN:173C		 LASTWORD		 =	 ??01D7
4  6253								 IFNB	 <>
4  6254								   DB
4  6255								 ELSE
4  6256	0000173C  00						   DB	 VEF_USUAL
4  6257								 ENDIF
4  6258	0000173D  0E						 DB	 ??01D8	- $ - 1
4  6259	0000173E  49 4E	56 45 52 54 2D+				 DB	 'INVERT-HFLAGS!'
   6260		  48 46	4C 41 47 53 21
4  6261	0000174C			 ??01D8:
4  6262	0000174C  10						 DB	 ??01D8	- ??01D7
4  6263	0000174D  20001700					 DD	 VOC_LINK
4  6264		  =MAIN:2000173C	 VOC_LINK		 =	 ??01D7	+ DESIRED_BASE_EQU
4  6265
4  6266								 IFNB	 <$INVERT_HFLAGS_STORE>
4  6267	00001751						   LABEL   $INVERT_HFLAGS_STORE	FAR
4  6268								 ENDIF
4  6269								 IFNB	 <$ENTER>
4  6270	00001751  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 111
FKernel.asm



4  6271								 ELSE
4  6272								   DD	   ??01DA + DESIRED_BASE_EQU
4  6273								 ENDIF
4  6274	00001755			 ??01DA:
2  6275								 CW	 $LATEST_HEAD_FETCH
3  6276	00001755  20001409					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
2  6277								 CW	 $DUP
3  6278	00001759  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  6279								 CW	 $HFLAGS_FETCH
3  6280	0000175D  200016BE					 DD	 $HFLAGS_FETCH + DESIRED_BASE_EQU
2  6281								 CW	 $ROT
3  6282	00001761  200019A4					 DD	 $ROT +	DESIRED_BASE_EQU
2  6283								 CW	 $XOR
3  6284	00001765  20001DC2					 DD	 $XOR +	DESIRED_BASE_EQU
2  6285								 CW	 $SWAP
3  6286	00001769  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  6287								 CW	 $HFLAGS_STORE
3  6288	0000176D  200016A4					 DD	 $HFLAGS_STORE + DESIRED_BASE_EQU
2  6289								 CEXIT
3  6290								 CW	 $EXIT
4  6291	00001771  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6292
2  6293					 ;  >HEAD
2  6294					 ;  D: xt -- h-id
2  6295					 ;  h-id is the	address	of vocabulary entry flags
2  6296								 $DEF	 '>HEAD',$TO_HEAD
3  6297	00001775			 ??01DB:
3  6298		  =MAIN:1775		 LASTWORD		 =	 ??01DB
3  6299								 IFNB	 <>
3  6300								   DB
3  6301								 ELSE
3  6302	00001775  00						   DB	 VEF_USUAL
3  6303								 ENDIF
3  6304	00001776  05						 DB	 ??01DC	- $ - 1
3  6305	00001777  3E 48	45 41 44				 DB	 '>HEAD'
3  6306	0000177C			 ??01DC:
3  6307	0000177C  07						 DB	 ??01DC	- ??01DB
3  6308	0000177D  2000173C					 DD	 VOC_LINK
3  6309		  =MAIN:20001775	 VOC_LINK		 =	 ??01DB	+ DESIRED_BASE_EQU
3  6310
3  6311								 IFNB	 <$TO_HEAD>
3  6312	00001781						   LABEL   $TO_HEAD FAR
3  6313								 ENDIF
3  6314								 IFNB	 <>
3  6315								   DD	    + DESIRED_BASE_EQU
3  6316								 ELSE
3  6317	00001781  20001785					   DD	   ??01DE + DESIRED_BASE_EQU
3  6318								 ENDIF
3  6319	00001785			 ??01DE:
2  6320								 POPDS	 EAX
3  6321	00001785  58						 POP	 EAX
2  6322	00001786  83 E8	05					 SUB	 EAX,5
2  6323	00001789  33 DB						 XOR	 EBX,EBX
2  6324	0000178B  8A 18						 MOV	 BL,[BYTE PTR EAX]
2  6325	0000178D  2B C3						 SUB	 EAX,EBX
2  6326								 PUSHDS	 EAX
3  6327	0000178F  50						 PUSH	 EAX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 112
FKernel.asm



2  6328								 $NEXT
3  6329	00001790  AD						 LODSD				 ; fetch address
3  6330								 $JMP
4  6331	00001791  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6332	00001793  FF E3						 JMP	 EBX			 ; execute
2  6333
2  6334					 ;  HEAD>
2  6335					 ;  D: h-id -- xt
2  6336					 ;  h-id is the	address	of vocabulary entry flags
2  6337								 $DEF	 'HEAD>',$HEAD_FROM
3  6338	00001795			 ??01DF:
3  6339		  =MAIN:1795		 LASTWORD		 =	 ??01DF
3  6340								 IFNB	 <>
3  6341								   DB
3  6342								 ELSE
3  6343	00001795  00						   DB	 VEF_USUAL
3  6344								 ENDIF
3  6345	00001796  05						 DB	 ??01E0	- $ - 1
3  6346	00001797  48 45	41 44 3E				 DB	 'HEAD>'
3  6347	0000179C			 ??01E0:
3  6348	0000179C  07						 DB	 ??01E0	- ??01DF
3  6349	0000179D  20001775					 DD	 VOC_LINK
3  6350		  =MAIN:20001795	 VOC_LINK		 =	 ??01DF	+ DESIRED_BASE_EQU
3  6351
3  6352								 IFNB	 <$HEAD_FROM>
3  6353	000017A1						   LABEL   $HEAD_FROM FAR
3  6354								 ENDIF
3  6355								 IFNB	 <>
3  6356								   DD	    + DESIRED_BASE_EQU
3  6357								 ELSE
3  6358	000017A1  200017A5					   DD	   ??01E2 + DESIRED_BASE_EQU
3  6359								 ENDIF
3  6360	000017A5			 ??01E2:
2  6361								 POPDS	 EAX
3  6362	000017A5  58						 POP	 EAX
2  6363	000017A6  40						 INC	 EAX
2  6364	000017A7  33 DB						 XOR	 EBX,EBX
2  6365	000017A9  8A 18						 MOV	 BL,[BYTE PTR EAX]
2  6366	000017AB  03 C3						 ADD	 EAX,EBX
2  6367	000017AD  83 C0	06					 ADD	 EAX,6
2  6368								 PUSHDS	 EAX
3  6369	000017B0  50						 PUSH	 EAX
2  6370								 $NEXT
3  6371	000017B1  AD						 LODSD				 ; fetch address
3  6372								 $JMP
4  6373	000017B2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6374	000017B4  FF E3						 JMP	 EBX			 ; execute
2  6375
2  6376					 ;  HEAD>NAME
2  6377								 $COLON	 'HEAD>NAME',$HEAD_TO_NAME
3  6378								 $DEF	 'HEAD>NAME',$HEAD_TO_NAME,$ENTER,
4  6379	000017B6			 ??01E3:
4  6380		  =MAIN:17B6		 LASTWORD		 =	 ??01E3
4  6381								 IFNB	 <>
4  6382								   DB
4  6383								 ELSE
4  6384	000017B6  00						   DB	 VEF_USUAL
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 113
FKernel.asm



4  6385								 ENDIF
4  6386	000017B7  09						 DB	 ??01E4	- $ - 1
4  6387	000017B8  48 45	41 44 3E 4E 41+				 DB	 'HEAD>NAME'
   6388		  4D 45
4  6389	000017C1			 ??01E4:
4  6390	000017C1  0B						 DB	 ??01E4	- ??01E3
4  6391	000017C2  20001795					 DD	 VOC_LINK
4  6392		  =MAIN:200017B6	 VOC_LINK		 =	 ??01E3	+ DESIRED_BASE_EQU
4  6393
4  6394								 IFNB	 <$HEAD_TO_NAME>
4  6395	000017C6						   LABEL   $HEAD_TO_NAME FAR
4  6396								 ENDIF
4  6397								 IFNB	 <$ENTER>
4  6398	000017C6  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6399								 ELSE
4  6400								   DD	   ??01E6 + DESIRED_BASE_EQU
4  6401								 ENDIF
4  6402	000017CA			 ??01E6:
2  6403								 CW	 $1ADD
3  6404	000017CA  20001C4C					 DD	 $1ADD + DESIRED_BASE_EQU
2  6405								 CEXIT
3  6406								 CW	 $EXIT
4  6407	000017CE  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6408
2  6409					 ;  NAME>HEAD
2  6410								 $COLON	 'NAME>HEAD',$NAME_TO_HEAD
3  6411								 $DEF	 'NAME>HEAD',$NAME_TO_HEAD,$ENTER,
4  6412	000017D2			 ??01E7:
4  6413		  =MAIN:17D2		 LASTWORD		 =	 ??01E7
4  6414								 IFNB	 <>
4  6415								   DB
4  6416								 ELSE
4  6417	000017D2  00						   DB	 VEF_USUAL
4  6418								 ENDIF
4  6419	000017D3  09						 DB	 ??01E8	- $ - 1
4  6420	000017D4  4E 41	4D 45 3E 48 45+				 DB	 'NAME>HEAD'
   6421		  41 44
4  6422	000017DD			 ??01E8:
4  6423	000017DD  0B						 DB	 ??01E8	- ??01E7
4  6424	000017DE  200017B6					 DD	 VOC_LINK
4  6425		  =MAIN:200017D2	 VOC_LINK		 =	 ??01E7	+ DESIRED_BASE_EQU
4  6426
4  6427								 IFNB	 <$NAME_TO_HEAD>
4  6428	000017E2						   LABEL   $NAME_TO_HEAD FAR
4  6429								 ENDIF
4  6430								 IFNB	 <$ENTER>
4  6431	000017E2  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6432								 ELSE
4  6433								   DD	   ??01EA + DESIRED_BASE_EQU
4  6434								 ENDIF
4  6435	000017E6			 ??01EA:
2  6436								 CW	 $1SUB
3  6437	000017E6  20001C61					 DD	 $1SUB + DESIRED_BASE_EQU
2  6438								 CEXIT
3  6439								 CW	 $EXIT
4  6440	000017EA  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6441
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 114
FKernel.asm



2  6442					 ;  >NAME
2  6443					 ;  D: xt -- name-addr
2  6444								 $COLON	 '>NAME',$TO_NAME
3  6445								 $DEF	 '>NAME',$TO_NAME,$ENTER,
4  6446	000017EE			 ??01EB:
4  6447		  =MAIN:17EE		 LASTWORD		 =	 ??01EB
4  6448								 IFNB	 <>
4  6449								   DB
4  6450								 ELSE
4  6451	000017EE  00						   DB	 VEF_USUAL
4  6452								 ENDIF
4  6453	000017EF  05						 DB	 ??01EC	- $ - 1
4  6454	000017F0  3E 4E	41 4D 45				 DB	 '>NAME'
4  6455	000017F5			 ??01EC:
4  6456	000017F5  07						 DB	 ??01EC	- ??01EB
4  6457	000017F6  200017D2					 DD	 VOC_LINK
4  6458		  =MAIN:200017EE	 VOC_LINK		 =	 ??01EB	+ DESIRED_BASE_EQU
4  6459
4  6460								 IFNB	 <$TO_NAME>
4  6461	000017FA						   LABEL   $TO_NAME FAR
4  6462								 ENDIF
4  6463								 IFNB	 <$ENTER>
4  6464	000017FA  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6465								 ELSE
4  6466								   DD	   ??01EE + DESIRED_BASE_EQU
4  6467								 ENDIF
4  6468	000017FE			 ??01EE:
2  6469								 CW	 $TO_HEAD
3  6470	000017FE  20001781					 DD	 $TO_HEAD + DESIRED_BASE_EQU
2  6471								 CW	 $HEAD_TO_NAME
3  6472	00001802  200017C6					 DD	 $HEAD_TO_NAME + DESIRED_BASE_EQU
2  6473								 CEXIT
3  6474								 CW	 $EXIT
4  6475	00001806  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6476
2  6477					 ;  NAME>
2  6478					 ;  D: name-addr -- xt
2  6479								 $COLON	 'NAME>',$NAME_FROM
3  6480								 $DEF	 'NAME>',$NAME_FROM,$ENTER,
4  6481	0000180A			 ??01EF:
4  6482		  =MAIN:180A		 LASTWORD		 =	 ??01EF
4  6483								 IFNB	 <>
4  6484								   DB
4  6485								 ELSE
4  6486	0000180A  00						   DB	 VEF_USUAL
4  6487								 ENDIF
4  6488	0000180B  05						 DB	 ??01F0	- $ - 1
4  6489	0000180C  4E 41	4D 45 3E				 DB	 'NAME>'
4  6490	00001811			 ??01F0:
4  6491	00001811  07						 DB	 ??01F0	- ??01EF
4  6492	00001812  200017EE					 DD	 VOC_LINK
4  6493		  =MAIN:2000180A	 VOC_LINK		 =	 ??01EF	+ DESIRED_BASE_EQU
4  6494
4  6495								 IFNB	 <$NAME_FROM>
4  6496	00001816						   LABEL   $NAME_FROM FAR
4  6497								 ENDIF
4  6498								 IFNB	 <$ENTER>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 115
FKernel.asm



4  6499	00001816  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6500								 ELSE
4  6501								   DD	   ??01F2 + DESIRED_BASE_EQU
4  6502								 ENDIF
4  6503	0000181A			 ??01F2:
2  6504								 CW	 $NAME_TO_HEAD
3  6505	0000181A  200017E2					 DD	 $NAME_TO_HEAD + DESIRED_BASE_EQU
2  6506								 CW	 $HEAD_FROM
3  6507	0000181E  200017A1					 DD	 $HEAD_FROM + DESIRED_BASE_EQU
2  6508								 CEXIT
3  6509								 CW	 $EXIT
4  6510	00001822  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6511
2  6512					 ;  >LINK
2  6513					 ;  D: CFA -- LFA
2  6514								 $COLON	 '>LINK',$TO_LINK
3  6515								 $DEF	 '>LINK',$TO_LINK,$ENTER,
4  6516	00001826			 ??01F3:
4  6517		  =MAIN:1826		 LASTWORD		 =	 ??01F3
4  6518								 IFNB	 <>
4  6519								   DB
4  6520								 ELSE
4  6521	00001826  00						   DB	 VEF_USUAL
4  6522								 ENDIF
4  6523	00001827  05						 DB	 ??01F4	- $ - 1
4  6524	00001828  3E 4C	49 4E 4B				 DB	 '>LINK'
4  6525	0000182D			 ??01F4:
4  6526	0000182D  07						 DB	 ??01F4	- ??01F3
4  6527	0000182E  2000180A					 DD	 VOC_LINK
4  6528		  =MAIN:20001826	 VOC_LINK		 =	 ??01F3	+ DESIRED_BASE_EQU
4  6529
4  6530								 IFNB	 <$TO_LINK>
4  6531	00001832						   LABEL   $TO_LINK FAR
4  6532								 ENDIF
4  6533								 IFNB	 <$ENTER>
4  6534	00001832  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6535								 ELSE
4  6536								   DD	   ??01F6 + DESIRED_BASE_EQU
4  6537								 ENDIF
4  6538	00001836			 ??01F6:
2  6539								 CCLIT	 CELL_SIZE
3  6540								 CW	 $LIT
4  6541	00001836  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  6542								 CC	 CELL_SIZE
4  6543	0000183A  00000004					 DD	 CELL_SIZE
2  6544								 CW	 $SUB
3  6545	0000183E  20001C35					 DD	 $SUB +	DESIRED_BASE_EQU
2  6546								 CEXIT
3  6547								 CW	 $EXIT
4  6548	00001842  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6549
2  6550					 ;  LINK>
2  6551					 ;  D: LFA -- CFA
2  6552								 $COLON	 'LINK>',$LINK_FROM
3  6553								 $DEF	 'LINK>',$LINK_FROM,$ENTER,
4  6554	00001846			 ??01F7:
4  6555		  =MAIN:1846		 LASTWORD		 =	 ??01F7
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 116
FKernel.asm



4  6556								 IFNB	 <>
4  6557								   DB
4  6558								 ELSE
4  6559	00001846  00						   DB	 VEF_USUAL
4  6560								 ENDIF
4  6561	00001847  05						 DB	 ??01F8	- $ - 1
4  6562	00001848  4C 49	4E 4B 3E				 DB	 'LINK>'
4  6563	0000184D			 ??01F8:
4  6564	0000184D  07						 DB	 ??01F8	- ??01F7
4  6565	0000184E  20001826					 DD	 VOC_LINK
4  6566		  =MAIN:20001846	 VOC_LINK		 =	 ??01F7	+ DESIRED_BASE_EQU
4  6567
4  6568								 IFNB	 <$LINK_FROM>
4  6569	00001852						   LABEL   $LINK_FROM FAR
4  6570								 ENDIF
4  6571								 IFNB	 <$ENTER>
4  6572	00001852  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6573								 ELSE
4  6574								   DD	   ??01FA + DESIRED_BASE_EQU
4  6575								 ENDIF
4  6576	00001856			 ??01FA:
2  6577								 CCLIT	 CELL_SIZE
3  6578								 CW	 $LIT
4  6579	00001856  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3  6580								 CC	 CELL_SIZE
4  6581	0000185A  00000004					 DD	 CELL_SIZE
2  6582								 CW	 $ADD
3  6583	0000185E  20001C1F					 DD	 $ADD +	DESIRED_BASE_EQU
2  6584								 CEXIT
3  6585								 CW	 $EXIT
4  6586	00001862  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6587
2  6588					 ;  H>NEXT>H
2  6589					 ;  D: h-id -- prev_h-id | 0
2  6590								 $COLON	 'H>NEXT>H',$H_TO_NEXT_TO_H
3  6591								 $DEF	 'H>NEXT>H',$H_TO_NEXT_TO_H,$ENTER,
4  6592	00001866			 ??01FB:
4  6593		  =MAIN:1866		 LASTWORD		 =	 ??01FB
4  6594								 IFNB	 <>
4  6595								   DB
4  6596								 ELSE
4  6597	00001866  00						   DB	 VEF_USUAL
4  6598								 ENDIF
4  6599	00001867  08						 DB	 ??01FC	- $ - 1
4  6600	00001868  48 3E	4E 45 58 54 3E+				 DB	 'H>NEXT>H'
   6601		  48
4  6602	00001870			 ??01FC:
4  6603	00001870  0A						 DB	 ??01FC	- ??01FB
4  6604	00001871  20001846					 DD	 VOC_LINK
4  6605		  =MAIN:20001866	 VOC_LINK		 =	 ??01FB	+ DESIRED_BASE_EQU
4  6606
4  6607								 IFNB	 <$H_TO_NEXT_TO_H>
4  6608	00001875						   LABEL   $H_TO_NEXT_TO_H FAR
4  6609								 ENDIF
4  6610								 IFNB	 <$ENTER>
4  6611	00001875  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6612								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 117
FKernel.asm



4  6613								   DD	   ??01FE + DESIRED_BASE_EQU
4  6614								 ENDIF
4  6615	00001879			 ??01FE:
2  6616								 CW	 $HEAD_FROM
3  6617	00001879  200017A1					 DD	 $HEAD_FROM + DESIRED_BASE_EQU
2  6618								 CW	 $TO_LINK
3  6619	0000187D  20001832					 DD	 $TO_LINK + DESIRED_BASE_EQU
2  6620								 CW	 $FETCH
3  6621	00001881  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  6622								 CEXIT
3  6623								 CW	 $EXIT
4  6624	00001885  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6625
2  6626					 ;  H>#NAME
2  6627					 ;  D: h-id -- addr len
2  6628								 $COLON	 'H>#NAME',$H_TO_HASH_NAME
3  6629								 $DEF	 'H>#NAME',$H_TO_HASH_NAME,$ENTER,
4  6630	00001889			 ??01FF:
4  6631		  =MAIN:1889		 LASTWORD		 =	 ??01FF
4  6632								 IFNB	 <>
4  6633								   DB
4  6634								 ELSE
4  6635	00001889  00						   DB	 VEF_USUAL
4  6636								 ENDIF
4  6637	0000188A  07						 DB	 ??0200	- $ - 1
4  6638	0000188B  48 3E	23 4E 41 4D 45				 DB	 'H>#NAME'
4  6639	00001892			 ??0200:
4  6640	00001892  09						 DB	 ??0200	- ??01FF
4  6641	00001893  20001866					 DD	 VOC_LINK
4  6642		  =MAIN:20001889	 VOC_LINK		 =	 ??01FF	+ DESIRED_BASE_EQU
4  6643
4  6644								 IFNB	 <$H_TO_HASH_NAME>
4  6645	00001897						   LABEL   $H_TO_HASH_NAME FAR
4  6646								 ENDIF
4  6647								 IFNB	 <$ENTER>
4  6648	00001897  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  6649								 ELSE
4  6650								   DD	   ??0202 + DESIRED_BASE_EQU
4  6651								 ENDIF
4  6652	0000189B			 ??0202:
2  6653								 CW	 $HEAD_TO_NAME
3  6654	0000189B  200017C6					 DD	 $HEAD_TO_NAME + DESIRED_BASE_EQU
2  6655								 CW	 $DUP
3  6656	0000189F  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  6657								 CW	 $1ADD
3  6658	000018A3  20001C4C					 DD	 $1ADD + DESIRED_BASE_EQU
2  6659								 CW	 $SWAP
3  6660	000018A7  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  6661								 CW	 $CFETCH
3  6662	000018AB  20002025					 DD	 $CFETCH + DESIRED_BASE_EQU
2  6663								 CEXIT
3  6664								 CW	 $EXIT
4  6665	000018AF  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  6666
2  6667
1  6668								 INCLUDE "stack.inc"
2  6669					 ;******************************************************************************
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 118
FKernel.asm



2  6670					 ;
2  6671					 ;  stack.inc
2  6672					 ;  IKForth
2  6673					 ;
2  6674					 ;  Copyright (C) 1999-2003 Illya Kysil
2  6675					 ;
2  6676					 ;******************************************************************************
2  6677					 ;  Stack manipulation
2  6678					 ;******************************************************************************
2  6679
2  6680					 ;  6.1.0630 ?DUP
2  6681					 ;  Duplicate top stack	cell if	it is not equal	to zero
2  6682					 ;  D: a -- a |	a a
2  6683								 $DEF	 '?DUP',$QDUP
3  6684	000018B3			 ??0203:
3  6685		  =MAIN:18B3		 LASTWORD		 =	 ??0203
3  6686								 IFNB	 <>
3  6687								   DB
3  6688								 ELSE
3  6689	000018B3  00						   DB	 VEF_USUAL
3  6690								 ENDIF
3  6691	000018B4  04						 DB	 ??0204	- $ - 1
3  6692	000018B5  3F 44	55 50					 DB	 '?DUP'
3  6693	000018B9			 ??0204:
3  6694	000018B9  06						 DB	 ??0204	- ??0203
3  6695	000018BA  20001889					 DD	 VOC_LINK
3  6696		  =MAIN:200018B3	 VOC_LINK		 =	 ??0203	+ DESIRED_BASE_EQU
3  6697
3  6698								 IFNB	 <$QDUP>
3  6699	000018BE						   LABEL   $QDUP FAR
3  6700								 ENDIF
3  6701								 IFNB	 <>
3  6702								   DD	    + DESIRED_BASE_EQU
3  6703								 ELSE
3  6704	000018BE  200018C2					   DD	   ??0206 + DESIRED_BASE_EQU
3  6705								 ENDIF
3  6706	000018C2			 ??0206:
2  6707								 FETCHDS EAX
3  6708								 IFNB	  <>
3  6709								   MOV	   EAX,[DWORD PTR ESP +	 * CELL_SIZE]
3  6710								 ELSE
3  6711	000018C2  8B 04	24					   MOV	   EAX,[DWORD PTR ESP]
3  6712								 ENDIF
2  6713	000018C5  23 C0						 AND	 EAX,EAX
2  6714	000018C7  74 01						 JZ	 SHORT QDUPZERO
2  6715								 PUSHDS	 EAX
3  6716	000018C9  50						 PUSH	 EAX
2  6717	000018CA			 QDUPZERO:
2  6718								 $NEXT
3  6719	000018CA  AD						 LODSD				 ; fetch address
3  6720								 $JMP
4  6721	000018CB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6722	000018CD  FF E3						 JMP	 EBX			 ; execute
2  6723
2  6724					 ;  6.1.0370 2DROP
2  6725					 ;  D: a b --
2  6726								 $DEF	 '2DROP',$2DROP
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 119
FKernel.asm



3  6727	000018CF			 ??0207:
3  6728		  =MAIN:18CF		 LASTWORD		 =	 ??0207
3  6729								 IFNB	 <>
3  6730								   DB
3  6731								 ELSE
3  6732	000018CF  00						   DB	 VEF_USUAL
3  6733								 ENDIF
3  6734	000018D0  05						 DB	 ??0208	- $ - 1
3  6735	000018D1  32 44	52 4F 50				 DB	 '2DROP'
3  6736	000018D6			 ??0208:
3  6737	000018D6  07						 DB	 ??0208	- ??0207
3  6738	000018D7  200018B3					 DD	 VOC_LINK
3  6739		  =MAIN:200018CF	 VOC_LINK		 =	 ??0207	+ DESIRED_BASE_EQU
3  6740
3  6741								 IFNB	 <$2DROP>
3  6742	000018DB						   LABEL   $2DROP FAR
3  6743								 ENDIF
3  6744								 IFNB	 <>
3  6745								   DD	    + DESIRED_BASE_EQU
3  6746								 ELSE
3  6747	000018DB  200018DF					   DD	   ??020A + DESIRED_BASE_EQU
3  6748								 ENDIF
3  6749	000018DF			 ??020A:
2  6750								 POPDS	 EAX
3  6751	000018DF  58						 POP	 EAX
2  6752								 POPDS	 EAX
3  6753	000018E0  58						 POP	 EAX
2  6754								 $NEXT
3  6755	000018E1  AD						 LODSD				 ; fetch address
3  6756								 $JMP
4  6757	000018E2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6758	000018E4  FF E3						 JMP	 EBX			 ; execute
2  6759
2  6760					 ;  6.1.0380 2DUP
2  6761					 ;  D: a b -- a	b a b
2  6762								 $DEF	 '2DUP',$2DUP
3  6763	000018E6			 ??020B:
3  6764		  =MAIN:18E6		 LASTWORD		 =	 ??020B
3  6765								 IFNB	 <>
3  6766								   DB
3  6767								 ELSE
3  6768	000018E6  00						   DB	 VEF_USUAL
3  6769								 ENDIF
3  6770	000018E7  04						 DB	 ??020C	- $ - 1
3  6771	000018E8  32 44	55 50					 DB	 '2DUP'
3  6772	000018EC			 ??020C:
3  6773	000018EC  06						 DB	 ??020C	- ??020B
3  6774	000018ED  200018CF					 DD	 VOC_LINK
3  6775		  =MAIN:200018E6	 VOC_LINK		 =	 ??020B	+ DESIRED_BASE_EQU
3  6776
3  6777								 IFNB	 <$2DUP>
3  6778	000018F1						   LABEL   $2DUP FAR
3  6779								 ENDIF
3  6780								 IFNB	 <>
3  6781								   DD	    + DESIRED_BASE_EQU
3  6782								 ELSE
3  6783	000018F1  200018F5					   DD	   ??020E + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 120
FKernel.asm



3  6784								 ENDIF
3  6785	000018F5			 ??020E:
2  6786								 FETCHDS EAX,1
3  6787								 IFNB	  <1>
3  6788	000018F5  8B 44	24 04					   MOV	   EAX,[DWORD PTR ESP +	1 * CELL_SIZE]
3  6789								 ELSE
3  6790								   MOV	   EAX,[DWORD PTR ESP]
3  6791								 ENDIF
2  6792								 FETCHDS EBX
3  6793								 IFNB	  <>
3  6794								   MOV	   EBX,[DWORD PTR ESP +	 * CELL_SIZE]
3  6795								 ELSE
3  6796	000018F9  8B 1C	24					   MOV	   EBX,[DWORD PTR ESP]
3  6797								 ENDIF
2  6798								 PUSHDS	 EAX
3  6799	000018FC  50						 PUSH	 EAX
2  6800								 PUSHDS	 EBX
3  6801	000018FD  53						 PUSH	 EBX
2  6802								 $NEXT
3  6803	000018FE  AD						 LODSD				 ; fetch address
3  6804								 $JMP
4  6805	000018FF  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6806	00001901  FF E3						 JMP	 EBX			 ; execute
2  6807
2  6808					 ;  6.1.0400 2OVER
2  6809					 ;  D: a b c d -- a b c	d a b
2  6810								 $DEF	 '2OVER',$2OVER
3  6811	00001903			 ??020F:
3  6812		  =MAIN:1903		 LASTWORD		 =	 ??020F
3  6813								 IFNB	 <>
3  6814								   DB
3  6815								 ELSE
3  6816	00001903  00						   DB	 VEF_USUAL
3  6817								 ENDIF
3  6818	00001904  05						 DB	 ??0210	- $ - 1
3  6819	00001905  32 4F	56 45 52				 DB	 '2OVER'
3  6820	0000190A			 ??0210:
3  6821	0000190A  07						 DB	 ??0210	- ??020F
3  6822	0000190B  200018E6					 DD	 VOC_LINK
3  6823		  =MAIN:20001903	 VOC_LINK		 =	 ??020F	+ DESIRED_BASE_EQU
3  6824
3  6825								 IFNB	 <$2OVER>
3  6826	0000190F						   LABEL   $2OVER FAR
3  6827								 ENDIF
3  6828								 IFNB	 <>
3  6829								   DD	    + DESIRED_BASE_EQU
3  6830								 ELSE
3  6831	0000190F  20001913					   DD	   ??0212 + DESIRED_BASE_EQU
3  6832								 ENDIF
3  6833	00001913			 ??0212:
2  6834								 FETCHDS EAX,3
3  6835								 IFNB	  <3>
3  6836	00001913  8B 44	24 0C					   MOV	   EAX,[DWORD PTR ESP +	3 * CELL_SIZE]
3  6837								 ELSE
3  6838								   MOV	   EAX,[DWORD PTR ESP]
3  6839								 ENDIF
2  6840								 FETCHDS EBX,2
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 121
FKernel.asm



3  6841								 IFNB	  <2>
3  6842	00001917  8B 5C	24 08					   MOV	   EBX,[DWORD PTR ESP +	2 * CELL_SIZE]
3  6843								 ELSE
3  6844								   MOV	   EBX,[DWORD PTR ESP]
3  6845								 ENDIF
2  6846								 PUSHDS	 EAX
3  6847	0000191B  50						 PUSH	 EAX
2  6848								 PUSHDS	 EBX
3  6849	0000191C  53						 PUSH	 EBX
2  6850								 $NEXT
3  6851	0000191D  AD						 LODSD				 ; fetch address
3  6852								 $JMP
4  6853	0000191E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6854	00001920  FF E3						 JMP	 EBX			 ; execute
2  6855
2  6856					 ;  6.1.0430 2SWAP
2  6857					 ;  D: a b c d -- c d a	b
2  6858								 $DEF	 '2SWAP',$2SWAP
3  6859	00001922			 ??0213:
3  6860		  =MAIN:1922		 LASTWORD		 =	 ??0213
3  6861								 IFNB	 <>
3  6862								   DB
3  6863								 ELSE
3  6864	00001922  00						   DB	 VEF_USUAL
3  6865								 ENDIF
3  6866	00001923  05						 DB	 ??0214	- $ - 1
3  6867	00001924  32 53	57 41 50				 DB	 '2SWAP'
3  6868	00001929			 ??0214:
3  6869	00001929  07						 DB	 ??0214	- ??0213
3  6870	0000192A  20001903					 DD	 VOC_LINK
3  6871		  =MAIN:20001922	 VOC_LINK		 =	 ??0213	+ DESIRED_BASE_EQU
3  6872
3  6873								 IFNB	 <$2SWAP>
3  6874	0000192E						   LABEL   $2SWAP FAR
3  6875								 ENDIF
3  6876								 IFNB	 <>
3  6877								   DD	    + DESIRED_BASE_EQU
3  6878								 ELSE
3  6879	0000192E  20001932					   DD	   ??0216 + DESIRED_BASE_EQU
3  6880								 ENDIF
3  6881	00001932			 ??0216:
2  6882								 POPDS	 EDX
3  6883	00001932  5A						 POP	 EDX
2  6884								 POPDS	 ECX
3  6885	00001933  59						 POP	 ECX
2  6886								 POPDS	 EBX
3  6887	00001934  5B						 POP	 EBX
2  6888								 POPDS	 EAX
3  6889	00001935  58						 POP	 EAX
2  6890								 PUSHDS	 ECX
3  6891	00001936  51						 PUSH	 ECX
2  6892								 PUSHDS	 EDX
3  6893	00001937  52						 PUSH	 EDX
2  6894								 PUSHDS	 EAX
3  6895	00001938  50						 PUSH	 EAX
2  6896								 PUSHDS	 EBX
3  6897	00001939  53						 PUSH	 EBX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 122
FKernel.asm



2  6898								 $NEXT
3  6899	0000193A  AD						 LODSD				 ; fetch address
3  6900								 $JMP
4  6901	0000193B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6902	0000193D  FF E3						 JMP	 EBX			 ; execute
2  6903
2  6904
2  6905					 ;  6.1.1260 DROP
2  6906					 ;  Remove top cell from the stack
2  6907					 ;  D: a --
2  6908								 $DEF	 'DROP',$DROP
3  6909	0000193F			 ??0217:
3  6910		  =MAIN:193F		 LASTWORD		 =	 ??0217
3  6911								 IFNB	 <>
3  6912								   DB
3  6913								 ELSE
3  6914	0000193F  00						   DB	 VEF_USUAL
3  6915								 ENDIF
3  6916	00001940  04						 DB	 ??0218	- $ - 1
3  6917	00001941  44 52	4F 50					 DB	 'DROP'
3  6918	00001945			 ??0218:
3  6919	00001945  06						 DB	 ??0218	- ??0217
3  6920	00001946  20001922					 DD	 VOC_LINK
3  6921		  =MAIN:2000193F	 VOC_LINK		 =	 ??0217	+ DESIRED_BASE_EQU
3  6922
3  6923								 IFNB	 <$DROP>
3  6924	0000194A						   LABEL   $DROP FAR
3  6925								 ENDIF
3  6926								 IFNB	 <>
3  6927								   DD	    + DESIRED_BASE_EQU
3  6928								 ELSE
3  6929	0000194A  2000194E					   DD	   ??021A + DESIRED_BASE_EQU
3  6930								 ENDIF
3  6931	0000194E			 ??021A:
2  6932								 POPDS	 EAX
3  6933	0000194E  58						 POP	 EAX
2  6934								 $NEXT
3  6935	0000194F  AD						 LODSD				 ; fetch address
3  6936								 $JMP
4  6937	00001950  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6938	00001952  FF E3						 JMP	 EBX			 ; execute
2  6939
2  6940					 ;  6.1.1290 DUP
2  6941					 ;  D: a -- a a
2  6942								 $DEF	 'DUP',$DUP
3  6943	00001954			 ??021B:
3  6944		  =MAIN:1954		 LASTWORD		 =	 ??021B
3  6945								 IFNB	 <>
3  6946								   DB
3  6947								 ELSE
3  6948	00001954  00						   DB	 VEF_USUAL
3  6949								 ENDIF
3  6950	00001955  03						 DB	 ??021C	- $ - 1
3  6951	00001956  44 55	50					 DB	 'DUP'
3  6952	00001959			 ??021C:
3  6953	00001959  05						 DB	 ??021C	- ??021B
3  6954	0000195A  2000193F					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 123
FKernel.asm



3  6955		  =MAIN:20001954	 VOC_LINK		 =	 ??021B	+ DESIRED_BASE_EQU
3  6956
3  6957								 IFNB	 <$DUP>
3  6958	0000195E						   LABEL   $DUP	FAR
3  6959								 ENDIF
3  6960								 IFNB	 <>
3  6961								   DD	    + DESIRED_BASE_EQU
3  6962								 ELSE
3  6963	0000195E  20001962					   DD	   ??021E + DESIRED_BASE_EQU
3  6964								 ENDIF
3  6965	00001962			 ??021E:
2  6966								 FETCHDS EAX
3  6967								 IFNB	  <>
3  6968								   MOV	   EAX,[DWORD PTR ESP +	 * CELL_SIZE]
3  6969								 ELSE
3  6970	00001962  8B 04	24					   MOV	   EAX,[DWORD PTR ESP]
3  6971								 ENDIF
2  6972								 PUSHDS	 EAX
3  6973	00001965  50						 PUSH	 EAX
2  6974								 $NEXT
3  6975	00001966  AD						 LODSD				 ; fetch address
3  6976								 $JMP
4  6977	00001967  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6978	00001969  FF E3						 JMP	 EBX			 ; execute
2  6979
2  6980					 ;  6.2.1930 NIP
2  6981					 ;  Drop the first item	below the top of stack.
2  6982					 ;  D: x1 x2 --	x2
2  6983								 $DEF	 'NIP',$NIP
3  6984	0000196B			 ??021F:
3  6985		  =MAIN:196B		 LASTWORD		 =	 ??021F
3  6986								 IFNB	 <>
3  6987								   DB
3  6988								 ELSE
3  6989	0000196B  00						   DB	 VEF_USUAL
3  6990								 ENDIF
3  6991	0000196C  03						 DB	 ??0220	- $ - 1
3  6992	0000196D  4E 49	50					 DB	 'NIP'
3  6993	00001970			 ??0220:
3  6994	00001970  05						 DB	 ??0220	- ??021F
3  6995	00001971  20001954					 DD	 VOC_LINK
3  6996		  =MAIN:2000196B	 VOC_LINK		 =	 ??021F	+ DESIRED_BASE_EQU
3  6997
3  6998								 IFNB	 <$NIP>
3  6999	00001975						   LABEL   $NIP	FAR
3  7000								 ENDIF
3  7001								 IFNB	 <>
3  7002								   DD	    + DESIRED_BASE_EQU
3  7003								 ELSE
3  7004	00001975  20001979					   DD	   ??0222 + DESIRED_BASE_EQU
3  7005								 ENDIF
3  7006	00001979			 ??0222:
2  7007								 POPDS	 EAX
3  7008	00001979  58						 POP	 EAX
2  7009								 POPDS	 EBX
3  7010	0000197A  5B						 POP	 EBX
2  7011								 PUSHDS	 EAX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 124
FKernel.asm



3  7012	0000197B  50						 PUSH	 EAX
2  7013								 $NEXT
3  7014	0000197C  AD						 LODSD				 ; fetch address
3  7015								 $JMP
4  7016	0000197D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7017	0000197F  FF E3						 JMP	 EBX			 ; execute
2  7018
2  7019					 ;  6.1.1990 OVER
2  7020					 ;  D: a b -- a	b a
2  7021								 $DEF	 'OVER',$OVER
3  7022	00001981			 ??0223:
3  7023		  =MAIN:1981		 LASTWORD		 =	 ??0223
3  7024								 IFNB	 <>
3  7025								   DB
3  7026								 ELSE
3  7027	00001981  00						   DB	 VEF_USUAL
3  7028								 ENDIF
3  7029	00001982  04						 DB	 ??0224	- $ - 1
3  7030	00001983  4F 56	45 52					 DB	 'OVER'
3  7031	00001987			 ??0224:
3  7032	00001987  06						 DB	 ??0224	- ??0223
3  7033	00001988  2000196B					 DD	 VOC_LINK
3  7034		  =MAIN:20001981	 VOC_LINK		 =	 ??0223	+ DESIRED_BASE_EQU
3  7035
3  7036								 IFNB	 <$OVER>
3  7037	0000198C						   LABEL   $OVER FAR
3  7038								 ENDIF
3  7039								 IFNB	 <>
3  7040								   DD	    + DESIRED_BASE_EQU
3  7041								 ELSE
3  7042	0000198C  20001990					   DD	   ??0226 + DESIRED_BASE_EQU
3  7043								 ENDIF
3  7044	00001990			 ??0226:
2  7045								 FETCHDS EAX,1
3  7046								 IFNB	  <1>
3  7047	00001990  8B 44	24 04					   MOV	   EAX,[DWORD PTR ESP +	1 * CELL_SIZE]
3  7048								 ELSE
3  7049								   MOV	   EAX,[DWORD PTR ESP]
3  7050								 ENDIF
2  7051								 PUSHDS	 EAX
3  7052	00001994  50						 PUSH	 EAX
2  7053								 $NEXT
3  7054	00001995  AD						 LODSD				 ; fetch address
3  7055								 $JMP
4  7056	00001996  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7057	00001998  FF E3						 JMP	 EBX			 ; execute
2  7058
2  7059					 ;  6.1.2160 ROT
2  7060					 ;  D: a b c --	b c a
2  7061								 $DEF	 'ROT',$ROT
3  7062	0000199A			 ??0227:
3  7063		  =MAIN:199A		 LASTWORD		 =	 ??0227
3  7064								 IFNB	 <>
3  7065								   DB
3  7066								 ELSE
3  7067	0000199A  00						   DB	 VEF_USUAL
3  7068								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 125
FKernel.asm



3  7069	0000199B  03						 DB	 ??0228	- $ - 1
3  7070	0000199C  52 4F	54					 DB	 'ROT'
3  7071	0000199F			 ??0228:
3  7072	0000199F  05						 DB	 ??0228	- ??0227
3  7073	000019A0  20001981					 DD	 VOC_LINK
3  7074		  =MAIN:2000199A	 VOC_LINK		 =	 ??0227	+ DESIRED_BASE_EQU
3  7075
3  7076								 IFNB	 <$ROT>
3  7077	000019A4						   LABEL   $ROT	FAR
3  7078								 ENDIF
3  7079								 IFNB	 <>
3  7080								   DD	    + DESIRED_BASE_EQU
3  7081								 ELSE
3  7082	000019A4  200019A8					   DD	   ??022A + DESIRED_BASE_EQU
3  7083								 ENDIF
3  7084	000019A8			 ??022A:
2  7085								 POPDS	 ECX
3  7086	000019A8  59						 POP	 ECX
2  7087								 POPDS	 EBX
3  7088	000019A9  5B						 POP	 EBX
2  7089								 POPDS	 EAX
3  7090	000019AA  58						 POP	 EAX
2  7091								 PUSHDS	 EBX
3  7092	000019AB  53						 PUSH	 EBX
2  7093								 PUSHDS	 ECX
3  7094	000019AC  51						 PUSH	 ECX
2  7095								 PUSHDS	 EAX
3  7096	000019AD  50						 PUSH	 EAX
2  7097								 $NEXT
3  7098	000019AE  AD						 LODSD				 ; fetch address
3  7099								 $JMP
4  7100	000019AF  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7101	000019B1  FF E3						 JMP	 EBX			 ; execute
2  7102
2  7103					 ;  8.6.2.0420 2ROT
2  7104					 ;  D: a1 a2 b1	b2 c1 c2 -- b1 b2 c1 c2	a1 a2
2  7105								 $DEF	 '2ROT',$2ROT
3  7106	000019B3			 ??022B:
3  7107		  =MAIN:19B3		 LASTWORD		 =	 ??022B
3  7108								 IFNB	 <>
3  7109								   DB
3  7110								 ELSE
3  7111	000019B3  00						   DB	 VEF_USUAL
3  7112								 ENDIF
3  7113	000019B4  04						 DB	 ??022C	- $ - 1
3  7114	000019B5  32 52	4F 54					 DB	 '2ROT'
3  7115	000019B9			 ??022C:
3  7116	000019B9  06						 DB	 ??022C	- ??022B
3  7117	000019BA  2000199A					 DD	 VOC_LINK
3  7118		  =MAIN:200019B3	 VOC_LINK		 =	 ??022B	+ DESIRED_BASE_EQU
3  7119
3  7120								 IFNB	 <$2ROT>
3  7121	000019BE						   LABEL   $2ROT FAR
3  7122								 ENDIF
3  7123								 IFNB	 <>
3  7124								   DD	    + DESIRED_BASE_EQU
3  7125								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 126
FKernel.asm



3  7126	000019BE  200019C2					   DD	   ??022E + DESIRED_BASE_EQU
3  7127								 ENDIF
3  7128	000019C2			 ??022E:
2  7129								 PUSHRS	 EDI
3  7130	000019C2  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7131	000019C5  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2  7132								 PUSHRS	 ESI
3  7133	000019C8  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7134	000019CB  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  7135								 POPDS	 EDX	 \ c2
3  7136	000019CE  5A						 POP	 EDX
2  7137								 POPDS	 ECX	 \ c1
3  7138	000019CF  59						 POP	 ECX
2  7139								 POPDS	 EBX	 \ b2
3  7140	000019D0  5B						 POP	 EBX
2  7141								 POPDS	 EAX	 \ b1
3  7142	000019D1  58						 POP	 EAX
2  7143								 POPDS	 EDI	 \ a2
3  7144	000019D2  5F						 POP	 EDI
2  7145								 POPDS	 ESI	 \ a1
3  7146	000019D3  5E						 POP	 ESI
2  7147								 PUSHDS	 EAX
3  7148	000019D4  50						 PUSH	 EAX
2  7149								 PUSHDS	 EBX
3  7150	000019D5  53						 PUSH	 EBX
2  7151								 PUSHDS	 ECX
3  7152	000019D6  51						 PUSH	 ECX
2  7153								 PUSHDS	 EDX
3  7154	000019D7  52						 PUSH	 EDX
2  7155								 PUSHDS	 ESI
3  7156	000019D8  56						 PUSH	 ESI
2  7157								 PUSHDS	 EDI
3  7158	000019D9  57						 PUSH	 EDI
2  7159								 POPRS	 ESI
3  7160	000019DA  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  7161	000019DD  83 C5	04					 ADD	 EBP,CELL_SIZE
2  7162								 POPRS	 EDI
3  7163	000019E0  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  7164	000019E3  83 C5	04					 ADD	 EBP,CELL_SIZE
2  7165								 $NEXT
3  7166	000019E6  AD						 LODSD				 ; fetch address
3  7167								 $JMP
4  7168	000019E7  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7169	000019E9  FF E3						 JMP	 EBX			 ; execute
2  7170
2  7171					 ;  -ROT
2  7172					 ;  D: a b c --	c a b
2  7173								 $DEF	 '-ROT',$MROT
3  7174	000019EB			 ??022F:
3  7175		  =MAIN:19EB		 LASTWORD		 =	 ??022F
3  7176								 IFNB	 <>
3  7177								   DB
3  7178								 ELSE
3  7179	000019EB  00						   DB	 VEF_USUAL
3  7180								 ENDIF
3  7181	000019EC  04						 DB	 ??0230	- $ - 1
3  7182	000019ED  2D 52	4F 54					 DB	 '-ROT'
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 127
FKernel.asm



3  7183	000019F1			 ??0230:
3  7184	000019F1  06						 DB	 ??0230	- ??022F
3  7185	000019F2  200019B3					 DD	 VOC_LINK
3  7186		  =MAIN:200019EB	 VOC_LINK		 =	 ??022F	+ DESIRED_BASE_EQU
3  7187
3  7188								 IFNB	 <$MROT>
3  7189	000019F6						   LABEL   $MROT FAR
3  7190								 ENDIF
3  7191								 IFNB	 <>
3  7192								   DD	    + DESIRED_BASE_EQU
3  7193								 ELSE
3  7194	000019F6  200019FA					   DD	   ??0232 + DESIRED_BASE_EQU
3  7195								 ENDIF
3  7196	000019FA			 ??0232:
2  7197								 POPDS	 ECX
3  7198	000019FA  59						 POP	 ECX
2  7199								 POPDS	 EBX
3  7200	000019FB  5B						 POP	 EBX
2  7201								 POPDS	 EAX
3  7202	000019FC  58						 POP	 EAX
2  7203								 PUSHDS	 ECX
3  7204	000019FD  51						 PUSH	 ECX
2  7205								 PUSHDS	 EAX
3  7206	000019FE  50						 PUSH	 EAX
2  7207								 PUSHDS	 EBX
3  7208	000019FF  53						 PUSH	 EBX
2  7209								 $NEXT
3  7210	00001A00  AD						 LODSD				 ; fetch address
3  7211								 $JMP
4  7212	00001A01  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7213	00001A03  FF E3						 JMP	 EBX			 ; execute
2  7214
2  7215					 ;  6.1.2260 SWAP
2  7216					 ;  D: a b -- b	a
2  7217								 $DEF	 'SWAP',$SWAP
3  7218	00001A05			 ??0233:
3  7219		  =MAIN:1A05		 LASTWORD		 =	 ??0233
3  7220								 IFNB	 <>
3  7221								   DB
3  7222								 ELSE
3  7223	00001A05  00						   DB	 VEF_USUAL
3  7224								 ENDIF
3  7225	00001A06  04						 DB	 ??0234	- $ - 1
3  7226	00001A07  53 57	41 50					 DB	 'SWAP'
3  7227	00001A0B			 ??0234:
3  7228	00001A0B  06						 DB	 ??0234	- ??0233
3  7229	00001A0C  200019EB					 DD	 VOC_LINK
3  7230		  =MAIN:20001A05	 VOC_LINK		 =	 ??0233	+ DESIRED_BASE_EQU
3  7231
3  7232								 IFNB	 <$SWAP>
3  7233	00001A10						   LABEL   $SWAP FAR
3  7234								 ENDIF
3  7235								 IFNB	 <>
3  7236								   DD	    + DESIRED_BASE_EQU
3  7237								 ELSE
3  7238	00001A10  20001A14					   DD	   ??0236 + DESIRED_BASE_EQU
3  7239								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 128
FKernel.asm



3  7240	00001A14			 ??0236:
2  7241								 POPDS	 EAX
3  7242	00001A14  58						 POP	 EAX
2  7243								 POPDS	 EBX
3  7244	00001A15  5B						 POP	 EBX
2  7245								 PUSHDS	 EAX
3  7246	00001A16  50						 PUSH	 EAX
2  7247								 PUSHDS	 EBX
3  7248	00001A17  53						 PUSH	 EBX
2  7249								 $NEXT
3  7250	00001A18  AD						 LODSD				 ; fetch address
3  7251								 $JMP
4  7252	00001A19  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7253	00001A1B  FF E3						 JMP	 EBX			 ; execute
2  7254
2  7255					 ;  6.2.2030 PICK
2  7256					 ;  D: xu ... x1 x0 u -- xu ...	x1 x0 xu
2  7257					 ;  Remove u. Copy the xu to the top of	the stack. An ambiguous	condition exists
2  7258					 ;  if there are less than u+2 items on	the stack before PICK is executed.
2  7259								 $DEF	 'PICK',$PICK
3  7260	00001A1D			 ??0237:
3  7261		  =MAIN:1A1D		 LASTWORD		 =	 ??0237
3  7262								 IFNB	 <>
3  7263								   DB
3  7264								 ELSE
3  7265	00001A1D  00						   DB	 VEF_USUAL
3  7266								 ENDIF
3  7267	00001A1E  04						 DB	 ??0238	- $ - 1
3  7268	00001A1F  50 49	43 4B					 DB	 'PICK'
3  7269	00001A23			 ??0238:
3  7270	00001A23  06						 DB	 ??0238	- ??0237
3  7271	00001A24  20001A05					 DD	 VOC_LINK
3  7272		  =MAIN:20001A1D	 VOC_LINK		 =	 ??0237	+ DESIRED_BASE_EQU
3  7273
3  7274								 IFNB	 <$PICK>
3  7275	00001A28						   LABEL   $PICK FAR
3  7276								 ENDIF
3  7277								 IFNB	 <>
3  7278								   DD	    + DESIRED_BASE_EQU
3  7279								 ELSE
3  7280	00001A28  20001A2C					   DD	   ??023A + DESIRED_BASE_EQU
3  7281								 ENDIF
3  7282	00001A2C			 ??023A:
2  7283								 POPDS	 EBX
3  7284	00001A2C  5B						 POP	 EBX
2  7285								 FETCHDS EAX,EBX
3  7286								 IFNB	  <EBX>
3  7287	00001A2D  8B 04	9C					   MOV	   EAX,[DWORD PTR ESP +	EBX * CELL_SIZE]
3  7288								 ELSE
3  7289								   MOV	   EAX,[DWORD PTR ESP]
3  7290								 ENDIF
2  7291								 PUSHDS	 EAX
3  7292	00001A30  50						 PUSH	 EAX
2  7293								 $NEXT
3  7294	00001A31  AD						 LODSD				 ; fetch address
3  7295								 $JMP
4  7296	00001A32  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 129
FKernel.asm



4  7297	00001A34  FF E3						 JMP	 EBX			 ; execute
2  7298
2  7299					 ;  6.2.2300 TUCK
2  7300					 ;  D: x1 x2 --	x2 x1 x2
2  7301					 ;  Copy the first (top) stack item below the second stack item.
2  7302								 $DEF	 'TUCK',$TUCK
3  7303	00001A36			 ??023B:
3  7304		  =MAIN:1A36		 LASTWORD		 =	 ??023B
3  7305								 IFNB	 <>
3  7306								   DB
3  7307								 ELSE
3  7308	00001A36  00						   DB	 VEF_USUAL
3  7309								 ENDIF
3  7310	00001A37  04						 DB	 ??023C	- $ - 1
3  7311	00001A38  54 55	43 4B					 DB	 'TUCK'
3  7312	00001A3C			 ??023C:
3  7313	00001A3C  06						 DB	 ??023C	- ??023B
3  7314	00001A3D  20001A1D					 DD	 VOC_LINK
3  7315		  =MAIN:20001A36	 VOC_LINK		 =	 ??023B	+ DESIRED_BASE_EQU
3  7316
3  7317								 IFNB	 <$TUCK>
3  7318	00001A41						   LABEL   $TUCK FAR
3  7319								 ENDIF
3  7320								 IFNB	 <>
3  7321								   DD	    + DESIRED_BASE_EQU
3  7322								 ELSE
3  7323	00001A41  20001A45					   DD	   ??023E + DESIRED_BASE_EQU
3  7324								 ENDIF
3  7325	00001A45			 ??023E:
2  7326								 POPDS	 EAX
3  7327	00001A45  58						 POP	 EAX
2  7328								 POPDS	 EBX
3  7329	00001A46  5B						 POP	 EBX
2  7330								 PUSHDS	 EAX
3  7331	00001A47  50						 PUSH	 EAX
2  7332								 PUSHDS	 EBX
3  7333	00001A48  53						 PUSH	 EBX
2  7334								 PUSHDS	 EAX
3  7335	00001A49  50						 PUSH	 EAX
2  7336								 $NEXT
3  7337	00001A4A  AD						 LODSD				 ; fetch address
3  7338								 $JMP
4  7339	00001A4B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7340	00001A4D  FF E3						 JMP	 EBX			 ; execute
2  7341
2  7342					 ;  DS-SIZE
2  7343								 $CONST	 'DS-SIZE'
3  7344								 $DEF	 'DS-SIZE',,$DOCONST
4  7345	00001A4F			 ??023F:
4  7346		  =MAIN:1A4F		 LASTWORD		 =	 ??023F
4  7347								 IFNB	 <>
4  7348								   DB
4  7349								 ELSE
4  7350	00001A4F  00						   DB	 VEF_USUAL
4  7351								 ENDIF
4  7352	00001A50  07						 DB	 ??0240	- $ - 1
4  7353	00001A51  44 53	2D 53 49 5A 45				 DB	 'DS-SIZE'
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 130
FKernel.asm



4  7354	00001A58			 ??0240:
4  7355	00001A58  09						 DB	 ??0240	- ??023F
4  7356	00001A59  20001A36					 DD	 VOC_LINK
4  7357		  =MAIN:20001A4F	 VOC_LINK		 =	 ??023F	+ DESIRED_BASE_EQU
4  7358
4  7359								 IFNB	 <>
4  7360								   LABEL    FAR
4  7361								 ENDIF
4  7362								 IFNB	 <$DOCONST>
4  7363	00001A5D  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  7364								 ELSE
4  7365								   DD	   ??0242 + DESIRED_BASE_EQU
4  7366								 ENDIF
4  7367	00001A61			 ??0242:
2  7368								 CC	 DATA_STACK_SIZE
3  7369	00001A61  00001000					 DD	 DATA_STACK_SIZE
2  7370
2  7371					 ;  SP0
2  7372								 $DEF	 'SP0',$SP0
3  7373	00001A65			 ??0243:
3  7374		  =MAIN:1A65		 LASTWORD		 =	 ??0243
3  7375								 IFNB	 <>
3  7376								   DB
3  7377								 ELSE
3  7378	00001A65  00						   DB	 VEF_USUAL
3  7379								 ENDIF
3  7380	00001A66  03						 DB	 ??0244	- $ - 1
3  7381	00001A67  53 50	30					 DB	 'SP0'
3  7382	00001A6A			 ??0244:
3  7383	00001A6A  05						 DB	 ??0244	- ??0243
3  7384	00001A6B  20001A4F					 DD	 VOC_LINK
3  7385		  =MAIN:20001A65	 VOC_LINK		 =	 ??0243	+ DESIRED_BASE_EQU
3  7386
3  7387								 IFNB	 <$SP0>
3  7388	00001A6F						   LABEL   $SP0	FAR
3  7389								 ENDIF
3  7390								 IFNB	 <>
3  7391								   DD	    + DESIRED_BASE_EQU
3  7392								 ELSE
3  7393	00001A6F  20001A73					   DD	   ??0246 + DESIRED_BASE_EQU
3  7394								 ENDIF
3  7395	00001A73			 ??0246:
2  7396								 PUSHDS	 <[DWORD PTR EDI + ESP_VAR]>
3  7397	00001A73  FF 77	14					 PUSH	 [DWORD	PTR EDI	+ ESP_VAR]
2  7398								 $NEXT
3  7399	00001A76  AD						 LODSD				 ; fetch address
3  7400								 $JMP
4  7401	00001A77  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7402	00001A79  FF E3						 JMP	 EBX			 ; execute
2  7403
2  7404					 ;  SP@
2  7405								 $DEF	 'SP@',$SPFETCH
3  7406	00001A7B			 ??0247:
3  7407		  =MAIN:1A7B		 LASTWORD		 =	 ??0247
3  7408								 IFNB	 <>
3  7409								   DB
3  7410								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 131
FKernel.asm



3  7411	00001A7B  00						   DB	 VEF_USUAL
3  7412								 ENDIF
3  7413	00001A7C  03						 DB	 ??0248	- $ - 1
3  7414	00001A7D  53 50	40					 DB	 'SP@'
3  7415	00001A80			 ??0248:
3  7416	00001A80  05						 DB	 ??0248	- ??0247
3  7417	00001A81  20001A65					 DD	 VOC_LINK
3  7418		  =MAIN:20001A7B	 VOC_LINK		 =	 ??0247	+ DESIRED_BASE_EQU
3  7419
3  7420								 IFNB	 <$SPFETCH>
3  7421	00001A85						   LABEL   $SPFETCH FAR
3  7422								 ENDIF
3  7423								 IFNB	 <>
3  7424								   DD	    + DESIRED_BASE_EQU
3  7425								 ELSE
3  7426	00001A85  20001A89					   DD	   ??024A + DESIRED_BASE_EQU
3  7427								 ENDIF
3  7428	00001A89			 ??024A:
2  7429	00001A89  8B C4						 MOV	 EAX,ESP
2  7430								 PUSHDS	 EAX
3  7431	00001A8B  50						 PUSH	 EAX
2  7432								 $NEXT
3  7433	00001A8C  AD						 LODSD				 ; fetch address
3  7434								 $JMP
4  7435	00001A8D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7436	00001A8F  FF E3						 JMP	 EBX			 ; execute
2  7437
2  7438					 ;  SP!
2  7439								 $DEF	 'SP!',$SPSTORE
3  7440	00001A91			 ??024B:
3  7441		  =MAIN:1A91		 LASTWORD		 =	 ??024B
3  7442								 IFNB	 <>
3  7443								   DB
3  7444								 ELSE
3  7445	00001A91  00						   DB	 VEF_USUAL
3  7446								 ENDIF
3  7447	00001A92  03						 DB	 ??024C	- $ - 1
3  7448	00001A93  53 50	21					 DB	 'SP!'
3  7449	00001A96			 ??024C:
3  7450	00001A96  05						 DB	 ??024C	- ??024B
3  7451	00001A97  20001A7B					 DD	 VOC_LINK
3  7452		  =MAIN:20001A91	 VOC_LINK		 =	 ??024B	+ DESIRED_BASE_EQU
3  7453
3  7454								 IFNB	 <$SPSTORE>
3  7455	00001A9B						   LABEL   $SPSTORE FAR
3  7456								 ENDIF
3  7457								 IFNB	 <>
3  7458								   DD	    + DESIRED_BASE_EQU
3  7459								 ELSE
3  7460	00001A9B  20001A9F					   DD	   ??024E + DESIRED_BASE_EQU
3  7461								 ENDIF
3  7462	00001A9F			 ??024E:
2  7463								 POPDS	 EAX
3  7464	00001A9F  58						 POP	 EAX
2  7465	00001AA0  8B E0						 MOV	 ESP,EAX
2  7466								 $NEXT
3  7467	00001AA2  AD						 LODSD				 ; fetch address
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 132
FKernel.asm



3  7468								 $JMP
4  7469	00001AA3  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7470	00001AA5  FF E3						 JMP	 EBX			 ; execute
2  7471
2  7472
1  7473								 INCLUDE "rstack.inc"
2  7474					 ;******************************************************************************
2  7475					 ;
2  7476					 ;  rstack.inc
2  7477					 ;  IKForth
2  7478					 ;
2  7479					 ;  Copyright (C) 1999-2003 Illya Kysil
2  7480					 ;
2  7481					 ;******************************************************************************
2  7482					 ;  Return stack manipulation
2  7483					 ;******************************************************************************
2  7484
2  7485					 ;  6.1.0580 >R
2  7486					 ;  Move value from the	data stack to return stack
2  7487					 ;  D: a --
2  7488					 ;  R:	 -- a
2  7489								 $DEF	 '>R',$TOR,,VEF_COMPILE_ONLY
3  7490	00001AA7			 ??024F:
3  7491		  =MAIN:1AA7		 LASTWORD		 =	 ??024F
3  7492								 IFNB	 <VEF_COMPILE_ONLY>
3  7493	00001AA7  04						   DB	 VEF_COMPILE_ONLY
3  7494								 ELSE
3  7495								   DB	 VEF_USUAL
3  7496								 ENDIF
3  7497	00001AA8  02						 DB	 ??0250	- $ - 1
3  7498	00001AA9  3E 52						 DB	 '>R'
3  7499	00001AAB			 ??0250:
3  7500	00001AAB  04						 DB	 ??0250	- ??024F
3  7501	00001AAC  20001A91					 DD	 VOC_LINK
3  7502		  =MAIN:20001AA7	 VOC_LINK		 =	 ??024F	+ DESIRED_BASE_EQU
3  7503
3  7504								 IFNB	 <$TOR>
3  7505	00001AB0						   LABEL   $TOR	FAR
3  7506								 ENDIF
3  7507								 IFNB	 <>
3  7508								   DD	    + DESIRED_BASE_EQU
3  7509								 ELSE
3  7510	00001AB0  20001AB4					   DD	   ??0252 + DESIRED_BASE_EQU
3  7511								 ENDIF
3  7512	00001AB4			 ??0252:
2  7513								 POPDS	 EAX
3  7514	00001AB4  58						 POP	 EAX
2  7515								 PUSHRS	 EAX
3  7516	00001AB5  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7517	00001AB8  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  7518								 $NEXT
3  7519	00001ABB  AD						 LODSD				 ; fetch address
3  7520								 $JMP
4  7521	00001ABC  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7522	00001ABE  FF E3						 JMP	 EBX			 ; execute
2  7523
2  7524					 ;  6.1.2060 R>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 133
FKernel.asm



2  7525					 ;  Interpretation: Interpretation semantics for this word are undefined.
2  7526					 ;  Execution: ( -- x )	( R:  x	-- )
2  7527					 ;    Move x from the return stack to the data stack.
2  7528								 $DEF	 'R>',$RFROM,,VEF_COMPILE_ONLY
3  7529	00001AC0			 ??0253:
3  7530		  =MAIN:1AC0		 LASTWORD		 =	 ??0253
3  7531								 IFNB	 <VEF_COMPILE_ONLY>
3  7532	00001AC0  04						   DB	 VEF_COMPILE_ONLY
3  7533								 ELSE
3  7534								   DB	 VEF_USUAL
3  7535								 ENDIF
3  7536	00001AC1  02						 DB	 ??0254	- $ - 1
3  7537	00001AC2  52 3E						 DB	 'R>'
3  7538	00001AC4			 ??0254:
3  7539	00001AC4  04						 DB	 ??0254	- ??0253
3  7540	00001AC5  20001AA7					 DD	 VOC_LINK
3  7541		  =MAIN:20001AC0	 VOC_LINK		 =	 ??0253	+ DESIRED_BASE_EQU
3  7542
3  7543								 IFNB	 <$RFROM>
3  7544	00001AC9						   LABEL   $RFROM FAR
3  7545								 ENDIF
3  7546								 IFNB	 <>
3  7547								   DD	    + DESIRED_BASE_EQU
3  7548								 ELSE
3  7549	00001AC9  20001ACD					   DD	   ??0256 + DESIRED_BASE_EQU
3  7550								 ENDIF
3  7551	00001ACD			 ??0256:
2  7552								 POPRS	 EAX
3  7553	00001ACD  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3  7554	00001AD0  83 C5	04					 ADD	 EBP,CELL_SIZE
2  7555								 PUSHDS	 EAX
3  7556	00001AD3  50						 PUSH	 EAX
2  7557								 $NEXT
3  7558	00001AD4  AD						 LODSD				 ; fetch address
3  7559								 $JMP
4  7560	00001AD5  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7561	00001AD7  FF E3						 JMP	 EBX			 ; execute
2  7562
2  7563					 ;  6.1.2070 R@
2  7564					 ;  Copy value from the	return stack to	data stack
2  7565					 ;  R: a -- a
2  7566					 ;  D:	 -- a
2  7567								 $DEF	 'R@',$RFETCH
3  7568	00001AD9			 ??0257:
3  7569		  =MAIN:1AD9		 LASTWORD		 =	 ??0257
3  7570								 IFNB	 <>
3  7571								   DB
3  7572								 ELSE
3  7573	00001AD9  00						   DB	 VEF_USUAL
3  7574								 ENDIF
3  7575	00001ADA  02						 DB	 ??0258	- $ - 1
3  7576	00001ADB  52 40						 DB	 'R@'
3  7577	00001ADD			 ??0258:
3  7578	00001ADD  04						 DB	 ??0258	- ??0257
3  7579	00001ADE  20001AC0					 DD	 VOC_LINK
3  7580		  =MAIN:20001AD9	 VOC_LINK		 =	 ??0257	+ DESIRED_BASE_EQU
3  7581
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 134
FKernel.asm



3  7582								 IFNB	 <$RFETCH>
3  7583	00001AE2						   LABEL   $RFETCH FAR
3  7584								 ENDIF
3  7585								 IFNB	 <>
3  7586								   DD	    + DESIRED_BASE_EQU
3  7587								 ELSE
3  7588	00001AE2  20001AE6					   DD	   ??025A + DESIRED_BASE_EQU
3  7589								 ENDIF
3  7590	00001AE6			 ??025A:
2  7591								 FETCHRS EAX
3  7592								 IFNB	  <>
3  7593								   MOV	   EAX,[DWORD PTR EBP +	 * CELL_SIZE]
3  7594								 ELSE
3  7595	00001AE6  8B 45	00					   MOV	   EAX,[DWORD PTR EBP]
3  7596								 ENDIF
2  7597								 PUSHDS	 EAX
3  7598	00001AE9  50						 PUSH	 EAX
2  7599								 $NEXT
3  7600	00001AEA  AD						 LODSD				 ; fetch address
3  7601								 $JMP
4  7602	00001AEB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7603	00001AED  FF E3						 JMP	 EBX			 ; execute
2  7604
2  7605					 ;  6.2.0340 2>R
2  7606					 ;  D: a b --
2  7607					 ;  R:	   -- a	b
2  7608								 $DEF	 '2>R',$2TOR,,VEF_COMPILE_ONLY
3  7609	00001AEF			 ??025B:
3  7610		  =MAIN:1AEF		 LASTWORD		 =	 ??025B
3  7611								 IFNB	 <VEF_COMPILE_ONLY>
3  7612	00001AEF  04						   DB	 VEF_COMPILE_ONLY
3  7613								 ELSE
3  7614								   DB	 VEF_USUAL
3  7615								 ENDIF
3  7616	00001AF0  03						 DB	 ??025C	- $ - 1
3  7617	00001AF1  32 3E	52					 DB	 '2>R'
3  7618	00001AF4			 ??025C:
3  7619	00001AF4  05						 DB	 ??025C	- ??025B
3  7620	00001AF5  20001AD9					 DD	 VOC_LINK
3  7621		  =MAIN:20001AEF	 VOC_LINK		 =	 ??025B	+ DESIRED_BASE_EQU
3  7622
3  7623								 IFNB	 <$2TOR>
3  7624	00001AF9						   LABEL   $2TOR FAR
3  7625								 ENDIF
3  7626								 IFNB	 <>
3  7627								   DD	    + DESIRED_BASE_EQU
3  7628								 ELSE
3  7629	00001AF9  20001AFD					   DD	   ??025E + DESIRED_BASE_EQU
3  7630								 ENDIF
3  7631	00001AFD			 ??025E:
2  7632								 POPDS	 EBX
3  7633	00001AFD  5B						 POP	 EBX
2  7634								 POPDS	 EAX
3  7635	00001AFE  58						 POP	 EAX
2  7636								 PUSHRS	 EAX
3  7637	00001AFF  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7638	00001B02  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 135
FKernel.asm



2  7639								 PUSHRS	 EBX
3  7640	00001B05  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7641	00001B08  89 5D	00					 MOV	 [DWORD	PTR EBP],EBX
2  7642								 $NEXT
3  7643	00001B0B  AD						 LODSD				 ; fetch address
3  7644								 $JMP
4  7645	00001B0C  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7646	00001B0E  FF E3						 JMP	 EBX			 ; execute
2  7647
2  7648					 ;  6.2.0410 2R>
2  7649					 ;  D:	   -- a	b
2  7650					 ;  R: a b --
2  7651								 $DEF	 '2R>',$2RFROM,,VEF_COMPILE_ONLY
3  7652	00001B10			 ??025F:
3  7653		  =MAIN:1B10		 LASTWORD		 =	 ??025F
3  7654								 IFNB	 <VEF_COMPILE_ONLY>
3  7655	00001B10  04						   DB	 VEF_COMPILE_ONLY
3  7656								 ELSE
3  7657								   DB	 VEF_USUAL
3  7658								 ENDIF
3  7659	00001B11  03						 DB	 ??0260	- $ - 1
3  7660	00001B12  32 52	3E					 DB	 '2R>'
3  7661	00001B15			 ??0260:
3  7662	00001B15  05						 DB	 ??0260	- ??025F
3  7663	00001B16  20001AEF					 DD	 VOC_LINK
3  7664		  =MAIN:20001B10	 VOC_LINK		 =	 ??025F	+ DESIRED_BASE_EQU
3  7665
3  7666								 IFNB	 <$2RFROM>
3  7667	00001B1A						   LABEL   $2RFROM FAR
3  7668								 ENDIF
3  7669								 IFNB	 <>
3  7670								   DD	    + DESIRED_BASE_EQU
3  7671								 ELSE
3  7672	00001B1A  20001B1E					   DD	   ??0262 + DESIRED_BASE_EQU
3  7673								 ENDIF
3  7674	00001B1E			 ??0262:
2  7675								 POPRS	 EBX
3  7676	00001B1E  8B 5D	00					 MOV	 EBX,[DWORD PTR	EBP]
3  7677	00001B21  83 C5	04					 ADD	 EBP,CELL_SIZE
2  7678								 POPRS	 EAX
3  7679	00001B24  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3  7680	00001B27  83 C5	04					 ADD	 EBP,CELL_SIZE
2  7681								 PUSHDS	 EAX
3  7682	00001B2A  50						 PUSH	 EAX
2  7683								 PUSHDS	 EBX
3  7684	00001B2B  53						 PUSH	 EBX
2  7685								 $NEXT
3  7686	00001B2C  AD						 LODSD				 ; fetch address
3  7687								 $JMP
4  7688	00001B2D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7689	00001B2F  FF E3						 JMP	 EBX			 ; execute
2  7690
2  7691					 ;  6.2.0415 2R@
2  7692					 ;  D:	   -- a	b
2  7693					 ;  R: a b -- a	b
2  7694								 $DEF	 '2R@',$2RFETCH
3  7695	00001B31			 ??0263:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 136
FKernel.asm



3  7696		  =MAIN:1B31		 LASTWORD		 =	 ??0263
3  7697								 IFNB	 <>
3  7698								   DB
3  7699								 ELSE
3  7700	00001B31  00						   DB	 VEF_USUAL
3  7701								 ENDIF
3  7702	00001B32  03						 DB	 ??0264	- $ - 1
3  7703	00001B33  32 52	40					 DB	 '2R@'
3  7704	00001B36			 ??0264:
3  7705	00001B36  05						 DB	 ??0264	- ??0263
3  7706	00001B37  20001B10					 DD	 VOC_LINK
3  7707		  =MAIN:20001B31	 VOC_LINK		 =	 ??0263	+ DESIRED_BASE_EQU
3  7708
3  7709								 IFNB	 <$2RFETCH>
3  7710	00001B3B						   LABEL   $2RFETCH FAR
3  7711								 ENDIF
3  7712								 IFNB	 <>
3  7713								   DD	    + DESIRED_BASE_EQU
3  7714								 ELSE
3  7715	00001B3B  20001B3F					   DD	   ??0266 + DESIRED_BASE_EQU
3  7716								 ENDIF
3  7717	00001B3F			 ??0266:
2  7718								 FETCHRS EBX,0
3  7719								 IFNB	  <0>
3  7720	00001B3F  8B 5D	00					   MOV	   EBX,[DWORD PTR EBP +	0 * CELL_SIZE]
3  7721								 ELSE
3  7722								   MOV	   EBX,[DWORD PTR EBP]
3  7723								 ENDIF
2  7724								 FETCHRS EAX,1
3  7725								 IFNB	  <1>
3  7726	00001B42  8B 45	04					   MOV	   EAX,[DWORD PTR EBP +	1 * CELL_SIZE]
3  7727								 ELSE
3  7728								   MOV	   EAX,[DWORD PTR EBP]
3  7729								 ENDIF
2  7730								 PUSHDS	 EAX
3  7731	00001B45  50						 PUSH	 EAX
2  7732								 PUSHDS	 EBX
3  7733	00001B46  53						 PUSH	 EBX
2  7734								 $NEXT
3  7735	00001B47  AD						 LODSD				 ; fetch address
3  7736								 $JMP
4  7737	00001B48  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7738	00001B4A  FF E3						 JMP	 EBX			 ; execute
2  7739
2  7740					 ;  R-PICK
2  7741								 $DEF	 'R-PICK',$R_PICK
3  7742	00001B4C			 ??0267:
3  7743		  =MAIN:1B4C		 LASTWORD		 =	 ??0267
3  7744								 IFNB	 <>
3  7745								   DB
3  7746								 ELSE
3  7747	00001B4C  00						   DB	 VEF_USUAL
3  7748								 ENDIF
3  7749	00001B4D  06						 DB	 ??0268	- $ - 1
3  7750	00001B4E  52 2D	50 49 43 4B				 DB	 'R-PICK'
3  7751	00001B54			 ??0268:
3  7752	00001B54  08						 DB	 ??0268	- ??0267
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 137
FKernel.asm



3  7753	00001B55  20001B31					 DD	 VOC_LINK
3  7754		  =MAIN:20001B4C	 VOC_LINK		 =	 ??0267	+ DESIRED_BASE_EQU
3  7755
3  7756								 IFNB	 <$R_PICK>
3  7757	00001B59						   LABEL   $R_PICK FAR
3  7758								 ENDIF
3  7759								 IFNB	 <>
3  7760								   DD	    + DESIRED_BASE_EQU
3  7761								 ELSE
3  7762	00001B59  20001B5D					   DD	   ??026A + DESIRED_BASE_EQU
3  7763								 ENDIF
3  7764	00001B5D			 ??026A:
2  7765								 POPDS	 EBX
3  7766	00001B5D  5B						 POP	 EBX
2  7767								 FETCHRS EAX,EBX
3  7768								 IFNB	  <EBX>
3  7769	00001B5E  8B 44	9D 00					   MOV	   EAX,[DWORD PTR EBP +	EBX * CELL_SIZE]
3  7770								 ELSE
3  7771								   MOV	   EAX,[DWORD PTR EBP]
3  7772								 ENDIF
2  7773								 PUSHDS	 EAX
3  7774	00001B62  50						 PUSH	 EAX
2  7775								 $NEXT
3  7776	00001B63  AD						 LODSD				 ; fetch address
3  7777								 $JMP
4  7778	00001B64  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7779	00001B66  FF E3						 JMP	 EBX			 ; execute
2  7780
2  7781					 ;  RS-SIZE
2  7782								 $CONST	 'RS-SIZE'
3  7783								 $DEF	 'RS-SIZE',,$DOCONST
4  7784	00001B68			 ??026B:
4  7785		  =MAIN:1B68		 LASTWORD		 =	 ??026B
4  7786								 IFNB	 <>
4  7787								   DB
4  7788								 ELSE
4  7789	00001B68  00						   DB	 VEF_USUAL
4  7790								 ENDIF
4  7791	00001B69  07						 DB	 ??026C	- $ - 1
4  7792	00001B6A  52 53	2D 53 49 5A 45				 DB	 'RS-SIZE'
4  7793	00001B71			 ??026C:
4  7794	00001B71  09						 DB	 ??026C	- ??026B
4  7795	00001B72  20001B4C					 DD	 VOC_LINK
4  7796		  =MAIN:20001B68	 VOC_LINK		 =	 ??026B	+ DESIRED_BASE_EQU
4  7797
4  7798								 IFNB	 <>
4  7799								   LABEL    FAR
4  7800								 ENDIF
4  7801								 IFNB	 <$DOCONST>
4  7802	00001B76  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4  7803								 ELSE
4  7804								   DD	   ??026E + DESIRED_BASE_EQU
4  7805								 ENDIF
4  7806	00001B7A			 ??026E:
2  7807								 CC	 RETURN_STACK_SIZE
3  7808	00001B7A  00001000					 DD	 RETURN_STACK_SIZE
2  7809
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 138
FKernel.asm



2  7810					 ;  RP0
2  7811								 $DEF	 'RP0',$RP0
3  7812	00001B7E			 ??026F:
3  7813		  =MAIN:1B7E		 LASTWORD		 =	 ??026F
3  7814								 IFNB	 <>
3  7815								   DB
3  7816								 ELSE
3  7817	00001B7E  00						   DB	 VEF_USUAL
3  7818								 ENDIF
3  7819	00001B7F  03						 DB	 ??0270	- $ - 1
3  7820	00001B80  52 50	30					 DB	 'RP0'
3  7821	00001B83			 ??0270:
3  7822	00001B83  05						 DB	 ??0270	- ??026F
3  7823	00001B84  20001B68					 DD	 VOC_LINK
3  7824		  =MAIN:20001B7E	 VOC_LINK		 =	 ??026F	+ DESIRED_BASE_EQU
3  7825
3  7826								 IFNB	 <$RP0>
3  7827	00001B88						   LABEL   $RP0	FAR
3  7828								 ENDIF
3  7829								 IFNB	 <>
3  7830								   DD	    + DESIRED_BASE_EQU
3  7831								 ELSE
3  7832	00001B88  20001B8C					   DD	   ??0272 + DESIRED_BASE_EQU
3  7833								 ENDIF
3  7834	00001B8C			 ??0272:
2  7835	00001B8C  8D 87	00002268				 LEA	 EAX,[DWORD PTR	EDI + RSTACK_VAR]
2  7836								 PUSHDS	 EAX
3  7837	00001B92  50						 PUSH	 EAX
2  7838								 $NEXT
3  7839	00001B93  AD						 LODSD				 ; fetch address
3  7840								 $JMP
4  7841	00001B94  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7842	00001B96  FF E3						 JMP	 EBX			 ; execute
2  7843
2  7844					 ;  RP@
2  7845								 $DEF	 'RP@',$RPFETCH
3  7846	00001B98			 ??0273:
3  7847		  =MAIN:1B98		 LASTWORD		 =	 ??0273
3  7848								 IFNB	 <>
3  7849								   DB
3  7850								 ELSE
3  7851	00001B98  00						   DB	 VEF_USUAL
3  7852								 ENDIF
3  7853	00001B99  03						 DB	 ??0274	- $ - 1
3  7854	00001B9A  52 50	40					 DB	 'RP@'
3  7855	00001B9D			 ??0274:
3  7856	00001B9D  05						 DB	 ??0274	- ??0273
3  7857	00001B9E  20001B7E					 DD	 VOC_LINK
3  7858		  =MAIN:20001B98	 VOC_LINK		 =	 ??0273	+ DESIRED_BASE_EQU
3  7859
3  7860								 IFNB	 <$RPFETCH>
3  7861	00001BA2						   LABEL   $RPFETCH FAR
3  7862								 ENDIF
3  7863								 IFNB	 <>
3  7864								   DD	    + DESIRED_BASE_EQU
3  7865								 ELSE
3  7866	00001BA2  20001BA6					   DD	   ??0276 + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 139
FKernel.asm



3  7867								 ENDIF
3  7868	00001BA6			 ??0276:
2  7869								 PUSHDS	 EBP
3  7870	00001BA6  55						 PUSH	 EBP
2  7871								 $NEXT
3  7872	00001BA7  AD						 LODSD				 ; fetch address
3  7873								 $JMP
4  7874	00001BA8  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7875	00001BAA  FF E3						 JMP	 EBX			 ; execute
2  7876
2  7877					 ;  RP!
2  7878								 $DEF	 'RP!',$RPSTORE,,VEF_COMPILE_ONLY
3  7879	00001BAC			 ??0277:
3  7880		  =MAIN:1BAC		 LASTWORD		 =	 ??0277
3  7881								 IFNB	 <VEF_COMPILE_ONLY>
3  7882	00001BAC  04						   DB	 VEF_COMPILE_ONLY
3  7883								 ELSE
3  7884								   DB	 VEF_USUAL
3  7885								 ENDIF
3  7886	00001BAD  03						 DB	 ??0278	- $ - 1
3  7887	00001BAE  52 50	21					 DB	 'RP!'
3  7888	00001BB1			 ??0278:
3  7889	00001BB1  05						 DB	 ??0278	- ??0277
3  7890	00001BB2  20001B98					 DD	 VOC_LINK
3  7891		  =MAIN:20001BAC	 VOC_LINK		 =	 ??0277	+ DESIRED_BASE_EQU
3  7892
3  7893								 IFNB	 <$RPSTORE>
3  7894	00001BB6						   LABEL   $RPSTORE FAR
3  7895								 ENDIF
3  7896								 IFNB	 <>
3  7897								   DD	    + DESIRED_BASE_EQU
3  7898								 ELSE
3  7899	00001BB6  20001BBA					   DD	   ??027A + DESIRED_BASE_EQU
3  7900								 ENDIF
3  7901	00001BBA			 ??027A:
2  7902								 POPDS	 EBP
3  7903	00001BBA  5D						 POP	 EBP
2  7904								 $NEXT
3  7905	00001BBB  AD						 LODSD				 ; fetch address
3  7906								 $JMP
4  7907	00001BBC  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7908	00001BBE  FF E3						 JMP	 EBX			 ; execute
2  7909
2  7910					 ;  +R
2  7911					 ;  D: x - x
2  7912					 ;  R:	 - x
2  7913								 $DEF	 '+R',$PLUS_R,,VEF_COMPILE_ONLY
3  7914	00001BC0			 ??027B:
3  7915		  =MAIN:1BC0		 LASTWORD		 =	 ??027B
3  7916								 IFNB	 <VEF_COMPILE_ONLY>
3  7917	00001BC0  04						   DB	 VEF_COMPILE_ONLY
3  7918								 ELSE
3  7919								   DB	 VEF_USUAL
3  7920								 ENDIF
3  7921	00001BC1  02						 DB	 ??027C	- $ - 1
3  7922	00001BC2  2B 52						 DB	 '+R'
3  7923	00001BC4			 ??027C:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 140
FKernel.asm



3  7924	00001BC4  04						 DB	 ??027C	- ??027B
3  7925	00001BC5  20001BAC					 DD	 VOC_LINK
3  7926		  =MAIN:20001BC0	 VOC_LINK		 =	 ??027B	+ DESIRED_BASE_EQU
3  7927
3  7928								 IFNB	 <$PLUS_R>
3  7929	00001BC9						   LABEL   $PLUS_R FAR
3  7930								 ENDIF
3  7931								 IFNB	 <>
3  7932								   DD	    + DESIRED_BASE_EQU
3  7933								 ELSE
3  7934	00001BC9  20001BCD					   DD	   ??027E + DESIRED_BASE_EQU
3  7935								 ENDIF
3  7936	00001BCD			 ??027E:
2  7937								 FETCHDS EAX
3  7938								 IFNB	  <>
3  7939								   MOV	   EAX,[DWORD PTR ESP +	 * CELL_SIZE]
3  7940								 ELSE
3  7941	00001BCD  8B 04	24					   MOV	   EAX,[DWORD PTR ESP]
3  7942								 ENDIF
2  7943								 PUSHRS	 EAX
3  7944	00001BD0  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7945	00001BD3  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  7946								 $NEXT
3  7947	00001BD6  AD						 LODSD				 ; fetch address
3  7948								 $JMP
4  7949	00001BD7  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7950	00001BD9  FF E3						 JMP	 EBX			 ; execute
2  7951
2  7952					 ;  2+R
2  7953					 ;  D: x1 x2 - x1 x2
2  7954					 ;  R:	     - x1 x2
2  7955								 $DEF	 '2+R',$2PLUS_R,,VEF_COMPILE_ONLY
3  7956	00001BDB			 ??027F:
3  7957		  =MAIN:1BDB		 LASTWORD		 =	 ??027F
3  7958								 IFNB	 <VEF_COMPILE_ONLY>
3  7959	00001BDB  04						   DB	 VEF_COMPILE_ONLY
3  7960								 ELSE
3  7961								   DB	 VEF_USUAL
3  7962								 ENDIF
3  7963	00001BDC  03						 DB	 ??0280	- $ - 1
3  7964	00001BDD  32 2B	52					 DB	 '2+R'
3  7965	00001BE0			 ??0280:
3  7966	00001BE0  05						 DB	 ??0280	- ??027F
3  7967	00001BE1  20001BC0					 DD	 VOC_LINK
3  7968		  =MAIN:20001BDB	 VOC_LINK		 =	 ??027F	+ DESIRED_BASE_EQU
3  7969
3  7970								 IFNB	 <$2PLUS_R>
3  7971	00001BE5						   LABEL   $2PLUS_R FAR
3  7972								 ENDIF
3  7973								 IFNB	 <>
3  7974								   DD	    + DESIRED_BASE_EQU
3  7975								 ELSE
3  7976	00001BE5  20001BE9					   DD	   ??0282 + DESIRED_BASE_EQU
3  7977								 ENDIF
3  7978	00001BE9			 ??0282:
2  7979								 FETCHDS EAX
3  7980								 IFNB	  <>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 141
FKernel.asm



3  7981								   MOV	   EAX,[DWORD PTR ESP +	 * CELL_SIZE]
3  7982								 ELSE
3  7983	00001BE9  8B 04	24					   MOV	   EAX,[DWORD PTR ESP]
3  7984								 ENDIF
2  7985								 FETCHDS EBX,1
3  7986								 IFNB	  <1>
3  7987	00001BEC  8B 5C	24 04					   MOV	   EBX,[DWORD PTR ESP +	1 * CELL_SIZE]
3  7988								 ELSE
3  7989								   MOV	   EBX,[DWORD PTR ESP]
3  7990								 ENDIF
2  7991								 PUSHRS	 EBX
3  7992	00001BF0  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7993	00001BF3  89 5D	00					 MOV	 [DWORD	PTR EBP],EBX
2  7994								 PUSHRS	 EAX
3  7995	00001BF6  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7996	00001BF9  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  7997								 $NEXT
3  7998	00001BFC  AD						 LODSD				 ; fetch address
3  7999								 $JMP
4  8000	00001BFD  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8001	00001BFF  FF E3						 JMP	 EBX			 ; execute
2  8002
1  8003								 INCLUDE "math.inc"
2  8004					 ;******************************************************************************
2  8005					 ;
2  8006					 ;  math.inc
2  8007					 ;  IKForth
2  8008					 ;
2  8009					 ;  Copyright (C) 1999-2003 Illya Kysil
2  8010					 ;
2  8011					 ;******************************************************************************
2  8012					 ;  Integer math
2  8013					 ;******************************************************************************
2  8014
2  8015					 ;  6.1.0090 *
2  8016					 ;  Multiply n1|u1 by n2|u2 giving the product n3|u3.
2  8017					 ;  D: n1|u1 n2|u2 -- n3|u3
2  8018								 $DEF	 '*',$MUL
3  8019	00001C01			 ??0283:
3  8020		  =MAIN:1C01		 LASTWORD		 =	 ??0283
3  8021								 IFNB	 <>
3  8022								   DB
3  8023								 ELSE
3  8024	00001C01  00						   DB	 VEF_USUAL
3  8025								 ENDIF
3  8026	00001C02  01						 DB	 ??0284	- $ - 1
3  8027	00001C03  2A						 DB	 '*'
3  8028	00001C04			 ??0284:
3  8029	00001C04  03						 DB	 ??0284	- ??0283
3  8030	00001C05  20001BDB					 DD	 VOC_LINK
3  8031		  =MAIN:20001C01	 VOC_LINK		 =	 ??0283	+ DESIRED_BASE_EQU
3  8032
3  8033								 IFNB	 <$MUL>
3  8034	00001C09						   LABEL   $MUL	FAR
3  8035								 ENDIF
3  8036								 IFNB	 <>
3  8037								   DD	    + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 142
FKernel.asm



3  8038								 ELSE
3  8039	00001C09  20001C0D					   DD	   ??0286 + DESIRED_BASE_EQU
3  8040								 ENDIF
3  8041	00001C0D			 ??0286:
2  8042								 POPDS	 EAX
3  8043	00001C0D  58						 POP	 EAX
2  8044								 POPDS	 EBX
3  8045	00001C0E  5B						 POP	 EBX
2  8046	00001C0F  F7 EB						 IMUL	 EBX
2  8047								 PUSHDS	 EAX
3  8048	00001C11  50						 PUSH	 EAX
2  8049								 $NEXT
3  8050	00001C12  AD						 LODSD				 ; fetch address
3  8051								 $JMP
4  8052	00001C13  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8053	00001C15  FF E3						 JMP	 EBX			 ; execute
2  8054
2  8055					 ;  6.1.0120 +
2  8056					 ;  D: a b -- a+b
2  8057								 $DEF	 '+',$ADD
3  8058	00001C17			 ??0287:
3  8059		  =MAIN:1C17		 LASTWORD		 =	 ??0287
3  8060								 IFNB	 <>
3  8061								   DB
3  8062								 ELSE
3  8063	00001C17  00						   DB	 VEF_USUAL
3  8064								 ENDIF
3  8065	00001C18  01						 DB	 ??0288	- $ - 1
3  8066	00001C19  2B						 DB	 '+'
3  8067	00001C1A			 ??0288:
3  8068	00001C1A  03						 DB	 ??0288	- ??0287
3  8069	00001C1B  20001C01					 DD	 VOC_LINK
3  8070		  =MAIN:20001C17	 VOC_LINK		 =	 ??0287	+ DESIRED_BASE_EQU
3  8071
3  8072								 IFNB	 <$ADD>
3  8073	00001C1F						   LABEL   $ADD	FAR
3  8074								 ENDIF
3  8075								 IFNB	 <>
3  8076								   DD	    + DESIRED_BASE_EQU
3  8077								 ELSE
3  8078	00001C1F  20001C23					   DD	   ??028A + DESIRED_BASE_EQU
3  8079								 ENDIF
3  8080	00001C23			 ??028A:
2  8081								 POPDS	 EAX
3  8082	00001C23  58						 POP	 EAX
2  8083								 POPDS	 EBX
3  8084	00001C24  5B						 POP	 EBX
2  8085	00001C25  03 C3						 ADD	 EAX,EBX
2  8086								 PUSHDS	 EAX
3  8087	00001C27  50						 PUSH	 EAX
2  8088								 $NEXT
3  8089	00001C28  AD						 LODSD				 ; fetch address
3  8090								 $JMP
4  8091	00001C29  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8092	00001C2B  FF E3						 JMP	 EBX			 ; execute
2  8093
2  8094					 ;  6.1.0160 -
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 143
FKernel.asm



2  8095					 ;  D: a b -- a-b
2  8096								 $DEF	 '-',$SUB
3  8097	00001C2D			 ??028B:
3  8098		  =MAIN:1C2D		 LASTWORD		 =	 ??028B
3  8099								 IFNB	 <>
3  8100								   DB
3  8101								 ELSE
3  8102	00001C2D  00						   DB	 VEF_USUAL
3  8103								 ENDIF
3  8104	00001C2E  01						 DB	 ??028C	- $ - 1
3  8105	00001C2F  2D						 DB	 '-'
3  8106	00001C30			 ??028C:
3  8107	00001C30  03						 DB	 ??028C	- ??028B
3  8108	00001C31  20001C17					 DD	 VOC_LINK
3  8109		  =MAIN:20001C2D	 VOC_LINK		 =	 ??028B	+ DESIRED_BASE_EQU
3  8110
3  8111								 IFNB	 <$SUB>
3  8112	00001C35						   LABEL   $SUB	FAR
3  8113								 ENDIF
3  8114								 IFNB	 <>
3  8115								   DD	    + DESIRED_BASE_EQU
3  8116								 ELSE
3  8117	00001C35  20001C39					   DD	   ??028E + DESIRED_BASE_EQU
3  8118								 ENDIF
3  8119	00001C39			 ??028E:
2  8120								 POPDS	 EBX
3  8121	00001C39  5B						 POP	 EBX
2  8122								 POPDS	 EAX
3  8123	00001C3A  58						 POP	 EAX
2  8124	00001C3B  2B C3						 SUB	 EAX,EBX
2  8125								 PUSHDS	 EAX
3  8126	00001C3D  50						 PUSH	 EAX
2  8127								 $NEXT
3  8128	00001C3E  AD						 LODSD				 ; fetch address
3  8129								 $JMP
4  8130	00001C3F  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8131	00001C41  FF E3						 JMP	 EBX			 ; execute
2  8132
2  8133					 ;  6.1.0290 1+
2  8134					 ;  D: a -- a+1
2  8135								 $DEF	 '1+',$1ADD
3  8136	00001C43			 ??028F:
3  8137		  =MAIN:1C43		 LASTWORD		 =	 ??028F
3  8138								 IFNB	 <>
3  8139								   DB
3  8140								 ELSE
3  8141	00001C43  00						   DB	 VEF_USUAL
3  8142								 ENDIF
3  8143	00001C44  02						 DB	 ??0290	- $ - 1
3  8144	00001C45  31 2B						 DB	 '1+'
3  8145	00001C47			 ??0290:
3  8146	00001C47  04						 DB	 ??0290	- ??028F
3  8147	00001C48  20001C2D					 DD	 VOC_LINK
3  8148		  =MAIN:20001C43	 VOC_LINK		 =	 ??028F	+ DESIRED_BASE_EQU
3  8149
3  8150								 IFNB	 <$1ADD>
3  8151	00001C4C						   LABEL   $1ADD FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 144
FKernel.asm



3  8152								 ENDIF
3  8153								 IFNB	 <>
3  8154								   DD	    + DESIRED_BASE_EQU
3  8155								 ELSE
3  8156	00001C4C  20001C50					   DD	   ??0292 + DESIRED_BASE_EQU
3  8157								 ENDIF
3  8158	00001C50			 ??0292:
2  8159								 POPDS	 EAX
3  8160	00001C50  58						 POP	 EAX
2  8161	00001C51  40						 INC	 EAX
2  8162								 PUSHDS	 EAX
3  8163	00001C52  50						 PUSH	 EAX
2  8164								 $NEXT
3  8165	00001C53  AD						 LODSD				 ; fetch address
3  8166								 $JMP
4  8167	00001C54  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8168	00001C56  FF E3						 JMP	 EBX			 ; execute
2  8169
2  8170					 ;  6.1.0300 1-
2  8171					 ;  D: a -- a-1
2  8172								 $DEF	 '1-',$1SUB
3  8173	00001C58			 ??0293:
3  8174		  =MAIN:1C58		 LASTWORD		 =	 ??0293
3  8175								 IFNB	 <>
3  8176								   DB
3  8177								 ELSE
3  8178	00001C58  00						   DB	 VEF_USUAL
3  8179								 ENDIF
3  8180	00001C59  02						 DB	 ??0294	- $ - 1
3  8181	00001C5A  31 2D						 DB	 '1-'
3  8182	00001C5C			 ??0294:
3  8183	00001C5C  04						 DB	 ??0294	- ??0293
3  8184	00001C5D  20001C43					 DD	 VOC_LINK
3  8185		  =MAIN:20001C58	 VOC_LINK		 =	 ??0293	+ DESIRED_BASE_EQU
3  8186
3  8187								 IFNB	 <$1SUB>
3  8188	00001C61						   LABEL   $1SUB FAR
3  8189								 ENDIF
3  8190								 IFNB	 <>
3  8191								   DD	    + DESIRED_BASE_EQU
3  8192								 ELSE
3  8193	00001C61  20001C65					   DD	   ??0296 + DESIRED_BASE_EQU
3  8194								 ENDIF
3  8195	00001C65			 ??0296:
2  8196								 POPDS	 EAX
3  8197	00001C65  58						 POP	 EAX
2  8198	00001C66  48						 DEC	 EAX
2  8199								 PUSHDS	 EAX
3  8200	00001C67  50						 PUSH	 EAX
2  8201								 $NEXT
3  8202	00001C68  AD						 LODSD				 ; fetch address
3  8203								 $JMP
4  8204	00001C69  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8205	00001C6B  FF E3						 JMP	 EBX			 ; execute
2  8206
2  8207					 ;  6.1.0320 2*
2  8208					 ;  D: a -- a*2
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 145
FKernel.asm



2  8209								 $DEF	 '2*',$2MUL
3  8210	00001C6D			 ??0297:
3  8211		  =MAIN:1C6D		 LASTWORD		 =	 ??0297
3  8212								 IFNB	 <>
3  8213								   DB
3  8214								 ELSE
3  8215	00001C6D  00						   DB	 VEF_USUAL
3  8216								 ENDIF
3  8217	00001C6E  02						 DB	 ??0298	- $ - 1
3  8218	00001C6F  32 2A						 DB	 '2*'
3  8219	00001C71			 ??0298:
3  8220	00001C71  04						 DB	 ??0298	- ??0297
3  8221	00001C72  20001C58					 DD	 VOC_LINK
3  8222		  =MAIN:20001C6D	 VOC_LINK		 =	 ??0297	+ DESIRED_BASE_EQU
3  8223
3  8224								 IFNB	 <$2MUL>
3  8225	00001C76						   LABEL   $2MUL FAR
3  8226								 ENDIF
3  8227								 IFNB	 <>
3  8228								   DD	    + DESIRED_BASE_EQU
3  8229								 ELSE
3  8230	00001C76  20001C7A					   DD	   ??029A + DESIRED_BASE_EQU
3  8231								 ENDIF
3  8232	00001C7A			 ??029A:
2  8233								 POPDS	 EAX
3  8234	00001C7A  58						 POP	 EAX
2  8235	00001C7B  D1 E0						 SAL	 EAX,1
2  8236								 PUSHDS	 EAX
3  8237	00001C7D  50						 PUSH	 EAX
2  8238								 $NEXT
3  8239	00001C7E  AD						 LODSD				 ; fetch address
3  8240								 $JMP
4  8241	00001C7F  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8242	00001C81  FF E3						 JMP	 EBX			 ; execute
2  8243
2  8244					 ;  6.1.0330 2/
2  8245					 ;  D: a -- a/2
2  8246								 $DEF	 '2/',$2DIV
3  8247	00001C83			 ??029B:
3  8248		  =MAIN:1C83		 LASTWORD		 =	 ??029B
3  8249								 IFNB	 <>
3  8250								   DB
3  8251								 ELSE
3  8252	00001C83  00						   DB	 VEF_USUAL
3  8253								 ENDIF
3  8254	00001C84  02						 DB	 ??029C	- $ - 1
3  8255	00001C85  32 2F						 DB	 '2/'
3  8256	00001C87			 ??029C:
3  8257	00001C87  04						 DB	 ??029C	- ??029B
3  8258	00001C88  20001C6D					 DD	 VOC_LINK
3  8259		  =MAIN:20001C83	 VOC_LINK		 =	 ??029B	+ DESIRED_BASE_EQU
3  8260
3  8261								 IFNB	 <$2DIV>
3  8262	00001C8C						   LABEL   $2DIV FAR
3  8263								 ENDIF
3  8264								 IFNB	 <>
3  8265								   DD	    + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 146
FKernel.asm



3  8266								 ELSE
3  8267	00001C8C  20001C90					   DD	   ??029E + DESIRED_BASE_EQU
3  8268								 ENDIF
3  8269	00001C90			 ??029E:
2  8270								 POPDS	 EAX
3  8271	00001C90  58						 POP	 EAX
2  8272	00001C91  D1 F8						 SAR	 EAX,1
2  8273								 PUSHDS	 EAX
3  8274	00001C93  50						 PUSH	 EAX
2  8275								 $NEXT
3  8276	00001C94  AD						 LODSD				 ; fetch address
3  8277								 $JMP
4  8278	00001C95  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8279	00001C97  FF E3						 JMP	 EBX			 ; execute
2  8280
2  8281					 ;  6.1.0690 ABS
2  8282					 ;  D: a -- abs(a)
2  8283								 $DEF	 'ABS',$ABS
3  8284	00001C99			 ??029F:
3  8285		  =MAIN:1C99		 LASTWORD		 =	 ??029F
3  8286								 IFNB	 <>
3  8287								   DB
3  8288								 ELSE
3  8289	00001C99  00						   DB	 VEF_USUAL
3  8290								 ENDIF
3  8291	00001C9A  03						 DB	 ??02A0	- $ - 1
3  8292	00001C9B  41 42	53					 DB	 'ABS'
3  8293	00001C9E			 ??02A0:
3  8294	00001C9E  05						 DB	 ??02A0	- ??029F
3  8295	00001C9F  20001C83					 DD	 VOC_LINK
3  8296		  =MAIN:20001C99	 VOC_LINK		 =	 ??029F	+ DESIRED_BASE_EQU
3  8297
3  8298								 IFNB	 <$ABS>
3  8299	00001CA3						   LABEL   $ABS	FAR
3  8300								 ENDIF
3  8301								 IFNB	 <>
3  8302								   DD	    + DESIRED_BASE_EQU
3  8303								 ELSE
3  8304	00001CA3  20001CA7					   DD	   ??02A2 + DESIRED_BASE_EQU
3  8305								 ENDIF
3  8306	00001CA7			 ??02A2:
2  8307								 POPDS	 EAX
3  8308	00001CA7  58						 POP	 EAX
2  8309	00001CA8  23 C0						 AND	 EAX,EAX
2  8310	00001CAA  79 02						 JNS	 SHORT ABSOK
2  8311	00001CAC  F7 D8						 NEG	 EAX
2  8312	00001CAE			 ABSOK:
2  8313								 PUSHDS	 EAX
3  8314	00001CAE  50						 PUSH	 EAX
2  8315								 $NEXT
3  8316	00001CAF  AD						 LODSD				 ; fetch address
3  8317								 $JMP
4  8318	00001CB0  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8319	00001CB2  FF E3						 JMP	 EBX			 ; execute
2  8320
2  8321					 ;  6.1.1805 LSHIFT
2  8322					 ;  D: a b -- a	<< b
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 147
FKernel.asm



2  8323								 $DEF	 'LSHIFT',$LSHIFT
3  8324	00001CB4			 ??02A3:
3  8325		  =MAIN:1CB4		 LASTWORD		 =	 ??02A3
3  8326								 IFNB	 <>
3  8327								   DB
3  8328								 ELSE
3  8329	00001CB4  00						   DB	 VEF_USUAL
3  8330								 ENDIF
3  8331	00001CB5  06						 DB	 ??02A4	- $ - 1
3  8332	00001CB6  4C 53	48 49 46 54				 DB	 'LSHIFT'
3  8333	00001CBC			 ??02A4:
3  8334	00001CBC  08						 DB	 ??02A4	- ??02A3
3  8335	00001CBD  20001C99					 DD	 VOC_LINK
3  8336		  =MAIN:20001CB4	 VOC_LINK		 =	 ??02A3	+ DESIRED_BASE_EQU
3  8337
3  8338								 IFNB	 <$LSHIFT>
3  8339	00001CC1						   LABEL   $LSHIFT FAR
3  8340								 ENDIF
3  8341								 IFNB	 <>
3  8342								   DD	    + DESIRED_BASE_EQU
3  8343								 ELSE
3  8344	00001CC1  20001CC5					   DD	   ??02A6 + DESIRED_BASE_EQU
3  8345								 ENDIF
3  8346	00001CC5			 ??02A6:
2  8347								 POPDS	 ECX
3  8348	00001CC5  59						 POP	 ECX
2  8349								 POPDS	 EAX
3  8350	00001CC6  58						 POP	 EAX
2  8351	00001CC7  D3 E0						 SHL	 EAX,CL
2  8352								 PUSHDS	 EAX
3  8353	00001CC9  50						 PUSH	 EAX
2  8354								 $NEXT
3  8355	00001CCA  AD						 LODSD				 ; fetch address
3  8356								 $JMP
4  8357	00001CCB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8358	00001CCD  FF E3						 JMP	 EBX			 ; execute
2  8359
2  8360					 ;  6.1.2162 RSHIFT
2  8361					 ;  D: a b -- a	>> b
2  8362								 $DEF	 'RSHIFT',$RSHIFT
3  8363	00001CCF			 ??02A7:
3  8364		  =MAIN:1CCF		 LASTWORD		 =	 ??02A7
3  8365								 IFNB	 <>
3  8366								   DB
3  8367								 ELSE
3  8368	00001CCF  00						   DB	 VEF_USUAL
3  8369								 ENDIF
3  8370	00001CD0  06						 DB	 ??02A8	- $ - 1
3  8371	00001CD1  52 53	48 49 46 54				 DB	 'RSHIFT'
3  8372	00001CD7			 ??02A8:
3  8373	00001CD7  08						 DB	 ??02A8	- ??02A7
3  8374	00001CD8  20001CB4					 DD	 VOC_LINK
3  8375		  =MAIN:20001CCF	 VOC_LINK		 =	 ??02A7	+ DESIRED_BASE_EQU
3  8376
3  8377								 IFNB	 <$RSHIFT>
3  8378	00001CDC						   LABEL   $RSHIFT FAR
3  8379								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 148
FKernel.asm



3  8380								 IFNB	 <>
3  8381								   DD	    + DESIRED_BASE_EQU
3  8382								 ELSE
3  8383	00001CDC  20001CE0					   DD	   ??02AA + DESIRED_BASE_EQU
3  8384								 ENDIF
3  8385	00001CE0			 ??02AA:
2  8386								 POPDS	 ECX
3  8387	00001CE0  59						 POP	 ECX
2  8388								 POPDS	 EAX
3  8389	00001CE1  58						 POP	 EAX
2  8390	00001CE2  D3 E8						 SHR	 EAX,CL
2  8391								 PUSHDS	 EAX
3  8392	00001CE4  50						 PUSH	 EAX
2  8393								 $NEXT
3  8394	00001CE5  AD						 LODSD				 ; fetch address
3  8395								 $JMP
4  8396	00001CE6  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8397	00001CE8  FF E3						 JMP	 EBX			 ; execute
2  8398
2  8399					 ;  6.1.1810 M*
2  8400					 ;  d is the signed product of n1 times	n2.
2  8401					 ;  D: n1 n2 --	d
2  8402								 $DEF	 'M*',$MMUL
3  8403	00001CEA			 ??02AB:
3  8404		  =MAIN:1CEA		 LASTWORD		 =	 ??02AB
3  8405								 IFNB	 <>
3  8406								   DB
3  8407								 ELSE
3  8408	00001CEA  00						   DB	 VEF_USUAL
3  8409								 ENDIF
3  8410	00001CEB  02						 DB	 ??02AC	- $ - 1
3  8411	00001CEC  4D 2A						 DB	 'M*'
3  8412	00001CEE			 ??02AC:
3  8413	00001CEE  04						 DB	 ??02AC	- ??02AB
3  8414	00001CEF  20001CCF					 DD	 VOC_LINK
3  8415		  =MAIN:20001CEA	 VOC_LINK		 =	 ??02AB	+ DESIRED_BASE_EQU
3  8416
3  8417								 IFNB	 <$MMUL>
3  8418	00001CF3						   LABEL   $MMUL FAR
3  8419								 ENDIF
3  8420								 IFNB	 <>
3  8421								   DD	    + DESIRED_BASE_EQU
3  8422								 ELSE
3  8423	00001CF3  20001CF7					   DD	   ??02AE + DESIRED_BASE_EQU
3  8424								 ENDIF
3  8425	00001CF7			 ??02AE:
2  8426								 POPDS	 EAX
3  8427	00001CF7  58						 POP	 EAX
2  8428								 POPDS	 EBX
3  8429	00001CF8  5B						 POP	 EBX
2  8430	00001CF9  F7 EB						 IMUL	 EBX
2  8431								 PUSHDS	 EAX
3  8432	00001CFB  50						 PUSH	 EAX
2  8433								 PUSHDS	 EDX
3  8434	00001CFC  52						 PUSH	 EDX
2  8435								 $NEXT
3  8436	00001CFD  AD						 LODSD				 ; fetch address
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 149
FKernel.asm



3  8437								 $JMP
4  8438	00001CFE  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8439	00001D00  FF E3						 JMP	 EBX			 ; execute
2  8440
2  8441					 ;  6.1.1910 NEGATE
2  8442					 ;  D: a -- -a
2  8443								 $DEF	 'NEGATE',$NEGATE
3  8444	00001D02			 ??02AF:
3  8445		  =MAIN:1D02		 LASTWORD		 =	 ??02AF
3  8446								 IFNB	 <>
3  8447								   DB
3  8448								 ELSE
3  8449	00001D02  00						   DB	 VEF_USUAL
3  8450								 ENDIF
3  8451	00001D03  06						 DB	 ??02B0	- $ - 1
3  8452	00001D04  4E 45	47 41 54 45				 DB	 'NEGATE'
3  8453	00001D0A			 ??02B0:
3  8454	00001D0A  08						 DB	 ??02B0	- ??02AF
3  8455	00001D0B  20001CEA					 DD	 VOC_LINK
3  8456		  =MAIN:20001D02	 VOC_LINK		 =	 ??02AF	+ DESIRED_BASE_EQU
3  8457
3  8458								 IFNB	 <$NEGATE>
3  8459	00001D0F						   LABEL   $NEGATE FAR
3  8460								 ENDIF
3  8461								 IFNB	 <>
3  8462								   DD	    + DESIRED_BASE_EQU
3  8463								 ELSE
3  8464	00001D0F  20001D13					   DD	   ??02B2 + DESIRED_BASE_EQU
3  8465								 ENDIF
3  8466	00001D13			 ??02B2:
2  8467								 POPDS	 EAX
3  8468	00001D13  58						 POP	 EAX
2  8469	00001D14  F7 D8						 NEG	 EAX
2  8470								 PUSHDS	 EAX
3  8471	00001D16  50						 PUSH	 EAX
2  8472								 $NEXT
3  8473	00001D17  AD						 LODSD				 ; fetch address
3  8474								 $JMP
4  8475	00001D18  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8476	00001D1A  FF E3						 JMP	 EBX			 ; execute
2  8477
2  8478					 ;  6.1.2214 SM/REM
2  8479					 ;  Divide d1 by n1, giving the	symmetric quotient n3 and the remainder	n2.
2  8480					 ;  Input and output stack arguments are signed. An ambiguous condition	exists
2  8481					 ;  if n1 is zero or if	the quotient lies outside the range of a single-cell signed integer.
2  8482					 ;  D: d1 n1 --	n2 n3
2  8483								 $DEF	 'SM/REM',$SMDIVREM
3  8484	00001D1C			 ??02B3:
3  8485		  =MAIN:1D1C		 LASTWORD		 =	 ??02B3
3  8486								 IFNB	 <>
3  8487								   DB
3  8488								 ELSE
3  8489	00001D1C  00						   DB	 VEF_USUAL
3  8490								 ENDIF
3  8491	00001D1D  06						 DB	 ??02B4	- $ - 1
3  8492	00001D1E  53 4D	2F 52 45 4D				 DB	 'SM/REM'
3  8493	00001D24			 ??02B4:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 150
FKernel.asm



3  8494	00001D24  08						 DB	 ??02B4	- ??02B3
3  8495	00001D25  20001D02					 DD	 VOC_LINK
3  8496		  =MAIN:20001D1C	 VOC_LINK		 =	 ??02B3	+ DESIRED_BASE_EQU
3  8497
3  8498								 IFNB	 <$SMDIVREM>
3  8499	00001D29						   LABEL   $SMDIVREM FAR
3  8500								 ENDIF
3  8501								 IFNB	 <>
3  8502								   DD	    + DESIRED_BASE_EQU
3  8503								 ELSE
3  8504	00001D29  20001D2D					   DD	   ??02B6 + DESIRED_BASE_EQU
3  8505								 ENDIF
3  8506	00001D2D			 ??02B6:
2  8507								 POPDS	 EBX			 ; n1
3  8508	00001D2D  5B						 POP	 EBX
2  8509								 POPDS	 EDX
3  8510	00001D2E  5A						 POP	 EDX
2  8511								 POPDS	 EAX
3  8512	00001D2F  58						 POP	 EAX
2  8513	00001D30  F7 FB						 IDIV	 EBX
2  8514								 PUSHDS	 EDX			 ; n2
3  8515	00001D32  52						 PUSH	 EDX
2  8516								 PUSHDS	 EAX			 ; n3
3  8517	00001D33  50						 PUSH	 EAX
2  8518								 $NEXT
3  8519	00001D34  AD						 LODSD				 ; fetch address
3  8520								 $JMP
4  8521	00001D35  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8522	00001D37  FF E3						 JMP	 EBX			 ; execute
2  8523
2  8524					 ;******************************************************************************
2  8525					 ;  Unsigned integer math
2  8526					 ;******************************************************************************
2  8527
2  8528					 ;  6.1.2360 UM*
2  8529					 ;  Multiply u1	by u2, giving the unsigned double-cell product ud.
2  8530					 ;  All	values and arithmetic are unsigned.
2  8531					 ;  D: u1 u2 --	ud
2  8532								 $DEF	 'UM*',$UMMUL
3  8533	00001D39			 ??02B7:
3  8534		  =MAIN:1D39		 LASTWORD		 =	 ??02B7
3  8535								 IFNB	 <>
3  8536								   DB
3  8537								 ELSE
3  8538	00001D39  00						   DB	 VEF_USUAL
3  8539								 ENDIF
3  8540	00001D3A  03						 DB	 ??02B8	- $ - 1
3  8541	00001D3B  55 4D	2A					 DB	 'UM*'
3  8542	00001D3E			 ??02B8:
3  8543	00001D3E  05						 DB	 ??02B8	- ??02B7
3  8544	00001D3F  20001D1C					 DD	 VOC_LINK
3  8545		  =MAIN:20001D39	 VOC_LINK		 =	 ??02B7	+ DESIRED_BASE_EQU
3  8546
3  8547								 IFNB	 <$UMMUL>
3  8548	00001D43						   LABEL   $UMMUL FAR
3  8549								 ENDIF
3  8550								 IFNB	 <>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 151
FKernel.asm



3  8551								   DD	    + DESIRED_BASE_EQU
3  8552								 ELSE
3  8553	00001D43  20001D47					   DD	   ??02BA + DESIRED_BASE_EQU
3  8554								 ENDIF
3  8555	00001D47			 ??02BA:
2  8556								 POPDS	 EBX
3  8557	00001D47  5B						 POP	 EBX
2  8558								 POPDS	 EAX
3  8559	00001D48  58						 POP	 EAX
2  8560	00001D49  F7 E3						 MUL	 EBX
2  8561								 PUSHDS	 EAX
3  8562	00001D4B  50						 PUSH	 EAX
2  8563								 PUSHDS	 EDX
3  8564	00001D4C  52						 PUSH	 EDX
2  8565								 $NEXT
3  8566	00001D4D  AD						 LODSD				 ; fetch address
3  8567								 $JMP
4  8568	00001D4E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8569	00001D50  FF E3						 JMP	 EBX			 ; execute
2  8570
2  8571					 ;  6.1.2370 UM/MOD
2  8572					 ;  Divide ud by u1, giving the	quotient u3 and	the remainder u2.
2  8573					 ;  All	values and arithmetic are unsigned. An ambiguous condition exists if u1
2  8574					 ;  is zero or if the quotient lies outside the	range of a single-cell unsigned	integer.
2  8575					 ;  D: ud u1 --	u2 u3
2  8576								 $DEF	 'UM/MOD',$UMDIVMOD
3  8577	00001D52			 ??02BB:
3  8578		  =MAIN:1D52		 LASTWORD		 =	 ??02BB
3  8579								 IFNB	 <>
3  8580								   DB
3  8581								 ELSE
3  8582	00001D52  00						   DB	 VEF_USUAL
3  8583								 ENDIF
3  8584	00001D53  06						 DB	 ??02BC	- $ - 1
3  8585	00001D54  55 4D	2F 4D 4F 44				 DB	 'UM/MOD'
3  8586	00001D5A			 ??02BC:
3  8587	00001D5A  08						 DB	 ??02BC	- ??02BB
3  8588	00001D5B  20001D39					 DD	 VOC_LINK
3  8589		  =MAIN:20001D52	 VOC_LINK		 =	 ??02BB	+ DESIRED_BASE_EQU
3  8590
3  8591								 IFNB	 <$UMDIVMOD>
3  8592	00001D5F						   LABEL   $UMDIVMOD FAR
3  8593								 ENDIF
3  8594								 IFNB	 <>
3  8595								   DD	    + DESIRED_BASE_EQU
3  8596								 ELSE
3  8597	00001D5F  20001D63					   DD	   ??02BE + DESIRED_BASE_EQU
3  8598								 ENDIF
3  8599	00001D63			 ??02BE:
2  8600								 POPDS	 EBX			 ; u1
3  8601	00001D63  5B						 POP	 EBX
2  8602								 POPDS	 EDX
3  8603	00001D64  5A						 POP	 EDX
2  8604								 POPDS	 EAX
3  8605	00001D65  58						 POP	 EAX
2  8606	00001D66  F7 F3						 DIV	 EBX
2  8607								 PUSHDS	 EDX			 ; u2
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 152
FKernel.asm



3  8608	00001D68  52						 PUSH	 EDX
2  8609								 PUSHDS	 EAX			 ; u3
3  8610	00001D69  50						 PUSH	 EAX
2  8611								 $NEXT
3  8612	00001D6A  AD						 LODSD				 ; fetch address
3  8613								 $JMP
4  8614	00001D6B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8615	00001D6D  FF E3						 JMP	 EBX			 ; execute
2  8616
2  8617					 ;******************************************************************************
2  8618					 ;  Logic
2  8619					 ;******************************************************************************
2  8620
2  8621					 ;  6.1.0720 AND
2  8622					 ;  D: a b -- a	and b
2  8623								 $DEF	 'AND',$AND
3  8624	00001D6F			 ??02BF:
3  8625		  =MAIN:1D6F		 LASTWORD		 =	 ??02BF
3  8626								 IFNB	 <>
3  8627								   DB
3  8628								 ELSE
3  8629	00001D6F  00						   DB	 VEF_USUAL
3  8630								 ENDIF
3  8631	00001D70  03						 DB	 ??02C0	- $ - 1
3  8632	00001D71  41 4E	44					 DB	 'AND'
3  8633	00001D74			 ??02C0:
3  8634	00001D74  05						 DB	 ??02C0	- ??02BF
3  8635	00001D75  20001D52					 DD	 VOC_LINK
3  8636		  =MAIN:20001D6F	 VOC_LINK		 =	 ??02BF	+ DESIRED_BASE_EQU
3  8637
3  8638								 IFNB	 <$AND>
3  8639	00001D79						   LABEL   $AND	FAR
3  8640								 ENDIF
3  8641								 IFNB	 <>
3  8642								   DD	    + DESIRED_BASE_EQU
3  8643								 ELSE
3  8644	00001D79  20001D7D					   DD	   ??02C2 + DESIRED_BASE_EQU
3  8645								 ENDIF
3  8646	00001D7D			 ??02C2:
2  8647								 POPDS	 EBX
3  8648	00001D7D  5B						 POP	 EBX
2  8649								 POPDS	 EAX
3  8650	00001D7E  58						 POP	 EAX
2  8651	00001D7F  23 C3						 AND	 EAX,EBX
2  8652								 PUSHDS	 EAX
3  8653	00001D81  50						 PUSH	 EAX
2  8654								 $NEXT
3  8655	00001D82  AD						 LODSD				 ; fetch address
3  8656								 $JMP
4  8657	00001D83  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8658	00001D85  FF E3						 JMP	 EBX			 ; execute
2  8659
2  8660					 ;  6.1.1720 INVERT
2  8661					 ;  D: a -- NOT	a
2  8662								 $DEF	 'INVERT',$INVERT
3  8663	00001D87			 ??02C3:
3  8664		  =MAIN:1D87		 LASTWORD		 =	 ??02C3
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 153
FKernel.asm



3  8665								 IFNB	 <>
3  8666								   DB
3  8667								 ELSE
3  8668	00001D87  00						   DB	 VEF_USUAL
3  8669								 ENDIF
3  8670	00001D88  06						 DB	 ??02C4	- $ - 1
3  8671	00001D89  49 4E	56 45 52 54				 DB	 'INVERT'
3  8672	00001D8F			 ??02C4:
3  8673	00001D8F  08						 DB	 ??02C4	- ??02C3
3  8674	00001D90  20001D6F					 DD	 VOC_LINK
3  8675		  =MAIN:20001D87	 VOC_LINK		 =	 ??02C3	+ DESIRED_BASE_EQU
3  8676
3  8677								 IFNB	 <$INVERT>
3  8678	00001D94						   LABEL   $INVERT FAR
3  8679								 ENDIF
3  8680								 IFNB	 <>
3  8681								   DD	    + DESIRED_BASE_EQU
3  8682								 ELSE
3  8683	00001D94  20001D98					   DD	   ??02C6 + DESIRED_BASE_EQU
3  8684								 ENDIF
3  8685	00001D98			 ??02C6:
2  8686								 POPDS	 EAX
3  8687	00001D98  58						 POP	 EAX
2  8688	00001D99  F7 D0						 NOT	 EAX
2  8689								 PUSHDS	 EAX
3  8690	00001D9B  50						 PUSH	 EAX
2  8691								 $NEXT
3  8692	00001D9C  AD						 LODSD				 ; fetch address
3  8693								 $JMP
4  8694	00001D9D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8695	00001D9F  FF E3						 JMP	 EBX			 ; execute
2  8696
2  8697					 ;  6.1.1980 OR
2  8698					 ;  D: a b -- a	or b
2  8699								 $DEF	 'OR',$OR
3  8700	00001DA1			 ??02C7:
3  8701		  =MAIN:1DA1		 LASTWORD		 =	 ??02C7
3  8702								 IFNB	 <>
3  8703								   DB
3  8704								 ELSE
3  8705	00001DA1  00						   DB	 VEF_USUAL
3  8706								 ENDIF
3  8707	00001DA2  02						 DB	 ??02C8	- $ - 1
3  8708	00001DA3  4F 52						 DB	 'OR'
3  8709	00001DA5			 ??02C8:
3  8710	00001DA5  04						 DB	 ??02C8	- ??02C7
3  8711	00001DA6  20001D87					 DD	 VOC_LINK
3  8712		  =MAIN:20001DA1	 VOC_LINK		 =	 ??02C7	+ DESIRED_BASE_EQU
3  8713
3  8714								 IFNB	 <$OR>
3  8715	00001DAA						   LABEL   $OR FAR
3  8716								 ENDIF
3  8717								 IFNB	 <>
3  8718								   DD	    + DESIRED_BASE_EQU
3  8719								 ELSE
3  8720	00001DAA  20001DAE					   DD	   ??02CA + DESIRED_BASE_EQU
3  8721								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 154
FKernel.asm



3  8722	00001DAE			 ??02CA:
2  8723								 POPDS	 EBX
3  8724	00001DAE  5B						 POP	 EBX
2  8725								 POPDS	 EAX
3  8726	00001DAF  58						 POP	 EAX
2  8727	00001DB0  0B C3						 OR	 EAX,EBX
2  8728								 PUSHDS	 EAX
3  8729	00001DB2  50						 PUSH	 EAX
2  8730								 $NEXT
3  8731	00001DB3  AD						 LODSD				 ; fetch address
3  8732								 $JMP
4  8733	00001DB4  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8734	00001DB6  FF E3						 JMP	 EBX			 ; execute
2  8735
2  8736					 ;  6.1.2490 XOR
2  8737					 ;  D: a b -- a	xor b
2  8738								 $DEF	 'XOR',$XOR
3  8739	00001DB8			 ??02CB:
3  8740		  =MAIN:1DB8		 LASTWORD		 =	 ??02CB
3  8741								 IFNB	 <>
3  8742								   DB
3  8743								 ELSE
3  8744	00001DB8  00						   DB	 VEF_USUAL
3  8745								 ENDIF
3  8746	00001DB9  03						 DB	 ??02CC	- $ - 1
3  8747	00001DBA  58 4F	52					 DB	 'XOR'
3  8748	00001DBD			 ??02CC:
3  8749	00001DBD  05						 DB	 ??02CC	- ??02CB
3  8750	00001DBE  20001DA1					 DD	 VOC_LINK
3  8751		  =MAIN:20001DB8	 VOC_LINK		 =	 ??02CB	+ DESIRED_BASE_EQU
3  8752
3  8753								 IFNB	 <$XOR>
3  8754	00001DC2						   LABEL   $XOR	FAR
3  8755								 ENDIF
3  8756								 IFNB	 <>
3  8757								   DD	    + DESIRED_BASE_EQU
3  8758								 ELSE
3  8759	00001DC2  20001DC6					   DD	   ??02CE + DESIRED_BASE_EQU
3  8760								 ENDIF
3  8761	00001DC6			 ??02CE:
2  8762								 POPDS	 EBX
3  8763	00001DC6  5B						 POP	 EBX
2  8764								 POPDS	 EAX
3  8765	00001DC7  58						 POP	 EAX
2  8766	00001DC8  33 C3						 XOR	 EAX,EBX
2  8767								 PUSHDS	 EAX
3  8768	00001DCA  50						 PUSH	 EAX
2  8769								 $NEXT
3  8770	00001DCB  AD						 LODSD				 ; fetch address
3  8771								 $JMP
4  8772	00001DCC  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8773	00001DCE  FF E3						 JMP	 EBX			 ; execute
2  8774
2  8775					 ;  UD/
2  8776					 ;  D: UD1 UD2 -- REMD QD
2  8777								 $DEF	 'UD/',$UDDIV
3  8778	00001DD0			 ??02CF:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 155
FKernel.asm



3  8779		  =MAIN:1DD0		 LASTWORD		 =	 ??02CF
3  8780								 IFNB	 <>
3  8781								   DB
3  8782								 ELSE
3  8783	00001DD0  00						   DB	 VEF_USUAL
3  8784								 ENDIF
3  8785	00001DD1  03						 DB	 ??02D0	- $ - 1
3  8786	00001DD2  55 44	2F					 DB	 'UD/'
3  8787	00001DD5			 ??02D0:
3  8788	00001DD5  05						 DB	 ??02D0	- ??02CF
3  8789	00001DD6  20001DB8					 DD	 VOC_LINK
3  8790		  =MAIN:20001DD0	 VOC_LINK		 =	 ??02CF	+ DESIRED_BASE_EQU
3  8791
3  8792								 IFNB	 <$UDDIV>
3  8793	00001DDA						   LABEL   $UDDIV FAR
3  8794								 ENDIF
3  8795								 IFNB	 <>
3  8796								   DD	    + DESIRED_BASE_EQU
3  8797								 ELSE
3  8798	00001DDA  20001DDE					   DD	   ??02D2 + DESIRED_BASE_EQU
3  8799								 ENDIF
3  8800	00001DDE			 ??02D2:
2  8801								 PUSHRS	 EDI
3  8802	00001DDE  83 ED	04					 SUB	 EBP,CELL_SIZE
3  8803	00001DE1  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2  8804								 PUSHRS	 ESI
3  8805	00001DE4  83 ED	04					 SUB	 EBP,CELL_SIZE
3  8806	00001DE7  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  8807								 POPDS	 ECX
3  8808	00001DEA  59						 POP	 ECX
2  8809								 POPDS	 EBX
3  8810	00001DEB  5B						 POP	 EBX
2  8811								 POPDS	 EDX
3  8812	00001DEC  5A						 POP	 EDX
2  8813								 POPDS	 EAX
3  8814	00001DED  58						 POP	 EAX
2  8815								 PUSHDS	 EBP
3  8816	00001DEE  55						 PUSH	 EBP
2  8817					 ;
2  8818	00001DEF  BD 00000040					 MOV	 EBP,64
2  8819	00001DF4  33 F6						 XOR	 ESI,ESI
2  8820	00001DF6  33 FF						 XOR	 EDI,EDI
2  8821	00001DF8			 UD_LOOP:
2  8822	00001DF8  D1 E0						 SHL	 EAX,1
2  8823	00001DFA  D1 D2						 RCL	 EDX,1
2  8824	00001DFC  D1 D7						 RCL	 EDI,1
2  8825	00001DFE  D1 D6						 RCL	 ESI,1
2  8826	00001E00  3B F1						 CMP	 ESI,ECX
2  8827	00001E02  77 06						 JA	 SHORT UD_DIV
2  8828	00001E04  72 09						 JB	 SHORT UD_NEXT
2  8829	00001E06  3B FB						 CMP	 EDI,EBX
2  8830	00001E08  72 05						 JB	 SHORT UD_NEXT
2  8831	00001E0A			 UD_DIV:
2  8832	00001E0A  2B FB						 SUB	 EDI,EBX
2  8833	00001E0C  1B F1						 SBB	 ESI,ECX
2  8834	00001E0E  40						 INC	 EAX
2  8835	00001E0F			 UD_NEXT:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 156
FKernel.asm



2  8836	00001E0F  4D						 DEC	 EBP
2  8837	00001E10  75 E6						 JNE	 UD_LOOP
2  8838					 ;
2  8839								 POPDS	 EBP
3  8840	00001E12  5D						 POP	 EBP
2  8841								 PUSHDS	 EDI
3  8842	00001E13  57						 PUSH	 EDI
2  8843								 PUSHDS	 ESI
3  8844	00001E14  56						 PUSH	 ESI
2  8845								 PUSHDS	 EAX
3  8846	00001E15  50						 PUSH	 EAX
2  8847								 PUSHDS	 EDX
3  8848	00001E16  52						 PUSH	 EDX
2  8849								 POPRS	 ESI
3  8850	00001E17  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  8851	00001E1A  83 C5	04					 ADD	 EBP,CELL_SIZE
2  8852								 POPRS	 EDI
3  8853	00001E1D  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  8854	00001E20  83 C5	04					 ADD	 EBP,CELL_SIZE
2  8855								 $NEXT
3  8856	00001E23  AD						 LODSD				 ; fetch address
3  8857								 $JMP
4  8858	00001E24  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8859	00001E26  FF E3						 JMP	 EBX			 ; execute
2  8860
2  8861
1  8862								 INCLUDE "compare.inc"
2  8863					 ;******************************************************************************
2  8864					 ;
2  8865					 ;  compare.inc
2  8866					 ;  IKForth
2  8867					 ;
2  8868					 ;  Copyright (C) 1999-2003 Illya Kysil
2  8869					 ;
2  8870					 ;******************************************************************************
2  8871					 ;  Compare
2  8872					 ;******************************************************************************
2  8873
2  8874					 ;  6.2.1485 FALSE
2  8875					 ;  Return a false flag.
2  8876					 ;  D: -- false
2  8877								 $DEF	 'FALSE',$FALSE
3  8878	00001E28			 ??02D3:
3  8879		  =MAIN:1E28		 LASTWORD		 =	 ??02D3
3  8880								 IFNB	 <>
3  8881								   DB
3  8882								 ELSE
3  8883	00001E28  00						   DB	 VEF_USUAL
3  8884								 ENDIF
3  8885	00001E29  05						 DB	 ??02D4	- $ - 1
3  8886	00001E2A  46 41	4C 53 45				 DB	 'FALSE'
3  8887	00001E2F			 ??02D4:
3  8888	00001E2F  07						 DB	 ??02D4	- ??02D3
3  8889	00001E30  20001DD0					 DD	 VOC_LINK
3  8890		  =MAIN:20001E28	 VOC_LINK		 =	 ??02D3	+ DESIRED_BASE_EQU
3  8891
3  8892								 IFNB	 <$FALSE>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 157
FKernel.asm



3  8893	00001E34						   LABEL   $FALSE FAR
3  8894								 ENDIF
3  8895								 IFNB	 <>
3  8896								   DD	    + DESIRED_BASE_EQU
3  8897								 ELSE
3  8898	00001E34  20001E38					   DD	   ??02D6 + DESIRED_BASE_EQU
3  8899								 ENDIF
3  8900	00001E38			 ??02D6:
2  8901								 PUSHDS	 F_FALSE
3  8902	00001E38  6A 00						 PUSH	 F_FALSE
2  8903								 $NEXT
3  8904	00001E3A  AD						 LODSD				 ; fetch address
3  8905								 $JMP
4  8906	00001E3B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8907	00001E3D  FF E3						 JMP	 EBX			 ; execute
2  8908
2  8909					 ;  6.2.2298 TRUE
2  8910					 ;  Return a true flag,	a single-cell value with all bits set.
2  8911					 ;  D: -- true
2  8912								 $DEF	 'TRUE',$TRUE
3  8913	00001E3F			 ??02D7:
3  8914		  =MAIN:1E3F		 LASTWORD		 =	 ??02D7
3  8915								 IFNB	 <>
3  8916								   DB
3  8917								 ELSE
3  8918	00001E3F  00						   DB	 VEF_USUAL
3  8919								 ENDIF
3  8920	00001E40  04						 DB	 ??02D8	- $ - 1
3  8921	00001E41  54 52	55 45					 DB	 'TRUE'
3  8922	00001E45			 ??02D8:
3  8923	00001E45  06						 DB	 ??02D8	- ??02D7
3  8924	00001E46  20001E28					 DD	 VOC_LINK
3  8925		  =MAIN:20001E3F	 VOC_LINK		 =	 ??02D7	+ DESIRED_BASE_EQU
3  8926
3  8927								 IFNB	 <$TRUE>
3  8928	00001E4A						   LABEL   $TRUE FAR
3  8929								 ENDIF
3  8930								 IFNB	 <>
3  8931								   DD	    + DESIRED_BASE_EQU
3  8932								 ELSE
3  8933	00001E4A  20001E4E					   DD	   ??02DA + DESIRED_BASE_EQU
3  8934								 ENDIF
3  8935	00001E4E			 ??02DA:
2  8936								 PUSHDS	 F_TRUE
3  8937	00001E4E  6A FF						 PUSH	 F_TRUE
2  8938								 $NEXT
3  8939	00001E50  AD						 LODSD				 ; fetch address
3  8940								 $JMP
4  8941	00001E51  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8942	00001E53  FF E3						 JMP	 EBX			 ; execute
2  8943
2  8944					 ;  <
2  8945								 $DEF	 '<',$LE
3  8946	00001E55			 ??02DB:
3  8947		  =MAIN:1E55		 LASTWORD		 =	 ??02DB
3  8948								 IFNB	 <>
3  8949								   DB
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 158
FKernel.asm



3  8950								 ELSE
3  8951	00001E55  00						   DB	 VEF_USUAL
3  8952								 ENDIF
3  8953	00001E56  01						 DB	 ??02DC	- $ - 1
3  8954	00001E57  3C						 DB	 '<'
3  8955	00001E58			 ??02DC:
3  8956	00001E58  03						 DB	 ??02DC	- ??02DB
3  8957	00001E59  20001E3F					 DD	 VOC_LINK
3  8958		  =MAIN:20001E55	 VOC_LINK		 =	 ??02DB	+ DESIRED_BASE_EQU
3  8959
3  8960								 IFNB	 <$LE>
3  8961	00001E5D						   LABEL   $LE FAR
3  8962								 ENDIF
3  8963								 IFNB	 <>
3  8964								   DD	    + DESIRED_BASE_EQU
3  8965								 ELSE
3  8966	00001E5D  20001E61					   DD	   ??02DE + DESIRED_BASE_EQU
3  8967								 ENDIF
3  8968	00001E61			 ??02DE:
2  8969								 POPDS	 EBX
3  8970	00001E61  5B						 POP	 EBX
2  8971								 POPDS	 EAX
3  8972	00001E62  58						 POP	 EAX
2  8973	00001E63  3B C3						 CMP	 EAX,EBX
2  8974	00001E65  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8975	00001E6A  7C 05						 JL	 SHORT LE_YES
2  8976	00001E6C  B8 00000000					 MOV	 EAX,F_FALSE
2  8977	00001E71			 LE_YES:
2  8978								 PUSHDS	 EAX
3  8979	00001E71  50						 PUSH	 EAX
2  8980								 $NEXT
3  8981	00001E72  AD						 LODSD				 ; fetch address
3  8982								 $JMP
4  8983	00001E73  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8984	00001E75  FF E3						 JMP	 EBX			 ; execute
2  8985
2  8986					 ;  >
2  8987								 $DEF	 '>',$GR
3  8988	00001E77			 ??02DF:
3  8989		  =MAIN:1E77		 LASTWORD		 =	 ??02DF
3  8990								 IFNB	 <>
3  8991								   DB
3  8992								 ELSE
3  8993	00001E77  00						   DB	 VEF_USUAL
3  8994								 ENDIF
3  8995	00001E78  01						 DB	 ??02E0	- $ - 1
3  8996	00001E79  3E						 DB	 '>'
3  8997	00001E7A			 ??02E0:
3  8998	00001E7A  03						 DB	 ??02E0	- ??02DF
3  8999	00001E7B  20001E55					 DD	 VOC_LINK
3  9000		  =MAIN:20001E77	 VOC_LINK		 =	 ??02DF	+ DESIRED_BASE_EQU
3  9001
3  9002								 IFNB	 <$GR>
3  9003	00001E7F						   LABEL   $GR FAR
3  9004								 ENDIF
3  9005								 IFNB	 <>
3  9006								   DD	    + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 159
FKernel.asm



3  9007								 ELSE
3  9008	00001E7F  20001E83					   DD	   ??02E2 + DESIRED_BASE_EQU
3  9009								 ENDIF
3  9010	00001E83			 ??02E2:
2  9011								 POPDS	 EBX
3  9012	00001E83  5B						 POP	 EBX
2  9013								 POPDS	 EAX
3  9014	00001E84  58						 POP	 EAX
2  9015	00001E85  3B C3						 CMP	 EAX,EBX
2  9016	00001E87  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9017	00001E8C  7F 05						 JG	 SHORT GR_YES
2  9018	00001E8E  B8 00000000					 MOV	 EAX,F_FALSE
2  9019	00001E93			 GR_YES:
2  9020								 PUSHDS	 EAX
3  9021	00001E93  50						 PUSH	 EAX
2  9022								 $NEXT
3  9023	00001E94  AD						 LODSD				 ; fetch address
3  9024								 $JMP
4  9025	00001E95  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9026	00001E97  FF E3						 JMP	 EBX			 ; execute
2  9027
2  9028					 ;  6.1.0530 =
2  9029					 ;  D: a b -- flag ( a = b )
2  9030								 $DEF	 '=',$EQ
3  9031	00001E99			 ??02E3:
3  9032		  =MAIN:1E99		 LASTWORD		 =	 ??02E3
3  9033								 IFNB	 <>
3  9034								   DB
3  9035								 ELSE
3  9036	00001E99  00						   DB	 VEF_USUAL
3  9037								 ENDIF
3  9038	00001E9A  01						 DB	 ??02E4	- $ - 1
3  9039	00001E9B  3D						 DB	 '='
3  9040	00001E9C			 ??02E4:
3  9041	00001E9C  03						 DB	 ??02E4	- ??02E3
3  9042	00001E9D  20001E77					 DD	 VOC_LINK
3  9043		  =MAIN:20001E99	 VOC_LINK		 =	 ??02E3	+ DESIRED_BASE_EQU
3  9044
3  9045								 IFNB	 <$EQ>
3  9046	00001EA1						   LABEL   $EQ FAR
3  9047								 ENDIF
3  9048								 IFNB	 <>
3  9049								   DD	    + DESIRED_BASE_EQU
3  9050								 ELSE
3  9051	00001EA1  20001EA5					   DD	   ??02E6 + DESIRED_BASE_EQU
3  9052								 ENDIF
3  9053	00001EA5			 ??02E6:
2  9054								 POPDS	 EBX
3  9055	00001EA5  5B						 POP	 EBX
2  9056								 POPDS	 EAX
3  9057	00001EA6  58						 POP	 EAX
2  9058	00001EA7  3B C3						 CMP	 EAX,EBX
2  9059	00001EA9  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9060	00001EAE  74 05						 JZ	 SHORT EQ_YES
2  9061	00001EB0  B8 00000000					 MOV	 EAX,F_FALSE
2  9062	00001EB5			 EQ_YES:
2  9063								 PUSHDS	 EAX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 160
FKernel.asm



3  9064	00001EB5  50						 PUSH	 EAX
2  9065								 $NEXT
3  9066	00001EB6  AD						 LODSD				 ; fetch address
3  9067								 $JMP
4  9068	00001EB7  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9069	00001EB9  FF E3						 JMP	 EBX			 ; execute
2  9070
2  9071					 ;  6.2.0500 <>
2  9072					 ;  Flag is true if and	only if	x1 is not bit-for-bit the same as x2.
2  9073					 ;  D: x1 x2 --	flag
2  9074								 $DEF	 '<>',$NOEQ
3  9075	00001EBB			 ??02E7:
3  9076		  =MAIN:1EBB		 LASTWORD		 =	 ??02E7
3  9077								 IFNB	 <>
3  9078								   DB
3  9079								 ELSE
3  9080	00001EBB  00						   DB	 VEF_USUAL
3  9081								 ENDIF
3  9082	00001EBC  02						 DB	 ??02E8	- $ - 1
3  9083	00001EBD  3C 3E						 DB	 '<>'
3  9084	00001EBF			 ??02E8:
3  9085	00001EBF  04						 DB	 ??02E8	- ??02E7
3  9086	00001EC0  20001E99					 DD	 VOC_LINK
3  9087		  =MAIN:20001EBB	 VOC_LINK		 =	 ??02E7	+ DESIRED_BASE_EQU
3  9088
3  9089								 IFNB	 <$NOEQ>
3  9090	00001EC4						   LABEL   $NOEQ FAR
3  9091								 ENDIF
3  9092								 IFNB	 <>
3  9093								   DD	    + DESIRED_BASE_EQU
3  9094								 ELSE
3  9095	00001EC4  20001EC8					   DD	   ??02EA + DESIRED_BASE_EQU
3  9096								 ENDIF
3  9097	00001EC8			 ??02EA:
2  9098								 POPDS	 EBX
3  9099	00001EC8  5B						 POP	 EBX
2  9100								 POPDS	 EAX
3  9101	00001EC9  58						 POP	 EAX
2  9102	00001ECA  3B C3						 CMP	 EAX,EBX
2  9103	00001ECC  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9104	00001ED1  75 05						 JNZ	 SHORT NOEQ_YES
2  9105	00001ED3  B8 00000000					 MOV	 EAX,F_FALSE
2  9106	00001ED8			 NOEQ_YES:
2  9107								 PUSHDS	 EAX
3  9108	00001ED8  50						 PUSH	 EAX
2  9109								 $NEXT
3  9110	00001ED9  AD						 LODSD				 ; fetch address
3  9111								 $JMP
4  9112	00001EDA  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9113	00001EDC  FF E3						 JMP	 EBX			 ; execute
2  9114
2  9115					 ;  6.1.0250 0<
2  9116					 ;  D: a -- flag ( a < 0 )
2  9117								 $DEF	 '0<',$ZEROLE
3  9118	00001EDE			 ??02EB:
3  9119		  =MAIN:1EDE		 LASTWORD		 =	 ??02EB
3  9120								 IFNB	 <>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 161
FKernel.asm



3  9121								   DB
3  9122								 ELSE
3  9123	00001EDE  00						   DB	 VEF_USUAL
3  9124								 ENDIF
3  9125	00001EDF  02						 DB	 ??02EC	- $ - 1
3  9126	00001EE0  30 3C						 DB	 '0<'
3  9127	00001EE2			 ??02EC:
3  9128	00001EE2  04						 DB	 ??02EC	- ??02EB
3  9129	00001EE3  20001EBB					 DD	 VOC_LINK
3  9130		  =MAIN:20001EDE	 VOC_LINK		 =	 ??02EB	+ DESIRED_BASE_EQU
3  9131
3  9132								 IFNB	 <$ZEROLE>
3  9133	00001EE7						   LABEL   $ZEROLE FAR
3  9134								 ENDIF
3  9135								 IFNB	 <>
3  9136								   DD	    + DESIRED_BASE_EQU
3  9137								 ELSE
3  9138	00001EE7  20001EEB					   DD	   ??02EE + DESIRED_BASE_EQU
3  9139								 ENDIF
3  9140	00001EEB			 ??02EE:
2  9141								 POPDS	 EAX
3  9142	00001EEB  58						 POP	 EAX
2  9143	00001EEC  0B C0						 OR	 EAX,EAX
2  9144	00001EEE  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9145	00001EF3  7C 05						 JL	 SHORT ZEROLE_YES
2  9146	00001EF5  B8 00000000					 MOV	 EAX,F_FALSE
2  9147	00001EFA			 ZEROLE_YES:
2  9148								 PUSHDS	 EAX
3  9149	00001EFA  50						 PUSH	 EAX
2  9150								 $NEXT
3  9151	00001EFB  AD						 LODSD				 ; fetch address
3  9152								 $JMP
4  9153	00001EFC  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9154	00001EFE  FF E3						 JMP	 EBX			 ; execute
2  9155
2  9156					 ;  6.1.0270 0=
2  9157					 ;  D: a -- flag ( a = 0 )
2  9158								 $DEF	 '0=',$ZEROEQ
3  9159	00001F00			 ??02EF:
3  9160		  =MAIN:1F00		 LASTWORD		 =	 ??02EF
3  9161								 IFNB	 <>
3  9162								   DB
3  9163								 ELSE
3  9164	00001F00  00						   DB	 VEF_USUAL
3  9165								 ENDIF
3  9166	00001F01  02						 DB	 ??02F0	- $ - 1
3  9167	00001F02  30 3D						 DB	 '0='
3  9168	00001F04			 ??02F0:
3  9169	00001F04  04						 DB	 ??02F0	- ??02EF
3  9170	00001F05  20001EDE					 DD	 VOC_LINK
3  9171		  =MAIN:20001F00	 VOC_LINK		 =	 ??02EF	+ DESIRED_BASE_EQU
3  9172
3  9173								 IFNB	 <$ZEROEQ>
3  9174	00001F09						   LABEL   $ZEROEQ FAR
3  9175								 ENDIF
3  9176								 IFNB	 <>
3  9177								   DD	    + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 162
FKernel.asm



3  9178								 ELSE
3  9179	00001F09  20001F0D					   DD	   ??02F2 + DESIRED_BASE_EQU
3  9180								 ENDIF
3  9181	00001F0D			 ??02F2:
2  9182								 POPDS	 EAX
3  9183	00001F0D  58						 POP	 EAX
2  9184	00001F0E  0B C0						 OR	 EAX,EAX
2  9185	00001F10  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9186	00001F15  74 05						 JZ	 SHORT ZEROEQ_YES
2  9187	00001F17  B8 00000000					 MOV	 EAX,F_FALSE
2  9188	00001F1C			 ZEROEQ_YES:
2  9189								 PUSHDS	 EAX
3  9190	00001F1C  50						 PUSH	 EAX
2  9191								 $NEXT
3  9192	00001F1D  AD						 LODSD				 ; fetch address
3  9193								 $JMP
4  9194	00001F1E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9195	00001F20  FF E3						 JMP	 EBX			 ; execute
2  9196
2  9197					 ;  6.2.0260 0<>
2  9198					 ;  Flag is true if and	only if	x is not equal to zero.
2  9199					 ;  D: x -- flag
2  9200								 $DEF	 '0<>',$ZERONOEQ
3  9201	00001F22			 ??02F3:
3  9202		  =MAIN:1F22		 LASTWORD		 =	 ??02F3
3  9203								 IFNB	 <>
3  9204								   DB
3  9205								 ELSE
3  9206	00001F22  00						   DB	 VEF_USUAL
3  9207								 ENDIF
3  9208	00001F23  03						 DB	 ??02F4	- $ - 1
3  9209	00001F24  30 3C	3E					 DB	 '0<>'
3  9210	00001F27			 ??02F4:
3  9211	00001F27  05						 DB	 ??02F4	- ??02F3
3  9212	00001F28  20001F00					 DD	 VOC_LINK
3  9213		  =MAIN:20001F22	 VOC_LINK		 =	 ??02F3	+ DESIRED_BASE_EQU
3  9214
3  9215								 IFNB	 <$ZERONOEQ>
3  9216	00001F2C						   LABEL   $ZERONOEQ FAR
3  9217								 ENDIF
3  9218								 IFNB	 <>
3  9219								   DD	    + DESIRED_BASE_EQU
3  9220								 ELSE
3  9221	00001F2C  20001F30					   DD	   ??02F6 + DESIRED_BASE_EQU
3  9222								 ENDIF
3  9223	00001F30			 ??02F6:
2  9224								 POPDS	 EAX
3  9225	00001F30  58						 POP	 EAX
2  9226	00001F31  0B C0						 OR	 EAX,EAX
2  9227	00001F33  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9228	00001F38  75 05						 JNZ	 SHORT ZERONOEQ_YES
2  9229	00001F3A  B8 00000000					 MOV	 EAX,F_FALSE
2  9230	00001F3F			 ZERONOEQ_YES:
2  9231								 PUSHDS	 EAX
3  9232	00001F3F  50						 PUSH	 EAX
2  9233								 $NEXT
3  9234	00001F40  AD						 LODSD				 ; fetch address
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 163
FKernel.asm



3  9235								 $JMP
4  9236	00001F41  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9237	00001F43  FF E3						 JMP	 EBX			 ; execute
2  9238
2  9239					 ;  6.2.0280 0>
2  9240					 ;  Flag is true if and	only if	n is greater than zero.
2  9241					 ;  D: n -- flag
2  9242								 $DEF	 '0>',$ZEROGR
3  9243	00001F45			 ??02F7:
3  9244		  =MAIN:1F45		 LASTWORD		 =	 ??02F7
3  9245								 IFNB	 <>
3  9246								   DB
3  9247								 ELSE
3  9248	00001F45  00						   DB	 VEF_USUAL
3  9249								 ENDIF
3  9250	00001F46  02						 DB	 ??02F8	- $ - 1
3  9251	00001F47  30 3E						 DB	 '0>'
3  9252	00001F49			 ??02F8:
3  9253	00001F49  04						 DB	 ??02F8	- ??02F7
3  9254	00001F4A  20001F22					 DD	 VOC_LINK
3  9255		  =MAIN:20001F45	 VOC_LINK		 =	 ??02F7	+ DESIRED_BASE_EQU
3  9256
3  9257								 IFNB	 <$ZEROGR>
3  9258	00001F4E						   LABEL   $ZEROGR FAR
3  9259								 ENDIF
3  9260								 IFNB	 <>
3  9261								   DD	    + DESIRED_BASE_EQU
3  9262								 ELSE
3  9263	00001F4E  20001F52					   DD	   ??02FA + DESIRED_BASE_EQU
3  9264								 ENDIF
3  9265	00001F52			 ??02FA:
2  9266								 POPDS	 EAX
3  9267	00001F52  58						 POP	 EAX
2  9268	00001F53  0B C0						 OR	 EAX,EAX
2  9269	00001F55  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9270	00001F5A  7F 05						 JG	 SHORT ZEROGR_YES
2  9271	00001F5C  B8 00000000					 MOV	 EAX,F_FALSE
2  9272	00001F61			 ZEROGR_YES:
2  9273								 PUSHDS	 EAX
3  9274	00001F61  50						 PUSH	 EAX
2  9275								 $NEXT
3  9276	00001F62  AD						 LODSD				 ; fetch address
3  9277								 $JMP
4  9278	00001F63  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9279	00001F65  FF E3						 JMP	 EBX			 ; execute
2  9280
2  9281					 ;******************************************************************************
2  9282					 ;  Unsigned compare
2  9283					 ;******************************************************************************
2  9284
2  9285					 ;  6.1.2340 U<
2  9286					 ;  Flag is true if and	only if	u1 is less than	u2.
2  9287					 ;  D: u1 u2 --	flag ( u1 < u2 )
2  9288								 $DEF	 'U<',$ULE
3  9289	00001F67			 ??02FB:
3  9290		  =MAIN:1F67		 LASTWORD		 =	 ??02FB
3  9291								 IFNB	 <>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 164
FKernel.asm



3  9292								   DB
3  9293								 ELSE
3  9294	00001F67  00						   DB	 VEF_USUAL
3  9295								 ENDIF
3  9296	00001F68  02						 DB	 ??02FC	- $ - 1
3  9297	00001F69  55 3C						 DB	 'U<'
3  9298	00001F6B			 ??02FC:
3  9299	00001F6B  04						 DB	 ??02FC	- ??02FB
3  9300	00001F6C  20001F45					 DD	 VOC_LINK
3  9301		  =MAIN:20001F67	 VOC_LINK		 =	 ??02FB	+ DESIRED_BASE_EQU
3  9302
3  9303								 IFNB	 <$ULE>
3  9304	00001F70						   LABEL   $ULE	FAR
3  9305								 ENDIF
3  9306								 IFNB	 <>
3  9307								   DD	    + DESIRED_BASE_EQU
3  9308								 ELSE
3  9309	00001F70  20001F74					   DD	   ??02FE + DESIRED_BASE_EQU
3  9310								 ENDIF
3  9311	00001F74			 ??02FE:
2  9312								 POPDS	 EBX
3  9313	00001F74  5B						 POP	 EBX
2  9314								 POPDS	 EAX
3  9315	00001F75  58						 POP	 EAX
2  9316	00001F76  3B C3						 CMP	 EAX,EBX
2  9317	00001F78  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9318	00001F7D  72 05						 JB	 SHORT ULE_YES		 ; jump	if EAX < EBX
2  9319	00001F7F  B8 00000000					 MOV	 EAX,F_FALSE
2  9320	00001F84			 ULE_YES:
2  9321								 PUSHDS	 EAX
3  9322	00001F84  50						 PUSH	 EAX
2  9323								 $NEXT
3  9324	00001F85  AD						 LODSD				 ; fetch address
3  9325								 $JMP
4  9326	00001F86  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9327	00001F88  FF E3						 JMP	 EBX			 ; execute
2  9328
2  9329					 ;  6.2.2350 U>
2  9330					 ;  D: u1 u2 --	flag
2  9331					 ;  flag is true if and	only if	u1 is greater than u2.
2  9332								 $DEF	 'U>',$UGR
3  9333	00001F8A			 ??02FF:
3  9334		  =MAIN:1F8A		 LASTWORD		 =	 ??02FF
3  9335								 IFNB	 <>
3  9336								   DB
3  9337								 ELSE
3  9338	00001F8A  00						   DB	 VEF_USUAL
3  9339								 ENDIF
3  9340	00001F8B  02						 DB	 ??0300	- $ - 1
3  9341	00001F8C  55 3E						 DB	 'U>'
3  9342	00001F8E			 ??0300:
3  9343	00001F8E  04						 DB	 ??0300	- ??02FF
3  9344	00001F8F  20001F67					 DD	 VOC_LINK
3  9345		  =MAIN:20001F8A	 VOC_LINK		 =	 ??02FF	+ DESIRED_BASE_EQU
3  9346
3  9347								 IFNB	 <$UGR>
3  9348	00001F93						   LABEL   $UGR	FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 165
FKernel.asm



3  9349								 ENDIF
3  9350								 IFNB	 <>
3  9351								   DD	    + DESIRED_BASE_EQU
3  9352								 ELSE
3  9353	00001F93  20001F97					   DD	   ??0302 + DESIRED_BASE_EQU
3  9354								 ENDIF
3  9355	00001F97			 ??0302:
2  9356								 POPDS	 EBX
3  9357	00001F97  5B						 POP	 EBX
2  9358								 POPDS	 EAX
3  9359	00001F98  58						 POP	 EAX
2  9360	00001F99  3B C3						 CMP	 EAX,EBX
2  9361	00001F9B  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  9362	00001FA0  77 05						 JA	 SHORT UGR_YES		 ; jump	if EAX > EBX
2  9363	00001FA2  B8 00000000					 MOV	 EAX,F_FALSE
2  9364	00001FA7			 UGR_YES:
2  9365								 PUSHDS	 EAX
3  9366	00001FA7  50						 PUSH	 EAX
2  9367								 $NEXT
3  9368	00001FA8  AD						 LODSD				 ; fetch address
3  9369								 $JMP
4  9370	00001FA9  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9371	00001FAB  FF E3						 JMP	 EBX			 ; execute
2  9372
1  9373								 INCLUDE "memory.inc"
2  9374					 ;******************************************************************************
2  9375					 ;
2  9376					 ;  memory.inc
2  9377					 ;  IKForth
2  9378					 ;
2  9379					 ;  Copyright (C) 1999-2003 Illya Kysil
2  9380					 ;
2  9381					 ;******************************************************************************
2  9382					 ;  Memory
2  9383					 ;******************************************************************************
2  9384
2  9385					 ;  6.1.0010 !
2  9386					 ;  Store x to the specified memory address
2  9387					 ;  D: x addr --
2  9388								 $DEF	 '!',$STORE
3  9389	00001FAD			 ??0303:
3  9390		  =MAIN:1FAD		 LASTWORD		 =	 ??0303
3  9391								 IFNB	 <>
3  9392								   DB
3  9393								 ELSE
3  9394	00001FAD  00						   DB	 VEF_USUAL
3  9395								 ENDIF
3  9396	00001FAE  01						 DB	 ??0304	- $ - 1
3  9397	00001FAF  21						 DB	 '!'
3  9398	00001FB0			 ??0304:
3  9399	00001FB0  03						 DB	 ??0304	- ??0303
3  9400	00001FB1  20001F8A					 DD	 VOC_LINK
3  9401		  =MAIN:20001FAD	 VOC_LINK		 =	 ??0303	+ DESIRED_BASE_EQU
3  9402
3  9403								 IFNB	 <$STORE>
3  9404	00001FB5						   LABEL   $STORE FAR
3  9405								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 166
FKernel.asm



3  9406								 IFNB	 <>
3  9407								   DD	    + DESIRED_BASE_EQU
3  9408								 ELSE
3  9409	00001FB5  20001FB9					   DD	   ??0306 + DESIRED_BASE_EQU
3  9410								 ENDIF
3  9411	00001FB9			 ??0306:
2  9412								 POPDS	 EBX
3  9413	00001FB9  5B						 POP	 EBX
2  9414								 POPDS	 EAX
3  9415	00001FBA  58						 POP	 EAX
2  9416	00001FBB  89 03						 MOV	 [DWORD	PTR EBX],EAX
2  9417								 $NEXT
3  9418	00001FBD  AD						 LODSD				 ; fetch address
3  9419								 $JMP
4  9420	00001FBE  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9421	00001FC0  FF E3						 JMP	 EBX			 ; execute
2  9422
2  9423					 ;  6.1.0650 @
2  9424					 ;  Fetch a value from the specified address
2  9425					 ;  D: addr -- x
2  9426								 $DEF	 '@',$FETCH
3  9427	00001FC2			 ??0307:
3  9428		  =MAIN:1FC2		 LASTWORD		 =	 ??0307
3  9429								 IFNB	 <>
3  9430								   DB
3  9431								 ELSE
3  9432	00001FC2  00						   DB	 VEF_USUAL
3  9433								 ENDIF
3  9434	00001FC3  01						 DB	 ??0308	- $ - 1
3  9435	00001FC4  40						 DB	 '@'
3  9436	00001FC5			 ??0308:
3  9437	00001FC5  03						 DB	 ??0308	- ??0307
3  9438	00001FC6  20001FAD					 DD	 VOC_LINK
3  9439		  =MAIN:20001FC2	 VOC_LINK		 =	 ??0307	+ DESIRED_BASE_EQU
3  9440
3  9441								 IFNB	 <$FETCH>
3  9442	00001FCA						   LABEL   $FETCH FAR
3  9443								 ENDIF
3  9444								 IFNB	 <>
3  9445								   DD	    + DESIRED_BASE_EQU
3  9446								 ELSE
3  9447	00001FCA  20001FCE					   DD	   ??030A + DESIRED_BASE_EQU
3  9448								 ENDIF
3  9449	00001FCE			 ??030A:
2  9450								 POPDS	 EBX
3  9451	00001FCE  5B						 POP	 EBX
2  9452								 PUSHDS	 <[DWORD PTR EBX]>
3  9453	00001FCF  FF 33						 PUSH	 [DWORD	PTR EBX]
2  9454								 $NEXT
3  9455	00001FD1  AD						 LODSD				 ; fetch address
3  9456								 $JMP
4  9457	00001FD2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9458	00001FD4  FF E3						 JMP	 EBX			 ; execute
2  9459
2  9460					 ;  6.1.0310 2!
2  9461					 ;  Store two top cells	from the stack to the memory
2  9462					 ;  D: x1 x2 addr --
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 167
FKernel.asm



2  9463								 $DEF	 '2!',$2STORE
3  9464	00001FD6			 ??030B:
3  9465		  =MAIN:1FD6		 LASTWORD		 =	 ??030B
3  9466								 IFNB	 <>
3  9467								   DB
3  9468								 ELSE
3  9469	00001FD6  00						   DB	 VEF_USUAL
3  9470								 ENDIF
3  9471	00001FD7  02						 DB	 ??030C	- $ - 1
3  9472	00001FD8  32 21						 DB	 '2!'
3  9473	00001FDA			 ??030C:
3  9474	00001FDA  04						 DB	 ??030C	- ??030B
3  9475	00001FDB  20001FC2					 DD	 VOC_LINK
3  9476		  =MAIN:20001FD6	 VOC_LINK		 =	 ??030B	+ DESIRED_BASE_EQU
3  9477
3  9478								 IFNB	 <$2STORE>
3  9479	00001FDF						   LABEL   $2STORE FAR
3  9480								 ENDIF
3  9481								 IFNB	 <>
3  9482								   DD	    + DESIRED_BASE_EQU
3  9483								 ELSE
3  9484	00001FDF  20001FE3					   DD	   ??030E + DESIRED_BASE_EQU
3  9485								 ENDIF
3  9486	00001FE3			 ??030E:
2  9487								 POPDS	 EBX
3  9488	00001FE3  5B						 POP	 EBX
2  9489								 POPDS	 <[DWORD PTR EBX]>
3  9490	00001FE4  8F 03						 POP	 [DWORD	PTR EBX]
2  9491								 POPDS	 <[DWORD PTR EBX + CELL_SIZE]>
3  9492	00001FE6  8F 43	04					 POP	 [DWORD	PTR EBX	+ CELL_SIZE]
2  9493								 $NEXT
3  9494	00001FE9  AD						 LODSD				 ; fetch address
3  9495								 $JMP
4  9496	00001FEA  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9497	00001FEC  FF E3						 JMP	 EBX			 ; execute
2  9498
2  9499					 ;  6.1.0350 2@
2  9500					 ;  Fetch two cells from the memory and	put them on stack
2  9501					 ;  D: addr -- x1 x2
2  9502								 $DEF	 '2@',$2FETCH
3  9503	00001FEE			 ??030F:
3  9504		  =MAIN:1FEE		 LASTWORD		 =	 ??030F
3  9505								 IFNB	 <>
3  9506								   DB
3  9507								 ELSE
3  9508	00001FEE  00						   DB	 VEF_USUAL
3  9509								 ENDIF
3  9510	00001FEF  02						 DB	 ??0310	- $ - 1
3  9511	00001FF0  32 40						 DB	 '2@'
3  9512	00001FF2			 ??0310:
3  9513	00001FF2  04						 DB	 ??0310	- ??030F
3  9514	00001FF3  20001FD6					 DD	 VOC_LINK
3  9515		  =MAIN:20001FEE	 VOC_LINK		 =	 ??030F	+ DESIRED_BASE_EQU
3  9516
3  9517								 IFNB	 <$2FETCH>
3  9518	00001FF7						   LABEL   $2FETCH FAR
3  9519								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 168
FKernel.asm



3  9520								 IFNB	 <>
3  9521								   DD	    + DESIRED_BASE_EQU
3  9522								 ELSE
3  9523	00001FF7  20001FFB					   DD	   ??0312 + DESIRED_BASE_EQU
3  9524								 ENDIF
3  9525	00001FFB			 ??0312:
2  9526								 POPDS	 EBX
3  9527	00001FFB  5B						 POP	 EBX
2  9528								 PUSHDS	 <[DWORD PTR EBX + CELL_SIZE]>
3  9529	00001FFC  FF 73	04					 PUSH	 [DWORD	PTR EBX	+ CELL_SIZE]
2  9530								 PUSHDS	 <[DWORD PTR EBX]>
3  9531	00001FFF  FF 33						 PUSH	 [DWORD	PTR EBX]
2  9532								 $NEXT
3  9533	00002001  AD						 LODSD				 ; fetch address
3  9534								 $JMP
4  9535	00002002  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9536	00002004  FF E3						 JMP	 EBX			 ; execute
2  9537
2  9538					 ;  6.1.0850 C!
2  9539					 ;  Store char value
2  9540					 ;  D: char addr --
2  9541								 $DEF	 'C!',$CSTORE
3  9542	00002006			 ??0313:
3  9543		  =MAIN:2006		 LASTWORD		 =	 ??0313
3  9544								 IFNB	 <>
3  9545								   DB
3  9546								 ELSE
3  9547	00002006  00						   DB	 VEF_USUAL
3  9548								 ENDIF
3  9549	00002007  02						 DB	 ??0314	- $ - 1
3  9550	00002008  43 21						 DB	 'C!'
3  9551	0000200A			 ??0314:
3  9552	0000200A  04						 DB	 ??0314	- ??0313
3  9553	0000200B  20001FEE					 DD	 VOC_LINK
3  9554		  =MAIN:20002006	 VOC_LINK		 =	 ??0313	+ DESIRED_BASE_EQU
3  9555
3  9556								 IFNB	 <$CSTORE>
3  9557	0000200F						   LABEL   $CSTORE FAR
3  9558								 ENDIF
3  9559								 IFNB	 <>
3  9560								   DD	    + DESIRED_BASE_EQU
3  9561								 ELSE
3  9562	0000200F  20002013					   DD	   ??0316 + DESIRED_BASE_EQU
3  9563								 ENDIF
3  9564	00002013			 ??0316:
2  9565								 POPDS	 EBX
3  9566	00002013  5B						 POP	 EBX
2  9567								 POPDS	 EAX
3  9568	00002014  58						 POP	 EAX
2  9569	00002015  88 03						 MOV	 [BYTE PTR EBX],AL
2  9570								 $NEXT
3  9571	00002017  AD						 LODSD				 ; fetch address
3  9572								 $JMP
4  9573	00002018  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9574	0000201A  FF E3						 JMP	 EBX			 ; execute
2  9575
2  9576					 ;  6.1.0870 C@
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 169
FKernel.asm



2  9577					 ;  Fetch char value
2  9578					 ;  D: addr -- char
2  9579								 $DEF	 'C@',$CFETCH
3  9580	0000201C			 ??0317:
3  9581		  =MAIN:201C		 LASTWORD		 =	 ??0317
3  9582								 IFNB	 <>
3  9583								   DB
3  9584								 ELSE
3  9585	0000201C  00						   DB	 VEF_USUAL
3  9586								 ENDIF
3  9587	0000201D  02						 DB	 ??0318	- $ - 1
3  9588	0000201E  43 40						 DB	 'C@'
3  9589	00002020			 ??0318:
3  9590	00002020  04						 DB	 ??0318	- ??0317
3  9591	00002021  20002006					 DD	 VOC_LINK
3  9592		  =MAIN:2000201C	 VOC_LINK		 =	 ??0317	+ DESIRED_BASE_EQU
3  9593
3  9594								 IFNB	 <$CFETCH>
3  9595	00002025						   LABEL   $CFETCH FAR
3  9596								 ENDIF
3  9597								 IFNB	 <>
3  9598								   DD	    + DESIRED_BASE_EQU
3  9599								 ELSE
3  9600	00002025  20002029					   DD	   ??031A + DESIRED_BASE_EQU
3  9601								 ENDIF
3  9602	00002029			 ??031A:
2  9603								 POPDS	 EBX
3  9604	00002029  5B						 POP	 EBX
2  9605	0000202A  33 C0						 XOR	 EAX,EAX
2  9606	0000202C  8A 03						 MOV	 AL,[BYTE PTR EBX]
2  9607								 PUSHDS	 EAX
3  9608	0000202E  50						 PUSH	 EAX
2  9609								 $NEXT
3  9610	0000202F  AD						 LODSD				 ; fetch address
3  9611								 $JMP
4  9612	00002030  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9613	00002032  FF E3						 JMP	 EBX			 ; execute
2  9614
2  9615					 ;  6.1.0880 CELL+
2  9616					 ;  D: addr - addr+cellsize
2  9617								 $DEF	 'CELL+',$CELLADD
3  9618	00002034			 ??031B:
3  9619		  =MAIN:2034		 LASTWORD		 =	 ??031B
3  9620								 IFNB	 <>
3  9621								   DB
3  9622								 ELSE
3  9623	00002034  00						   DB	 VEF_USUAL
3  9624								 ENDIF
3  9625	00002035  05						 DB	 ??031C	- $ - 1
3  9626	00002036  43 45	4C 4C 2B				 DB	 'CELL+'
3  9627	0000203B			 ??031C:
3  9628	0000203B  07						 DB	 ??031C	- ??031B
3  9629	0000203C  2000201C					 DD	 VOC_LINK
3  9630		  =MAIN:20002034	 VOC_LINK		 =	 ??031B	+ DESIRED_BASE_EQU
3  9631
3  9632								 IFNB	 <$CELLADD>
3  9633	00002040						   LABEL   $CELLADD FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 170
FKernel.asm



3  9634								 ENDIF
3  9635								 IFNB	 <>
3  9636								   DD	    + DESIRED_BASE_EQU
3  9637								 ELSE
3  9638	00002040  20002044					   DD	   ??031E + DESIRED_BASE_EQU
3  9639								 ENDIF
3  9640	00002044			 ??031E:
2  9641								 POPDS	 EAX
3  9642	00002044  58						 POP	 EAX
2  9643	00002045  83 C0	04					 ADD	 EAX,CELL_SIZE
2  9644								 PUSHDS	 EAX
3  9645	00002048  50						 PUSH	 EAX
2  9646								 $NEXT
3  9647	00002049  AD						 LODSD				 ; fetch address
3  9648								 $JMP
4  9649	0000204A  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9650	0000204C  FF E3						 JMP	 EBX			 ; execute
2  9651
2  9652					 ;  6.1.0890 CELLS
2  9653					 ;  D: a - a*cellsize
2  9654								 $DEF	 'CELLS',$CELLS
3  9655	0000204E			 ??031F:
3  9656		  =MAIN:204E		 LASTWORD		 =	 ??031F
3  9657								 IFNB	 <>
3  9658								   DB
3  9659								 ELSE
3  9660	0000204E  00						   DB	 VEF_USUAL
3  9661								 ENDIF
3  9662	0000204F  05						 DB	 ??0320	- $ - 1
3  9663	00002050  43 45	4C 4C 53				 DB	 'CELLS'
3  9664	00002055			 ??0320:
3  9665	00002055  07						 DB	 ??0320	- ??031F
3  9666	00002056  20002034					 DD	 VOC_LINK
3  9667		  =MAIN:2000204E	 VOC_LINK		 =	 ??031F	+ DESIRED_BASE_EQU
3  9668
3  9669								 IFNB	 <$CELLS>
3  9670	0000205A						   LABEL   $CELLS FAR
3  9671								 ENDIF
3  9672								 IFNB	 <>
3  9673								   DD	    + DESIRED_BASE_EQU
3  9674								 ELSE
3  9675	0000205A  2000205E					   DD	   ??0322 + DESIRED_BASE_EQU
3  9676								 ENDIF
3  9677	0000205E			 ??0322:
2  9678								 POPDS	 EAX
3  9679	0000205E  58						 POP	 EAX
2  9680	0000205F  03 C0						 ADD	 EAX,EAX
2  9681	00002061  03 C0						 ADD	 EAX,EAX
2  9682								 PUSHDS	 EAX
3  9683	00002063  50						 PUSH	 EAX
2  9684								 $NEXT
3  9685	00002064  AD						 LODSD				 ; fetch address
3  9686								 $JMP
4  9687	00002065  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9688	00002067  FF E3						 JMP	 EBX			 ; execute
2  9689
2  9690					 ;  6.1.0897 CHAR+
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 171
FKernel.asm



2  9691					 ;  D: addr - addr+charsize
2  9692								 $DEF	 'CHAR+',$CHARADD
3  9693	00002069			 ??0323:
3  9694		  =MAIN:2069		 LASTWORD		 =	 ??0323
3  9695								 IFNB	 <>
3  9696								   DB
3  9697								 ELSE
3  9698	00002069  00						   DB	 VEF_USUAL
3  9699								 ENDIF
3  9700	0000206A  05						 DB	 ??0324	- $ - 1
3  9701	0000206B  43 48	41 52 2B				 DB	 'CHAR+'
3  9702	00002070			 ??0324:
3  9703	00002070  07						 DB	 ??0324	- ??0323
3  9704	00002071  2000204E					 DD	 VOC_LINK
3  9705		  =MAIN:20002069	 VOC_LINK		 =	 ??0323	+ DESIRED_BASE_EQU
3  9706
3  9707								 IFNB	 <$CHARADD>
3  9708	00002075						   LABEL   $CHARADD FAR
3  9709								 ENDIF
3  9710								 IFNB	 <>
3  9711								   DD	    + DESIRED_BASE_EQU
3  9712								 ELSE
3  9713	00002075  20002079					   DD	   ??0326 + DESIRED_BASE_EQU
3  9714								 ENDIF
3  9715	00002079			 ??0326:
2  9716								 POPDS	 EAX
3  9717	00002079  58						 POP	 EAX
2  9718	0000207A  40						 INC	 EAX
2  9719								 PUSHDS	 EAX
3  9720	0000207B  50						 PUSH	 EAX
2  9721								 $NEXT
3  9722	0000207C  AD						 LODSD				 ; fetch address
3  9723								 $JMP
4  9724	0000207D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9725	0000207F  FF E3						 JMP	 EBX			 ; execute
2  9726
2  9727
1  9728								 INCLUDE "search.inc"
2  9729					 ;******************************************************************************
2  9730					 ;
2  9731					 ;  search.inc
2  9732					 ;  IKForth
2  9733					 ;
2  9734					 ;  Copyright (C) 1999-2003 Illya Kysil
2  9735					 ;
2  9736					 ;******************************************************************************
2  9737					 ;  Words search
2  9738					 ;******************************************************************************
2  9739
2  9740					 ;  16.6.1.1595	FORTH-WORDLIST
2  9741								 $VAR	 'FORTH-WORDLIST',$FORTH_WORDLIST
3  9742								 $DEF	 'FORTH-WORDLIST',$FORTH_WORDLIST,$DOVAR
4  9743	00002081			 ??0327:
4  9744		  =MAIN:2081		 LASTWORD		 =	 ??0327
4  9745								 IFNB	 <>
4  9746								   DB
4  9747								 ELSE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 172
FKernel.asm



4  9748	00002081  00						   DB	 VEF_USUAL
4  9749								 ENDIF
4  9750	00002082  0E						 DB	 ??0328	- $ - 1
4  9751	00002083  46 4F	52 54 48 2D 57+				 DB	 'FORTH-WORDLIST'
   9752		  4F 52	44 4C 49 53 54
4  9753	00002091			 ??0328:
4  9754	00002091  10						 DB	 ??0328	- ??0327
4  9755	00002092  20002069					 DD	 VOC_LINK
4  9756		  =MAIN:20002081	 VOC_LINK		 =	 ??0327	+ DESIRED_BASE_EQU
4  9757
4  9758								 IFNB	 <$FORTH_WORDLIST>
4  9759	00002096						   LABEL   $FORTH_WORDLIST FAR
4  9760								 ENDIF
4  9761								 IFNB	 <$DOVAR>
4  9762	00002096  200000AD					   DD	   $DOVAR + DESIRED_BASE_EQU
4  9763								 ELSE
4  9764								   DD	   ??032A + DESIRED_BASE_EQU
4  9765								 ENDIF
4  9766	0000209A			 ??032A:
2  9767	0000209A			 FORTH_WORDLIST_EQU:
2  9768	0000209A  20002C5C					 DD	 LATEST_WORD		 ; last	word in	a list
2  9769								 CC	 0			 ; wordlist name
3  9770	0000209E  00000000					 DD	 0
2  9771								 CC	 0			 ; wordlist link
3  9772	000020A2  00000000					 DD	 0
2  9773
2  9774					 ;  16.6.1.2192	SEARCH-WORDLIST
2  9775					 ;  D: ( c-addr	u wid -- 0 | xt	1 | xt -1 )
2  9776								 $DEF	 'SEARCH-WORDLIST',$SEARCH_WORDLIST
3  9777	000020A6			 ??032B:
3  9778		  =MAIN:20A6		 LASTWORD		 =	 ??032B
3  9779								 IFNB	 <>
3  9780								   DB
3  9781								 ELSE
3  9782	000020A6  00						   DB	 VEF_USUAL
3  9783								 ENDIF
3  9784	000020A7  0F						 DB	 ??032C	- $ - 1
3  9785	000020A8  53 45	41 52 43 48 2D+				 DB	 'SEARCH-WORDLIST'
   9786		  57 4F	52 44 4C 49 53+
   9787		  54
3  9788	000020B7			 ??032C:
3  9789	000020B7  11						 DB	 ??032C	- ??032B
3  9790	000020B8  20002081					 DD	 VOC_LINK
3  9791		  =MAIN:200020A6	 VOC_LINK		 =	 ??032B	+ DESIRED_BASE_EQU
3  9792
3  9793								 IFNB	 <$SEARCH_WORDLIST>
3  9794	000020BC						   LABEL   $SEARCH_WORDLIST FAR
3  9795								 ENDIF
3  9796								 IFNB	 <>
3  9797								   DD	    + DESIRED_BASE_EQU
3  9798								 ELSE
3  9799	000020BC  200020C0					   DD	   ??032E + DESIRED_BASE_EQU
3  9800								 ENDIF
3  9801	000020C0			 ??032E:
2  9802								 PUSHRS	 EDI
3  9803	000020C0  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9804	000020C3  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 173
FKernel.asm



2  9805								 PUSHRS	 ESI
3  9806	000020C6  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9807	000020C9  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  9808								 POPDS	 EAX			 ; wid
3  9809	000020CC  58						 POP	 EAX
2  9810	000020CD  8B 30						 MOV	 ESI,[DWORD PTR	EAX]	 ; get LATEST word link
2  9811	000020CF  8B 5F	28					 MOV	 EBX,[DWORD PTR	EDI + CASE_SENSITIVE_VAR]
2  9812								 POPDS	 ECX			 ; u
3  9813	000020D2  59						 POP	 ECX
2  9814								 POPDS	 EDI			 ; c-addr
3  9815	000020D3  5F						 POP	 EDI
2  9816	000020D4			 SW_LOOP:
2  9817	000020D4  0B F6						 OR	 ESI,ESI
2  9818	000020D6  74 70						 JZ	 SHORT SW_NOT_FOUND
2  9819	000020D8  66| 8B 06					 MOV	 AX,[WORD PTR ESI]
2  9820	000020DB  3A E1						 CMP	 AH,CL
2  9821	000020DD  75 33						 JNZ	 SHORT SW_NEXT
2  9822	000020DF  A8 02						 TEST	 AL,VEF_HIDDEN
2  9823	000020E1  75 2F						 JNZ	 SHORT SW_NEXT
2  9824								 PUSHDS	 ESI
3  9825	000020E3  56						 PUSH	 ESI
2  9826								 PUSHDS	 EDI
3  9827	000020E4  57						 PUSH	 EDI
2  9828								 PUSHDS	 ECX
3  9829	000020E5  51						 PUSH	 ECX
2  9830	000020E6  83 C6	02					 ADD	 ESI,2
2  9831	000020E9			 CMP_LOOP:
2  9832	000020E9  8A 06						 MOV	 AL,[BYTE PTR ESI]
2  9833	000020EB  8A 27						 MOV	 AH,[BYTE PTR EDI]
2  9834	000020ED  0B DB						 OR	 EBX,EBX
2  9835	000020EF  75 0C						 JNZ	 SHORT CMP_CONT
2  9836	000020F1  E8 00000065					 CALL	 UPCASE
2  9837	000020F6  86 C4						 XCHG	 AL,AH
2  9838	000020F8  E8 0000005E					 CALL	 UPCASE
2  9839	000020FD			 CMP_CONT:
2  9840	000020FD  3A C4						 CMP	 AL,AH
2  9841	000020FF  75 0E						 JNZ	 SHORT CMP_EXIT
2  9842	00002101  46						 INC	 ESI
2  9843	00002102  47						 INC	 EDI
2  9844	00002103  49						 DEC	 ECX
2  9845	00002104  0B C9						 OR	 ECX,ECX
2  9846	00002106  75 E1						 JNZ	 SHORT CMP_LOOP
2  9847	00002108  3A C4						 CMP	 AL,AH
2  9848								 POPDS	 ECX
3  9849	0000210A  59						 POP	 ECX
2  9850								 POPDS	 EDI
3  9851	0000210B  5F						 POP	 EDI
2  9852								 POPDS	 ESI
3  9853	0000210C  5E						 POP	 ESI
2  9854	0000210D  74 10						 JZ	 SHORT SW_FOUND
2  9855	0000210F			 CMP_EXIT:
2  9856								 POPDS	 ECX
3  9857	0000210F  59						 POP	 ECX
2  9858								 POPDS	 EDI
3  9859	00002110  5F						 POP	 EDI
2  9860								 POPDS	 ESI
3  9861	00002111  5E						 POP	 ESI
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 174
FKernel.asm



2  9862	00002112			 SW_NEXT:
2  9863	00002112  0F B6	46 01					 MOVZX	 EAX,[BYTE PTR ESI + 1]
2  9864	00002116  03 F0						 ADD	 ESI,EAX
2  9865	00002118  83 C6	03					 ADD	 ESI,3
2  9866	0000211B  8B 36						 MOV	 ESI,[DWORD PTR	ESI]
2  9867	0000211D  EB B5						 JMP	 SHORT SW_LOOP
2  9868
2  9869	0000211F			 SW_FOUND:
2  9870	0000211F  8A 06						 MOV	 AL,[BYTE PTR ESI]
2  9871	00002121  A8 01						 TEST	 AL,VEF_IMMEDIATE
2  9872	00002123  B8 00000001					 MOV	 EAX,1
2  9873	00002128  75 02						 JNZ	 SHORT SW_FOUND_IMMEDIATE
2  9874	0000212A  F7 D8						 NEG	 EAX
2  9875	0000212C			 SW_FOUND_IMMEDIATE:
2  9876	0000212C  0F B6	5E 01					 MOVZX	 EBX,[BYTE PTR ESI + 1]
2  9877	00002130  03 F3						 ADD	 ESI,EBX
2  9878	00002132  83 C6	07					 ADD	 ESI,7
2  9879								 PUSHDS	 ESI
3  9880	00002135  56						 PUSH	 ESI
2  9881								 PUSHDS	 EAX
3  9882	00002136  50						 PUSH	 EAX
2  9883								 POPRS	 ESI
3  9884	00002137  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  9885	0000213A  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9886								 POPRS	 EDI
3  9887	0000213D  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  9888	00002140  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9889								 $NEXT
3  9890	00002143  AD						 LODSD				 ; fetch address
3  9891								 $JMP
4  9892	00002144  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9893	00002146  FF E3						 JMP	 EBX			 ; execute
2  9894
2  9895	00002148			 SW_NOT_FOUND:
2  9896								 PUSHDS	 0
3  9897	00002148  6A 00						 PUSH	 0
2  9898								 POPRS	 ESI
3  9899	0000214A  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  9900	0000214D  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9901								 POPRS	 EDI
3  9902	00002150  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  9903	00002153  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9904								 $NEXT
3  9905	00002156  AD						 LODSD				 ; fetch address
3  9906								 $JMP
4  9907	00002157  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9908	00002159  FF E3						 JMP	 EBX			 ; execute
2  9909
2  9910	0000215B						 PROC	 UPCASE
2  9911	0000215B  3C 61						 CMP	 AL,'a'
2  9912	0000215D  72 06						 JB	 SHORT @@UC		 ; jump	if AH <	'a'
2  9913	0000215F  3C 7A						 CMP	 AL,'z'
2  9914	00002161  77 02						 JA	 SHORT @@UC		 ; jump	if AH >	'z'
2  9915	00002163  2C 20						 SUB	 AL,'a'	- 'A'		 ; convert to uppercase
2  9916	00002165			 @@UC:
2  9917	00002165  C3						 RET
2  9918	00002166						 ENDP	 UPCASE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 175
FKernel.asm



2  9919
2  9920					 ;  FIND-FORTH
2  9921					 ;  D: ( c-addr	-- c-addr 0 | xt 1 | xt	-1 )
2  9922								 $COLON	 'FIND-FORTH',$FIND_FORTH
3  9923								 $DEF	 'FIND-FORTH',$FIND_FORTH,$ENTER,
4  9924	00002166			 ??032F:
4  9925		  =MAIN:2166		 LASTWORD		 =	 ??032F
4  9926								 IFNB	 <>
4  9927								   DB
4  9928								 ELSE
4  9929	00002166  00						   DB	 VEF_USUAL
4  9930								 ENDIF
4  9931	00002167  0A						 DB	 ??0330	- $ - 1
4  9932	00002168  46 49	4E 44 2D 46 4F+				 DB	 'FIND-FORTH'
   9933		  52 54	48
4  9934	00002172			 ??0330:
4  9935	00002172  0C						 DB	 ??0330	- ??032F
4  9936	00002173  200020A6					 DD	 VOC_LINK
4  9937		  =MAIN:20002166	 VOC_LINK		 =	 ??032F	+ DESIRED_BASE_EQU
4  9938
4  9939								 IFNB	 <$FIND_FORTH>
4  9940	00002177						   LABEL   $FIND_FORTH FAR
4  9941								 ENDIF
4  9942								 IFNB	 <$ENTER>
4  9943	00002177  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4  9944								 ELSE
4  9945								   DD	   ??0332 + DESIRED_BASE_EQU
4  9946								 ENDIF
4  9947	0000217B			 ??0332:
2  9948								 CW	 $DUP
3  9949	0000217B  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  9950								 CW	 $TOR
3  9951	0000217F  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2  9952								 CW	 $COUNT
3  9953	00002183  20002807					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  9954								 CW	 $FORTH_WORDLIST
3  9955	00002187  20002096					 DD	 $FORTH_WORDLIST + DESIRED_BASE_EQU
2  9956								 CW	 $SEARCH_WORDLIST
3  9957	0000218B  200020BC					 DD	 $SEARCH_WORDLIST + DESIRED_BASE_EQU
2  9958								 CW	 $DUP
3  9959	0000218F  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2  9960								 CW	 $ZEROEQ
3  9961	00002193  20001F09					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  9962								 CQBR	 FF_FOUND
3  9963								 CW	 $QBRANCH
4  9964	00002197  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  9965								 CW	 FF_FOUND
4  9966	0000219B  200021AF					 DD	 FF_FOUND + DESIRED_BASE_EQU
2  9967								   CW	   $RFROM
3  9968	0000219F  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  9969								   CW	   $SWAP
3  9970	000021A3  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2  9971								 CBR	 FF_EXIT
3  9972								 CW	 $BRANCH
4  9973	000021A7  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  9974								 CW	 FF_EXIT
4  9975	000021AB  200021B7					 DD	 FF_EXIT + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 176
FKernel.asm



2  9976	000021AF			 FF_FOUND:
2  9977								   CW	   $RFROM
3  9978	000021AF  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  9979								   CW	   $DROP
3  9980	000021B3  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2  9981	000021B7			 FF_EXIT:
2  9982								 CEXIT
3  9983								 CW	 $EXIT
4  9984	000021B7  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2  9985
2  9986					 ;  6.1.1550 FIND
2  9987					 ;  D: ( c-addr	-- c-addr 0 | xt 1 | xt	-1 )
2  9988								 $DEFER	 'FIND',$FIND
3  9989								 $DEF	 'FIND',$FIND,$DODEFER,
4  9990	000021BB			 ??0333:
4  9991		  =MAIN:21BB		 LASTWORD		 =	 ??0333
4  9992								 IFNB	 <>
4  9993								   DB
4  9994								 ELSE
4  9995	000021BB  00						   DB	 VEF_USUAL
4  9996								 ENDIF
4  9997	000021BC  04						 DB	 ??0334	- $ - 1
4  9998	000021BD  46 49	4E 44					 DB	 'FIND'
4  9999	000021C1			 ??0334:
4 10000	000021C1  06						 DB	 ??0334	- ??0333
4 10001	000021C2  20002166					 DD	 VOC_LINK
4 10002		  =MAIN:200021BB	 VOC_LINK		 =	 ??0333	+ DESIRED_BASE_EQU
4 10003
4 10004								 IFNB	 <$FIND>
4 10005	000021C6						   LABEL   $FIND FAR
4 10006								 ENDIF
4 10007								 IFNB	 <$DODEFER>
4 10008	000021C6  2000014A					   DD	   $DODEFER + DESIRED_BASE_EQU
4 10009								 ELSE
4 10010								   DD	   ??0336 + DESIRED_BASE_EQU
4 10011								 ENDIF
4 10012	000021CA			 ??0336:
2 10013								 CW	 $FIND_FORTH
3 10014	000021CA  20002177					 DD	 $FIND_FORTH + DESIRED_BASE_EQU
2 10015
2 10016
1 10017								 INCLUDE "fcontrol.inc"
2 10018					 ;******************************************************************************
2 10019					 ;
2 10020					 ;  fcontrol.inc
2 10021					 ;  IKForth
2 10022					 ;
2 10023					 ;  Copyright (C) 1999-2003 Illya Kysil
2 10024					 ;
2 10025					 ;******************************************************************************
2 10026					 ;  Flow control words
2 10027					 ;******************************************************************************
2 10028
2 10029					 ;  6.1.1760 LEAVE
2 10030								 $DEF	 'LEAVE',$LEAVE,,VEF_COMPILE_ONLY
3 10031	000021CE			 ??0337:
3 10032		  =MAIN:21CE		 LASTWORD		 =	 ??0337
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 177
FKernel.asm



3 10033								 IFNB	 <VEF_COMPILE_ONLY>
3 10034	000021CE  04						   DB	 VEF_COMPILE_ONLY
3 10035								 ELSE
3 10036								   DB	 VEF_USUAL
3 10037								 ENDIF
3 10038	000021CF  05						 DB	 ??0338	- $ - 1
3 10039	000021D0  4C 45	41 56 45				 DB	 'LEAVE'
3 10040	000021D5			 ??0338:
3 10041	000021D5  07						 DB	 ??0338	- ??0337
3 10042	000021D6  200021BB					 DD	 VOC_LINK
3 10043		  =MAIN:200021CE	 VOC_LINK		 =	 ??0337	+ DESIRED_BASE_EQU
3 10044
3 10045								 IFNB	 <$LEAVE>
3 10046	000021DA						   LABEL   $LEAVE FAR
3 10047								 ENDIF
3 10048								 IFNB	 <>
3 10049								   DD	    + DESIRED_BASE_EQU
3 10050								 ELSE
3 10051	000021DA  200021DE					   DD	   ??033A + DESIRED_BASE_EQU
3 10052								 ENDIF
3 10053	000021DE			 ??033A:
2 10054								 POPRS	 EAX
3 10055	000021DE  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 10056	000021E1  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10057								 POPRS	 EAX
3 10058	000021E4  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 10059	000021E7  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10060								 POPRS	 ESI
3 10061	000021EA  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 10062	000021ED  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10063								 $NEXT
3 10064	000021F0  AD						 LODSD				 ; fetch address
3 10065								 $JMP
4 10066	000021F1  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10067	000021F3  FF E3						 JMP	 EBX			 ; execute
2 10068
2 10069					 ;  6.1.1680 I
2 10070					 ;  D: ( -- loop-index )
2 10071								 $DEF	 'I',$I,,VEF_COMPILE_ONLY
3 10072	000021F5			 ??033B:
3 10073		  =MAIN:21F5		 LASTWORD		 =	 ??033B
3 10074								 IFNB	 <VEF_COMPILE_ONLY>
3 10075	000021F5  04						   DB	 VEF_COMPILE_ONLY
3 10076								 ELSE
3 10077								   DB	 VEF_USUAL
3 10078								 ENDIF
3 10079	000021F6  01						 DB	 ??033C	- $ - 1
3 10080	000021F7  49						 DB	 'I'
3 10081	000021F8			 ??033C:
3 10082	000021F8  03						 DB	 ??033C	- ??033B
3 10083	000021F9  200021CE					 DD	 VOC_LINK
3 10084		  =MAIN:200021F5	 VOC_LINK		 =	 ??033B	+ DESIRED_BASE_EQU
3 10085
3 10086								 IFNB	 <$I>
3 10087	000021FD						   LABEL   $I FAR
3 10088								 ENDIF
3 10089								 IFNB	 <>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 178
FKernel.asm



3 10090								   DD	    + DESIRED_BASE_EQU
3 10091								 ELSE
3 10092	000021FD  20002201					   DD	   ??033E + DESIRED_BASE_EQU
3 10093								 ENDIF
3 10094	00002201			 ??033E:
2 10095								 FETCHRS EAX
3 10096								 IFNB	  <>
3 10097								   MOV	   EAX,[DWORD PTR EBP +	 * CELL_SIZE]
3 10098								 ELSE
3 10099	00002201  8B 45	00					   MOV	   EAX,[DWORD PTR EBP]
3 10100								 ENDIF
2 10101								 PUSHDS	 EAX
3 10102	00002204  50						 PUSH	 EAX
2 10103								 $NEXT
3 10104	00002205  AD						 LODSD				 ; fetch address
3 10105								 $JMP
4 10106	00002206  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10107	00002208  FF E3						 JMP	 EBX			 ; execute
2 10108
2 10109					 ;  6.1.1730 J
2 10110					 ;  D: ( -- outer-loop-index )
2 10111								 $DEF	 'J',$J,,VEF_COMPILE_ONLY
3 10112	0000220A			 ??033F:
3 10113		  =MAIN:220A		 LASTWORD		 =	 ??033F
3 10114								 IFNB	 <VEF_COMPILE_ONLY>
3 10115	0000220A  04						   DB	 VEF_COMPILE_ONLY
3 10116								 ELSE
3 10117								   DB	 VEF_USUAL
3 10118								 ENDIF
3 10119	0000220B  01						 DB	 ??0340	- $ - 1
3 10120	0000220C  4A						 DB	 'J'
3 10121	0000220D			 ??0340:
3 10122	0000220D  03						 DB	 ??0340	- ??033F
3 10123	0000220E  200021F5					 DD	 VOC_LINK
3 10124		  =MAIN:2000220A	 VOC_LINK		 =	 ??033F	+ DESIRED_BASE_EQU
3 10125
3 10126								 IFNB	 <$J>
3 10127	00002212						   LABEL   $J FAR
3 10128								 ENDIF
3 10129								 IFNB	 <>
3 10130								   DD	    + DESIRED_BASE_EQU
3 10131								 ELSE
3 10132	00002212  20002216					   DD	   ??0342 + DESIRED_BASE_EQU
3 10133								 ENDIF
3 10134	00002216			 ??0342:
2 10135								 FETCHRS EAX,3
3 10136								 IFNB	  <3>
3 10137	00002216  8B 45	0C					   MOV	   EAX,[DWORD PTR EBP +	3 * CELL_SIZE]
3 10138								 ELSE
3 10139								   MOV	   EAX,[DWORD PTR EBP]
3 10140								 ENDIF
2 10141								 PUSHDS	 EAX
3 10142	00002219  50						 PUSH	 EAX
2 10143								 $NEXT
3 10144	0000221A  AD						 LODSD				 ; fetch address
3 10145								 $JMP
4 10146	0000221B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 179
FKernel.asm



4 10147	0000221D  FF E3						 JMP	 EBX			 ; execute
2 10148
2 10149					 ;  I'
2 10150					 ;  D: ( -- loop-limit )
2 10151								 $DEF	 'I''',$ITICK,,VEF_COMPILE_ONLY
3 10152	0000221F			 ??0343:
3 10153		  =MAIN:221F		 LASTWORD		 =	 ??0343
3 10154								 IFNB	 <VEF_COMPILE_ONLY>
3 10155	0000221F  04						   DB	 VEF_COMPILE_ONLY
3 10156								 ELSE
3 10157								   DB	 VEF_USUAL
3 10158								 ENDIF
3 10159	00002220  02						 DB	 ??0344	- $ - 1
3 10160	00002221  49 27						 DB	 'I'''
3 10161	00002223			 ??0344:
3 10162	00002223  04						 DB	 ??0344	- ??0343
3 10163	00002224  2000220A					 DD	 VOC_LINK
3 10164		  =MAIN:2000221F	 VOC_LINK		 =	 ??0343	+ DESIRED_BASE_EQU
3 10165
3 10166								 IFNB	 <$ITICK>
3 10167	00002228						   LABEL   $ITICK FAR
3 10168								 ENDIF
3 10169								 IFNB	 <>
3 10170								   DD	    + DESIRED_BASE_EQU
3 10171								 ELSE
3 10172	00002228  2000222C					   DD	   ??0346 + DESIRED_BASE_EQU
3 10173								 ENDIF
3 10174	0000222C			 ??0346:
2 10175								 FETCHRS EAX,1
3 10176								 IFNB	  <1>
3 10177	0000222C  8B 45	04					   MOV	   EAX,[DWORD PTR EBP +	1 * CELL_SIZE]
3 10178								 ELSE
3 10179								   MOV	   EAX,[DWORD PTR EBP]
3 10180								 ENDIF
2 10181								 PUSHDS	 EAX
3 10182	0000222F  50						 PUSH	 EAX
2 10183								 $NEXT
3 10184	00002230  AD						 LODSD				 ; fetch address
3 10185								 $JMP
4 10186	00002231  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10187	00002233  FF E3						 JMP	 EBX			 ; execute
2 10188
2 10189					 ;  6.1.1370 EXECUTE
2 10190								 $DEF	 'EXECUTE',$EXECUTE
3 10191	00002235			 ??0347:
3 10192		  =MAIN:2235		 LASTWORD		 =	 ??0347
3 10193								 IFNB	 <>
3 10194								   DB
3 10195								 ELSE
3 10196	00002235  00						   DB	 VEF_USUAL
3 10197								 ENDIF
3 10198	00002236  07						 DB	 ??0348	- $ - 1
3 10199	00002237  45 58	45 43 55 54 45				 DB	 'EXECUTE'
3 10200	0000223E			 ??0348:
3 10201	0000223E  09						 DB	 ??0348	- ??0347
3 10202	0000223F  2000221F					 DD	 VOC_LINK
3 10203		  =MAIN:20002235	 VOC_LINK		 =	 ??0347	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 180
FKernel.asm



3 10204
3 10205								 IFNB	 <$EXECUTE>
3 10206	00002243						   LABEL   $EXECUTE FAR
3 10207								 ENDIF
3 10208								 IFNB	 <>
3 10209								   DD	    + DESIRED_BASE_EQU
3 10210								 ELSE
3 10211	00002243  20002247					   DD	   ??034A + DESIRED_BASE_EQU
3 10212								 ENDIF
3 10213	00002247			 ??034A:
2 10214								 POPDS	 EAX			 ; pop new IP from data	stack
3 10215	00002247  58						 POP	 EAX
2 10216								 $JMP
3 10217	00002248  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
3 10218	0000224A  FF E3						 JMP	 EBX			 ; execute
2 10219
2 10220								 $DEF	 '@EXECUTE',$FETCH_EXECUTE
3 10221	0000224C			 ??034B:
3 10222		  =MAIN:224C		 LASTWORD		 =	 ??034B
3 10223								 IFNB	 <>
3 10224								   DB
3 10225								 ELSE
3 10226	0000224C  00						   DB	 VEF_USUAL
3 10227								 ENDIF
3 10228	0000224D  08						 DB	 ??034C	- $ - 1
3 10229	0000224E  40 45	58 45 43 55 54+				 DB	 '@EXECUTE'
  10230		  45
3 10231	00002256			 ??034C:
3 10232	00002256  0A						 DB	 ??034C	- ??034B
3 10233	00002257  20002235					 DD	 VOC_LINK
3 10234		  =MAIN:2000224C	 VOC_LINK		 =	 ??034B	+ DESIRED_BASE_EQU
3 10235
3 10236								 IFNB	 <$FETCH_EXECUTE>
3 10237	0000225B						   LABEL   $FETCH_EXECUTE FAR
3 10238								 ENDIF
3 10239								 IFNB	 <>
3 10240								   DD	    + DESIRED_BASE_EQU
3 10241								 ELSE
3 10242	0000225B  2000225F					   DD	   ??034E + DESIRED_BASE_EQU
3 10243								 ENDIF
3 10244	0000225F			 ??034E:
2 10245								 POPDS	 EAX
3 10246	0000225F  58						 POP	 EAX
2 10247	00002260  8B 00						 MOV	 EAX,[DWORD PTR	EAX]
2 10248								 $JMP
3 10249	00002262  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
3 10250	00002264  FF E3						 JMP	 EBX			 ; execute
2 10251
2 10252					 ;******************************************************************************
2 10253					 ;  Loop support words
2 10254					 ;******************************************************************************
2 10255					 ;  (DO)
2 10256								 $DEF	 '(DO)',$PDO
3 10257	00002266			 ??034F:
3 10258		  =MAIN:2266		 LASTWORD		 =	 ??034F
3 10259								 IFNB	 <>
3 10260								   DB
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 181
FKernel.asm



3 10261								 ELSE
3 10262	00002266  00						   DB	 VEF_USUAL
3 10263								 ENDIF
3 10264	00002267  04						 DB	 ??0350	- $ - 1
3 10265	00002268  28 44	4F 29					 DB	 '(DO)'
3 10266	0000226C			 ??0350:
3 10267	0000226C  06						 DB	 ??0350	- ??034F
3 10268	0000226D  2000224C					 DD	 VOC_LINK
3 10269		  =MAIN:20002266	 VOC_LINK		 =	 ??034F	+ DESIRED_BASE_EQU
3 10270
3 10271								 IFNB	 <$PDO>
3 10272	00002271						   LABEL   $PDO	FAR
3 10273								 ENDIF
3 10274								 IFNB	 <>
3 10275								   DD	    + DESIRED_BASE_EQU
3 10276								 ELSE
3 10277	00002271  20002275					   DD	   ??0352 + DESIRED_BASE_EQU
3 10278								 ENDIF
3 10279	00002275			 ??0352:
2 10280	00002275  AD						 LODSD
2 10281								 PUSHRS	 EAX			 ; address for LEAVE
3 10282	00002276  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10283	00002279  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2 10284								 POPDS	 EAX
3 10285	0000227C  58						 POP	 EAX
2 10286								 POPDS	 EBX
3 10287	0000227D  5B						 POP	 EBX
2 10288								 PUSHRS	 EBX			 ; limit
3 10289	0000227E  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10290	00002281  89 5D	00					 MOV	 [DWORD	PTR EBP],EBX
2 10291								 PUSHRS	 EAX			 ; current
3 10292	00002284  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10293	00002287  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2 10294								 $NEXT
3 10295	0000228A  AD						 LODSD				 ; fetch address
3 10296								 $JMP
4 10297	0000228B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10298	0000228D  FF E3						 JMP	 EBX			 ; execute
2 10299
2 10300					 ;  (?DO)
2 10301								 $DEF	 '(?DO)',$PQDO
3 10302	0000228F			 ??0353:
3 10303		  =MAIN:228F		 LASTWORD		 =	 ??0353
3 10304								 IFNB	 <>
3 10305								   DB
3 10306								 ELSE
3 10307	0000228F  00						   DB	 VEF_USUAL
3 10308								 ENDIF
3 10309	00002290  05						 DB	 ??0354	- $ - 1
3 10310	00002291  28 3F	44 4F 29				 DB	 '(?DO)'
3 10311	00002296			 ??0354:
3 10312	00002296  07						 DB	 ??0354	- ??0353
3 10313	00002297  20002266					 DD	 VOC_LINK
3 10314		  =MAIN:2000228F	 VOC_LINK		 =	 ??0353	+ DESIRED_BASE_EQU
3 10315
3 10316								 IFNB	 <$PQDO>
3 10317	0000229B						   LABEL   $PQDO FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 182
FKernel.asm



3 10318								 ENDIF
3 10319								 IFNB	 <>
3 10320								   DD	    + DESIRED_BASE_EQU
3 10321								 ELSE
3 10322	0000229B  2000229F					   DD	   ??0356 + DESIRED_BASE_EQU
3 10323								 ENDIF
3 10324	0000229F			 ??0356:
2 10325	0000229F  AD						 LODSD
2 10326								 POPDS	 ECX
3 10327	000022A0  59						 POP	 ECX
2 10328								 POPDS	 EBX
3 10329	000022A1  5B						 POP	 EBX
2 10330	000022A2  3B CB						 CMP	 ECX,EBX
2 10331	000022A4  74 17						 JZ	 SHORT PQDO_EXIT
2 10332								 PUSHRS	 EAX			 ; address for LEAVE
3 10333	000022A6  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10334	000022A9  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2 10335								 PUSHRS	 EBX			 ; limit
3 10336	000022AC  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10337	000022AF  89 5D	00					 MOV	 [DWORD	PTR EBP],EBX
2 10338								 PUSHRS	 ECX			 ; current
3 10339	000022B2  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10340	000022B5  89 4D	00					 MOV	 [DWORD	PTR EBP],ECX
2 10341								 $NEXT
3 10342	000022B8  AD						 LODSD				 ; fetch address
3 10343								 $JMP
4 10344	000022B9  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10345	000022BB  FF E3						 JMP	 EBX			 ; execute
2 10346	000022BD			 PQDO_EXIT:
2 10347	000022BD  8B F0						 MOV	 ESI,EAX
2 10348								 $NEXT
3 10349	000022BF  AD						 LODSD				 ; fetch address
3 10350								 $JMP
4 10351	000022C0  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10352	000022C2  FF E3						 JMP	 EBX			 ; execute
2 10353
2 10354					 ;  (LOOP)
2 10355								 $DEF	 '(LOOP)',$PLOOP
3 10356	000022C4			 ??0357:
3 10357		  =MAIN:22C4		 LASTWORD		 =	 ??0357
3 10358								 IFNB	 <>
3 10359								   DB
3 10360								 ELSE
3 10361	000022C4  00						   DB	 VEF_USUAL
3 10362								 ENDIF
3 10363	000022C5  06						 DB	 ??0358	- $ - 1
3 10364	000022C6  28 4C	4F 4F 50 29				 DB	 '(LOOP)'
3 10365	000022CC			 ??0358:
3 10366	000022CC  08						 DB	 ??0358	- ??0357
3 10367	000022CD  2000228F					 DD	 VOC_LINK
3 10368		  =MAIN:200022C4	 VOC_LINK		 =	 ??0357	+ DESIRED_BASE_EQU
3 10369
3 10370								 IFNB	 <$PLOOP>
3 10371	000022D1						   LABEL   $PLOOP FAR
3 10372								 ENDIF
3 10373								 IFNB	 <>
3 10374								   DD	    + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 183
FKernel.asm



3 10375								 ELSE
3 10376	000022D1  200022D5					   DD	   ??035A + DESIRED_BASE_EQU
3 10377								 ENDIF
3 10378	000022D5			 ??035A:
2 10379	000022D5  AD						 LODSD
2 10380								 POPRS	 ECX			 ; current
3 10381	000022D6  8B 4D	00					 MOV	 ECX,[DWORD PTR	EBP]
3 10382	000022D9  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10383								 FETCHRS EBX			 ; limit
3 10384								 IFNB	  <>
3 10385								   MOV	   EBX,[DWORD PTR EBP +	 * CELL_SIZE]
3 10386								 ELSE
3 10387	000022DC  8B 5D	00					   MOV	   EBX,[DWORD PTR EBP]
3 10388								 ENDIF
2 10389	000022DF  41						 INC	 ECX
2 10390	000022E0  3B CB						 CMP	 ECX,EBX
2 10391	000022E2  75 11						 JNZ	 SHORT PLOOP_NOEQ
2 10392								 POPRS	 EAX
3 10393	000022E4  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 10394	000022E7  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10395								 POPRS	 EAX
3 10396	000022EA  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 10397	000022ED  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10398								 $NEXT
3 10399	000022F0  AD						 LODSD				 ; fetch address
3 10400								 $JMP
4 10401	000022F1  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10402	000022F3  FF E3						 JMP	 EBX			 ; execute
2 10403	000022F5			 PLOOP_NOEQ:
2 10404								 PUSHRS	 ECX			 ; current
3 10405	000022F5  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10406	000022F8  89 4D	00					 MOV	 [DWORD	PTR EBP],ECX
2 10407	000022FB  8B F0						 MOV	 ESI,EAX
2 10408								 $NEXT
3 10409	000022FD  AD						 LODSD				 ; fetch address
3 10410								 $JMP
4 10411	000022FE  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10412	00002300  FF E3						 JMP	 EBX			 ; execute
2 10413
2 10414					 ;  (+LOOP)
2 10415								 $DEF	 '(+LOOP)',$PADDLOOP
3 10416	00002302			 ??035B:
3 10417		  =MAIN:2302		 LASTWORD		 =	 ??035B
3 10418								 IFNB	 <>
3 10419								   DB
3 10420								 ELSE
3 10421	00002302  00						   DB	 VEF_USUAL
3 10422								 ENDIF
3 10423	00002303  07						 DB	 ??035C	- $ - 1
3 10424	00002304  28 2B	4C 4F 4F 50 29				 DB	 '(+LOOP)'
3 10425	0000230B			 ??035C:
3 10426	0000230B  09						 DB	 ??035C	- ??035B
3 10427	0000230C  200022C4					 DD	 VOC_LINK
3 10428		  =MAIN:20002302	 VOC_LINK		 =	 ??035B	+ DESIRED_BASE_EQU
3 10429
3 10430								 IFNB	 <$PADDLOOP>
3 10431	00002310						   LABEL   $PADDLOOP FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 184
FKernel.asm



3 10432								 ENDIF
3 10433								 IFNB	 <>
3 10434								   DD	    + DESIRED_BASE_EQU
3 10435								 ELSE
3 10436	00002310  20002314					   DD	   ??035E + DESIRED_BASE_EQU
3 10437								 ENDIF
3 10438	00002314			 ??035E:
2 10439	00002314  AD						 LODSD				 ; loop	addr
2 10440								 POPDS	 EDX			 ; loop	index increment
3 10441	00002315  5A						 POP	 EDX
2 10442								 POPRS	 ECX			 ; current
3 10443	00002316  8B 4D	00					 MOV	 ECX,[DWORD PTR	EBP]
3 10444	00002319  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10445								 FETCHRS EBX			 ; limit
3 10446								 IFNB	  <>
3 10447								   MOV	   EBX,[DWORD PTR EBP +	 * CELL_SIZE]
3 10448								 ELSE
3 10449	0000231C  8B 5D	00					   MOV	   EBX,[DWORD PTR EBP]
3 10450								 ENDIF
2 10451	0000231F  2B D9						 SUB	 EBX,ECX
2 10452	00002321  0B D2						 OR	 EDX,EDX
2 10453	00002323  78 28	90 90 90 90				 JS	 PADDLOOP_NEGATIVE	 ; jump	if increment is	negative
2 10454	00002329  3B DA						 CMP	 EBX,EDX
2 10455	0000232B  7E 0F						 JLE	 SHORT PADDLOOP_LOOP_EXIT
2 10456	0000232D			 PADDLOOP_LOOP_CONT:
2 10457	0000232D  03 CA						 ADD	 ECX,EDX
2 10458								 PUSHRS	 ECX			 ; current
3 10459	0000232F  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10460	00002332  89 4D	00					 MOV	 [DWORD	PTR EBP],ECX
2 10461	00002335  8B F0						 MOV	 ESI,EAX
2 10462								 $NEXT
3 10463	00002337  AD						 LODSD				 ; fetch address
3 10464								 $JMP
4 10465	00002338  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10466	0000233A  FF E3						 JMP	 EBX			 ; execute
2 10467	0000233C			 PADDLOOP_LOOP_EXIT:
2 10468								 POPRS	 EAX
3 10469	0000233C  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 10470	0000233F  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10471								 POPRS	 EAX
3 10472	00002342  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 10473	00002345  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10474								 $NEXT
3 10475	00002348  AD						 LODSD				 ; fetch address
3 10476								 $JMP
4 10477	00002349  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10478	0000234B  FF E3						 JMP	 EBX			 ; execute
2 10479
2 10480	0000234D			 PADDLOOP_NEGATIVE:
2 10481	0000234D  3B DA						 CMP	 EBX,EDX
2 10482	0000234F  7F EB						 JG	 SHORT PADDLOOP_LOOP_EXIT
2 10483	00002351  EB DA						 JMP	 SHORT PADDLOOP_LOOP_CONT
2 10484
2 10485
1 10486								 INCLUDE "block.inc"
2 10487					 ;******************************************************************************
2 10488					 ;
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 185
FKernel.asm



2 10489					 ;  block.inc
2 10490					 ;  IKForth
2 10491					 ;
2 10492					 ;  Copyright (C) 1999-2003 Illya Kysil
2 10493					 ;
2 10494					 ;******************************************************************************
2 10495					 ;  Block words
2 10496					 ;******************************************************************************
2 10497
2 10498					 ;  7.6.1.0790 BLK
2 10499								 $USER	 'BLK',$BLK
3 10500								 $DEF	 'BLK',$BLK,$DOUSER
4 10501	00002353			 ??035F:
4 10502		  =MAIN:2353		 LASTWORD		 =	 ??035F
4 10503								 IFNB	 <>
4 10504								   DB
4 10505								 ELSE
4 10506	00002353  00						   DB	 VEF_USUAL
4 10507								 ENDIF
4 10508	00002354  03						 DB	 ??0360	- $ - 1
4 10509	00002355  42 4C	4B					 DB	 'BLK'
4 10510	00002358			 ??0360:
4 10511	00002358  05						 DB	 ??0360	- ??035F
4 10512	00002359  20002302					 DD	 VOC_LINK
4 10513		  =MAIN:20002353	 VOC_LINK		 =	 ??035F	+ DESIRED_BASE_EQU
4 10514
4 10515								 IFNB	 <$BLK>
4 10516	0000235D						   LABEL   $BLK	FAR
4 10517								 ENDIF
4 10518								 IFNB	 <$DOUSER>
4 10519	0000235D  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4 10520								 ELSE
4 10521								   DD	   ??0362 + DESIRED_BASE_EQU
4 10522								 ENDIF
4 10523	00002361			 ??0362:
2 10524								 CC	 BLK_VAR
3 10525	00002361  0000084C					 DD	 BLK_VAR
2 10526
2 10527					 ;  BLOCK#
2 10528								 $USER	 'BLOCK#'
3 10529								 $DEF	 'BLOCK#',,$DOUSER
4 10530	00002365			 ??0363:
4 10531		  =MAIN:2365		 LASTWORD		 =	 ??0363
4 10532								 IFNB	 <>
4 10533								   DB
4 10534								 ELSE
4 10535	00002365  00						   DB	 VEF_USUAL
4 10536								 ENDIF
4 10537	00002366  06						 DB	 ??0364	- $ - 1
4 10538	00002367  42 4C	4F 43 4B 23				 DB	 'BLOCK#'
4 10539	0000236D			 ??0364:
4 10540	0000236D  08						 DB	 ??0364	- ??0363
4 10541	0000236E  20002353					 DD	 VOC_LINK
4 10542		  =MAIN:20002365	 VOC_LINK		 =	 ??0363	+ DESIRED_BASE_EQU
4 10543
4 10544								 IFNB	 <>
4 10545								   LABEL    FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 186
FKernel.asm



4 10546								 ENDIF
4 10547								 IFNB	 <$DOUSER>
4 10548	00002372  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4 10549								 ELSE
4 10550								   DD	   ??0366 + DESIRED_BASE_EQU
4 10551								 ENDIF
4 10552	00002376			 ??0366:
2 10553								 CC	 BLOCK_NUM_VAR
3 10554	00002376  00000850					 DD	 BLOCK_NUM_VAR
2 10555
2 10556					 ;  BLOCK-UPDATED
2 10557								 $USER	 'BLOCK-UPDATED'
3 10558								 $DEF	 'BLOCK-UPDATED',,$DOUSER
4 10559	0000237A			 ??0367:
4 10560		  =MAIN:237A		 LASTWORD		 =	 ??0367
4 10561								 IFNB	 <>
4 10562								   DB
4 10563								 ELSE
4 10564	0000237A  00						   DB	 VEF_USUAL
4 10565								 ENDIF
4 10566	0000237B  0D						 DB	 ??0368	- $ - 1
4 10567	0000237C  42 4C	4F 43 4B 2D 55+				 DB	 'BLOCK-UPDATED'
  10568		  50 44	41 54 45 44
4 10569	00002389			 ??0368:
4 10570	00002389  0F						 DB	 ??0368	- ??0367
4 10571	0000238A  20002365					 DD	 VOC_LINK
4 10572		  =MAIN:2000237A	 VOC_LINK		 =	 ??0367	+ DESIRED_BASE_EQU
4 10573
4 10574								 IFNB	 <>
4 10575								   LABEL    FAR
4 10576								 ENDIF
4 10577								 IFNB	 <$DOUSER>
4 10578	0000238E  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4 10579								 ELSE
4 10580								   DD	   ??036A + DESIRED_BASE_EQU
4 10581								 ENDIF
4 10582	00002392			 ??036A:
2 10583								 CC	 BLOCK_UPDATED_VAR
3 10584	00002392  00000854					 DD	 BLOCK_UPDATED_VAR
2 10585
2 10586					 ;  BLOCK-DATA
2 10587								 $USER	 'BLOCK-DATA'
3 10588								 $DEF	 'BLOCK-DATA',,$DOUSER
4 10589	00002396			 ??036B:
4 10590		  =MAIN:2396		 LASTWORD		 =	 ??036B
4 10591								 IFNB	 <>
4 10592								   DB
4 10593								 ELSE
4 10594	00002396  00						   DB	 VEF_USUAL
4 10595								 ENDIF
4 10596	00002397  0A						 DB	 ??036C	- $ - 1
4 10597	00002398  42 4C	4F 43 4B 2D 44+				 DB	 'BLOCK-DATA'
  10598		  41 54	41
4 10599	000023A2			 ??036C:
4 10600	000023A2  0C						 DB	 ??036C	- ??036B
4 10601	000023A3  2000237A					 DD	 VOC_LINK
4 10602		  =MAIN:20002396	 VOC_LINK		 =	 ??036B	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 187
FKernel.asm



4 10603
4 10604								 IFNB	 <>
4 10605								   LABEL    FAR
4 10606								 ENDIF
4 10607								 IFNB	 <$DOUSER>
4 10608	000023A7  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4 10609								 ELSE
4 10610								   DD	   ??036E + DESIRED_BASE_EQU
4 10611								 ENDIF
4 10612	000023AB			 ??036E:
2 10613								 CC	 BLOCK_VAR
3 10614	000023AB  00000858					 DD	 BLOCK_VAR
2 10615
2 10616					 ;  7.6.1.0800 BLOCK
2 10617								 $DEF	 'BLOCK',$BLOCK
3 10618	000023AF			 ??036F:
3 10619		  =MAIN:23AF		 LASTWORD		 =	 ??036F
3 10620								 IFNB	 <>
3 10621								   DB
3 10622								 ELSE
3 10623	000023AF  00						   DB	 VEF_USUAL
3 10624								 ENDIF
3 10625	000023B0  05						 DB	 ??0370	- $ - 1
3 10626	000023B1  42 4C	4F 43 4B				 DB	 'BLOCK'
3 10627	000023B6			 ??0370:
3 10628	000023B6  07						 DB	 ??0370	- ??036F
3 10629	000023B7  20002396					 DD	 VOC_LINK
3 10630		  =MAIN:200023AF	 VOC_LINK		 =	 ??036F	+ DESIRED_BASE_EQU
3 10631
3 10632								 IFNB	 <$BLOCK>
3 10633	000023BB						   LABEL   $BLOCK FAR
3 10634								 ENDIF
3 10635								 IFNB	 <>
3 10636								   DD	    + DESIRED_BASE_EQU
3 10637								 ELSE
3 10638	000023BB  200023BF					   DD	   ??0372 + DESIRED_BASE_EQU
3 10639								 ENDIF
3 10640	000023BF			 ??0372:
2 10641	000023BF  8B 87	00000850				 MOV	 EAX,[DWORD PTR	EDI + BLOCK_NUM_VAR]
2 10642	000023C5  0B C0						 OR	 EAX,EAX
2 10643	000023C7  74 3B						 JZ	 SHORT BLOCK_READ
2 10644	000023C9  8B 87	00000854				 MOV	 EAX,[DWORD PTR	EDI + BLOCK_UPDATED_VAR]
2 10645	000023CF  83 F8	00					 CMP	 EAX,F_FALSE
2 10646	000023D2  74 30						 JZ	 SHORT BLOCK_READ
2 10647	000023D4  8B DF						 MOV	 EBX,EDI
2 10648	000023D6  81 C3	00000858				 ADD	 EBX,BLOCK_VAR
2 10649								 PUSHDS	 EBX
3 10650	000023DC  53						 PUSH	 EBX
2 10651								 PUSHDS	 <[DWORD PTR EDI + BLOCK_NUM_VAR]>
3 10652	000023DD  FF B7	00000850				 PUSH	 [DWORD	PTR EDI	+ BLOCK_NUM_VAR]
2 10653								 $CALL	 WRITE_BLOCK_FUNC
3 10654								 PUSHRS	 EDI
4 10655	000023E3  83 ED	04					 SUB	 EBP,CELL_SIZE
4 10656	000023E6  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3 10657	000023E9  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3 10658	000023EF  8B 5B	24					 MOV	 EBX,[DWORD PTR	EBX + WRITE_BLOCK_FUNC * CELL_SIZE]
3 10659	000023F2  FF D3						 CALL	 EBX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 188
FKernel.asm



3 10660								 POPRS	 EDI
4 10661	000023F4  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4 10662	000023F7  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10663	000023FA  C7 87	00000854      +				 MOV	 [DWORD	PTR EDI	+ BLOCK_UPDATED_VAR],F_FALSE
  10664		  00000000
2 10665	00002404			 BLOCK_READ:
2 10666								 POPDS	 EAX
3 10667	00002404  58						 POP	 EAX
2 10668	00002405  89 87	00000850				 MOV	 [DWORD	PTR EDI	+ BLOCK_NUM_VAR],EAX
2 10669	0000240B  8B DF						 MOV	 EBX,EDI
2 10670	0000240D  81 C3	00000858				 ADD	 EBX,BLOCK_VAR
2 10671								 PUSHDS	 EBX
3 10672	00002413  53						 PUSH	 EBX
2 10673								 PUSHDS	 EBX
3 10674	00002414  53						 PUSH	 EBX
2 10675								 PUSHDS	 EAX
3 10676	00002415  50						 PUSH	 EAX
2 10677								 $CALL	 READ_BLOCK_FUNC
3 10678								 PUSHRS	 EDI
4 10679	00002416  83 ED	04					 SUB	 EBP,CELL_SIZE
4 10680	00002419  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3 10681	0000241C  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
3 10682	00002422  8B 5B	20					 MOV	 EBX,[DWORD PTR	EBX + READ_BLOCK_FUNC *	CELL_SIZE]
3 10683	00002425  FF D3						 CALL	 EBX
3 10684								 POPRS	 EDI
4 10685	00002427  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4 10686	0000242A  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10687								 $NEXT
3 10688	0000242D  AD						 LODSD				 ; fetch address
3 10689								 $JMP
4 10690	0000242E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10691	00002430  FF E3						 JMP	 EBX			 ; execute
2 10692
2 10693
1 10694								 INCLUDE "parse.inc"
2 10695					 ;******************************************************************************
2 10696					 ;
2 10697					 ;  parse.inc
2 10698					 ;  IKForth
2 10699					 ;
2 10700					 ;  Copyright (C) 1999-2003 Illya Kysil
2 10701					 ;
2 10702					 ;******************************************************************************
2 10703					 ;  Parsing
2 10704					 ;******************************************************************************
2 10705
2 10706					 ;  6.1.0560 >IN
2 10707								 $USER	 '>IN',$TOIN
3 10708								 $DEF	 '>IN',$TOIN,$DOUSER
4 10709	00002432			 ??0373:
4 10710		  =MAIN:2432		 LASTWORD		 =	 ??0373
4 10711								 IFNB	 <>
4 10712								   DB
4 10713								 ELSE
4 10714	00002432  00						   DB	 VEF_USUAL
4 10715								 ENDIF
4 10716	00002433  03						 DB	 ??0374	- $ - 1
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 189
FKernel.asm



4 10717	00002434  3E 49	4E					 DB	 '>IN'
4 10718	00002437			 ??0374:
4 10719	00002437  05						 DB	 ??0374	- ??0373
4 10720	00002438  200023AF					 DD	 VOC_LINK
4 10721		  =MAIN:20002432	 VOC_LINK		 =	 ??0373	+ DESIRED_BASE_EQU
4 10722
4 10723								 IFNB	 <$TOIN>
4 10724	0000243C						   LABEL   $TOIN FAR
4 10725								 ENDIF
4 10726								 IFNB	 <$DOUSER>
4 10727	0000243C  2000012A					   DD	   $DOUSER + DESIRED_BASE_EQU
4 10728								 ELSE
4 10729								   DD	   ??0376 + DESIRED_BASE_EQU
4 10730								 ENDIF
4 10731	00002440			 ??0376:
2 10732								 CC	 TOIN_VAR
3 10733	00002440  00000020					 DD	 TOIN_VAR
2 10734
2 10735					 ;  (WORD)
2 10736								 $DEF	 '(WORD)',$PWORD
3 10737	00002444			 ??0377:
3 10738		  =MAIN:2444		 LASTWORD		 =	 ??0377
3 10739								 IFNB	 <>
3 10740								   DB
3 10741								 ELSE
3 10742	00002444  00						   DB	 VEF_USUAL
3 10743								 ENDIF
3 10744	00002445  06						 DB	 ??0378	- $ - 1
3 10745	00002446  28 57	4F 52 44 29				 DB	 '(WORD)'
3 10746	0000244C			 ??0378:
3 10747	0000244C  08						 DB	 ??0378	- ??0377
3 10748	0000244D  20002432					 DD	 VOC_LINK
3 10749		  =MAIN:20002444	 VOC_LINK		 =	 ??0377	+ DESIRED_BASE_EQU
3 10750
3 10751								 IFNB	 <$PWORD>
3 10752	00002451						   LABEL   $PWORD FAR
3 10753								 ENDIF
3 10754								 IFNB	 <>
3 10755								   DD	    + DESIRED_BASE_EQU
3 10756								 ELSE
3 10757	00002451  20002455					   DD	   ??037A + DESIRED_BASE_EQU
3 10758								 ENDIF
3 10759	00002455			 ??037A:
2 10760								 PUSHRS	 ESI
3 10761	00002455  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10762	00002458  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2 10763								 PUSHRS	 EDI
3 10764	0000245B  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10765	0000245E  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2 10766	00002461  8B C7						 MOV	 EAX,EDI
2 10767	00002463  83 C0	20					 ADD	 EAX,TOIN_VAR
2 10768								 POPDS	 EDI			 ; dest	address
3 10769	00002466  5F						 POP	 EDI
2 10770								 PUSHRS	 EDI
3 10771	00002467  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10772	0000246A  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2 10773	0000246D  47						 INC	 EDI
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 190
FKernel.asm



2 10774								 POPDS	 ECX			 ; count
3 10775	0000246E  59						 POP	 ECX
2 10776								 POPDS	 ESI			 ; source address
3 10777	0000246F  5E						 POP	 ESI
2 10778								 POPDS	 EDX			 ; DL -	char
3 10779	00002470  5A						 POP	 EDX
2 10780								 PUSHDS	 EBP
3 10781	00002471  55						 PUSH	 EBP
2 10782	00002472  8B E8						 MOV	 EBP,EAX
2 10783	00002474  33 DB						 XOR	 EBX,EBX
2 10784	00002476  32 E4						 XOR	 AH,AH			 ; in word flag
2 10785	00002478			 PWORD_LOOP:
2 10786	00002478  49						 DEC	 ECX
2 10787	00002479  78 26						 JS	 SHORT PWORD_EXIT
2 10788	0000247B  AC						 LODSB
2 10789	0000247C  FF 45	00					 INC	 [DWORD	PTR EBP]	 ; inc >IN
2 10790	0000247F  0A C0						 OR	 AL,AL
2 10791	00002481  74 1E						 JZ	 SHORT PWORD_EXIT
2 10792	00002483  0A E4						 OR	 AH,AH
2 10793	00002485  74 12						 JZ	 SHORT PWORD_NOT_IN_WORD
2 10794	00002487  3A C2						 CMP	 AL,DL
2 10795	00002489  74 16						 JZ	 SHORT PWORD_EXIT
2 10796	0000248B  3C 20						 CMP	 AL,32
2 10797	0000248D  7F 05						 JG	 SHORT PWORD_ADDCHAR
2 10798	0000248F  80 FA	20					 CMP	 DL,32
2 10799	00002492  74 0D						 JZ	 SHORT PWORD_EXIT
2 10800	00002494			 PWORD_ADDCHAR:
2 10801	00002494  AA						 STOSB
2 10802	00002495  FE C3						 INC	 BL
2 10803	00002497  EB DF						 JMP	 SHORT PWORD_LOOP
2 10804	00002499			 PWORD_NOT_IN_WORD:
2 10805	00002499  3C 20						 CMP	 AL,32
2 10806	0000249B  7E DB						 JLE	 SHORT PWORD_LOOP
2 10807	0000249D  B4 01						 MOV	 AH,1
2 10808	0000249F  EB F3						 JMP	 SHORT PWORD_ADDCHAR
2 10809	000024A1			 PWORD_EXIT:
2 10810								 POPDS	 EBP
3 10811	000024A1  5D						 POP	 EBP
2 10812	000024A2  C6 07	20					 MOV	 [BYTE PTR EDI],32	 ; store space
2 10813								 POPRS	 EDI
3 10814	000024A5  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3 10815	000024A8  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10816								 PUSHDS	 EDI
3 10817	000024AB  57						 PUSH	 EDI
2 10818	000024AC  88 1F						 MOV	 [BYTE PTR EDI],BL	 ; store length
2 10819								 POPRS	 EDI
3 10820	000024AE  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3 10821	000024B1  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10822								 POPRS	 ESI
3 10823	000024B4  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 10824	000024B7  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10825								 $NEXT
3 10826	000024BA  AD						 LODSD				 ; fetch address
3 10827								 $JMP
4 10828	000024BB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10829	000024BD  FF E3						 JMP	 EBX			 ; execute
2 10830
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 191
FKernel.asm



2 10831					 ;  6.1.2450 WORD
2 10832								 $COLON	 'WORD',$WORD
3 10833								 $DEF	 'WORD',$WORD,$ENTER,
4 10834	000024BF			 ??037B:
4 10835		  =MAIN:24BF		 LASTWORD		 =	 ??037B
4 10836								 IFNB	 <>
4 10837								   DB
4 10838								 ELSE
4 10839	000024BF  00						   DB	 VEF_USUAL
4 10840								 ENDIF
4 10841	000024C0  04						 DB	 ??037C	- $ - 1
4 10842	000024C1  57 4F	52 44					 DB	 'WORD'
4 10843	000024C5			 ??037C:
4 10844	000024C5  06						 DB	 ??037C	- ??037B
4 10845	000024C6  20002444					 DD	 VOC_LINK
4 10846		  =MAIN:200024BF	 VOC_LINK		 =	 ??037B	+ DESIRED_BASE_EQU
4 10847
4 10848								 IFNB	 <$WORD>
4 10849	000024CA						   LABEL   $WORD FAR
4 10850								 ENDIF
4 10851								 IFNB	 <$ENTER>
4 10852	000024CA  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 10853								 ELSE
4 10854								   DD	   ??037E + DESIRED_BASE_EQU
4 10855								 ENDIF
4 10856	000024CE			 ??037E:
2 10857								 CW	 $SOURCE		 ; c c-addr u
3 10858	000024CE  20000A9C					 DD	 $SOURCE + DESIRED_BASE_EQU
2 10859								 CFETCH	 $TOIN
3 10860								 CW	 $TOIN
4 10861	000024D2  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3 10862								 CW	 $FETCH
4 10863	000024D6  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 10864								 CW	 $SUB
3 10865	000024DA  20001C35					 DD	 $SUB +	DESIRED_BASE_EQU
2 10866								 CW	 $SWAP			 ; c u c-addr
3 10867	000024DE  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 10868								 CFETCH	 $TOIN			 ; c u c-addr offset
3 10869								 CW	 $TOIN
4 10870	000024E2  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3 10871								 CW	 $FETCH
4 10872	000024E6  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 10873								 CW	 $ADD			 ; c u c-addr
3 10874	000024EA  20001C1F					 DD	 $ADD +	DESIRED_BASE_EQU
2 10875								 CW	 $SWAP			 ; c c-addr u
3 10876	000024EE  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 10877								 CW	 $POCKET		 ; c c-addr u dest-addr
3 10878	000024F2  200002FE					 DD	 $POCKET + DESIRED_BASE_EQU
2 10879								 CW	 $PWORD
3 10880	000024F6  20002451					 DD	 $PWORD	+ DESIRED_BASE_EQU
2 10881								 CEXIT
3 10882								 CW	 $EXIT
4 10883	000024FA  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 10884
2 10885					 ;  (PARSE)
2 10886								 $DEF	 '(PARSE)',$PPARSE
3 10887	000024FE			 ??037F:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 192
FKernel.asm



3 10888		  =MAIN:24FE		 LASTWORD		 =	 ??037F
3 10889								 IFNB	 <>
3 10890								   DB
3 10891								 ELSE
3 10892	000024FE  00						   DB	 VEF_USUAL
3 10893								 ENDIF
3 10894	000024FF  07						 DB	 ??0380	- $ - 1
3 10895	00002500  28 50	41 52 53 45 29				 DB	 '(PARSE)'
3 10896	00002507			 ??0380:
3 10897	00002507  09						 DB	 ??0380	- ??037F
3 10898	00002508  200024BF					 DD	 VOC_LINK
3 10899		  =MAIN:200024FE	 VOC_LINK		 =	 ??037F	+ DESIRED_BASE_EQU
3 10900
3 10901								 IFNB	 <$PPARSE>
3 10902	0000250C						   LABEL   $PPARSE FAR
3 10903								 ENDIF
3 10904								 IFNB	 <>
3 10905								   DD	    + DESIRED_BASE_EQU
3 10906								 ELSE
3 10907	0000250C  20002510					   DD	   ??0382 + DESIRED_BASE_EQU
3 10908								 ENDIF
3 10909	00002510			 ??0382:
2 10910								 PUSHRS	 ESI
3 10911	00002510  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10912	00002513  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2 10913								 POPDS	 ECX			 ; count
3 10914	00002516  59						 POP	 ECX
2 10915								 POPDS	 ESI			 ; source address
3 10916	00002517  5E						 POP	 ESI
2 10917								 POPDS	 EDX			 ; DL -	char
3 10918	00002518  5A						 POP	 EDX
2 10919								 PUSHDS	 ESI			 ; result
3 10920	00002519  56						 PUSH	 ESI
2 10921	0000251A  33 DB						 XOR	 EBX,EBX
2 10922	0000251C			 PPARSE_LOOP:
2 10923	0000251C  49						 DEC	 ECX
2 10924	0000251D  78 0F						 JS	 SHORT PPARSE_EXIT
2 10925	0000251F  AC						 LODSB
2 10926	00002520  FF 47	20					 INC	 [DWORD	PTR EDI	+ TOIN_VAR]
2 10927	00002523  0A C0						 OR	 AL,AL
2 10928	00002525  74 07						 JZ	 SHORT PPARSE_EXIT
2 10929	00002527  3A C2						 CMP	 AL,DL
2 10930	00002529  74 03						 JZ	 SHORT PPARSE_EXIT
2 10931	0000252B  43						 INC	 EBX
2 10932	0000252C  EB EE						 JMP	 SHORT PPARSE_LOOP
2 10933	0000252E			 PPARSE_EXIT:
2 10934								 PUSHDS	 EBX
3 10935	0000252E  53						 PUSH	 EBX
2 10936								 POPRS	 ESI
3 10937	0000252F  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 10938	00002532  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10939								 $NEXT
3 10940	00002535  AD						 LODSD				 ; fetch address
3 10941								 $JMP
4 10942	00002536  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10943	00002538  FF E3						 JMP	 EBX			 ; execute
2 10944
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 193
FKernel.asm



2 10945					 ;  6.2.2008 PARSE
2 10946								 $COLON	 'PARSE',$PARSE
3 10947								 $DEF	 'PARSE',$PARSE,$ENTER,
4 10948	0000253A			 ??0383:
4 10949		  =MAIN:253A		 LASTWORD		 =	 ??0383
4 10950								 IFNB	 <>
4 10951								   DB
4 10952								 ELSE
4 10953	0000253A  00						   DB	 VEF_USUAL
4 10954								 ENDIF
4 10955	0000253B  05						 DB	 ??0384	- $ - 1
4 10956	0000253C  50 41	52 53 45				 DB	 'PARSE'
4 10957	00002541			 ??0384:
4 10958	00002541  07						 DB	 ??0384	- ??0383
4 10959	00002542  200024FE					 DD	 VOC_LINK
4 10960		  =MAIN:2000253A	 VOC_LINK		 =	 ??0383	+ DESIRED_BASE_EQU
4 10961
4 10962								 IFNB	 <$PARSE>
4 10963	00002546						   LABEL   $PARSE FAR
4 10964								 ENDIF
4 10965								 IFNB	 <$ENTER>
4 10966	00002546  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 10967								 ELSE
4 10968								   DD	   ??0386 + DESIRED_BASE_EQU
4 10969								 ENDIF
4 10970	0000254A			 ??0386:
2 10971								 CW	 $SOURCE		 ; c c-addr u
3 10972	0000254A  20000A9C					 DD	 $SOURCE + DESIRED_BASE_EQU
2 10973								 CFETCH	 $TOIN
3 10974								 CW	 $TOIN
4 10975	0000254E  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3 10976								 CW	 $FETCH
4 10977	00002552  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 10978								 CW	 $SUB
3 10979	00002556  20001C35					 DD	 $SUB +	DESIRED_BASE_EQU
2 10980								 CW	 $SWAP			 ; c u c-addr
3 10981	0000255A  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 10982								 CFETCH	 $TOIN			 ; c u c-addr offset
3 10983								 CW	 $TOIN
4 10984	0000255E  2000243C					 DD	 $TOIN + DESIRED_BASE_EQU
3 10985								 CW	 $FETCH
4 10986	00002562  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 10987								 CW	 $ADD			 ; c u c-addr
3 10988	00002566  20001C1F					 DD	 $ADD +	DESIRED_BASE_EQU
2 10989								 CW	 $SWAP			 ; c c-addr u
3 10990	0000256A  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 10991								 CW	 $PPARSE		 ; c-addr u
3 10992	0000256E  2000250C					 DD	 $PPARSE + DESIRED_BASE_EQU
2 10993								 CEXIT
3 10994								 CW	 $EXIT
4 10995	00002572  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 10996
2 10997					 ;  (S")
2 10998					 ;  -- c-addr count
2 10999								 $COLON	 '(S")',$PSQUOTE
3 11000								 $DEF	 '(S")',$PSQUOTE,$ENTER,
4 11001	00002576			 ??0387:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 194
FKernel.asm



4 11002		  =MAIN:2576		 LASTWORD		 =	 ??0387
4 11003								 IFNB	 <>
4 11004								   DB
4 11005								 ELSE
4 11006	00002576  00						   DB	 VEF_USUAL
4 11007								 ENDIF
4 11008	00002577  04						 DB	 ??0388	- $ - 1
4 11009	00002578  28 53	22 29					 DB	 '(S")'
4 11010	0000257C			 ??0388:
4 11011	0000257C  06						 DB	 ??0388	- ??0387
4 11012	0000257D  2000253A					 DD	 VOC_LINK
4 11013		  =MAIN:20002576	 VOC_LINK		 =	 ??0387	+ DESIRED_BASE_EQU
4 11014
4 11015								 IFNB	 <$PSQUOTE>
4 11016	00002581						   LABEL   $PSQUOTE FAR
4 11017								 ENDIF
4 11018								 IFNB	 <$ENTER>
4 11019	00002581  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11020								 ELSE
4 11021								   DD	   ??038A + DESIRED_BASE_EQU
4 11022								 ENDIF
4 11023	00002585			 ??038A:
2 11024								 CW	 $RFROM
3 11025	00002585  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 11026								 CW	 $DUP
3 11027	00002589  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2 11028								 CW	 $FETCH
3 11029	0000258D  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 11030								 CW	 $SWAP
3 11031	00002591  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 11032								 CW	 $CELLADD
3 11033	00002595  20002040					 DD	 $CELLADD + DESIRED_BASE_EQU
2 11034								 CW	 $2DUP
3 11035	00002599  200018F1					 DD	 $2DUP + DESIRED_BASE_EQU
2 11036								 CW	 $ADD
3 11037	0000259D  20001C1F					 DD	 $ADD +	DESIRED_BASE_EQU
2 11038								 CW	 $TOR
3 11039	000025A1  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2 11040								 CW	 $SWAP
3 11041	000025A5  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 11042								 CEXIT
3 11043								 CW	 $EXIT
4 11044	000025A9  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11045
2 11046					 ;  S"-COMP
2 11047								 $COLON	 'S"-COMP',$SQ_COMP
3 11048								 $DEF	 'S"-COMP',$SQ_COMP,$ENTER,
4 11049	000025AD			 ??038B:
4 11050		  =MAIN:25AD		 LASTWORD		 =	 ??038B
4 11051								 IFNB	 <>
4 11052								   DB
4 11053								 ELSE
4 11054	000025AD  00						   DB	 VEF_USUAL
4 11055								 ENDIF
4 11056	000025AE  07						 DB	 ??038C	- $ - 1
4 11057	000025AF  53 22	2D 43 4F 4D 50				 DB	 'S"-COMP'
4 11058	000025B6			 ??038C:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 195
FKernel.asm



4 11059	000025B6  09						 DB	 ??038C	- ??038B
4 11060	000025B7  20002576					 DD	 VOC_LINK
4 11061		  =MAIN:200025AD	 VOC_LINK		 =	 ??038B	+ DESIRED_BASE_EQU
4 11062
4 11063								 IFNB	 <$SQ_COMP>
4 11064	000025BB						   LABEL   $SQ_COMP FAR
4 11065								 ENDIF
4 11066								 IFNB	 <$ENTER>
4 11067	000025BB  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11068								 ELSE
4 11069								   DD	   ??038E + DESIRED_BASE_EQU
4 11070								 ENDIF
4 11071	000025BF			 ??038E:
2 11072								 CCLIT	 '"'
3 11073								 CW	 $LIT
4 11074	000025BF  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3 11075								 CC	 '"'
4 11076	000025C3  00000022					 DD	 '"'
2 11077								 CW	 $PARSE
3 11078	000025C7  20002546					 DD	 $PARSE	+ DESIRED_BASE_EQU
2 11079								 CWLIT	 $PSQUOTE
3 11080								 CW	 $LIT
4 11081	000025CB  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3 11082								 CW	 $PSQUOTE
4 11083	000025CF  20002581					 DD	 $PSQUOTE + DESIRED_BASE_EQU
2 11084								 CW	 $COMPILEC
3 11085	000025D3  20002695					 DD	 $COMPILEC + DESIRED_BASE_EQU
2 11086								 CW	 $DUP
3 11087	000025D7  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
2 11088								 CW	 $COMMA
3 11089	000025DB  2000266D					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 11090								 CW	 $HERE
3 11091	000025DF  20002775					 DD	 $HERE + DESIRED_BASE_EQU
2 11092								 CW	 $OVER
3 11093	000025E3  2000198C					 DD	 $OVER + DESIRED_BASE_EQU
2 11094								 CW	 $ALLOT
3 11095	000025E7  200026AD					 DD	 $ALLOT	+ DESIRED_BASE_EQU
2 11096								 CW	 $SWAP
3 11097	000025EB  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 11098								 CW	 $CMOVE
3 11099	000025EF  20002791					 DD	 $CMOVE	+ DESIRED_BASE_EQU
2 11100								 CEXIT
3 11101								 CW	 $EXIT
4 11102	000025F3  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11103
2 11104					 ;  S"-INT
2 11105								 $COLON	 'S"-INT',$SQ_INT
3 11106								 $DEF	 'S"-INT',$SQ_INT,$ENTER,
4 11107	000025F7			 ??038F:
4 11108		  =MAIN:25F7		 LASTWORD		 =	 ??038F
4 11109								 IFNB	 <>
4 11110								   DB
4 11111								 ELSE
4 11112	000025F7  00						   DB	 VEF_USUAL
4 11113								 ENDIF
4 11114	000025F8  06						 DB	 ??0390	- $ - 1
4 11115	000025F9  53 22	2D 49 4E 54				 DB	 'S"-INT'
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 196
FKernel.asm



4 11116	000025FF			 ??0390:
4 11117	000025FF  08						 DB	 ??0390	- ??038F
4 11118	00002600  200025AD					 DD	 VOC_LINK
4 11119		  =MAIN:200025F7	 VOC_LINK		 =	 ??038F	+ DESIRED_BASE_EQU
4 11120
4 11121								 IFNB	 <$SQ_INT>
4 11122	00002604						   LABEL   $SQ_INT FAR
4 11123								 ENDIF
4 11124								 IFNB	 <$ENTER>
4 11125	00002604  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11126								 ELSE
4 11127								   DD	   ??0392 + DESIRED_BASE_EQU
4 11128								 ENDIF
4 11129	00002608			 ??0392:
2 11130								 CCLIT	 '"'
3 11131								 CW	 $LIT
4 11132	00002608  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3 11133								 CC	 '"'
4 11134	0000260C  00000022					 DD	 '"'
2 11135								 CW	 $PARSE
3 11136	00002610  20002546					 DD	 $PARSE	+ DESIRED_BASE_EQU
2 11137								 CW	 $2DUP
3 11138	00002614  200018F1					 DD	 $2DUP + DESIRED_BASE_EQU
2 11139								 CW	 $SQUOTE_BUFFER
3 11140	00002618  200002E9					 DD	 $SQUOTE_BUFFER	+ DESIRED_BASE_EQU
2 11141								 CW	 $SWAP
3 11142	0000261C  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 11143								 CW	 $CMOVE
3 11144	00002620  20002791					 DD	 $CMOVE	+ DESIRED_BASE_EQU
2 11145								 CW	 $NIP
3 11146	00002624  20001975					 DD	 $NIP +	DESIRED_BASE_EQU
2 11147								 CW	 $SQUOTE_BUFFER
3 11148	00002628  200002E9					 DD	 $SQUOTE_BUFFER	+ DESIRED_BASE_EQU
2 11149								 CW	 $SWAP
3 11150	0000262C  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 11151								 CEXIT
3 11152								 CW	 $EXIT
4 11153	00002630  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11154
2 11155					 ;     6.1.2165	S"
2 11156					 ;  11.6.1.2165	S"
2 11157								 $DEF	 'S"',$SQUOTE,$PDO_INT_COMP,VEF_IMMEDIATE
3 11158	00002634			 ??0393:
3 11159		  =MAIN:2634		 LASTWORD		 =	 ??0393
3 11160								 IFNB	 <VEF_IMMEDIATE>
3 11161	00002634  01						   DB	 VEF_IMMEDIATE
3 11162								 ELSE
3 11163								   DB	 VEF_USUAL
3 11164								 ENDIF
3 11165	00002635  02						 DB	 ??0394	- $ - 1
3 11166	00002636  53 22						 DB	 'S"'
3 11167	00002638			 ??0394:
3 11168	00002638  04						 DB	 ??0394	- ??0393
3 11169	00002639  200025F7					 DD	 VOC_LINK
3 11170		  =MAIN:20002634	 VOC_LINK		 =	 ??0393	+ DESIRED_BASE_EQU
3 11171
3 11172								 IFNB	 <$SQUOTE>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 197
FKernel.asm



3 11173	0000263D						   LABEL   $SQUOTE FAR
3 11174								 ENDIF
3 11175								 IFNB	 <$PDO_INT_COMP>
3 11176	0000263D  20000169					   DD	   $PDO_INT_COMP + DESIRED_BASE_EQU
3 11177								 ELSE
3 11178								   DD	   ??0396 + DESIRED_BASE_EQU
3 11179								 ENDIF
3 11180	00002641			 ??0396:
2 11181								 CW	 $SQ_INT
3 11182	00002641  20002604					 DD	 $SQ_INT + DESIRED_BASE_EQU
2 11183								 CW	 $SQ_COMP
3 11184	00002645  200025BB					 DD	 $SQ_COMP + DESIRED_BASE_EQU
2 11185
2 11186					 ;  \
2 11187					 ;			  $COLON  '\',$BSLASH,VEF_IMMEDIATE
2 11188					 ;			  CFETCH  $BLK
2 11189					 ;			  CW	  $ZEROGR
2 11190					 ;			  CQBR	  BS_NOTBLOCK
2 11191					 ;			    CFETCH  $TOIN
2 11192					 ;			    CCLIT   63
2 11193					 ;			    CW	    $INVERT
2 11194					 ;			    CW	    $AND
2 11195					 ;			    CCLIT   64
2 11196					 ;			    CW	    $ADD
2 11197					 ;			  CBR	  BS_EXIT
2 11198					 ;BS_NOTBLOCK:
2 11199					 ;			    CW	    $SOURCE
2 11200					 ;			    CW	    $NIP
2 11201					 ;BS_EXIT:
2 11202					 ;			  CSTORE  $TOIN
2 11203					 ;			  CEXIT
2 11204
2 11205					 ;  \
2 11206								 $COLON	 '\',$BSLASH,VEF_IMMEDIATE
3 11207								 $DEF	 '\',$BSLASH,$ENTER,VEF_IMMEDIATE
4 11208	00002649			 ??0397:
4 11209		  =MAIN:2649		 LASTWORD		 =	 ??0397
4 11210								 IFNB	 <VEF_IMMEDIATE>
4 11211	00002649  01						   DB	 VEF_IMMEDIATE
4 11212								 ELSE
4 11213								   DB	 VEF_USUAL
4 11214								 ENDIF
4 11215	0000264A  01						 DB	 ??0398	- $ - 1
4 11216	0000264B  5C						 DB	 '\'
4 11217	0000264C			 ??0398:
4 11218	0000264C  03						 DB	 ??0398	- ??0397
4 11219	0000264D  20002634					 DD	 VOC_LINK
4 11220		  =MAIN:20002649	 VOC_LINK		 =	 ??0397	+ DESIRED_BASE_EQU
4 11221
4 11222								 IFNB	 <$BSLASH>
4 11223	00002651						   LABEL   $BSLASH FAR
4 11224								 ENDIF
4 11225								 IFNB	 <$ENTER>
4 11226	00002651  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11227								 ELSE
4 11228								   DD	   ??039A + DESIRED_BASE_EQU
4 11229								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 198
FKernel.asm



4 11230	00002655			 ??039A:
2 11231								 CW	 $ZERO
3 11232	00002655  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2 11233								 CW	 $PARSE
3 11234	00002659  20002546					 DD	 $PARSE	+ DESIRED_BASE_EQU
2 11235								 CW	 $2DROP
3 11236	0000265D  200018DB					 DD	 $2DROP	+ DESIRED_BASE_EQU
2 11237								 CEXIT
3 11238								 CW	 $EXIT
4 11239	00002661  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11240
1 11241								 INCLUDE "data.inc"
2 11242					 ;******************************************************************************
2 11243					 ;
2 11244					 ;  data.inc
2 11245					 ;  IKForth
2 11246					 ;
2 11247					 ;  Copyright (C) 1999-2003 Illya Kysil
2 11248					 ;
2 11249					 ;******************************************************************************
2 11250					 ;  Data space
2 11251					 ;******************************************************************************
2 11252
2 11253					 ;  6.1.0150 ,
2 11254					 ;  Reserve one	cell of	data space and store x in the cell
2 11255					 ;  D: x --
2 11256								 $DEF	 ',',$COMMA
3 11257	00002665			 ??039B:
3 11258		  =MAIN:2665		 LASTWORD		 =	 ??039B
3 11259								 IFNB	 <>
3 11260								   DB
3 11261								 ELSE
3 11262	00002665  00						   DB	 VEF_USUAL
3 11263								 ENDIF
3 11264	00002666  01						 DB	 ??039C	- $ - 1
3 11265	00002667  2C						 DB	 ','
3 11266	00002668			 ??039C:
3 11267	00002668  03						 DB	 ??039C	- ??039B
3 11268	00002669  20002649					 DD	 VOC_LINK
3 11269		  =MAIN:20002665	 VOC_LINK		 =	 ??039B	+ DESIRED_BASE_EQU
3 11270
3 11271								 IFNB	 <$COMMA>
3 11272	0000266D						   LABEL   $COMMA FAR
3 11273								 ENDIF
3 11274								 IFNB	 <>
3 11275								   DD	    + DESIRED_BASE_EQU
3 11276								 ELSE
3 11277	0000266D  20002671					   DD	   ??039E + DESIRED_BASE_EQU
3 11278								 ENDIF
3 11279	00002671			 ??039E:
2 11280								 POPDS	 EAX
3 11281	00002671  58						 POP	 EAX
2 11282	00002672  8B 1D	20000386				 MOV	 EBX,[DWORD PTR	DP_VAR + DESIRED_BASE_EQU]
2 11283	00002678  89 03						 MOV	 [DWORD	PTR EBX],EAX
2 11284	0000267A  83 05	20000386 04				 ADD	 [DWORD	PTR DP_VAR + DESIRED_BASE_EQU],CELL_SIZE
2 11285								 $NEXT
3 11286	00002681  AD						 LODSD				 ; fetch address
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 199
FKernel.asm



3 11287								 $JMP
4 11288	00002682  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11289	00002684  FF E3						 JMP	 EBX			 ; execute
2 11290
2 11291					 ;  COMPILE,
2 11292								 $COLON	 'COMPILE,',$COMPILEC,<VEF_COMPILE_ONLY>
3 11293								 $DEF	 'COMPILE,',$COMPILEC,$ENTER,VEF_COMPILE_ONLY
4 11294	00002686			 ??039F:
4 11295		  =MAIN:2686		 LASTWORD		 =	 ??039F
4 11296								 IFNB	 <VEF_COMPILE_ONLY>
4 11297	00002686  04						   DB	 VEF_COMPILE_ONLY
4 11298								 ELSE
4 11299								   DB	 VEF_USUAL
4 11300								 ENDIF
4 11301	00002687  08						 DB	 ??03A0	- $ - 1
4 11302	00002688  43 4F	4D 50 49 4C 45+				 DB	 'COMPILE,'
  11303		  2C
4 11304	00002690			 ??03A0:
4 11305	00002690  0A						 DB	 ??03A0	- ??039F
4 11306	00002691  20002665					 DD	 VOC_LINK
4 11307		  =MAIN:20002686	 VOC_LINK		 =	 ??039F	+ DESIRED_BASE_EQU
4 11308
4 11309								 IFNB	 <$COMPILEC>
4 11310	00002695						   LABEL   $COMPILEC FAR
4 11311								 ENDIF
4 11312								 IFNB	 <$ENTER>
4 11313	00002695  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11314								 ELSE
4 11315								   DD	   ??03A2 + DESIRED_BASE_EQU
4 11316								 ENDIF
4 11317	00002699			 ??03A2:
2 11318								 CW	 $COMMA
3 11319	00002699  2000266D					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 11320								 CEXIT
3 11321								 CW	 $EXIT
4 11322	0000269D  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11323
2 11324					 ;  6.1.0710 ALLOT
2 11325					 ;  Allocates n	memory cells on	the top	of vocabulary
2 11326					 ;  D: n --
2 11327								 $DEF	 'ALLOT',$ALLOT
3 11328	000026A1			 ??03A3:
3 11329		  =MAIN:26A1		 LASTWORD		 =	 ??03A3
3 11330								 IFNB	 <>
3 11331								   DB
3 11332								 ELSE
3 11333	000026A1  00						   DB	 VEF_USUAL
3 11334								 ENDIF
3 11335	000026A2  05						 DB	 ??03A4	- $ - 1
3 11336	000026A3  41 4C	4C 4F 54				 DB	 'ALLOT'
3 11337	000026A8			 ??03A4:
3 11338	000026A8  07						 DB	 ??03A4	- ??03A3
3 11339	000026A9  20002686					 DD	 VOC_LINK
3 11340		  =MAIN:200026A1	 VOC_LINK		 =	 ??03A3	+ DESIRED_BASE_EQU
3 11341
3 11342								 IFNB	 <$ALLOT>
3 11343	000026AD						   LABEL   $ALLOT FAR
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 200
FKernel.asm



3 11344								 ENDIF
3 11345								 IFNB	 <>
3 11346								   DD	    + DESIRED_BASE_EQU
3 11347								 ELSE
3 11348	000026AD  200026B1					   DD	   ??03A6 + DESIRED_BASE_EQU
3 11349								 ENDIF
3 11350	000026B1			 ??03A6:
2 11351								 POPDS	 EAX
3 11352	000026B1  58						 POP	 EAX
2 11353	000026B2  01 05	20000386				 ADD	 [DWORD	PTR DP_VAR + DESIRED_BASE_EQU],EAX
2 11354								 $NEXT
3 11355	000026B8  AD						 LODSD				 ; fetch address
3 11356								 $JMP
4 11357	000026B9  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11358	000026BB  FF E3						 JMP	 EBX			 ; execute
2 11359
2 11360					 ;  6.1.0860 C,
2 11361					 ;  Reserve one	character of data space	and store x in the cell
2 11362					 ;  D: x --
2 11363								 $DEF	 'C,',$CCOMMA
3 11364	000026BD			 ??03A7:
3 11365		  =MAIN:26BD		 LASTWORD		 =	 ??03A7
3 11366								 IFNB	 <>
3 11367								   DB
3 11368								 ELSE
3 11369	000026BD  00						   DB	 VEF_USUAL
3 11370								 ENDIF
3 11371	000026BE  02						 DB	 ??03A8	- $ - 1
3 11372	000026BF  43 2C						 DB	 'C,'
3 11373	000026C1			 ??03A8:
3 11374	000026C1  04						 DB	 ??03A8	- ??03A7
3 11375	000026C2  200026A1					 DD	 VOC_LINK
3 11376		  =MAIN:200026BD	 VOC_LINK		 =	 ??03A7	+ DESIRED_BASE_EQU
3 11377
3 11378								 IFNB	 <$CCOMMA>
3 11379	000026C6						   LABEL   $CCOMMA FAR
3 11380								 ENDIF
3 11381								 IFNB	 <>
3 11382								   DD	    + DESIRED_BASE_EQU
3 11383								 ELSE
3 11384	000026C6  200026CA					   DD	   ??03AA + DESIRED_BASE_EQU
3 11385								 ENDIF
3 11386	000026CA			 ??03AA:
2 11387								 POPDS	 EAX
3 11388	000026CA  58						 POP	 EAX
2 11389	000026CB  8B 1D	20000386				 MOV	 EBX,[DWORD PTR	DP_VAR + DESIRED_BASE_EQU]
2 11390	000026D1  88 03						 MOV	 [BYTE PTR EBX],AL
2 11391	000026D3  FF 05	20000386				 INC	 [DWORD	PTR DP_VAR + DESIRED_BASE_EQU]
2 11392								 $NEXT
3 11393	000026D9  AD						 LODSD				 ; fetch address
3 11394								 $JMP
4 11395	000026DA  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11396	000026DC  FF E3						 JMP	 EBX			 ; execute
2 11397
2 11398					 ;  (;)
2 11399								 $DEF	 '(;)',$EXIT,,VEF_COMPILE_ONLY
3 11400	000026DE			 ??03AB:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 201
FKernel.asm



3 11401		  =MAIN:26DE		 LASTWORD		 =	 ??03AB
3 11402								 IFNB	 <VEF_COMPILE_ONLY>
3 11403	000026DE  04						   DB	 VEF_COMPILE_ONLY
3 11404								 ELSE
3 11405								   DB	 VEF_USUAL
3 11406								 ENDIF
3 11407	000026DF  03						 DB	 ??03AC	- $ - 1
3 11408	000026E0  28 3B	29					 DB	 '(;)'
3 11409	000026E3			 ??03AC:
3 11410	000026E3  05						 DB	 ??03AC	- ??03AB
3 11411	000026E4  200026BD					 DD	 VOC_LINK
3 11412		  =MAIN:200026DE	 VOC_LINK		 =	 ??03AB	+ DESIRED_BASE_EQU
3 11413
3 11414								 IFNB	 <$EXIT>
3 11415	000026E8						   LABEL   $EXIT FAR
3 11416								 ENDIF
3 11417								 IFNB	 <>
3 11418								   DD	    + DESIRED_BASE_EQU
3 11419								 ELSE
3 11420	000026E8  200026EC					   DD	   ??03AE + DESIRED_BASE_EQU
3 11421								 ENDIF
3 11422	000026EC			 ??03AE:
2 11423								 POPRS	 ESI			 ; pop previous	IP from	return stack
3 11424	000026EC  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 11425	000026EF  83 C5	04					 ADD	 EBP,CELL_SIZE
2 11426								 $NEXT
3 11427	000026F2  AD						 LODSD				 ; fetch address
3 11428								 $JMP
4 11429	000026F3  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11430	000026F5  FF E3						 JMP	 EBX			 ; execute
2 11431
2 11432					 ;  6.1.1380 EXIT
2 11433								 $DEF	 'EXIT',,,VEF_COMPILE_ONLY
3 11434	000026F7			 ??03AF:
3 11435		  =MAIN:26F7		 LASTWORD		 =	 ??03AF
3 11436								 IFNB	 <VEF_COMPILE_ONLY>
3 11437	000026F7  04						   DB	 VEF_COMPILE_ONLY
3 11438								 ELSE
3 11439								   DB	 VEF_USUAL
3 11440								 ENDIF
3 11441	000026F8  04						 DB	 ??03B0	- $ - 1
3 11442	000026F9  45 58	49 54					 DB	 'EXIT'
3 11443	000026FD			 ??03B0:
3 11444	000026FD  06						 DB	 ??03B0	- ??03AF
3 11445	000026FE  200026DE					 DD	 VOC_LINK
3 11446		  =MAIN:200026F7	 VOC_LINK		 =	 ??03AF	+ DESIRED_BASE_EQU
3 11447
3 11448								 IFNB	 <>
3 11449								   LABEL    FAR
3 11450								 ENDIF
3 11451								 IFNB	 <>
3 11452								   DD	    + DESIRED_BASE_EQU
3 11453								 ELSE
3 11454	00002702  20002706					   DD	   ??03B2 + DESIRED_BASE_EQU
3 11455								 ENDIF
3 11456	00002706			 ??03B2:
2 11457								 POPRS	 ESI			 ; pop previous	IP from	return stack
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 202
FKernel.asm



3 11458	00002706  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 11459	00002709  83 C5	04					 ADD	 EBP,CELL_SIZE
2 11460								 $NEXT
3 11461	0000270C  AD						 LODSD				 ; fetch address
3 11462								 $JMP
4 11463	0000270D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11464	0000270F  FF E3						 JMP	 EBX			 ; execute
2 11465
2 11466					 ;  6.1.0950 CONSTANT
2 11467								 $COLON	 'CONSTANT',$CONSTANT
3 11468								 $DEF	 'CONSTANT',$CONSTANT,$ENTER,
4 11469	00002711			 ??03B3:
4 11470		  =MAIN:2711		 LASTWORD		 =	 ??03B3
4 11471								 IFNB	 <>
4 11472								   DB
4 11473								 ELSE
4 11474	00002711  00						   DB	 VEF_USUAL
4 11475								 ENDIF
4 11476	00002712  08						 DB	 ??03B4	- $ - 1
4 11477	00002713  43 4F	4E 53 54 41 4E+				 DB	 'CONSTANT'
  11478		  54
4 11479	0000271B			 ??03B4:
4 11480	0000271B  0A						 DB	 ??03B4	- ??03B3
4 11481	0000271C  200026F7					 DD	 VOC_LINK
4 11482		  =MAIN:20002711	 VOC_LINK		 =	 ??03B3	+ DESIRED_BASE_EQU
4 11483
4 11484								 IFNB	 <$CONSTANT>
4 11485	00002720						   LABEL   $CONSTANT FAR
4 11486								 ENDIF
4 11487								 IFNB	 <$ENTER>
4 11488	00002720  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11489								 ELSE
4 11490								   DD	   ??03B6 + DESIRED_BASE_EQU
4 11491								 ENDIF
4 11492	00002724			 ??03B6:
2 11493								 CWLIT	 $DOCONST
3 11494								 CW	 $LIT
4 11495	00002724  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3 11496								 CW	 $DOCONST
4 11497	00002728  2000010E					 DD	 $DOCONST + DESIRED_BASE_EQU
2 11498								 CCLIT	 VEF_USUAL
3 11499								 CW	 $LIT
4 11500	0000272C  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3 11501								 CC	 VEF_USUAL
4 11502	00002730  00000000					 DD	 VEF_USUAL
2 11503								 CW	 $PARSE_CHECK_HEADERC
3 11504	00002734  20001676					 DD	 $PARSE_CHECK_HEADERC +	DESIRED_BASE_EQU
2 11505								 CW	 $DROP
3 11506	00002738  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2 11507								 CW	 $COMMA
3 11508	0000273C  2000266D					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 11509								 CEXIT
3 11510								 CW	 $EXIT
4 11511	00002740  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11512
2 11513					 ;  6.1.1780 LITERAL
2 11514								 $COLON	 'LITERAL',$LITERAL,<VEF_IMMEDIATE OR VEF_COMPILE_ONLY>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 203
FKernel.asm



3 11515								 $DEF	 'LITERAL',$LITERAL,$ENTER,VEF_IMMEDIATE OR VEF_COMPILE_ONLY
4 11516	00002744			 ??03B7:
4 11517		  =MAIN:2744		 LASTWORD		 =	 ??03B7
4 11518								 IFNB	 <VEF_IMMEDIATE>
4 11519	00002744  01						   DB	 VEF_IMMEDIATE
4 11520								 ELSE
4 11521								   DB	 VEF_USUAL
4 11522								 ENDIF
4 11523	00002745  07						 DB	 ??03B8	- $ - 1
4 11524	00002746  4C 49	54 45 52 41 4C				 DB	 'LITERAL'
4 11525	0000274D			 ??03B8:
4 11526	0000274D  09						 DB	 ??03B8	- ??03B7
4 11527	0000274E  20002711					 DD	 VOC_LINK
4 11528		  =MAIN:20002744	 VOC_LINK		 =	 ??03B7	+ DESIRED_BASE_EQU
4 11529
4 11530								 IFNB	 <$LITERAL>
4 11531	00002752						   LABEL   $LITERAL FAR
4 11532								 ENDIF
4 11533								 IFNB	 <$ENTER>
4 11534	00002752  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11535								 ELSE
4 11536								   DD	   ??03BA + DESIRED_BASE_EQU
4 11537								 ENDIF
4 11538	00002756			 ??03BA:
2 11539								 CWLIT	 $LIT
3 11540								 CW	 $LIT
4 11541	00002756  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3 11542								 CW	 $LIT
4 11543	0000275A  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
2 11544								 CW	 $COMPILEC
3 11545	0000275E  20002695					 DD	 $COMPILEC + DESIRED_BASE_EQU
2 11546								 CW	 $COMMA
3 11547	00002762  2000266D					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 11548								 CEXIT
3 11549								 CW	 $EXIT
4 11550	00002766  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11551
2 11552					 ;  6.1.1650 HERE
2 11553					 ;  addr is the	data-space pointer.
2 11554					 ;  D: -- addr
2 11555								 $COLON	 'HERE',$HERE
3 11556								 $DEF	 'HERE',$HERE,$ENTER,
4 11557	0000276A			 ??03BB:
4 11558		  =MAIN:276A		 LASTWORD		 =	 ??03BB
4 11559								 IFNB	 <>
4 11560								   DB
4 11561								 ELSE
4 11562	0000276A  00						   DB	 VEF_USUAL
4 11563								 ENDIF
4 11564	0000276B  04						 DB	 ??03BC	- $ - 1
4 11565	0000276C  48 45	52 45					 DB	 'HERE'
4 11566	00002770			 ??03BC:
4 11567	00002770  06						 DB	 ??03BC	- ??03BB
4 11568	00002771  20002744					 DD	 VOC_LINK
4 11569		  =MAIN:2000276A	 VOC_LINK		 =	 ??03BB	+ DESIRED_BASE_EQU
4 11570
4 11571								 IFNB	 <$HERE>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 204
FKernel.asm



4 11572	00002775						   LABEL   $HERE FAR
4 11573								 ENDIF
4 11574								 IFNB	 <$ENTER>
4 11575	00002775  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11576								 ELSE
4 11577								   DD	   ??03BE + DESIRED_BASE_EQU
4 11578								 ENDIF
4 11579	00002779			 ??03BE:
2 11580								 CFETCH	 $DP
3 11581								 CW	 $DP
4 11582	00002779  20000382					 DD	 $DP + DESIRED_BASE_EQU
3 11583								 CW	 $FETCH
4 11584	0000277D  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 11585								 CEXIT
3 11586								 CW	 $EXIT
4 11587	00002781  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11588
1 11589								 INCLUDE "string.inc"
2 11590					 ;******************************************************************************
2 11591					 ;
2 11592					 ;  string.inc
2 11593					 ;  IKForth
2 11594					 ;
2 11595					 ;  Copyright (C) 1999-2003 Illya Kysil
2 11596					 ;
2 11597					 ;******************************************************************************
2 11598					 ;  String words
2 11599					 ;******************************************************************************
2 11600
2 11601					 ;  17.6.1.0910	CMOVE
2 11602					 ;  D: c-addr1 c-addr2 u --
2 11603					 ;  If u is greater than zero, copy u consecutive characters from the data space
2 11604					 ;  starting at	c-addr1	to that	starting at c-addr2, proceeding	character-by-character
2 11605					 ;  from lower addresses to higher addresses.
2 11606								 $DEF	 'CMOVE',$CMOVE
3 11607	00002785			 ??03BF:
3 11608		  =MAIN:2785		 LASTWORD		 =	 ??03BF
3 11609								 IFNB	 <>
3 11610								   DB
3 11611								 ELSE
3 11612	00002785  00						   DB	 VEF_USUAL
3 11613								 ENDIF
3 11614	00002786  05						 DB	 ??03C0	- $ - 1
3 11615	00002787  43 4D	4F 56 45				 DB	 'CMOVE'
3 11616	0000278C			 ??03C0:
3 11617	0000278C  07						 DB	 ??03C0	- ??03BF
3 11618	0000278D  2000276A					 DD	 VOC_LINK
3 11619		  =MAIN:20002785	 VOC_LINK		 =	 ??03BF	+ DESIRED_BASE_EQU
3 11620
3 11621								 IFNB	 <$CMOVE>
3 11622	00002791						   LABEL   $CMOVE FAR
3 11623								 ENDIF
3 11624								 IFNB	 <>
3 11625								   DD	    + DESIRED_BASE_EQU
3 11626								 ELSE
3 11627	00002791  20002795					   DD	   ??03C2 + DESIRED_BASE_EQU
3 11628								 ENDIF
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 205
FKernel.asm



3 11629	00002795			 ??03C2:
2 11630								 PUSHRS	 EDI
3 11631	00002795  83 ED	04					 SUB	 EBP,CELL_SIZE
3 11632	00002798  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2 11633								 PUSHRS	 ESI
3 11634	0000279B  83 ED	04					 SUB	 EBP,CELL_SIZE
3 11635	0000279E  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2 11636								 POPDS	 ECX
3 11637	000027A1  59						 POP	 ECX
2 11638								 POPDS	 EDI
3 11639	000027A2  5F						 POP	 EDI
2 11640								 POPDS	 ESI
3 11641	000027A3  5E						 POP	 ESI
2 11642	000027A4  0B C9						 OR	 ECX,ECX
2 11643	000027A6  74 03						 JZ	 SHORT CMOVE_EXIT
2 11644	000027A8  FC						 CLD
2 11645	000027A9  F3> A4				     REP MOVSB
2 11646	000027AB			 CMOVE_EXIT:
2 11647								 POPRS	 ESI
3 11648	000027AB  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 11649	000027AE  83 C5	04					 ADD	 EBP,CELL_SIZE
2 11650								 POPRS	 EDI
3 11651	000027B1  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3 11652	000027B4  83 C5	04					 ADD	 EBP,CELL_SIZE
2 11653								 $NEXT
3 11654	000027B7  AD						 LODSD				 ; fetch address
3 11655								 $JMP
4 11656	000027B8  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11657	000027BA  FF E3						 JMP	 EBX			 ; execute
2 11658
2 11659					 ;  17.6.1.0920	CMOVE>
2 11660					 ;  D: c-addr1 c-addr2 u --
2 11661					 ;  If u is greater than zero, copy u consecutive characters from the data space
2 11662					 ;  starting at	c-addr1	to that	starting at c-addr2, proceeding	character-by-character
2 11663					 ;  from higher	addresses to lower addresses.
2 11664								 $DEF	 'CMOVE>',$CMOVEGR
3 11665	000027BC			 ??03C3:
3 11666		  =MAIN:27BC		 LASTWORD		 =	 ??03C3
3 11667								 IFNB	 <>
3 11668								   DB
3 11669								 ELSE
3 11670	000027BC  00						   DB	 VEF_USUAL
3 11671								 ENDIF
3 11672	000027BD  06						 DB	 ??03C4	- $ - 1
3 11673	000027BE  43 4D	4F 56 45 3E				 DB	 'CMOVE>'
3 11674	000027C4			 ??03C4:
3 11675	000027C4  08						 DB	 ??03C4	- ??03C3
3 11676	000027C5  20002785					 DD	 VOC_LINK
3 11677		  =MAIN:200027BC	 VOC_LINK		 =	 ??03C3	+ DESIRED_BASE_EQU
3 11678
3 11679								 IFNB	 <$CMOVEGR>
3 11680	000027C9						   LABEL   $CMOVEGR FAR
3 11681								 ENDIF
3 11682								 IFNB	 <>
3 11683								   DD	    + DESIRED_BASE_EQU
3 11684								 ELSE
3 11685	000027C9  200027CD					   DD	   ??03C6 + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 206
FKernel.asm



3 11686								 ENDIF
3 11687	000027CD			 ??03C6:
2 11688								 PUSHRS	 EDI
3 11689	000027CD  83 ED	04					 SUB	 EBP,CELL_SIZE
3 11690	000027D0  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2 11691								 PUSHRS	 ESI
3 11692	000027D3  83 ED	04					 SUB	 EBP,CELL_SIZE
3 11693	000027D6  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2 11694								 POPDS	 ECX
3 11695	000027D9  59						 POP	 ECX
2 11696								 POPDS	 EDI
3 11697	000027DA  5F						 POP	 EDI
2 11698	000027DB  03 F9						 ADD	 EDI,ECX
2 11699	000027DD  4F						 DEC	 EDI
2 11700								 POPDS	 ESI
3 11701	000027DE  5E						 POP	 ESI
2 11702	000027DF  03 F1						 ADD	 ESI,ECX
2 11703	000027E1  4E						 DEC	 ESI
2 11704	000027E2  0B C9						 OR	 ECX,ECX
2 11705	000027E4  76 04						 JBE	 SHORT CMOVEGR_EXIT
2 11706	000027E6  FD						 STD
2 11707	000027E7  F3> A4				     REP MOVSB
2 11708	000027E9  FC						 CLD
2 11709	000027EA			 CMOVEGR_EXIT:
2 11710								 POPRS	 ESI
3 11711	000027EA  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 11712	000027ED  83 C5	04					 ADD	 EBP,CELL_SIZE
2 11713								 POPRS	 EDI
3 11714	000027F0  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3 11715	000027F3  83 C5	04					 ADD	 EBP,CELL_SIZE
2 11716								 $NEXT
3 11717	000027F6  AD						 LODSD				 ; fetch address
3 11718								 $JMP
4 11719	000027F7  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11720	000027F9  FF E3						 JMP	 EBX			 ; execute
2 11721
2 11722					 ;  6.1.0980 COUNT
2 11723								 $DEF	 'COUNT',$COUNT
3 11724	000027FB			 ??03C7:
3 11725		  =MAIN:27FB		 LASTWORD		 =	 ??03C7
3 11726								 IFNB	 <>
3 11727								   DB
3 11728								 ELSE
3 11729	000027FB  00						   DB	 VEF_USUAL
3 11730								 ENDIF
3 11731	000027FC  05						 DB	 ??03C8	- $ - 1
3 11732	000027FD  43 4F	55 4E 54				 DB	 'COUNT'
3 11733	00002802			 ??03C8:
3 11734	00002802  07						 DB	 ??03C8	- ??03C7
3 11735	00002803  200027BC					 DD	 VOC_LINK
3 11736		  =MAIN:200027FB	 VOC_LINK		 =	 ??03C7	+ DESIRED_BASE_EQU
3 11737
3 11738								 IFNB	 <$COUNT>
3 11739	00002807						   LABEL   $COUNT FAR
3 11740								 ENDIF
3 11741								 IFNB	 <>
3 11742								   DD	    + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 207
FKernel.asm



3 11743								 ELSE
3 11744	00002807  2000280B					   DD	   ??03CA + DESIRED_BASE_EQU
3 11745								 ENDIF
3 11746	0000280B			 ??03CA:
2 11747								 POPDS	 EBX
3 11748	0000280B  5B						 POP	 EBX
2 11749	0000280C  0F B6	03					 MOVZX	 EAX,[BYTE PTR EBX]
2 11750	0000280F  43						 INC	 EBX
2 11751								 PUSHDS	 EBX
3 11752	00002810  53						 PUSH	 EBX
2 11753								 PUSHDS	 EAX
3 11754	00002811  50						 PUSH	 EAX
2 11755								 $NEXT
3 11756	00002812  AD						 LODSD				 ; fetch address
3 11757								 $JMP
4 11758	00002813  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11759	00002815  FF E3						 JMP	 EBX			 ; execute
2 11760
2 11761
1 11762								 INCLUDE "double.inc"
2 11763					 ;******************************************************************************
2 11764					 ;
2 11765					 ;  double.inc
2 11766					 ;  IKForth
2 11767					 ;
2 11768					 ;  Copyright (C) 1999-2003 Illya Kysil
2 11769					 ;
2 11770					 ;******************************************************************************
2 11771					 ;  Double number words
2 11772					 ;******************************************************************************
2 11773
2 11774					 ;  8.6.1.0390 2LITERAL
2 11775								 $COLON	 '2LITERAL',$2LITERAL,<VEF_IMMEDIATE OR	VEF_COMPILE_ONLY>
3 11776								 $DEF	 '2LITERAL',$2LITERAL,$ENTER,VEF_IMMEDIATE OR		    +
  11777					 VEF_COMPILE_ONLY
4 11778	00002817			 ??03CB:
4 11779		  =MAIN:2817		 LASTWORD		 =	 ??03CB
4 11780								 IFNB	 <VEF_IMMEDIATE>
4 11781	00002817  01						   DB	 VEF_IMMEDIATE
4 11782								 ELSE
4 11783								   DB	 VEF_USUAL
4 11784								 ENDIF
4 11785	00002818  08						 DB	 ??03CC	- $ - 1
4 11786	00002819  32 4C	49 54 45 52 41+				 DB	 '2LITERAL'
  11787		  4C
4 11788	00002821			 ??03CC:
4 11789	00002821  0A						 DB	 ??03CC	- ??03CB
4 11790	00002822  200027FB					 DD	 VOC_LINK
4 11791		  =MAIN:20002817	 VOC_LINK		 =	 ??03CB	+ DESIRED_BASE_EQU
4 11792
4 11793								 IFNB	 <$2LITERAL>
4 11794	00002826						   LABEL   $2LITERAL FAR
4 11795								 ENDIF
4 11796								 IFNB	 <$ENTER>
4 11797	00002826  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 11798								 ELSE
4 11799								   DD	   ??03CE + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 208
FKernel.asm



4 11800								 ENDIF
4 11801	0000282A			 ??03CE:
2 11802								 CWLIT	 $2LIT
3 11803								 CW	 $LIT
4 11804	0000282A  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3 11805								 CW	 $2LIT
4 11806	0000282E  20000088					 DD	 $2LIT + DESIRED_BASE_EQU
2 11807								 CW	 $COMPILEC
3 11808	00002832  20002695					 DD	 $COMPILEC + DESIRED_BASE_EQU
2 11809								 CW	 $SWAP
3 11810	00002836  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 11811								 CW	 $COMMA
3 11812	0000283A  2000266D					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 11813								 CW	 $COMMA
3 11814	0000283E  2000266D					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 11815								 CEXIT
3 11816								 CW	 $EXIT
4 11817	00002842  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 11818
2 11819					 ;  8.6.1.1040 D+
2 11820					 ;  ( d1|ud1 d2|ud2 -- d3|ud3 )
2 11821					 ;  Add	d2|ud2 to d1|ud1, giving the sum d3|ud3.
2 11822								 $DEF	 'D+',$DADD
3 11823	00002846			 ??03CF:
3 11824		  =MAIN:2846		 LASTWORD		 =	 ??03CF
3 11825								 IFNB	 <>
3 11826								   DB
3 11827								 ELSE
3 11828	00002846  00						   DB	 VEF_USUAL
3 11829								 ENDIF
3 11830	00002847  02						 DB	 ??03D0	- $ - 1
3 11831	00002848  44 2B						 DB	 'D+'
3 11832	0000284A			 ??03D0:
3 11833	0000284A  04						 DB	 ??03D0	- ??03CF
3 11834	0000284B  20002817					 DD	 VOC_LINK
3 11835		  =MAIN:20002846	 VOC_LINK		 =	 ??03CF	+ DESIRED_BASE_EQU
3 11836
3 11837								 IFNB	 <$DADD>
3 11838	0000284F						   LABEL   $DADD FAR
3 11839								 ENDIF
3 11840								 IFNB	 <>
3 11841								   DD	    + DESIRED_BASE_EQU
3 11842								 ELSE
3 11843	0000284F  20002853					   DD	   ??03D2 + DESIRED_BASE_EQU
3 11844								 ENDIF
3 11845	00002853			 ??03D2:
2 11846								 POPDS	 ECX
3 11847	00002853  59						 POP	 ECX
2 11848								 POPDS	 EBX
3 11849	00002854  5B						 POP	 EBX
2 11850								 POPDS	 EDX
3 11851	00002855  5A						 POP	 EDX
2 11852								 POPDS	 EAX
3 11853	00002856  58						 POP	 EAX
2 11854	00002857  03 C3						 ADD	 EAX,EBX
2 11855	00002859  13 D1						 ADC	 EDX,ECX
2 11856								 PUSHDS	 EAX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 209
FKernel.asm



3 11857	0000285B  50						 PUSH	 EAX
2 11858								 PUSHDS	 EDX
3 11859	0000285C  52						 PUSH	 EDX
2 11860								 $NEXT
3 11861	0000285D  AD						 LODSD				 ; fetch address
3 11862								 $JMP
4 11863	0000285E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11864	00002860  FF E3						 JMP	 EBX			 ; execute
2 11865
2 11866					 ;  8.6.1.1050 D-
2 11867					 ;  ( d1|ud1 d2|ud2 -- d3|ud3 )
2 11868					 ;  Subtract d2|ud2 from d1|ud1, giving	the difference d3|ud3.
2 11869								 $DEF	 'D-',$DSUB
3 11870	00002862			 ??03D3:
3 11871		  =MAIN:2862		 LASTWORD		 =	 ??03D3
3 11872								 IFNB	 <>
3 11873								   DB
3 11874								 ELSE
3 11875	00002862  00						   DB	 VEF_USUAL
3 11876								 ENDIF
3 11877	00002863  02						 DB	 ??03D4	- $ - 1
3 11878	00002864  44 2D						 DB	 'D-'
3 11879	00002866			 ??03D4:
3 11880	00002866  04						 DB	 ??03D4	- ??03D3
3 11881	00002867  20002846					 DD	 VOC_LINK
3 11882		  =MAIN:20002862	 VOC_LINK		 =	 ??03D3	+ DESIRED_BASE_EQU
3 11883
3 11884								 IFNB	 <$DSUB>
3 11885	0000286B						   LABEL   $DSUB FAR
3 11886								 ENDIF
3 11887								 IFNB	 <>
3 11888								   DD	    + DESIRED_BASE_EQU
3 11889								 ELSE
3 11890	0000286B  2000286F					   DD	   ??03D6 + DESIRED_BASE_EQU
3 11891								 ENDIF
3 11892	0000286F			 ??03D6:
2 11893								 POPDS	 ECX
3 11894	0000286F  59						 POP	 ECX
2 11895								 POPDS	 EBX
3 11896	00002870  5B						 POP	 EBX
2 11897								 POPDS	 EDX
3 11898	00002871  5A						 POP	 EDX
2 11899								 POPDS	 EAX
3 11900	00002872  58						 POP	 EAX
2 11901	00002873  2B C3						 SUB	 EAX,EBX
2 11902	00002875  1B D1						 SBB	 EDX,ECX
2 11903								 PUSHDS	 EAX
3 11904	00002877  50						 PUSH	 EAX
2 11905								 PUSHDS	 EDX
3 11906	00002878  52						 PUSH	 EDX
2 11907								 $NEXT
3 11908	00002879  AD						 LODSD				 ; fetch address
3 11909								 $JMP
4 11910	0000287A  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11911	0000287C  FF E3						 JMP	 EBX			 ; execute
2 11912
2 11913					 ;  8.6.1.1090 D2*
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 210
FKernel.asm



2 11914					 ;  ( xd1 -- xd2 )
2 11915					 ;  xd2	is the result of shifting xd1 one bit toward the most-significant bit,
2 11916					 ;  filling the	vacated	least-significant bit with zero.
2 11917								 $DEF	 'D2*',$D2MUL
3 11918	0000287E			 ??03D7:
3 11919		  =MAIN:287E		 LASTWORD		 =	 ??03D7
3 11920								 IFNB	 <>
3 11921								   DB
3 11922								 ELSE
3 11923	0000287E  00						   DB	 VEF_USUAL
3 11924								 ENDIF
3 11925	0000287F  03						 DB	 ??03D8	- $ - 1
3 11926	00002880  44 32	2A					 DB	 'D2*'
3 11927	00002883			 ??03D8:
3 11928	00002883  05						 DB	 ??03D8	- ??03D7
3 11929	00002884  20002862					 DD	 VOC_LINK
3 11930		  =MAIN:2000287E	 VOC_LINK		 =	 ??03D7	+ DESIRED_BASE_EQU
3 11931
3 11932								 IFNB	 <$D2MUL>
3 11933	00002888						   LABEL   $D2MUL FAR
3 11934								 ENDIF
3 11935								 IFNB	 <>
3 11936								   DD	    + DESIRED_BASE_EQU
3 11937								 ELSE
3 11938	00002888  2000288C					   DD	   ??03DA + DESIRED_BASE_EQU
3 11939								 ENDIF
3 11940	0000288C			 ??03DA:
2 11941								 POPDS	 EDX
3 11942	0000288C  5A						 POP	 EDX
2 11943								 POPDS	 EAX
3 11944	0000288D  58						 POP	 EAX
2 11945	0000288E  D1 E0						 SAL	 EAX,1
2 11946	00002890  D1 D2						 RCL	 EDX,1
2 11947								 PUSHDS	 EAX
3 11948	00002892  50						 PUSH	 EAX
2 11949								 PUSHDS	 EDX
3 11950	00002893  52						 PUSH	 EDX
2 11951								 $NEXT
3 11952	00002894  AD						 LODSD				 ; fetch address
3 11953								 $JMP
4 11954	00002895  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11955	00002897  FF E3						 JMP	 EBX			 ; execute
2 11956
2 11957					 ;  8.6.1.1100 D2/
2 11958					 ;  ( xd1 -- xd2 )
2 11959					 ;  xd2	is the result of shifting xd1 one bit toward the least-significant bit,
2 11960					 ;  leaving the	most-significant bit unchanged.
2 11961								 $DEF	 'D2/',$D2DIV
3 11962	00002899			 ??03DB:
3 11963		  =MAIN:2899		 LASTWORD		 =	 ??03DB
3 11964								 IFNB	 <>
3 11965								   DB
3 11966								 ELSE
3 11967	00002899  00						   DB	 VEF_USUAL
3 11968								 ENDIF
3 11969	0000289A  03						 DB	 ??03DC	- $ - 1
3 11970	0000289B  44 32	2F					 DB	 'D2/'
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 211
FKernel.asm



3 11971	0000289E			 ??03DC:
3 11972	0000289E  05						 DB	 ??03DC	- ??03DB
3 11973	0000289F  2000287E					 DD	 VOC_LINK
3 11974		  =MAIN:20002899	 VOC_LINK		 =	 ??03DB	+ DESIRED_BASE_EQU
3 11975
3 11976								 IFNB	 <$D2DIV>
3 11977	000028A3						   LABEL   $D2DIV FAR
3 11978								 ENDIF
3 11979								 IFNB	 <>
3 11980								   DD	    + DESIRED_BASE_EQU
3 11981								 ELSE
3 11982	000028A3  200028A7					   DD	   ??03DE + DESIRED_BASE_EQU
3 11983								 ENDIF
3 11984	000028A7			 ??03DE:
2 11985								 POPDS	 EDX
3 11986	000028A7  5A						 POP	 EDX
2 11987								 POPDS	 EAX
3 11988	000028A8  58						 POP	 EAX
2 11989	000028A9  D1 FA						 SAR	 EDX,1
2 11990	000028AB  D1 D8						 RCR	 EAX,1
2 11991								 PUSHDS	 EAX
3 11992	000028AD  50						 PUSH	 EAX
2 11993								 PUSHDS	 EDX
3 11994	000028AE  52						 PUSH	 EDX
2 11995								 $NEXT
3 11996	000028AF  AD						 LODSD				 ; fetch address
3 11997								 $JMP
4 11998	000028B0  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11999	000028B2  FF E3						 JMP	 EBX			 ; execute
2 12000
2 12001					 ;  8.6.1.1160 DABS
2 12002					 ;  ( d	-- ud )
2 12003					 ;  ud is the absolute value of	d.
2 12004								 $DEF	 'DABS',$DABS
3 12005	000028B4			 ??03DF:
3 12006		  =MAIN:28B4		 LASTWORD		 =	 ??03DF
3 12007								 IFNB	 <>
3 12008								   DB
3 12009								 ELSE
3 12010	000028B4  00						   DB	 VEF_USUAL
3 12011								 ENDIF
3 12012	000028B5  04						 DB	 ??03E0	- $ - 1
3 12013	000028B6  44 41	42 53					 DB	 'DABS'
3 12014	000028BA			 ??03E0:
3 12015	000028BA  06						 DB	 ??03E0	- ??03DF
3 12016	000028BB  20002899					 DD	 VOC_LINK
3 12017		  =MAIN:200028B4	 VOC_LINK		 =	 ??03DF	+ DESIRED_BASE_EQU
3 12018
3 12019								 IFNB	 <$DABS>
3 12020	000028BF						   LABEL   $DABS FAR
3 12021								 ENDIF
3 12022								 IFNB	 <>
3 12023								   DD	    + DESIRED_BASE_EQU
3 12024								 ELSE
3 12025	000028BF  200028C3					   DD	   ??03E2 + DESIRED_BASE_EQU
3 12026								 ENDIF
3 12027	000028C3			 ??03E2:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 212
FKernel.asm



2 12028								 POPDS	 EDX
3 12029	000028C3  5A						 POP	 EDX
2 12030								 POPDS	 EAX
3 12031	000028C4  58						 POP	 EAX
2 12032	000028C5  0B D2						 OR	 EDX,EDX
2 12033	000028C7  79 0A						 JNS	 SHORT DABS_OK
2 12034	000028C9  83 E8	01					 SUB	 EAX,1
2 12035	000028CC  83 DA	00					 SBB	 EDX,0
2 12036	000028CF  F7 D0						 NOT	 EAX
2 12037	000028D1  F7 D2						 NOT	 EDX
2 12038	000028D3			 DABS_OK:
2 12039								 PUSHDS	 EAX
3 12040	000028D3  50						 PUSH	 EAX
2 12041								 PUSHDS	 EDX
3 12042	000028D4  52						 PUSH	 EDX
2 12043								 $NEXT
3 12044	000028D5  AD						 LODSD				 ; fetch address
3 12045								 $JMP
4 12046	000028D6  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 12047	000028D8  FF E3						 JMP	 EBX			 ; execute
2 12048
2 12049					 ;  8.6.1.1210 DMAX
2 12050					 ;  ( d1 d2 -- d3 )
2 12051					 ;  d3 is the greater of d1 and	d2.
2 12052								 $DEF	 'DMAX',$DMAX
3 12053	000028DA			 ??03E3:
3 12054		  =MAIN:28DA		 LASTWORD		 =	 ??03E3
3 12055								 IFNB	 <>
3 12056								   DB
3 12057								 ELSE
3 12058	000028DA  00						   DB	 VEF_USUAL
3 12059								 ENDIF
3 12060	000028DB  04						 DB	 ??03E4	- $ - 1
3 12061	000028DC  44 4D	41 58					 DB	 'DMAX'
3 12062	000028E0			 ??03E4:
3 12063	000028E0  06						 DB	 ??03E4	- ??03E3
3 12064	000028E1  200028B4					 DD	 VOC_LINK
3 12065		  =MAIN:200028DA	 VOC_LINK		 =	 ??03E3	+ DESIRED_BASE_EQU
3 12066
3 12067								 IFNB	 <$DMAX>
3 12068	000028E5						   LABEL   $DMAX FAR
3 12069								 ENDIF
3 12070								 IFNB	 <>
3 12071								   DD	    + DESIRED_BASE_EQU
3 12072								 ELSE
3 12073	000028E5  200028E9					   DD	   ??03E6 + DESIRED_BASE_EQU
3 12074								 ENDIF
3 12075	000028E9			 ??03E6:
2 12076								 POPDS	 EDX
3 12077	000028E9  5A						 POP	 EDX
2 12078								 POPDS	 EAX
3 12079	000028EA  58						 POP	 EAX
2 12080								 POPDS	 ECX
3 12081	000028EB  59						 POP	 ECX
2 12082								 POPDS	 EBX
3 12083	000028EC  5B						 POP	 EBX
2 12084	000028ED  3B D1						 CMP	 EDX,ECX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 213
FKernel.asm



2 12085	000028EF  7F 08						 JG	 SHORT DMAX_OK
2 12086	000028F1  3B C3						 CMP	 EAX,EBX
2 12087	000028F3  7F 04						 JG	 SHORT DMAX_OK
2 12088	000028F5  8B C3						 MOV	 EAX,EBX
2 12089	000028F7  8B D1						 MOV	 EDX,ECX
2 12090	000028F9			 DMAX_OK:
2 12091								 PUSHDS	 EAX
3 12092	000028F9  50						 PUSH	 EAX
2 12093								 PUSHDS	 EDX
3 12094	000028FA  52						 PUSH	 EDX
2 12095								 $NEXT
3 12096	000028FB  AD						 LODSD				 ; fetch address
3 12097								 $JMP
4 12098	000028FC  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 12099	000028FE  FF E3						 JMP	 EBX			 ; execute
2 12100
2 12101					 ;  8.6.1.1220 DMIN
2 12102					 ;  ( d1 d2 -- d3 )
2 12103					 ;  d3 is the greater of d1 and	d2.
2 12104								 $DEF	 'DMIN',$DMIN
3 12105	00002900			 ??03E7:
3 12106		  =MAIN:2900		 LASTWORD		 =	 ??03E7
3 12107								 IFNB	 <>
3 12108								   DB
3 12109								 ELSE
3 12110	00002900  00						   DB	 VEF_USUAL
3 12111								 ENDIF
3 12112	00002901  04						 DB	 ??03E8	- $ - 1
3 12113	00002902  44 4D	49 4E					 DB	 'DMIN'
3 12114	00002906			 ??03E8:
3 12115	00002906  06						 DB	 ??03E8	- ??03E7
3 12116	00002907  200028DA					 DD	 VOC_LINK
3 12117		  =MAIN:20002900	 VOC_LINK		 =	 ??03E7	+ DESIRED_BASE_EQU
3 12118
3 12119								 IFNB	 <$DMIN>
3 12120	0000290B						   LABEL   $DMIN FAR
3 12121								 ENDIF
3 12122								 IFNB	 <>
3 12123								   DD	    + DESIRED_BASE_EQU
3 12124								 ELSE
3 12125	0000290B  2000290F					   DD	   ??03EA + DESIRED_BASE_EQU
3 12126								 ENDIF
3 12127	0000290F			 ??03EA:
2 12128								 POPDS	 EDX
3 12129	0000290F  5A						 POP	 EDX
2 12130								 POPDS	 EAX
3 12131	00002910  58						 POP	 EAX
2 12132								 POPDS	 ECX
3 12133	00002911  59						 POP	 ECX
2 12134								 POPDS	 EBX
3 12135	00002912  5B						 POP	 EBX
2 12136	00002913  3B D1						 CMP	 EDX,ECX
2 12137	00002915  7C 08						 JL	 SHORT DMIN_OK
2 12138	00002917  3B C3						 CMP	 EAX,EBX
2 12139	00002919  7C 04						 JL	 SHORT DMIN_OK
2 12140	0000291B  8B C3						 MOV	 EAX,EBX
2 12141	0000291D  8B D1						 MOV	 EDX,ECX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 214
FKernel.asm



2 12142	0000291F			 DMIN_OK:
2 12143								 PUSHDS	 EAX
3 12144	0000291F  50						 PUSH	 EAX
2 12145								 PUSHDS	 EDX
3 12146	00002920  52						 PUSH	 EDX
2 12147								 $NEXT
3 12148	00002921  AD						 LODSD				 ; fetch address
3 12149								 $JMP
4 12150	00002922  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 12151	00002924  FF E3						 JMP	 EBX			 ; execute
2 12152
2 12153					 ;  8.6.1.1230 DNEGATE
2 12154					 ;  ( d1 -- d2 )
2 12155					 ;  d2 is the negation of d1.
2 12156								 $DEF	 'DNEGATE',$DNEGATE
3 12157	00002926			 ??03EB:
3 12158		  =MAIN:2926		 LASTWORD		 =	 ??03EB
3 12159								 IFNB	 <>
3 12160								   DB
3 12161								 ELSE
3 12162	00002926  00						   DB	 VEF_USUAL
3 12163								 ENDIF
3 12164	00002927  07						 DB	 ??03EC	- $ - 1
3 12165	00002928  44 4E	45 47 41 54 45				 DB	 'DNEGATE'
3 12166	0000292F			 ??03EC:
3 12167	0000292F  09						 DB	 ??03EC	- ??03EB
3 12168	00002930  20002900					 DD	 VOC_LINK
3 12169		  =MAIN:20002926	 VOC_LINK		 =	 ??03EB	+ DESIRED_BASE_EQU
3 12170
3 12171								 IFNB	 <$DNEGATE>
3 12172	00002934						   LABEL   $DNEGATE FAR
3 12173								 ENDIF
3 12174								 IFNB	 <>
3 12175								   DD	    + DESIRED_BASE_EQU
3 12176								 ELSE
3 12177	00002934  20002938					   DD	   ??03EE + DESIRED_BASE_EQU
3 12178								 ENDIF
3 12179	00002938			 ??03EE:
2 12180								 POPDS	 EDX
3 12181	00002938  5A						 POP	 EDX
2 12182								 POPDS	 EAX
3 12183	00002939  58						 POP	 EAX
2 12184	0000293A  83 E8	01					 SUB	 EAX,1
2 12185	0000293D  83 DA	00					 SBB	 EDX,0
2 12186	00002940  F7 D0						 NOT	 EAX
2 12187	00002942  F7 D2						 NOT	 EDX
2 12188								 PUSHDS	 EAX
3 12189	00002944  50						 PUSH	 EAX
2 12190								 PUSHDS	 EDX
3 12191	00002945  52						 PUSH	 EDX
2 12192								 $NEXT
3 12193	00002946  AD						 LODSD				 ; fetch address
3 12194								 $JMP
4 12195	00002947  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 12196	00002949  FF E3						 JMP	 EBX			 ; execute
2 12197
2 12198					 ;  8.6.1.1830 M+
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 215
FKernel.asm



2 12199					 ;  ( d1|ud1 n -- d2|ud2 )
2 12200					 ;  Add	n to d1|ud1, giving the	sum d2|ud2.
2 12201								 $DEF	 'M+',$MADD
3 12202	0000294B			 ??03EF:
3 12203		  =MAIN:294B		 LASTWORD		 =	 ??03EF
3 12204								 IFNB	 <>
3 12205								   DB
3 12206								 ELSE
3 12207	0000294B  00						   DB	 VEF_USUAL
3 12208								 ENDIF
3 12209	0000294C  02						 DB	 ??03F0	- $ - 1
3 12210	0000294D  4D 2B						 DB	 'M+'
3 12211	0000294F			 ??03F0:
3 12212	0000294F  04						 DB	 ??03F0	- ??03EF
3 12213	00002950  20002926					 DD	 VOC_LINK
3 12214		  =MAIN:2000294B	 VOC_LINK		 =	 ??03EF	+ DESIRED_BASE_EQU
3 12215
3 12216								 IFNB	 <$MADD>
3 12217	00002954						   LABEL   $MADD FAR
3 12218								 ENDIF
3 12219								 IFNB	 <>
3 12220								   DD	    + DESIRED_BASE_EQU
3 12221								 ELSE
3 12222	00002954  20002958					   DD	   ??03F2 + DESIRED_BASE_EQU
3 12223								 ENDIF
3 12224	00002958			 ??03F2:
2 12225								 POPDS	 EBX
3 12226	00002958  5B						 POP	 EBX
2 12227								 POPDS	 EDX
3 12228	00002959  5A						 POP	 EDX
2 12229								 POPDS	 EAX
3 12230	0000295A  58						 POP	 EAX
2 12231	0000295B  03 C3						 ADD	 EAX,EBX
2 12232	0000295D  83 D2	00					 ADC	 EDX,0
2 12233								 PUSHDS	 EAX
3 12234	00002960  50						 PUSH	 EAX
2 12235								 PUSHDS	 EDX
3 12236	00002961  52						 PUSH	 EDX
2 12237								 $NEXT
3 12238	00002962  AD						 LODSD				 ; fetch address
3 12239								 $JMP
4 12240	00002963  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 12241	00002965  FF E3						 JMP	 EBX			 ; execute
2 12242
2 12243
1 12244								 INCLUDE "convert.inc"
2 12245					 ;******************************************************************************
2 12246					 ;
2 12247					 ;  convert.inc
2 12248					 ;  IKForth
2 12249					 ;
2 12250					 ;  Copyright (C) 1999-2003 Illya Kysil
2 12251					 ;
2 12252					 ;******************************************************************************
2 12253					 ;  Misc convertion words
2 12254					 ;******************************************************************************
2 12255
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 216
FKernel.asm



2 12256					 ;  6.1.0550 >BODY
2 12257					 ;  Convert CFA	to PFA
2 12258					 ;  D: CFA -- PFA
2 12259								 $COLON	 '>BODY',$TOBODY
3 12260								 $DEF	 '>BODY',$TOBODY,$ENTER,
4 12261	00002967			 ??03F3:
4 12262		  =MAIN:2967		 LASTWORD		 =	 ??03F3
4 12263								 IFNB	 <>
4 12264								   DB
4 12265								 ELSE
4 12266	00002967  00						   DB	 VEF_USUAL
4 12267								 ENDIF
4 12268	00002968  05						 DB	 ??03F4	- $ - 1
4 12269	00002969  3E 42	4F 44 59				 DB	 '>BODY'
4 12270	0000296E			 ??03F4:
4 12271	0000296E  07						 DB	 ??03F4	- ??03F3
4 12272	0000296F  2000294B					 DD	 VOC_LINK
4 12273		  =MAIN:20002967	 VOC_LINK		 =	 ??03F3	+ DESIRED_BASE_EQU
4 12274
4 12275								 IFNB	 <$TOBODY>
4 12276	00002973						   LABEL   $TOBODY FAR
4 12277								 ENDIF
4 12278								 IFNB	 <$ENTER>
4 12279	00002973  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 12280								 ELSE
4 12281								   DD	   ??03F6 + DESIRED_BASE_EQU
4 12282								 ENDIF
4 12283	00002977			 ??03F6:
2 12284								 CW	 $CELLADD
3 12285	00002977  20002040					 DD	 $CELLADD + DESIRED_BASE_EQU
2 12286								 CEXIT
3 12287								 CW	 $EXIT
4 12288	0000297B  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 12289
2 12290					 ;  6.1.0570 >NUMBER
2 12291								 $DEF	 '>NUMBER',$TONUMBER
3 12292	0000297F			 ??03F7:
3 12293		  =MAIN:297F		 LASTWORD		 =	 ??03F7
3 12294								 IFNB	 <>
3 12295								   DB
3 12296								 ELSE
3 12297	0000297F  00						   DB	 VEF_USUAL
3 12298								 ENDIF
3 12299	00002980  07						 DB	 ??03F8	- $ - 1
3 12300	00002981  3E 4E	55 4D 42 45 52				 DB	 '>NUMBER'
3 12301	00002988			 ??03F8:
3 12302	00002988  09						 DB	 ??03F8	- ??03F7
3 12303	00002989  20002967					 DD	 VOC_LINK
3 12304		  =MAIN:2000297F	 VOC_LINK		 =	 ??03F7	+ DESIRED_BASE_EQU
3 12305
3 12306								 IFNB	 <$TONUMBER>
3 12307	0000298D						   LABEL   $TONUMBER FAR
3 12308								 ENDIF
3 12309								 IFNB	 <>
3 12310								   DD	    + DESIRED_BASE_EQU
3 12311								 ELSE
3 12312	0000298D  20002991					   DD	   ??03FA + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 217
FKernel.asm



3 12313								 ENDIF
3 12314	00002991			 ??03FA:
2 12315								 PUSHRS	 EDI
3 12316	00002991  83 ED	04					 SUB	 EBP,CELL_SIZE
3 12317	00002994  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2 12318	00002997  8B 5F	1C					 MOV	 EBX,[DWORD PTR	EDI + BASE_VAR]
2 12319								 POPDS	 ECX			 ; u1
3 12320	0000299A  59						 POP	 ECX
2 12321								 POPDS	 EDI			 ; c-addr1
3 12322	0000299B  5F						 POP	 EDI
2 12323								 POPDS	 EDX			 ; ud1
3 12324	0000299C  5A						 POP	 EDX
2 12325								 POPDS	 EAX
3 12326	0000299D  58						 POP	 EAX
2 12327	0000299E			 TN_LOOP:
2 12328	0000299E  0B C9						 OR	 ECX,ECX
2 12329	000029A0  74 59						 JZ	 SHORT TN_STOP
2 12330								 PUSHRS	 EAX
3 12331	000029A2  83 ED	04					 SUB	 EBP,CELL_SIZE
3 12332	000029A5  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2 12333	000029A8  8A 07						 MOV	 AL,[BYTE PTR EDI]
2 12334	000029AA  3C 61						 CMP	 AL,'a'
2 12335	000029AC  72 06						 JB	 SHORT TN_CONT		 ; jump	if AL <	'a'
2 12336	000029AE  3C 7A						 CMP	 AL,'z'
2 12337	000029B0  77 02						 JA	 SHORT TN_CONT		 ; jump	if AL >	'z'
2 12338	000029B2  2C 20						 SUB	 AL,'a'	- 'A'		 ; convert to uppercase
2 12339	000029B4			 TN_CONT:
2 12340								 PUSHDS	 EDI
3 12341	000029B4  57						 PUSH	 EDI
2 12342								 PUSHDS	 ECX
3 12343	000029B5  51						 PUSH	 ECX
2 12344	000029B6  BF 20002A1F					 MOV	 EDI,OFFSET DIGITS_TABLE + DESIRED_BASE_EQU
2 12345	000029BB  8B CB						 MOV	 ECX,EBX
2 12346	000029BD  41						 INC	 ECX
2 12347	000029BE  F2> AE				   REPNE SCASB
2 12348	000029C0  75 11						 JNZ	 SHORT TN_CONT2
2 12349	000029C2  4F						 DEC	 EDI
2 12350	000029C3  4F						 DEC	 EDI
2 12351	000029C4  81 EF	20002A1F				 SUB	 EDI,OFFSET DIGITS_TABLE + DESIRED_BASE_EQU
2 12352	000029CA  3B FB						 CMP	 EDI,EBX
2 12353	000029CC  7D 05						 JGE	 SHORT TN_CONT2
2 12354	000029CE  83 F9	00					 CMP	 ECX,0
2 12355	000029D1  7F 0A						 JG	 SHORT TN_CONT1
2 12356	000029D3			 TN_CONT2:
2 12357								 POPDS	 ECX
3 12358	000029D3  59						 POP	 ECX
2 12359								 POPDS	 EDI
3 12360	000029D4  5F						 POP	 EDI
2 12361								 POPRS	 EAX
3 12362	000029D5  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 12363	000029D8  83 C5	04					 ADD	 EBP,CELL_SIZE
2 12364	000029DB  EB 1E						 JMP	 SHORT TN_STOP
2 12365	000029DD			 TN_CONT1:
2 12366								 PUSHDS	 EBX
3 12367	000029DD  53						 PUSH	 EBX
2 12368	000029DE  2B D9						 SUB	 EBX,ECX
2 12369	000029E0  8B CB						 MOV	 ECX,EBX
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 218
FKernel.asm



2 12370								 POPDS	 EBX
3 12371	000029E2  5B						 POP	 EBX
2 12372	000029E3  8B C2						 MOV	 EAX,EDX
2 12373	000029E5  F7 E3						 MUL	 EBX
2 12374								 PUSHDS	 EAX
3 12375	000029E7  50						 PUSH	 EAX
2 12376								 POPRS	 EAX
3 12377	000029E8  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 12378	000029EB  83 C5	04					 ADD	 EBP,CELL_SIZE
2 12379	000029EE  F7 E3						 MUL	 EBX
2 12380	000029F0  03 C1						 ADD	 EAX,ECX
2 12381								 POPDS	 ECX
3 12382	000029F2  59						 POP	 ECX
2 12383	000029F3  13 D1						 ADC	 EDX,ECX
2 12384								 POPDS	 ECX
3 12385	000029F5  59						 POP	 ECX
2 12386	000029F6  49						 DEC	 ECX
2 12387								 POPDS	 EDI
3 12388	000029F7  5F						 POP	 EDI
2 12389	000029F8  47						 INC	 EDI
2 12390	000029F9  EB A3						 JMP	 SHORT TN_LOOP
2 12391	000029FB			 TN_STOP:
2 12392								 PUSHDS	 EAX
3 12393	000029FB  50						 PUSH	 EAX
2 12394								 PUSHDS	 EDX
3 12395	000029FC  52						 PUSH	 EDX
2 12396								 PUSHDS	 EDI
3 12397	000029FD  57						 PUSH	 EDI
2 12398								 PUSHDS	 ECX
3 12399	000029FE  51						 PUSH	 ECX
2 12400								 POPRS	 EDI
3 12401	000029FF  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3 12402	00002A02  83 C5	04					 ADD	 EBP,CELL_SIZE
2 12403								 $NEXT
3 12404	00002A05  AD						 LODSD				 ; fetch address
3 12405								 $JMP
4 12406	00002A06  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 12407	00002A08  FF E3						 JMP	 EBX			 ; execute
2 12408
2 12409					 ;  DIGITS
2 12410								 $CONST	 'DIGITS',$DIGITS
3 12411								 $DEF	 'DIGITS',$DIGITS,$DOCONST
4 12412	00002A0A			 ??03FB:
4 12413		  =MAIN:2A0A		 LASTWORD		 =	 ??03FB
4 12414								 IFNB	 <>
4 12415								   DB
4 12416								 ELSE
4 12417	00002A0A  00						   DB	 VEF_USUAL
4 12418								 ENDIF
4 12419	00002A0B  06						 DB	 ??03FC	- $ - 1
4 12420	00002A0C  44 49	47 49 54 53				 DB	 'DIGITS'
4 12421	00002A12			 ??03FC:
4 12422	00002A12  08						 DB	 ??03FC	- ??03FB
4 12423	00002A13  2000297F					 DD	 VOC_LINK
4 12424		  =MAIN:20002A0A	 VOC_LINK		 =	 ??03FB	+ DESIRED_BASE_EQU
4 12425
4 12426								 IFNB	 <$DIGITS>
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 219
FKernel.asm



4 12427	00002A17						   LABEL   $DIGITS FAR
4 12428								 ENDIF
4 12429								 IFNB	 <$DOCONST>
4 12430	00002A17  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4 12431								 ELSE
4 12432								   DD	   ??03FE + DESIRED_BASE_EQU
4 12433								 ENDIF
4 12434	00002A1B			 ??03FE:
2 12435								 CW	 DIGITS_TABLE
3 12436	00002A1B  20002A1F					 DD	 DIGITS_TABLE +	DESIRED_BASE_EQU
2 12437	00002A1F			 DIGITS_TABLE:
2 12438	00002A1F  30 31	32 33 34 35 36+				 DB	 '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',0
  12439		  37 38	39 41 42 43 44+
  12440		  45 46	47 48 49 4A 4B+
  12441		  4C 4D	4E 4F 50 51 52+
  12442		  53 54	55 56 57 58 59+
  12443		  5A 00
2 12444
2 12445					 ;  6.1.2170 S>D
2 12446					 ;  Convert single cell	value to double	cell value
2 12447					 ;  D: a -- aa
2 12448								 $DEF	 'S>D',$STOD
3 12449	00002A44			 ??03FF:
3 12450		  =MAIN:2A44		 LASTWORD		 =	 ??03FF
3 12451								 IFNB	 <>
3 12452								   DB
3 12453								 ELSE
3 12454	00002A44  00						   DB	 VEF_USUAL
3 12455								 ENDIF
3 12456	00002A45  03						 DB	 ??0400	- $ - 1
3 12457	00002A46  53 3E	44					 DB	 'S>D'
3 12458	00002A49			 ??0400:
3 12459	00002A49  05						 DB	 ??0400	- ??03FF
3 12460	00002A4A  20002A0A					 DD	 VOC_LINK
3 12461		  =MAIN:20002A44	 VOC_LINK		 =	 ??03FF	+ DESIRED_BASE_EQU
3 12462
3 12463								 IFNB	 <$STOD>
3 12464	00002A4E						   LABEL   $STOD FAR
3 12465								 ENDIF
3 12466								 IFNB	 <>
3 12467								   DD	    + DESIRED_BASE_EQU
3 12468								 ELSE
3 12469	00002A4E  20002A52					   DD	   ??0402 + DESIRED_BASE_EQU
3 12470								 ENDIF
3 12471	00002A52			 ??0402:
2 12472								 POPDS	 EAX
3 12473	00002A52  58						 POP	 EAX
2 12474	00002A53  99						 CDQ
2 12475								 PUSHDS	 EAX
3 12476	00002A54  50						 PUSH	 EAX
2 12477								 PUSHDS	 EDX
3 12478	00002A55  52						 PUSH	 EDX
2 12479								 $NEXT
3 12480	00002A56  AD						 LODSD				 ; fetch address
3 12481								 $JMP
4 12482	00002A57  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 12483	00002A59  FF E3						 JMP	 EBX			 ; execute
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 220
FKernel.asm



2 12484
2 12485
1 12486								 INCLUDE "except.inc"
2 12487					 ;******************************************************************************
2 12488					 ;
2 12489					 ;  except.inc
2 12490					 ;  IKForth
2 12491					 ;
2 12492					 ;  Copyright (C) 1999-2003 Illya Kysil
2 12493					 ;
2 12494					 ;******************************************************************************
2 12495					 ;  EXCEPTION words
2 12496					 ;******************************************************************************
2 12497
2 12498					 ;  9.6.1.0875 CATCH
2 12499								 $COLON	 'CATCH',$CATCH
3 12500								 $DEF	 'CATCH',$CATCH,$ENTER,
4 12501	00002A5B			 ??0403:
4 12502		  =MAIN:2A5B		 LASTWORD		 =	 ??0403
4 12503								 IFNB	 <>
4 12504								   DB
4 12505								 ELSE
4 12506	00002A5B  00						   DB	 VEF_USUAL
4 12507								 ENDIF
4 12508	00002A5C  05						 DB	 ??0404	- $ - 1
4 12509	00002A5D  43 41	54 43 48				 DB	 'CATCH'
4 12510	00002A62			 ??0404:
4 12511	00002A62  07						 DB	 ??0404	- ??0403
4 12512	00002A63  20002A44					 DD	 VOC_LINK
4 12513		  =MAIN:20002A5B	 VOC_LINK		 =	 ??0403	+ DESIRED_BASE_EQU
4 12514
4 12515								 IFNB	 <$CATCH>
4 12516	00002A67						   LABEL   $CATCH FAR
4 12517								 ENDIF
4 12518								 IFNB	 <$ENTER>
4 12519	00002A67  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 12520								 ELSE
4 12521								   DD	   ??0406 + DESIRED_BASE_EQU
4 12522								 ENDIF
4 12523	00002A6B			 ??0406:
2 12524								 CW	 $SPFETCH
3 12525	00002A6B  20001A85					 DD	 $SPFETCH + DESIRED_BASE_EQU
2 12526								 CW	 $TOR
3 12527	00002A6F  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2 12528								 CFETCH	 $EXCEPTION_HANDLER
3 12529								 CW	 $EXCEPTION_HANDLER
4 12530	00002A73  2000029C					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 12531								 CW	 $FETCH
4 12532	00002A77  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 12533								 CW	 $TOR
3 12534	00002A7B  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2 12535								 CW	 $RPFETCH
3 12536	00002A7F  20001BA2					 DD	 $RPFETCH + DESIRED_BASE_EQU
2 12537								 CSTORE	 $EXCEPTION_HANDLER
3 12538								 CW	 $EXCEPTION_HANDLER
4 12539	00002A83  2000029C					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 12540								 CW	 $STORE
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 221
FKernel.asm



4 12541	00002A87  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2 12542								 CW	 $EXECUTE
3 12543	00002A8B  20002243					 DD	 $EXECUTE + DESIRED_BASE_EQU
2 12544								 CW	 $RFROM
3 12545	00002A8F  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 12546								 CSTORE	 $EXCEPTION_HANDLER
3 12547								 CW	 $EXCEPTION_HANDLER
4 12548	00002A93  2000029C					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 12549								 CW	 $STORE
4 12550	00002A97  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2 12551								 CW	 $RFROM
3 12552	00002A9B  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 12553								 CW	 $DROP
3 12554	00002A9F  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2 12555								 CW	 $ZERO
3 12556	00002AA3  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2 12557								 CEXIT
3 12558								 CW	 $EXIT
4 12559	00002AA7  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 12560
2 12561					 ;  (THROW)
2 12562					 ;  D: exc-id --
2 12563								 $COLON	 '(THROW)',$PTHROW
3 12564								 $DEF	 '(THROW)',$PTHROW,$ENTER,
4 12565	00002AAB			 ??0407:
4 12566		  =MAIN:2AAB		 LASTWORD		 =	 ??0407
4 12567								 IFNB	 <>
4 12568								   DB
4 12569								 ELSE
4 12570	00002AAB  00						   DB	 VEF_USUAL
4 12571								 ENDIF
4 12572	00002AAC  07						 DB	 ??0408	- $ - 1
4 12573	00002AAD  28 54	48 52 4F 57 29				 DB	 '(THROW)'
4 12574	00002AB4			 ??0408:
4 12575	00002AB4  09						 DB	 ??0408	- ??0407
4 12576	00002AB5  20002A5B					 DD	 VOC_LINK
4 12577		  =MAIN:20002AAB	 VOC_LINK		 =	 ??0407	+ DESIRED_BASE_EQU
4 12578
4 12579								 IFNB	 <$PTHROW>
4 12580	00002AB9						   LABEL   $PTHROW FAR
4 12581								 ENDIF
4 12582								 IFNB	 <$ENTER>
4 12583	00002AB9  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 12584								 ELSE
4 12585								   DD	   ??040A + DESIRED_BASE_EQU
4 12586								 ENDIF
4 12587	00002ABD			 ??040A:
2 12588								 CFETCH	 $EXCEPTION_HANDLER
3 12589								 CW	 $EXCEPTION_HANDLER
4 12590	00002ABD  2000029C					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 12591								 CW	 $FETCH
4 12592	00002AC1  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 12593								 CW	 $RPSTORE
3 12594	00002AC5  20001BB6					 DD	 $RPSTORE + DESIRED_BASE_EQU
2 12595								 CW	 $RFROM
3 12596	00002AC9  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 12597								 CSTORE	 $EXCEPTION_HANDLER
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 222
FKernel.asm



3 12598								 CW	 $EXCEPTION_HANDLER
4 12599	00002ACD  2000029C					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 12600								 CW	 $STORE
4 12601	00002AD1  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2 12602								 CW	 $RFROM
3 12603	00002AD5  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 12604								 CW	 $SWAP
3 12605	00002AD9  20001A10					 DD	 $SWAP + DESIRED_BASE_EQU
2 12606								 CW	 $TOR
3 12607	00002ADD  20001AB0					 DD	 $TOR +	DESIRED_BASE_EQU
2 12608								 CW	 $SPSTORE
3 12609	00002AE1  20001A9B					 DD	 $SPSTORE + DESIRED_BASE_EQU
2 12610								 CW	 $DROP
3 12611	00002AE5  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2 12612								 CW	 $RFROM
3 12613	00002AE9  20001AC9					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 12614								 CEXIT
3 12615								 CW	 $EXIT
4 12616	00002AED  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 12617
2 12618					 ;  9.6.1.2275 THROW
2 12619								 $COLON	 'THROW',$THROW
3 12620								 $DEF	 'THROW',$THROW,$ENTER,
4 12621	00002AF1			 ??040B:
4 12622		  =MAIN:2AF1		 LASTWORD		 =	 ??040B
4 12623								 IFNB	 <>
4 12624								   DB
4 12625								 ELSE
4 12626	00002AF1  00						   DB	 VEF_USUAL
4 12627								 ENDIF
4 12628	00002AF2  05						 DB	 ??040C	- $ - 1
4 12629	00002AF3  54 48	52 4F 57				 DB	 'THROW'
4 12630	00002AF8			 ??040C:
4 12631	00002AF8  07						 DB	 ??040C	- ??040B
4 12632	00002AF9  20002AAB					 DD	 VOC_LINK
4 12633		  =MAIN:20002AF1	 VOC_LINK		 =	 ??040B	+ DESIRED_BASE_EQU
4 12634
4 12635								 IFNB	 <$THROW>
4 12636	00002AFD						   LABEL   $THROW FAR
4 12637								 ENDIF
4 12638								 IFNB	 <$ENTER>
4 12639	00002AFD  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 12640								 ELSE
4 12641								   DD	   ??040E + DESIRED_BASE_EQU
4 12642								 ENDIF
4 12643	00002B01			 ??040E:
2 12644								 CW	 $QDUP
3 12645	00002B01  200018BE					 DD	 $QDUP + DESIRED_BASE_EQU
2 12646								 CQBR	 THROW_EXIT
3 12647								 CW	 $QBRANCH
4 12648	00002B05  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3 12649								 CW	 THROW_EXIT
4 12650	00002B09  20002B11					 DD	 THROW_EXIT + DESIRED_BASE_EQU
2 12651								   CW	   $PTHROW
3 12652	00002B0D  20002AB9					 DD	 $PTHROW + DESIRED_BASE_EQU
2 12653	00002B11			 THROW_EXIT:
2 12654								 CEXIT
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 223
FKernel.asm



3 12655								 CW	 $EXIT
4 12656	00002B11  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 12657
1 12658								 INCLUDE "file.inc"
2 12659					 ;******************************************************************************
2 12660					 ;
2 12661					 ;  file.inc
2 12662					 ;  IKForth
2 12663					 ;
2 12664					 ;  Copyright (C) 1999-2003 Illya Kysil
2 12665					 ;
2 12666					 ;******************************************************************************
2 12667					 ;  FILE access	words
2 12668					 ;******************************************************************************
2 12669
2 12670								 $CONST	 'R/O',$R_O
3 12671								 $DEF	 'R/O',$R_O,$DOCONST
4 12672	00002B15			 ??040F:
4 12673		  =MAIN:2B15		 LASTWORD		 =	 ??040F
4 12674								 IFNB	 <>
4 12675								   DB
4 12676								 ELSE
4 12677	00002B15  00						   DB	 VEF_USUAL
4 12678								 ENDIF
4 12679	00002B16  03						 DB	 ??0410	- $ - 1
4 12680	00002B17  52 2F	4F					 DB	 'R/O'
4 12681	00002B1A			 ??0410:
4 12682	00002B1A  05						 DB	 ??0410	- ??040F
4 12683	00002B1B  20002AF1					 DD	 VOC_LINK
4 12684		  =MAIN:20002B15	 VOC_LINK		 =	 ??040F	+ DESIRED_BASE_EQU
4 12685
4 12686								 IFNB	 <$R_O>
4 12687	00002B1F						   LABEL   $R_O	FAR
4 12688								 ENDIF
4 12689								 IFNB	 <$DOCONST>
4 12690	00002B1F  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4 12691								 ELSE
4 12692								   DD	   ??0412 + DESIRED_BASE_EQU
4 12693								 ENDIF
4 12694	00002B23			 ??0412:
2 12695								 CC	 0
3 12696	00002B23  00000000					 DD	 0
2 12697
2 12698								 $CONST	 'W/O',$W_O
3 12699								 $DEF	 'W/O',$W_O,$DOCONST
4 12700	00002B27			 ??0413:
4 12701		  =MAIN:2B27		 LASTWORD		 =	 ??0413
4 12702								 IFNB	 <>
4 12703								   DB
4 12704								 ELSE
4 12705	00002B27  00						   DB	 VEF_USUAL
4 12706								 ENDIF
4 12707	00002B28  03						 DB	 ??0414	- $ - 1
4 12708	00002B29  57 2F	4F					 DB	 'W/O'
4 12709	00002B2C			 ??0414:
4 12710	00002B2C  05						 DB	 ??0414	- ??0413
4 12711	00002B2D  20002B15					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 224
FKernel.asm



4 12712		  =MAIN:20002B27	 VOC_LINK		 =	 ??0413	+ DESIRED_BASE_EQU
4 12713
4 12714								 IFNB	 <$W_O>
4 12715	00002B31						   LABEL   $W_O	FAR
4 12716								 ENDIF
4 12717								 IFNB	 <$DOCONST>
4 12718	00002B31  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4 12719								 ELSE
4 12720								   DD	   ??0416 + DESIRED_BASE_EQU
4 12721								 ENDIF
4 12722	00002B35			 ??0416:
2 12723								 CC	 1
3 12724	00002B35  00000001					 DD	 1
2 12725
2 12726								 $CONST	 'R/W',$R_W
3 12727								 $DEF	 'R/W',$R_W,$DOCONST
4 12728	00002B39			 ??0417:
4 12729		  =MAIN:2B39		 LASTWORD		 =	 ??0417
4 12730								 IFNB	 <>
4 12731								   DB
4 12732								 ELSE
4 12733	00002B39  00						   DB	 VEF_USUAL
4 12734								 ENDIF
4 12735	00002B3A  03						 DB	 ??0418	- $ - 1
4 12736	00002B3B  52 2F	57					 DB	 'R/W'
4 12737	00002B3E			 ??0418:
4 12738	00002B3E  05						 DB	 ??0418	- ??0417
4 12739	00002B3F  20002B27					 DD	 VOC_LINK
4 12740		  =MAIN:20002B39	 VOC_LINK		 =	 ??0417	+ DESIRED_BASE_EQU
4 12741
4 12742								 IFNB	 <$R_W>
4 12743	00002B43						   LABEL   $R_W	FAR
4 12744								 ENDIF
4 12745								 IFNB	 <$DOCONST>
4 12746	00002B43  2000010E					   DD	   $DOCONST + DESIRED_BASE_EQU
4 12747								 ELSE
4 12748								   DD	   ??041A + DESIRED_BASE_EQU
4 12749								 ENDIF
4 12750	00002B47			 ??041A:
2 12751								 CC	 2
3 12752	00002B47  00000002					 DD	 2
2 12753
2 12754					 ;  11.6.1.2090	READ-LINE
2 12755					 ;  (S c-addr u1 fileid	-- u2 flag ior )
2 12756								 $DEFER	 'READ-LINE',$READ_LINE
3 12757								 $DEF	 'READ-LINE',$READ_LINE,$DODEFER,
4 12758	00002B4B			 ??041B:
4 12759		  =MAIN:2B4B		 LASTWORD		 =	 ??041B
4 12760								 IFNB	 <>
4 12761								   DB
4 12762								 ELSE
4 12763	00002B4B  00						   DB	 VEF_USUAL
4 12764								 ENDIF
4 12765	00002B4C  09						 DB	 ??041C	- $ - 1
4 12766	00002B4D  52 45	41 44 2D 4C 49+				 DB	 'READ-LINE'
  12767		  4E 45
4 12768	00002B56			 ??041C:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 225
FKernel.asm



4 12769	00002B56  0B						 DB	 ??041C	- ??041B
4 12770	00002B57  20002B39					 DD	 VOC_LINK
4 12771		  =MAIN:20002B4B	 VOC_LINK		 =	 ??041B	+ DESIRED_BASE_EQU
4 12772
4 12773								 IFNB	 <$READ_LINE>
4 12774	00002B5B						   LABEL   $READ_LINE FAR
4 12775								 ENDIF
4 12776								 IFNB	 <$DODEFER>
4 12777	00002B5B  2000014A					   DD	   $DODEFER + DESIRED_BASE_EQU
4 12778								 ELSE
4 12779								   DD	   ??041E + DESIRED_BASE_EQU
4 12780								 ENDIF
4 12781	00002B5F			 ??041E:
2 12782								 CW	 $PREAD_LINE
3 12783	00002B5F  200007C1					 DD	 $PREAD_LINE + DESIRED_BASE_EQU
2 12784
2 12785
2 12786								 $COLON	 '(INCLUDED)',$PINCLUDED
3 12787								 $DEF	 '(INCLUDED)',$PINCLUDED,$ENTER,
4 12788	00002B63			 ??041F:
4 12789		  =MAIN:2B63		 LASTWORD		 =	 ??041F
4 12790								 IFNB	 <>
4 12791								   DB
4 12792								 ELSE
4 12793	00002B63  00						   DB	 VEF_USUAL
4 12794								 ENDIF
4 12795	00002B64  0A						 DB	 ??0420	- $ - 1
4 12796	00002B65  28 49	4E 43 4C 55 44+				 DB	 '(INCLUDED)'
  12797		  45 44	29
4 12798	00002B6F			 ??0420:
4 12799	00002B6F  0C						 DB	 ??0420	- ??041F
4 12800	00002B70  20002B4B					 DD	 VOC_LINK
4 12801		  =MAIN:20002B63	 VOC_LINK		 =	 ??041F	+ DESIRED_BASE_EQU
4 12802
4 12803								 IFNB	 <$PINCLUDED>
4 12804	00002B74						   LABEL   $PINCLUDED FAR
4 12805								 ENDIF
4 12806								 IFNB	 <$ENTER>
4 12807	00002B74  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 12808								 ELSE
4 12809								   DD	   ??0422 + DESIRED_BASE_EQU
4 12810								 ENDIF
4 12811	00002B78			 ??0422:
2 12812								 CW	 $R_O
3 12813	00002B78  20002B1F					 DD	 $R_O +	DESIRED_BASE_EQU
2 12814								 CW	 $OPEN_FILE
3 12815	00002B7C  2000069A					 DD	 $OPEN_FILE + DESIRED_BASE_EQU
2 12816								 CW	 $THROW
3 12817	00002B80  20002AFD					 DD	 $THROW	+ DESIRED_BASE_EQU
2 12818								 CW	 $INCLUDE_FILE
3 12819	00002B84  20002BB6					 DD	 $INCLUDE_FILE + DESIRED_BASE_EQU
2 12820								 CEXIT
3 12821								 CW	 $EXIT
4 12822	00002B88  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 12823
2 12824					 ;  11.6.1.1718	INCLUDED
2 12825					 ;  D: c-addr count --
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 226
FKernel.asm



2 12826								 $DEFER	 'INCLUDED',$INCLUDED
3 12827								 $DEF	 'INCLUDED',$INCLUDED,$DODEFER,
4 12828	00002B8C			 ??0423:
4 12829		  =MAIN:2B8C		 LASTWORD		 =	 ??0423
4 12830								 IFNB	 <>
4 12831								   DB
4 12832								 ELSE
4 12833	00002B8C  00						   DB	 VEF_USUAL
4 12834								 ENDIF
4 12835	00002B8D  08						 DB	 ??0424	- $ - 1
4 12836	00002B8E  49 4E	43 4C 55 44 45+				 DB	 'INCLUDED'
  12837		  44
4 12838	00002B96			 ??0424:
4 12839	00002B96  0A						 DB	 ??0424	- ??0423
4 12840	00002B97  20002B63					 DD	 VOC_LINK
4 12841		  =MAIN:20002B8C	 VOC_LINK		 =	 ??0423	+ DESIRED_BASE_EQU
4 12842
4 12843								 IFNB	 <$INCLUDED>
4 12844	00002B9B						   LABEL   $INCLUDED FAR
4 12845								 ENDIF
4 12846								 IFNB	 <$DODEFER>
4 12847	00002B9B  2000014A					   DD	   $DODEFER + DESIRED_BASE_EQU
4 12848								 ELSE
4 12849								   DD	   ??0426 + DESIRED_BASE_EQU
4 12850								 ENDIF
4 12851	00002B9F			 ??0426:
2 12852								 CW	 $PINCLUDED
3 12853	00002B9F  20002B74					 DD	 $PINCLUDED + DESIRED_BASE_EQU
2 12854
2 12855					 ;  11.6.1.1717	INCLUDE-FILE
2 12856					 ;  D: fileid --
2 12857								 $COLON	 'INCLUDE-FILE',$INCLUDE_FILE
3 12858								 $DEF	 'INCLUDE-FILE',$INCLUDE_FILE,$ENTER,
4 12859	00002BA3			 ??0427:
4 12860		  =MAIN:2BA3		 LASTWORD		 =	 ??0427
4 12861								 IFNB	 <>
4 12862								   DB
4 12863								 ELSE
4 12864	00002BA3  00						   DB	 VEF_USUAL
4 12865								 ENDIF
4 12866	00002BA4  0C						 DB	 ??0428	- $ - 1
4 12867	00002BA5  49 4E	43 4C 55 44 45+				 DB	 'INCLUDE-FILE'
  12868		  2D 46	49 4C 45
4 12869	00002BB1			 ??0428:
4 12870	00002BB1  0E						 DB	 ??0428	- ??0427
4 12871	00002BB2  20002B8C					 DD	 VOC_LINK
4 12872		  =MAIN:20002BA3	 VOC_LINK		 =	 ??0427	+ DESIRED_BASE_EQU
4 12873
4 12874								 IFNB	 <$INCLUDE_FILE>
4 12875	00002BB6						   LABEL   $INCLUDE_FILE FAR
4 12876								 ENDIF
4 12877								 IFNB	 <$ENTER>
4 12878	00002BB6  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
4 12879								 ELSE
4 12880								   DD	   ??042A + DESIRED_BASE_EQU
4 12881								 ENDIF
4 12882	00002BBA			 ??042A:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 227
FKernel.asm



2 12883								 CW	 $INPUTTOR
3 12884	00002BBA  20000C07					 DD	 $INPUTTOR + DESIRED_BASE_EQU
2 12885								 CW	 $SOURCE_ID_STORE
3 12886	00002BBE  20000A83					 DD	 $SOURCE_ID_STORE + DESIRED_BASE_EQU
2 12887								 CW	 $ZERO
3 12888	00002BC2  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2 12889								 CSTORE	 $BLK
3 12890								 CW	 $BLK
4 12891	00002BC6  2000235D					 DD	 $BLK +	DESIRED_BASE_EQU
3 12892								 CW	 $STORE
4 12893	00002BCA  20001FB5					 DD	 $STORE	+ DESIRED_BASE_EQU
2 12894								 CW	 $ZERO
3 12895	00002BCE  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2 12896								 CW	 $STOD
3 12897	00002BD2  20002A4E					 DD	 $STOD + DESIRED_BASE_EQU
2 12898								 CW	 $CURRENT_FILE_POSITION
3 12899	00002BD6  20000239					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2 12900								 CW	 $2STORE
3 12901	00002BDA  20001FDF					 DD	 $2STORE + DESIRED_BASE_EQU
2 12902	00002BDE			 INCLUDE_FILE_LOOP:
2 12903								 CW	 $SOURCE_ID
3 12904	00002BDE  20000A66					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2 12905								 CW	 $FILE_POSITION
3 12906	00002BE2  20000651					 DD	 $FILE_POSITION	+ DESIRED_BASE_EQU
2 12907								 CW	 $DROP
3 12908	00002BE6  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2 12909								 CW	 $CURRENT_FILE_POSITION
3 12910	00002BEA  20000239					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2 12911								 CW	 $2STORE
3 12912	00002BEE  20001FDF					 DD	 $2STORE + DESIRED_BASE_EQU
2 12913
2 12914								 CW	 $ZERO			 ; FOR THROW
3 12915	00002BF2  200001AC					 DD	 $ZERO + DESIRED_BASE_EQU
2 12916								 CW	 $REFILL
3 12917	00002BF6  20000B31					 DD	 $REFILL + DESIRED_BASE_EQU
2 12918								 CQBR	 INCLUDE_FILE_EXIT
3 12919								 CW	 $QBRANCH
4 12920	00002BFA  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3 12921								 CW	 INCLUDE_FILE_EXIT
4 12922	00002BFE  20002C1E					 DD	 INCLUDE_FILE_EXIT + DESIRED_BASE_EQU
2 12923								   CW	   $DROP
3 12924	00002C02  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2 12925								   CWLIT   $INTERPRET
3 12926								 CW	 $LIT
4 12927	00002C06  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
3 12928								 CW	 $INTERPRET
4 12929	00002C0A  200012DB					 DD	 $INTERPRET + DESIRED_BASE_EQU
2 12930								   CW	   $CATCH
3 12931	00002C0E  20002A67					 DD	 $CATCH	+ DESIRED_BASE_EQU
2 12932								   CW	   $QDUP
3 12933	00002C12  200018BE					 DD	 $QDUP + DESIRED_BASE_EQU
2 12934								 CQBR	 INCLUDE_FILE_LOOP
3 12935								 CW	 $QBRANCH
4 12936	00002C16  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3 12937								 CW	 INCLUDE_FILE_LOOP
4 12938	00002C1A  20002BDE					 DD	 INCLUDE_FILE_LOOP + DESIRED_BASE_EQU
2 12939	00002C1E			 INCLUDE_FILE_EXIT:
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 228
FKernel.asm



2 12940								 CW	 $SOURCE_ID
3 12941	00002C1E  20000A66					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2 12942								 CW	 $CLOSE_FILE
3 12943	00002C22  200005BC					 DD	 $CLOSE_FILE + DESIRED_BASE_EQU
2 12944								 CW	 $DROP
3 12945	00002C26  2000194A					 DD	 $DROP + DESIRED_BASE_EQU
2 12946								 CW	 $INPUTFROMR
3 12947	00002C2A  20000C51					 DD	 $INPUTFROMR + DESIRED_BASE_EQU
2 12948								 CW	 $THROW
3 12949	00002C2E  20002AFD					 DD	 $THROW	+ DESIRED_BASE_EQU
2 12950								 CEXIT
3 12951								 CW	 $EXIT
4 12952	00002C32  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
2 12953
1 12954
  12955
  12956	00002C36			 START:
  12957								 POPDS	 EAX
1 12958	00002C36  58						 POP	 EAX
  12959								 POPDS	 <[DWORD PTR SF_VAR + DESIRED_BASE_EQU]>
1 12960	00002C37  8F 05	2000033B				 POP	 [DWORD	PTR SF_VAR + DESIRED_BASE_EQU]
  12961								 POPDS	 <[DWORD PTR #SF_VAR + DESIRED_BASE_EQU]>
1 12962	00002C3D  8F 05	2000032A				 POP	 [DWORD	PTR #SF_VAR + DESIRED_BASE_EQU]
  12963								 PUSHDS	 EAX
1 12964	00002C43  50						 PUSH	 EAX
  12965								 PUSHDS	 EBX
1 12966	00002C44  53						 PUSH	 EBX
  12967								 PUSHDS	 <[DWORD PTR MAIN_PROC + DESIRED_BASE_EQU]>
1 12968	00002C45  FF 35	200003D1				 PUSH	 [DWORD	PTR MAIN_PROC +	DESIRED_BASE_EQU]
  12969								 PUSHDS	 F_FALSE
1 12970	00002C4B  6A 00						 PUSH	 F_FALSE
  12971								 PUSHDS	 0
1 12972	00002C4D  6A 00						 PUSH	 0
  12973	00002C4F  8B 1D	20000020				 MOV	 EBX,[DWORD PTR	FUNC_TABLE_PTR + DESIRED_BASE_EQU]
  12974	00002C55  83 C3	50					 ADD	 EBX,START_THREAD_FUNC * CELL_SIZE
  12975	00002C58  FF 13						 CALL	 [DWORD	PTR EBX]
  12976								 POPDS	 EBX
1 12977	00002C5A  5B						 POP	 EBX
  12978	00002C5B  C3						 RET
  12979
  12980								 $COLON	 'DO-FORTH',$DO_FORTH,VEF_HIDDEN
1 12981								 $DEF	 'DO-FORTH',$DO_FORTH,$ENTER,VEF_HIDDEN
2 12982	00002C5C			 ??042B:
2 12983		  =MAIN:2C5C		 LASTWORD		 =	 ??042B
2 12984								 IFNB	 <VEF_HIDDEN>
2 12985	00002C5C  02						   DB	 VEF_HIDDEN
2 12986								 ELSE
2 12987								   DB	 VEF_USUAL
2 12988								 ENDIF
2 12989	00002C5D  08						 DB	 ??042C	- $ - 1
2 12990	00002C5E  44 4F	2D 46 4F 52 54+				 DB	 'DO-FORTH'
  12991		  48
2 12992	00002C66			 ??042C:
2 12993	00002C66  0A						 DB	 ??042C	- ??042B
2 12994	00002C67  20002BA3					 DD	 VOC_LINK
2 12995		  =MAIN:20002C5C	 VOC_LINK		 =	 ??042B	+ DESIRED_BASE_EQU
2 12996
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 229
FKernel.asm



2 12997								 IFNB	 <$DO_FORTH>
2 12998	00002C6B						   LABEL   $DO_FORTH FAR
2 12999								 ENDIF
2 13000								 IFNB	 <$ENTER>
2 13001	00002C6B  200000C7					   DD	   $ENTER + DESIRED_BASE_EQU
2 13002								 ELSE
2 13003								   DD	   ??042E + DESIRED_BASE_EQU
2 13004								 ENDIF
2 13005	00002C6F			 ??042E:
  13006								 CW	 $INIT_USER
1 13007	00002C6F  20000A03					 DD	 $INIT_USER + DESIRED_BASE_EQU
  13008								 CW	 $SF
1 13009	00002C73  20000337					 DD	 $SF + DESIRED_BASE_EQU
  13010								 CW	 $FETCH
1 13011	00002C77  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
  13012								 CW	 $#SF
1 13013	00002C7B  20000326					 DD	 $#SF +	DESIRED_BASE_EQU
  13014								 CW	 $FETCH
1 13015	00002C7F  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
  13016								 CWLIT	 $INCLUDED
1 13017								 CW	 $LIT
2 13018	00002C83  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13019								 CW	 $INCLUDED
2 13020	00002C87  20002B9B					 DD	 $INCLUDED + DESIRED_BASE_EQU
  13021								 CW	 $CATCH
1 13022	00002C8B  20002A67					 DD	 $CATCH	+ DESIRED_BASE_EQU
  13023								 CQBR	 DO_FORTH_NO_EXCEPTIONS
1 13024								 CW	 $QBRANCH
2 13025	00002C8F  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
1 13026								 CW	 DO_FORTH_NO_EXCEPTIONS
2 13027	00002C93  20002DB7					 DD	 DO_FORTH_NO_EXCEPTIONS	+ DESIRED_BASE_EQU
  13028								 $CR
1 13029								 CW	 $LIT
2 13030	00002C97  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13031								 CC	 13
2 13032	00002C9B  0000000D					 DD	 13
1 13033								 CW	 $EMIT
2 13034	00002C9F  2000087C					 DD	 $EMIT + DESIRED_BASE_EQU
1 13035								 CW	 $LIT
2 13036	00002CA3  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13037								 CC	 10
2 13038	00002CA7  0000000A					 DD	 10
1 13039								 CW	 $EMIT
2 13040	00002CAB  2000087C					 DD	 $EMIT + DESIRED_BASE_EQU
  13041								 $WRITE	 <Exception caught while INCLUDing [>
1 13042								 CW	 $PTYPE
2 13043	00002CAF  20000A32					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 13044	00002CB3  22 45	78 63 65 70 74+				 DB	 @@042F	- $ - 1,'Exception caught while	INCLUDing ['
  13045		  69 6F	6E 20 63 61 75+
  13046		  67 68	74 20 77 68 69+
  13047		  6C 65	20 49 4E 43 4C+
  13048		  55 44	69 6E 67 20 5B
1 13049	00002CD6			 @@042F:
  13050								 CW	 $SF
1 13051	00002CD6  20000337					 DD	 $SF + DESIRED_BASE_EQU
  13052								 CW	 $FETCH
1 13053	00002CDA  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 230
FKernel.asm



  13054								 CW	 $#SF
1 13055	00002CDE  20000326					 DD	 $#SF +	DESIRED_BASE_EQU
  13056								 CW	 $FETCH
1 13057	00002CE2  20001FCA					 DD	 $FETCH	+ DESIRED_BASE_EQU
  13058								 CW	 $TYPE
1 13059	00002CE6  200008A7					 DD	 $TYPE + DESIRED_BASE_EQU
  13060								 $WRITE	 <]>
1 13061								 CW	 $PTYPE
2 13062	00002CEA  20000A32					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 13063	00002CEE  01 5D						 DB	 @@0430	- $ - 1,']'
1 13064	00002CF0			 @@0430:
  13065								 CW	 $2DROP
1 13066	00002CF0  200018DB					 DD	 $2DROP	+ DESIRED_BASE_EQU
  13067								 $CR
1 13068								 CW	 $LIT
2 13069	00002CF4  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13070								 CC	 13
2 13071	00002CF8  0000000D					 DD	 13
1 13072								 CW	 $EMIT
2 13073	00002CFC  2000087C					 DD	 $EMIT + DESIRED_BASE_EQU
1 13074								 CW	 $LIT
2 13075	00002D00  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13076								 CC	 10
2 13077	00002D04  0000000A					 DD	 10
1 13078								 CW	 $EMIT
2 13079	00002D08  2000087C					 DD	 $EMIT + DESIRED_BASE_EQU
  13080								 $WRITE	 <Latest word searched:	>
1 13081								 CW	 $PTYPE
2 13082	00002D0C  20000A32					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 13083	00002D10  16 4C	61 74 65 73 74+				 DB	 @@0431	- $ - 1,'Latest	word searched: '
  13084		  20 77	6F 72 64 20 73+
  13085		  65 61	72 63 68 65 64+
  13086		  3A 20
1 13087	00002D27			 @@0431:
  13088								 CW	 $POCKET
1 13089	00002D27  200002FE					 DD	 $POCKET + DESIRED_BASE_EQU
  13090								 CW	 $COUNT
1 13091	00002D2B  20002807					 DD	 $COUNT	+ DESIRED_BASE_EQU
  13092								 CW	 $TYPE
1 13093	00002D2F  200008A7					 DD	 $TYPE + DESIRED_BASE_EQU
  13094								 $CR
1 13095								 CW	 $LIT
2 13096	00002D33  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13097								 CC	 13
2 13098	00002D37  0000000D					 DD	 13
1 13099								 CW	 $EMIT
2 13100	00002D3B  2000087C					 DD	 $EMIT + DESIRED_BASE_EQU
1 13101								 CW	 $LIT
2 13102	00002D3F  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13103								 CC	 10
2 13104	00002D43  0000000A					 DD	 10
1 13105								 CW	 $EMIT
2 13106	00002D47  2000087C					 DD	 $EMIT + DESIRED_BASE_EQU
  13107								 $WRITE	 <Latest vocabulary entry: >
1 13108								 CW	 $PTYPE
2 13109	00002D4B  20000A32					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 13110	00002D4F  19 4C	61 74 65 73 74+				 DB	 @@0432	- $ - 1,'Latest	vocabulary entry: '
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 231
FKernel.asm



  13111		  20 76	6F 63 61 62 75+
  13112		  6C 61	72 79 20 65 6E+
  13113		  74 72	79 3A 20
1 13114	00002D69			 @@0432:
  13115								 CW	 $LATEST_HEAD_FETCH
1 13116	00002D69  20001409					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
  13117								 CW	 $H_TO_HASH_NAME
1 13118	00002D6D  20001897					 DD	 $H_TO_HASH_NAME + DESIRED_BASE_EQU
  13119								 CW	 $DUP
1 13120	00002D71  2000195E					 DD	 $DUP +	DESIRED_BASE_EQU
  13121								 CW	 $ZERONOEQ
1 13122	00002D75  20001F2C					 DD	 $ZERONOEQ + DESIRED_BASE_EQU
  13123								 CQBR	 NO_TYPE
1 13124								 CW	 $QBRANCH
2 13125	00002D79  2000003E					 DD	 $QBRANCH + DESIRED_BASE_EQU
1 13126								 CW	 NO_TYPE
2 13127	00002D7D  20002D8D					 DD	 NO_TYPE + DESIRED_BASE_EQU
  13128								 CW	 $TYPE
1 13129	00002D81  200008A7					 DD	 $TYPE + DESIRED_BASE_EQU
  13130								 CBR	 DO_CR
1 13131								 CW	 $BRANCH
2 13132	00002D85  2000005C					 DD	 $BRANCH + DESIRED_BASE_EQU
1 13133								 CW	 DO_CR
2 13134	00002D89  20002D9F					 DD	 DO_CR + DESIRED_BASE_EQU
  13135	00002D8D			 NO_TYPE:
  13136								 CW	 $2DROP
1 13137	00002D8D  200018DB					 DD	 $2DROP	+ DESIRED_BASE_EQU
  13138								 $WRITE	 <(nonamed)>
1 13139								 CW	 $PTYPE
2 13140	00002D91  20000A32					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 13141	00002D95  09 28	6E 6F 6E 61 6D+				 DB	 @@0433	- $ - 1,'(nonamed)'
  13142		  65 64	29
1 13143	00002D9F			 @@0433:
  13144	00002D9F			 DO_CR:
  13145								 $CR
1 13146								 CW	 $LIT
2 13147	00002D9F  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13148								 CC	 13
2 13149	00002DA3  0000000D					 DD	 13
1 13150								 CW	 $EMIT
2 13151	00002DA7  2000087C					 DD	 $EMIT + DESIRED_BASE_EQU
1 13152								 CW	 $LIT
2 13153	00002DAB  20000072					 DD	 $LIT +	DESIRED_BASE_EQU
1 13154								 CC	 10
2 13155	00002DAF  0000000A					 DD	 10
1 13156								 CW	 $EMIT
2 13157	00002DB3  2000087C					 DD	 $EMIT + DESIRED_BASE_EQU
  13158	00002DB7			 DO_FORTH_NO_EXCEPTIONS:
  13159								 CW	 $PBYE
1 13160	00002DB7  20000456					 DD	 $PBYE + DESIRED_BASE_EQU
  13161								 CW	 $EXIT
1 13162	00002DBB  200026E8					 DD	 $EXIT + DESIRED_BASE_EQU
  13163
  13164		  =MAIN:20002C5C	 LATEST_WORD		 = VOC_LINK
  13165	00002DBF			 HERE:
  13166
  13167	00002DBF						 ENDS	 MAIN
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 232
FKernel.asm



  13168								 END	 START
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 233
Symbol Table




Symbol Name			  Type	 Value

#EVAL_VAR			  Number 0030
#LINE_VAR			  Number 0040
#SF_VAR				  Near32 MAIN:032A
#TIB_VAR			  Number 0444
$#EVAL				  Far32	 MAIN:0215
$#LINE				  Far32	 MAIN:0260
$#SF				  Far32	 MAIN:0326
$#TIB				  Far32	 MAIN:01EE
$1ADD				  Far32	 MAIN:1C4C
$1SUB				  Far32	 MAIN:1C61
$2DIV				  Far32	 MAIN:1C8C
$2DROP				  Far32	 MAIN:18DB
$2DUP				  Far32	 MAIN:18F1
$2FETCH				  Far32	 MAIN:1FF7
$2LIT				  Far32	 MAIN:0088
$2LITERAL			  Far32	 MAIN:2826
$2MUL				  Far32	 MAIN:1C76
$2OVER				  Far32	 MAIN:190F
$2PLUS_R			  Far32	 MAIN:1BE5
$2RFETCH			  Far32	 MAIN:1B3B
$2RFROM				  Far32	 MAIN:1B1A
$2ROT				  Far32	 MAIN:19BE
$2STORE				  Far32	 MAIN:1FDF
$2SWAP				  Far32	 MAIN:192E
$2TOR				  Far32	 MAIN:1AF9
$ABS				  Far32	 MAIN:1CA3
$ACCEPT				  Far32	 MAIN:0850
$ADD				  Far32	 MAIN:1C1F
$ALLOCATE			  Far32	 MAIN:0934
$ALLOT				  Far32	 MAIN:26AD
$AMP_COMPILE_ONLY		  Far32	 MAIN:13C8
$AMP_HIDDEN			  Far32	 MAIN:13AC
$AMP_IMMEDIATE			  Far32	 MAIN:1396
$AMP_IMMEDIATE_COMPILE_ONLY	  Far32	 MAIN:13EE
$AMP_USUAL			  Far32	 MAIN:137D
$AND				  Far32	 MAIN:1D79
$AT_XY				  Far32	 MAIN:03FF
$BASE				  Far32	 MAIN:03A9
$BL				  Far32	 MAIN:03BA
$BLK				  Far32	 MAIN:235D
$BLOCK				  Far32	 MAIN:23BB
$BRANCH				  Far32	 MAIN:005C
$BSLASH				  Far32	 MAIN:2651
$CASE_SENSITIVE			  Far32	 MAIN:01C9
$CATCH				  Far32	 MAIN:2A67
$CCOMMA				  Far32	 MAIN:26C6
$CELLADD			  Far32	 MAIN:2040
$CELLS				  Far32	 MAIN:205A
$CFETCH				  Far32	 MAIN:2025
$CHARADD			  Far32	 MAIN:2075
$CHECK_DUPLICATE_NAME		  Far32	 MAIN:14EA
$CHECK_HEADERC			  Far32	 MAIN:163C
$CHECK_NAME			  Far32	 MAIN:144F
$CLOSE_FILE			  Far32	 MAIN:05BC
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 234
Symbol Table



$CMOVE				  Far32	 MAIN:2791
$CMOVEGR			  Far32	 MAIN:27C9
$COMMA				  Far32	 MAIN:266D
$COMPARE			  Far32	 MAIN:08D5
$COMPILEC			  Far32	 MAIN:2695
$COMP_TICK			  Far32	 MAIN:0E68
$CONSTANT			  Far32	 MAIN:2720
$COUNT				  Far32	 MAIN:2807
$CREATE_FILE			  Far32	 MAIN:0605
$CREATE_REPORT			  Far32	 MAIN:1323
$CREATE_WOD			  Far32	 MAIN:134A
$CSTORE				  Far32	 MAIN:200F
$CURRENT			  Far32	 MAIN:0314
$CURRENT_FILE_POSITION		  Far32	 MAIN:0239
$D2DIV				  Far32	 MAIN:28A3
$D2MUL				  Far32	 MAIN:2888
$DABS				  Far32	 MAIN:28BF
$DADD				  Far32	 MAIN:284F
$DIGITS				  Far32	 MAIN:2A17
$DMAX				  Far32	 MAIN:28E5
$DMIN				  Far32	 MAIN:290B
$DNEGATE			  Far32	 MAIN:2934
$DOCONST			  Far32	 MAIN:010E
$DODEFER			  Far32	 MAIN:014A
$DODOES				  Far32	 MAIN:0194
$DOUSER				  Far32	 MAIN:012A
$DOVAR				  Far32	 MAIN:00AD
$DO_2LIT			  Far32	 MAIN:11C2
$DO_COMP_DEFINED		  Far32	 MAIN:0FCF
$DO_DEFINED			  Far32	 MAIN:1004
$DO_FORTH			  Far32	 MAIN:2C6B
$DO_INT_DEFINED			  Far32	 MAIN:0F79
$DO_LIT				  Far32	 MAIN:1128
$DP				  Far32	 MAIN:0382
$DROP				  Far32	 MAIN:194A
$DSUB				  Far32	 MAIN:286B
$DUP				  Far32	 MAIN:195E
$EMIT				  Far32	 MAIN:087C
$ENTER				  Far32	 MAIN:00C7
$EQ				  Far32	 MAIN:1EA1
$EVAL				  Far32	 MAIN:0201
$EXCEPTION_HANDLER		  Far32	 MAIN:029C
$EXECUTE			  Far32	 MAIN:2243
$EXIT				  Far32	 MAIN:26E8
$FALSE				  Far32	 MAIN:1E34
$FETCH				  Far32	 MAIN:1FCA
$FETCH_EXECUTE			  Far32	 MAIN:225B
$FILE_POSITION			  Far32	 MAIN:0651
$FIND				  Far32	 MAIN:21C6
$FIND_FORTH			  Far32	 MAIN:2177
$FORTH_WORDLIST			  Far32	 MAIN:2096
$FREE				  Far32	 MAIN:0977
$FREE_LIBRARY			  Far32	 MAIN:04F0
$GR				  Far32	 MAIN:1E7F
$HEADERC			  Far32	 MAIN:1618
$HEAD_FROM			  Far32	 MAIN:17A1
$HEAD_TO_NAME			  Far32	 MAIN:17C6
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 235
Symbol Table



$HERE				  Far32	 MAIN:2775
$HFLAGS_FETCH			  Far32	 MAIN:16BE
$HFLAGS_STORE			  Far32	 MAIN:16A4
$H_TO_HASH_NAME			  Far32	 MAIN:1897
$H_TO_NEXT_TO_H			  Far32	 MAIN:1875
$I				  Far32	 MAIN:21FD
$ILC2L				  Far32	 MAIN:1158
$ILCL				  Far32	 MAIN:10C7
$ILCS				  Far32	 MAIN:1040
$INCLUDED			  Far32	 MAIN:2B9B
$INCLUDE_FILE			  Far32	 MAIN:2BB6
$INIT_USER			  Far32	 MAIN:0A03
$INPUTFROMR			  Far32	 MAIN:0C51
$INPUTTOR			  Far32	 MAIN:0C07
$INTERPRET			  Far32	 MAIN:12DB
$INTERPRET_LITERAL		  Far32	 MAIN:11F6
$INTERPRET_WORD			  Far32	 MAIN:128B
$INT_COMP_TO_COMP		  Far32	 MAIN:0E48
$INT_COMP_TO_INT		  Far32	 MAIN:0E24
$INVERT				  Far32	 MAIN:1D94
$INVERT_HFLAGS_STORE		  Far32	 MAIN:1751
$IS_INT_COMPQ			  Far32	 MAIN:0DF9
$ITICK				  Far32	 MAIN:2228
$J				  Far32	 MAIN:2212
$LATEST_HEAD_FETCH		  Far32	 MAIN:1409
$LATEST_HEAD_STORE		  Far32	 MAIN:142D
$LE				  Far32	 MAIN:1E5D
$LEAVE				  Far32	 MAIN:21DA
$LINE				  Far32	 MAIN:024C
$LINK_FROM			  Far32	 MAIN:1852
$LIT				  Far32	 MAIN:0072
$LITERAL			  Far32	 MAIN:2752
$LOAD_LIBRARY			  Far32	 MAIN:04BD
$LSHIFT				  Far32	 MAIN:1CC1
$MADD				  Far32	 MAIN:2954
$MAIN				  Far32	 MAIN:03CD
$MAX_NAME_LENGTH		  Far32	 MAIN:1368
$MMUL				  Far32	 MAIN:1CF3
$MROT				  Far32	 MAIN:19F6
$MUL				  Far32	 MAIN:1C09
$NAME_FROM			  Far32	 MAIN:1816
$NAME_TO_HEAD			  Far32	 MAIN:17E2
$NEGATE				  Far32	 MAIN:1D0F
$NIP				  Far32	 MAIN:1975
$NOEQ				  Far32	 MAIN:1EC4
$OPEN_FILE			  Far32	 MAIN:069A
$OR				  Far32	 MAIN:1DAA
$OVER				  Far32	 MAIN:198C
$PADDLOOP			  Far32	 MAIN:2310
$PARSE				  Far32	 MAIN:2546
$PARSE_CHECK_HEADERC		  Far32	 MAIN:1676
$PBYE				  Far32	 MAIN:0456
$PCFA_C				  Far32	 MAIN:15D2
$PDO				  Far32	 MAIN:2271
$PDO_INT_COMP			  Far32	 MAIN:0169
$PHEADERC			  Far32	 MAIN:1555
$PICK				  Far32	 MAIN:1A28
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 236
Symbol Table



$PINCLUDED			  Far32	 MAIN:2B74
$PLOOP				  Far32	 MAIN:22D1
$PLUS_R				  Far32	 MAIN:1BC9
$POCKET				  Far32	 MAIN:02FE
$POSTPONE			  Far32	 MAIN:0F13
$POSTPONEC			  Far32	 MAIN:0EF0
$PPARSE				  Far32	 MAIN:250C
$PQDO				  Far32	 MAIN:229B
$PREAD_LINE			  Far32	 MAIN:07C1
$PSEH_HANDLER			  Far32	 MAIN:0D9E
$PSQUOTE			  Far32	 MAIN:2581
$PTHROW				  Far32	 MAIN:2AB9
$PTYPE				  Far32	 MAIN:0A32
$PWORD				  Far32	 MAIN:2451
$QBRANCH			  Far32	 MAIN:003E
$QDUP				  Far32	 MAIN:18BE
$READ_FILE			  Far32	 MAIN:0777
$READ_LINE			  Far32	 MAIN:2B5B
$REFILL				  Far32	 MAIN:0B31
$REPORT_NAME			  Far32	 MAIN:14A9
$REPOSITION_FILE		  Far32	 MAIN:06E8
$RESET_HFLAGS_STORE		  Far32	 MAIN:1714
$RESIZE				  Far32	 MAIN:09BB
$RESIZE_FILE			  Far32	 MAIN:080C
$RFETCH				  Far32	 MAIN:1AE2
$RFROM				  Far32	 MAIN:1AC9
$ROT				  Far32	 MAIN:19A4
$RP0				  Far32	 MAIN:1B88
$RPFETCH			  Far32	 MAIN:1BA2
$RPSTORE			  Far32	 MAIN:1BB6
$RSHIFT				  Far32	 MAIN:1CDC
$R_O				  Far32	 MAIN:2B1F
$R_PICK				  Far32	 MAIN:1B59
$R_W				  Far32	 MAIN:2B43
$SEARCH_WORDLIST		  Far32	 MAIN:20BC
$SEH_HANDLER			  Far32	 MAIN:0DB8
$SET_HFLAGS_STORE		  Far32	 MAIN:16DC
$SF				  Far32	 MAIN:0337
$SMDIVREM			  Far32	 MAIN:1D29
$SOURCE				  Far32	 MAIN:0A9C
$SOURCE_ID			  Far32	 MAIN:0A66
$SOURCE_ID_STORE		  Far32	 MAIN:0A83
$SP0				  Far32	 MAIN:1A6F
$SPFETCH			  Far32	 MAIN:1A85
$SPSTORE			  Far32	 MAIN:1A9B
$SQUOTE				  Far32	 MAIN:263D
$SQUOTE_BUFFER			  Far32	 MAIN:02E9
$SQ_COMP			  Far32	 MAIN:25BB
$SQ_INT				  Far32	 MAIN:2604
$STATE				  Far32	 MAIN:0396
$STOD				  Far32	 MAIN:2A4E
$STORE				  Far32	 MAIN:1FB5
$SUB				  Far32	 MAIN:1C35
$SWAP				  Far32	 MAIN:1A10
$THREAD				  Far32	 MAIN:0903
$THREAD_EXIT			  Far32	 MAIN:0CD3
$THROW				  Far32	 MAIN:2AFD
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 237
Symbol Table



$THROW_ADDRESS			  Far32	 MAIN:02B8
$THROW_WORD			  Far32	 MAIN:02D1
$TIB				  Far32	 MAIN:01DB
$TOBODY				  Far32	 MAIN:2973
$TOIN				  Far32	 MAIN:243C
$TONUMBER			  Far32	 MAIN:298D
$TONUMBER_SIGNED		  Far32	 MAIN:0F5C
$TOR				  Far32	 MAIN:1AB0
$TO_HEAD			  Far32	 MAIN:1781
$TO_LINK			  Far32	 MAIN:1832
$TO_NAME			  Far32	 MAIN:17FA
$TRUE				  Far32	 MAIN:1E4A
$TUCK				  Far32	 MAIN:1A41
$TYPE				  Far32	 MAIN:08A7
$UDDIV				  Far32	 MAIN:1DDA
$UGR				  Far32	 MAIN:1F93
$ULE				  Far32	 MAIN:1F70
$UMDIVMOD			  Far32	 MAIN:1D5F
$UMMUL				  Far32	 MAIN:1D43
$WIN32_EXCEPTION_CONTEXT	  Far32	 MAIN:0DDE
$WORD				  Far32	 MAIN:24CA
$WRITE_FILE			  Far32	 MAIN:0730
$W_O				  Far32	 MAIN:2B31
$XOR				  Far32	 MAIN:1DC2
$ZERO				  Far32	 MAIN:01AC
$ZEROEQ				  Far32	 MAIN:1F09
$ZEROGR				  Far32	 MAIN:1F4E
$ZEROLE				  Far32	 MAIN:1EE7
$ZERONOEQ			  Far32	 MAIN:1F2C
??0000				  Near32 MAIN:0030
??0001				  Near32 MAIN:0039
??0003				  Near32 MAIN:0042
??0004				  Near32 MAIN:004F
??0005				  Near32 MAIN:0057
??0007				  Near32 MAIN:0060
??0008				  Near32 MAIN:0068
??0009				  Near32 MAIN:006D
??000B				  Near32 MAIN:0076
??000C				  Near32 MAIN:007D
??000D				  Near32 MAIN:0083
??000F				  Near32 MAIN:008C
??0010				  Near32 MAIN:0095
??0011				  Near32 MAIN:00A4
??0013				  Near32 MAIN:00AD
??0014				  Near32 MAIN:00B6
??0015				  Near32 MAIN:00BE
??0017				  Near32 MAIN:00C7
??0018				  Near32 MAIN:00D7
??0019				  Near32 MAIN:00E4
??001B				  Near32 MAIN:00ED
??001C				  Near32 MAIN:00F6
??001D				  Near32 MAIN:0105
??001F				  Near32 MAIN:010E
??0020				  Near32 MAIN:0116
??0021				  Near32 MAIN:0121
??0023				  Near32 MAIN:012A
??0024				  Near32 MAIN:0135
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 238
Symbol Table



??0025				  Near32 MAIN:0141
??0027				  Near32 MAIN:014A
??0028				  Near32 MAIN:0151
??0029				  Near32 MAIN:0160
??002B				  Near32 MAIN:0169
??002C				  Near32 MAIN:017F
??002D				  Near32 MAIN:018B
??002F				  Near32 MAIN:0194
??0030				  Near32 MAIN:01A4
??0031				  Near32 MAIN:01A7
??0033				  Near32 MAIN:01B0
??0034				  Near32 MAIN:01B4
??0035				  Near32 MAIN:01C4
??0037				  Near32 MAIN:01CD
??0038				  Near32 MAIN:01D1
??0039				  Near32 MAIN:01D6
??003B				  Near32 MAIN:01DF
??003C				  Near32 MAIN:01E3
??003D				  Near32 MAIN:01E9
??003F				  Near32 MAIN:01F2
??0040				  Near32 MAIN:01F6
??0041				  Near32 MAIN:01FC
??0043				  Near32 MAIN:0205
??0044				  Near32 MAIN:0209
??0045				  Near32 MAIN:0210
??0047				  Near32 MAIN:0219
??0048				  Near32 MAIN:021D
??0049				  Near32 MAIN:0234
??004B				  Near32 MAIN:023D
??004C				  Near32 MAIN:0241
??004D				  Near32 MAIN:0247
??004F				  Near32 MAIN:0250
??0050				  Near32 MAIN:0254
??0051				  Near32 MAIN:025B
??0053				  Near32 MAIN:0264
??0054				  Near32 MAIN:0268
??0055				  Near32 MAIN:0277
??0057				  Near32 MAIN:0280
??0058				  Near32 MAIN:0284
??0059				  Near32 MAIN:0297
??005B				  Near32 MAIN:02A0
??005C				  Near32 MAIN:02A4
??005D				  Near32 MAIN:02B3
??005F				  Near32 MAIN:02BC
??0060				  Near32 MAIN:02C0
??0061				  Near32 MAIN:02CC
??0063				  Near32 MAIN:02D5
??0064				  Near32 MAIN:02D9
??0065				  Near32 MAIN:02E4
??0067				  Near32 MAIN:02ED
??0068				  Near32 MAIN:02F1
??0069				  Near32 MAIN:02F9
??006B				  Near32 MAIN:0302
??006C				  Near32 MAIN:0306
??006D				  Near32 MAIN:030F
??006F				  Near32 MAIN:0318
??0070				  Near32 MAIN:031C
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 239
Symbol Table



??0071				  Near32 MAIN:0321
??0073				  Near32 MAIN:032A
??0074				  Near32 MAIN:032E
??0075				  Near32 MAIN:0332
??0077				  Near32 MAIN:033B
??0078				  Near32 MAIN:033F
??0079				  Near32 MAIN:034F
??007B				  Near32 MAIN:0358
??007C				  Near32 MAIN:035C
??007D				  Near32 MAIN:036C
??007F				  Near32 MAIN:0375
??0080				  Near32 MAIN:0379
??0081				  Near32 MAIN:037D
??0083				  Near32 MAIN:0386
??0084				  Near32 MAIN:038A
??0085				  Near32 MAIN:0391
??0087				  Near32 MAIN:039A
??0088				  Near32 MAIN:039E
??0089				  Near32 MAIN:03A4
??008B				  Near32 MAIN:03AD
??008C				  Near32 MAIN:03B1
??008D				  Near32 MAIN:03B5
??008F				  Near32 MAIN:03BE
??0090				  Near32 MAIN:03C2
??0091				  Near32 MAIN:03C8
??0093				  Near32 MAIN:03D1
??0094				  Near32 MAIN:03D5
??0095				  Near32 MAIN:03E6
??0097				  Near32 MAIN:03EF
??0098				  Near32 MAIN:03F3
??0099				  Near32 MAIN:03FA
??009B				  Near32 MAIN:0403
??009C				  Near32 MAIN:041F
??009D				  Near32 MAIN:0425
??009F				  Near32 MAIN:042E
??00A0				  Near32 MAIN:044A
??00A1				  Near32 MAIN:0451
??00A3				  Near32 MAIN:045A
??00A4				  Near32 MAIN:0476
??00A5				  Near32 MAIN:0484
??00A7				  Near32 MAIN:048D
??00A8				  Near32 MAIN:04A9
??00A9				  Near32 MAIN:04B8
??00AB				  Near32 MAIN:04C1
??00AC				  Near32 MAIN:04DE
??00AD				  Near32 MAIN:04EB
??00AF				  Near32 MAIN:04F4
??00B0				  Near32 MAIN:0510
??00B1				  Near32 MAIN:0522
??00B3				  Near32 MAIN:052B
??00B4				  Near32 MAIN:0548
??00B5				  Near32 MAIN:0554
??00B7				  Near32 MAIN:055D
??00B8				  Near32 MAIN:0579
??00B9				  Near32 MAIN:0586
??00BB				  Near32 MAIN:058F
??00BC				  Near32 MAIN:05AB
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 240
Symbol Table



??00BD				  Near32 MAIN:05B7
??00BF				  Near32 MAIN:05C0
??00C0				  Near32 MAIN:05F3
??00C1				  Near32 MAIN:0600
??00C3				  Near32 MAIN:0609
??00C4				  Near32 MAIN:063D
??00C5				  Near32 MAIN:064C
??00C7				  Near32 MAIN:0655
??00C8				  Near32 MAIN:068A
??00C9				  Near32 MAIN:0695
??00CB				  Near32 MAIN:069E
??00CC				  Near32 MAIN:06D2
??00CD				  Near32 MAIN:06E3
??00CF				  Near32 MAIN:06EC
??00D0				  Near32 MAIN:071F
??00D1				  Near32 MAIN:072B
??00D3				  Near32 MAIN:0734
??00D4				  Near32 MAIN:0767
??00D5				  Near32 MAIN:0772
??00D7				  Near32 MAIN:077B
??00D8				  Near32 MAIN:07AF
??00D9				  Near32 MAIN:07BC
??00DB				  Near32 MAIN:07C5
??00DC				  Near32 MAIN:07FA
??00DD				  Near32 MAIN:0807
??00DF				  Near32 MAIN:0810
??00E0				  Near32 MAIN:0843
??00E1				  Near32 MAIN:084B
??00E3				  Near32 MAIN:0854
??00E4				  Near32 MAIN:0871
??00E5				  Near32 MAIN:0877
??00E7				  Near32 MAIN:0880
??00E8				  Near32 MAIN:089C
??00E9				  Near32 MAIN:08A2
??00EB				  Near32 MAIN:08AB
??00EC				  Near32 MAIN:08C7
??00ED				  Near32 MAIN:08D0
??00EF				  Near32 MAIN:08D9
??00F0				  Near32 MAIN:08F6
??00F1				  Near32 MAIN:08FE
??00F3				  Near32 MAIN:0907
??00F4				  Near32 MAIN:0925
??00F5				  Near32 MAIN:092F
??00F7				  Near32 MAIN:0938
??00F8				  Near32 MAIN:096C
??00F9				  Near32 MAIN:0972
??00FB				  Near32 MAIN:097B
??00FC				  Near32 MAIN:09AE
??00FD				  Near32 MAIN:09B6
??00FF				  Near32 MAIN:09BF
??0100				  Near32 MAIN:09F3
??0101				  Near32 MAIN:09FE
??0103				  Near32 MAIN:0A07
??0104				  Near32 MAIN:0A25
??0105				  Near32 MAIN:0A2D
??0107				  Near32 MAIN:0A36
??0108				  Near32 MAIN:0A56
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 241
Symbol Table



??0109				  Near32 MAIN:0A61
??010B				  Near32 MAIN:0A6A
??010C				  Near32 MAIN:0A72
??010D				  Near32 MAIN:0A7E
??010F				  Near32 MAIN:0A87
??0110				  Near32 MAIN:0A8F
??0111				  Near32 MAIN:0A97
??0113				  Near32 MAIN:0AA0
??0114				  Near32 MAIN:0B24
??0115				  Near32 MAIN:0B2C
??0117				  Near32 MAIN:0B35
??0118				  Near32 MAIN:0BF9
??0119				  Near32 MAIN:0C02
??011B				  Near32 MAIN:0C0B
??011C				  Near32 MAIN:0C43
??011D				  Near32 MAIN:0C4C
??011F				  Near32 MAIN:0C55
??0120				  Near32 MAIN:0CC1
??0121				  Near32 MAIN:0CCE
??0123				  Near32 MAIN:0CD7
??0124				  Near32 MAIN:0D8A
??0125				  Near32 MAIN:0D99
??0127				  Near32 MAIN:0DA2
??0128				  Near32 MAIN:0DA6
??0129				  Near32 MAIN:0DB3
??012B				  Near32 MAIN:0DBC
??012C				  Near32 MAIN:0DC0
??012D				  Near32 MAIN:0DD9
??012F				  Near32 MAIN:0DE2
??0130				  Near32 MAIN:0DE6
??0131				  Near32 MAIN:0DF4
??0133				  Near32 MAIN:0DFD
??0134				  Near32 MAIN:0E11
??0135				  Near32 MAIN:0E1F
??0137				  Near32 MAIN:0E28
??0138				  Near32 MAIN:0E34
??0139				  Near32 MAIN:0E43
??013B				  Near32 MAIN:0E4C
??013C				  Near32 MAIN:0E5C
??013D				  Near32 MAIN:0E63
??013F				  Near32 MAIN:0E6C
??0140				  Near32 MAIN:0EE0
??0141				  Near32 MAIN:0EEB
??0143				  Near32 MAIN:0EF4
??0144				  Near32 MAIN:0F04
??0145				  Near32 MAIN:0F0E
??0147				  Near32 MAIN:0F17
??0148				  Near32 MAIN:0F23
??0149				  Near32 MAIN:0F2E
??014B				  Near32 MAIN:0F37
??014C				  Near32 MAIN:0F47
??014D				  Near32 MAIN:0F57
??014F				  Near32 MAIN:0F60
??0150				  Near32 MAIN:0F64
??0151				  Near32 MAIN:0F74
??0153				  Near32 MAIN:0F7D
??0154				  Near32 MAIN:0FB9
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 242
Symbol Table



??0155				  Near32 MAIN:0FCA
??0157				  Near32 MAIN:0FD3
??0158				  Near32 MAIN:0FF3
??0159				  Near32 MAIN:0FFF
??015B				  Near32 MAIN:1008
??015C				  Near32 MAIN:102C
??015D				  Near32 MAIN:103B
??015F				  Near32 MAIN:1044
??0160				  Near32 MAIN:10B4
??0161				  Near32 MAIN:10C2
??0163				  Near32 MAIN:10CB
??0164				  Near32 MAIN:111B
??0165				  Near32 MAIN:1123
??0167				  Near32 MAIN:112C
??0168				  Near32 MAIN:1144
??0169				  Near32 MAIN:1153
??016B				  Near32 MAIN:115C
??016C				  Near32 MAIN:11B4
??016D				  Near32 MAIN:11BD
??016F				  Near32 MAIN:11C6
??0170				  Near32 MAIN:11DE
??0171				  Near32 MAIN:11F1
??0173				  Near32 MAIN:11FA
??0174				  Near32 MAIN:1276
??0175				  Near32 MAIN:1286
??0177				  Near32 MAIN:128F
??0178				  Near32 MAIN:12CB
??0179				  Near32 MAIN:12D6
??017B				  Near32 MAIN:12DF
??017C				  Near32 MAIN:130F
??017D				  Near32 MAIN:131E
??017F				  Near32 MAIN:1327
??0180				  Near32 MAIN:132B
??0181				  Near32 MAIN:1345
??0183				  Near32 MAIN:134E
??0184				  Near32 MAIN:1352
??0185				  Near32 MAIN:1363
??0187				  Near32 MAIN:136C
??0188				  Near32 MAIN:1370
??0189				  Near32 MAIN:1378
??018B				  Near32 MAIN:1381
??018C				  Near32 MAIN:1385
??018D				  Near32 MAIN:1391
??018F				  Near32 MAIN:139A
??0190				  Near32 MAIN:139E
??0191				  Near32 MAIN:13A7
??0193				  Near32 MAIN:13B0
??0194				  Near32 MAIN:13B4
??0195				  Near32 MAIN:13C3
??0197				  Near32 MAIN:13CC
??0198				  Near32 MAIN:13D0
??0199				  Near32 MAIN:13E9
??019B				  Near32 MAIN:13F2
??019C				  Near32 MAIN:13F6
??019D				  Near32 MAIN:1404
??019F				  Near32 MAIN:140D
??01A0				  Near32 MAIN:141A
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 243
Symbol Table



??01A1				  Near32 MAIN:1428
??01A3				  Near32 MAIN:1431
??01A4				  Near32 MAIN:143E
??01A5				  Near32 MAIN:144A
??01A7				  Near32 MAIN:1453
??01A8				  Near32 MAIN:1497
??01A9				  Near32 MAIN:14A4
??01AB				  Near32 MAIN:14AD
??01AD				  Near32 MAIN:14CF
??01AE				  Near32 MAIN:14E5
??01B0				  Near32 MAIN:14EE
??01B3				  Near32 MAIN:1545
??01B4				  Near32 MAIN:1550
??01B6				  Near32 MAIN:1559
??01B7				  Near32 MAIN:15C5
??01B8				  Near32 MAIN:15CD
??01BA				  Near32 MAIN:15D6
??01BB				  Near32 MAIN:160A
??01BC				  Near32 MAIN:1613
??01BE				  Near32 MAIN:161C
??01BF				  Near32 MAIN:1628
??01C0				  Near32 MAIN:1637
??01C2				  Near32 MAIN:1640
??01C3				  Near32 MAIN:165C
??01C4				  Near32 MAIN:1671
??01C6				  Near32 MAIN:167A
??01C7				  Near32 MAIN:1696
??01C8				  Near32 MAIN:169F
??01CA				  Near32 MAIN:16A8
??01CB				  Near32 MAIN:16B0
??01CC				  Near32 MAIN:16B9
??01CE				  Near32 MAIN:16C2
??01CF				  Near32 MAIN:16CA
??01D0				  Near32 MAIN:16D7
??01D2				  Near32 MAIN:16E0
??01D3				  Near32 MAIN:1700
??01D4				  Near32 MAIN:170F
??01D6				  Near32 MAIN:1718
??01D7				  Near32 MAIN:173C
??01D8				  Near32 MAIN:174C
??01DA				  Near32 MAIN:1755
??01DB				  Near32 MAIN:1775
??01DC				  Near32 MAIN:177C
??01DE				  Near32 MAIN:1785
??01DF				  Near32 MAIN:1795
??01E0				  Near32 MAIN:179C
??01E2				  Near32 MAIN:17A5
??01E3				  Near32 MAIN:17B6
??01E4				  Near32 MAIN:17C1
??01E6				  Near32 MAIN:17CA
??01E7				  Near32 MAIN:17D2
??01E8				  Near32 MAIN:17DD
??01EA				  Near32 MAIN:17E6
??01EB				  Near32 MAIN:17EE
??01EC				  Near32 MAIN:17F5
??01EE				  Near32 MAIN:17FE
??01EF				  Near32 MAIN:180A
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 244
Symbol Table



??01F0				  Near32 MAIN:1811
??01F2				  Near32 MAIN:181A
??01F3				  Near32 MAIN:1826
??01F4				  Near32 MAIN:182D
??01F6				  Near32 MAIN:1836
??01F7				  Near32 MAIN:1846
??01F8				  Near32 MAIN:184D
??01FA				  Near32 MAIN:1856
??01FB				  Near32 MAIN:1866
??01FC				  Near32 MAIN:1870
??01FE				  Near32 MAIN:1879
??01FF				  Near32 MAIN:1889
??0200				  Near32 MAIN:1892
??0202				  Near32 MAIN:189B
??0203				  Near32 MAIN:18B3
??0204				  Near32 MAIN:18B9
??0206				  Near32 MAIN:18C2
??0207				  Near32 MAIN:18CF
??0208				  Near32 MAIN:18D6
??020A				  Near32 MAIN:18DF
??020B				  Near32 MAIN:18E6
??020C				  Near32 MAIN:18EC
??020E				  Near32 MAIN:18F5
??020F				  Near32 MAIN:1903
??0210				  Near32 MAIN:190A
??0212				  Near32 MAIN:1913
??0213				  Near32 MAIN:1922
??0214				  Near32 MAIN:1929
??0216				  Near32 MAIN:1932
??0217				  Near32 MAIN:193F
??0218				  Near32 MAIN:1945
??021A				  Near32 MAIN:194E
??021B				  Near32 MAIN:1954
??021C				  Near32 MAIN:1959
??021E				  Near32 MAIN:1962
??021F				  Near32 MAIN:196B
??0220				  Near32 MAIN:1970
??0222				  Near32 MAIN:1979
??0223				  Near32 MAIN:1981
??0224				  Near32 MAIN:1987
??0226				  Near32 MAIN:1990
??0227				  Near32 MAIN:199A
??0228				  Near32 MAIN:199F
??022A				  Near32 MAIN:19A8
??022B				  Near32 MAIN:19B3
??022C				  Near32 MAIN:19B9
??022E				  Near32 MAIN:19C2
??022F				  Near32 MAIN:19EB
??0230				  Near32 MAIN:19F1
??0232				  Near32 MAIN:19FA
??0233				  Near32 MAIN:1A05
??0234				  Near32 MAIN:1A0B
??0236				  Near32 MAIN:1A14
??0237				  Near32 MAIN:1A1D
??0238				  Near32 MAIN:1A23
??023A				  Near32 MAIN:1A2C
??023B				  Near32 MAIN:1A36
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 245
Symbol Table



??023C				  Near32 MAIN:1A3C
??023E				  Near32 MAIN:1A45
??023F				  Near32 MAIN:1A4F
??0240				  Near32 MAIN:1A58
??0242				  Near32 MAIN:1A61
??0243				  Near32 MAIN:1A65
??0244				  Near32 MAIN:1A6A
??0246				  Near32 MAIN:1A73
??0247				  Near32 MAIN:1A7B
??0248				  Near32 MAIN:1A80
??024A				  Near32 MAIN:1A89
??024B				  Near32 MAIN:1A91
??024C				  Near32 MAIN:1A96
??024E				  Near32 MAIN:1A9F
??024F				  Near32 MAIN:1AA7
??0250				  Near32 MAIN:1AAB
??0252				  Near32 MAIN:1AB4
??0253				  Near32 MAIN:1AC0
??0254				  Near32 MAIN:1AC4
??0256				  Near32 MAIN:1ACD
??0257				  Near32 MAIN:1AD9
??0258				  Near32 MAIN:1ADD
??025A				  Near32 MAIN:1AE6
??025B				  Near32 MAIN:1AEF
??025C				  Near32 MAIN:1AF4
??025E				  Near32 MAIN:1AFD
??025F				  Near32 MAIN:1B10
??0260				  Near32 MAIN:1B15
??0262				  Near32 MAIN:1B1E
??0263				  Near32 MAIN:1B31
??0264				  Near32 MAIN:1B36
??0266				  Near32 MAIN:1B3F
??0267				  Near32 MAIN:1B4C
??0268				  Near32 MAIN:1B54
??026A				  Near32 MAIN:1B5D
??026B				  Near32 MAIN:1B68
??026C				  Near32 MAIN:1B71
??026E				  Near32 MAIN:1B7A
??026F				  Near32 MAIN:1B7E
??0270				  Near32 MAIN:1B83
??0272				  Near32 MAIN:1B8C
??0273				  Near32 MAIN:1B98
??0274				  Near32 MAIN:1B9D
??0276				  Near32 MAIN:1BA6
??0277				  Near32 MAIN:1BAC
??0278				  Near32 MAIN:1BB1
??027A				  Near32 MAIN:1BBA
??027B				  Near32 MAIN:1BC0
??027C				  Near32 MAIN:1BC4
??027E				  Near32 MAIN:1BCD
??027F				  Near32 MAIN:1BDB
??0280				  Near32 MAIN:1BE0
??0282				  Near32 MAIN:1BE9
??0283				  Near32 MAIN:1C01
??0284				  Near32 MAIN:1C04
??0286				  Near32 MAIN:1C0D
??0287				  Near32 MAIN:1C17
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 246
Symbol Table



??0288				  Near32 MAIN:1C1A
??028A				  Near32 MAIN:1C23
??028B				  Near32 MAIN:1C2D
??028C				  Near32 MAIN:1C30
??028E				  Near32 MAIN:1C39
??028F				  Near32 MAIN:1C43
??0290				  Near32 MAIN:1C47
??0292				  Near32 MAIN:1C50
??0293				  Near32 MAIN:1C58
??0294				  Near32 MAIN:1C5C
??0296				  Near32 MAIN:1C65
??0297				  Near32 MAIN:1C6D
??0298				  Near32 MAIN:1C71
??029A				  Near32 MAIN:1C7A
??029B				  Near32 MAIN:1C83
??029C				  Near32 MAIN:1C87
??029E				  Near32 MAIN:1C90
??029F				  Near32 MAIN:1C99
??02A0				  Near32 MAIN:1C9E
??02A2				  Near32 MAIN:1CA7
??02A3				  Near32 MAIN:1CB4
??02A4				  Near32 MAIN:1CBC
??02A6				  Near32 MAIN:1CC5
??02A7				  Near32 MAIN:1CCF
??02A8				  Near32 MAIN:1CD7
??02AA				  Near32 MAIN:1CE0
??02AB				  Near32 MAIN:1CEA
??02AC				  Near32 MAIN:1CEE
??02AE				  Near32 MAIN:1CF7
??02AF				  Near32 MAIN:1D02
??02B0				  Near32 MAIN:1D0A
??02B2				  Near32 MAIN:1D13
??02B3				  Near32 MAIN:1D1C
??02B4				  Near32 MAIN:1D24
??02B6				  Near32 MAIN:1D2D
??02B7				  Near32 MAIN:1D39
??02B8				  Near32 MAIN:1D3E
??02BA				  Near32 MAIN:1D47
??02BB				  Near32 MAIN:1D52
??02BC				  Near32 MAIN:1D5A
??02BE				  Near32 MAIN:1D63
??02BF				  Near32 MAIN:1D6F
??02C0				  Near32 MAIN:1D74
??02C2				  Near32 MAIN:1D7D
??02C3				  Near32 MAIN:1D87
??02C4				  Near32 MAIN:1D8F
??02C6				  Near32 MAIN:1D98
??02C7				  Near32 MAIN:1DA1
??02C8				  Near32 MAIN:1DA5
??02CA				  Near32 MAIN:1DAE
??02CB				  Near32 MAIN:1DB8
??02CC				  Near32 MAIN:1DBD
??02CE				  Near32 MAIN:1DC6
??02CF				  Near32 MAIN:1DD0
??02D0				  Near32 MAIN:1DD5
??02D2				  Near32 MAIN:1DDE
??02D3				  Near32 MAIN:1E28
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 247
Symbol Table



??02D4				  Near32 MAIN:1E2F
??02D6				  Near32 MAIN:1E38
??02D7				  Near32 MAIN:1E3F
??02D8				  Near32 MAIN:1E45
??02DA				  Near32 MAIN:1E4E
??02DB				  Near32 MAIN:1E55
??02DC				  Near32 MAIN:1E58
??02DE				  Near32 MAIN:1E61
??02DF				  Near32 MAIN:1E77
??02E0				  Near32 MAIN:1E7A
??02E2				  Near32 MAIN:1E83
??02E3				  Near32 MAIN:1E99
??02E4				  Near32 MAIN:1E9C
??02E6				  Near32 MAIN:1EA5
??02E7				  Near32 MAIN:1EBB
??02E8				  Near32 MAIN:1EBF
??02EA				  Near32 MAIN:1EC8
??02EB				  Near32 MAIN:1EDE
??02EC				  Near32 MAIN:1EE2
??02EE				  Near32 MAIN:1EEB
??02EF				  Near32 MAIN:1F00
??02F0				  Near32 MAIN:1F04
??02F2				  Near32 MAIN:1F0D
??02F3				  Near32 MAIN:1F22
??02F4				  Near32 MAIN:1F27
??02F6				  Near32 MAIN:1F30
??02F7				  Near32 MAIN:1F45
??02F8				  Near32 MAIN:1F49
??02FA				  Near32 MAIN:1F52
??02FB				  Near32 MAIN:1F67
??02FC				  Near32 MAIN:1F6B
??02FE				  Near32 MAIN:1F74
??02FF				  Near32 MAIN:1F8A
??0300				  Near32 MAIN:1F8E
??0302				  Near32 MAIN:1F97
??0303				  Near32 MAIN:1FAD
??0304				  Near32 MAIN:1FB0
??0306				  Near32 MAIN:1FB9
??0307				  Near32 MAIN:1FC2
??0308				  Near32 MAIN:1FC5
??030A				  Near32 MAIN:1FCE
??030B				  Near32 MAIN:1FD6
??030C				  Near32 MAIN:1FDA
??030E				  Near32 MAIN:1FE3
??030F				  Near32 MAIN:1FEE
??0310				  Near32 MAIN:1FF2
??0312				  Near32 MAIN:1FFB
??0313				  Near32 MAIN:2006
??0314				  Near32 MAIN:200A
??0316				  Near32 MAIN:2013
??0317				  Near32 MAIN:201C
??0318				  Near32 MAIN:2020
??031A				  Near32 MAIN:2029
??031B				  Near32 MAIN:2034
??031C				  Near32 MAIN:203B
??031E				  Near32 MAIN:2044
??031F				  Near32 MAIN:204E
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 248
Symbol Table



??0320				  Near32 MAIN:2055
??0322				  Near32 MAIN:205E
??0323				  Near32 MAIN:2069
??0324				  Near32 MAIN:2070
??0326				  Near32 MAIN:2079
??0327				  Near32 MAIN:2081
??0328				  Near32 MAIN:2091
??032A				  Near32 MAIN:209A
??032B				  Near32 MAIN:20A6
??032C				  Near32 MAIN:20B7
??032E				  Near32 MAIN:20C0
??032F				  Near32 MAIN:2166
??0330				  Near32 MAIN:2172
??0332				  Near32 MAIN:217B
??0333				  Near32 MAIN:21BB
??0334				  Near32 MAIN:21C1
??0336				  Near32 MAIN:21CA
??0337				  Near32 MAIN:21CE
??0338				  Near32 MAIN:21D5
??033A				  Near32 MAIN:21DE
??033B				  Near32 MAIN:21F5
??033C				  Near32 MAIN:21F8
??033E				  Near32 MAIN:2201
??033F				  Near32 MAIN:220A
??0340				  Near32 MAIN:220D
??0342				  Near32 MAIN:2216
??0343				  Near32 MAIN:221F
??0344				  Near32 MAIN:2223
??0346				  Near32 MAIN:222C
??0347				  Near32 MAIN:2235
??0348				  Near32 MAIN:223E
??034A				  Near32 MAIN:2247
??034B				  Near32 MAIN:224C
??034C				  Near32 MAIN:2256
??034E				  Near32 MAIN:225F
??034F				  Near32 MAIN:2266
??0350				  Near32 MAIN:226C
??0352				  Near32 MAIN:2275
??0353				  Near32 MAIN:228F
??0354				  Near32 MAIN:2296
??0356				  Near32 MAIN:229F
??0357				  Near32 MAIN:22C4
??0358				  Near32 MAIN:22CC
??035A				  Near32 MAIN:22D5
??035B				  Near32 MAIN:2302
??035C				  Near32 MAIN:230B
??035E				  Near32 MAIN:2314
??035F				  Near32 MAIN:2353
??0360				  Near32 MAIN:2358
??0362				  Near32 MAIN:2361
??0363				  Near32 MAIN:2365
??0364				  Near32 MAIN:236D
??0366				  Near32 MAIN:2376
??0367				  Near32 MAIN:237A
??0368				  Near32 MAIN:2389
??036A				  Near32 MAIN:2392
??036B				  Near32 MAIN:2396
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 249
Symbol Table



??036C				  Near32 MAIN:23A2
??036E				  Near32 MAIN:23AB
??036F				  Near32 MAIN:23AF
??0370				  Near32 MAIN:23B6
??0372				  Near32 MAIN:23BF
??0373				  Near32 MAIN:2432
??0374				  Near32 MAIN:2437
??0376				  Near32 MAIN:2440
??0377				  Near32 MAIN:2444
??0378				  Near32 MAIN:244C
??037A				  Near32 MAIN:2455
??037B				  Near32 MAIN:24BF
??037C				  Near32 MAIN:24C5
??037E				  Near32 MAIN:24CE
??037F				  Near32 MAIN:24FE
??0380				  Near32 MAIN:2507
??0382				  Near32 MAIN:2510
??0383				  Near32 MAIN:253A
??0384				  Near32 MAIN:2541
??0386				  Near32 MAIN:254A
??0387				  Near32 MAIN:2576
??0388				  Near32 MAIN:257C
??038A				  Near32 MAIN:2585
??038B				  Near32 MAIN:25AD
??038C				  Near32 MAIN:25B6
??038E				  Near32 MAIN:25BF
??038F				  Near32 MAIN:25F7
??0390				  Near32 MAIN:25FF
??0392				  Near32 MAIN:2608
??0393				  Near32 MAIN:2634
??0394				  Near32 MAIN:2638
??0396				  Near32 MAIN:2641
??0397				  Near32 MAIN:2649
??0398				  Near32 MAIN:264C
??039A				  Near32 MAIN:2655
??039B				  Near32 MAIN:2665
??039C				  Near32 MAIN:2668
??039E				  Near32 MAIN:2671
??039F				  Near32 MAIN:2686
??03A0				  Near32 MAIN:2690
??03A2				  Near32 MAIN:2699
??03A3				  Near32 MAIN:26A1
??03A4				  Near32 MAIN:26A8
??03A6				  Near32 MAIN:26B1
??03A7				  Near32 MAIN:26BD
??03A8				  Near32 MAIN:26C1
??03AA				  Near32 MAIN:26CA
??03AB				  Near32 MAIN:26DE
??03AC				  Near32 MAIN:26E3
??03AE				  Near32 MAIN:26EC
??03AF				  Near32 MAIN:26F7
??03B0				  Near32 MAIN:26FD
??03B2				  Near32 MAIN:2706
??03B3				  Near32 MAIN:2711
??03B4				  Near32 MAIN:271B
??03B6				  Near32 MAIN:2724
??03B7				  Near32 MAIN:2744
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 250
Symbol Table



??03B8				  Near32 MAIN:274D
??03BA				  Near32 MAIN:2756
??03BB				  Near32 MAIN:276A
??03BC				  Near32 MAIN:2770
??03BE				  Near32 MAIN:2779
??03BF				  Near32 MAIN:2785
??03C0				  Near32 MAIN:278C
??03C2				  Near32 MAIN:2795
??03C3				  Near32 MAIN:27BC
??03C4				  Near32 MAIN:27C4
??03C6				  Near32 MAIN:27CD
??03C7				  Near32 MAIN:27FB
??03C8				  Near32 MAIN:2802
??03CA				  Near32 MAIN:280B
??03CB				  Near32 MAIN:2817
??03CC				  Near32 MAIN:2821
??03CE				  Near32 MAIN:282A
??03CF				  Near32 MAIN:2846
??03D0				  Near32 MAIN:284A
??03D2				  Near32 MAIN:2853
??03D3				  Near32 MAIN:2862
??03D4				  Near32 MAIN:2866
??03D6				  Near32 MAIN:286F
??03D7				  Near32 MAIN:287E
??03D8				  Near32 MAIN:2883
??03DA				  Near32 MAIN:288C
??03DB				  Near32 MAIN:2899
??03DC				  Near32 MAIN:289E
??03DE				  Near32 MAIN:28A7
??03DF				  Near32 MAIN:28B4
??03E0				  Near32 MAIN:28BA
??03E2				  Near32 MAIN:28C3
??03E3				  Near32 MAIN:28DA
??03E4				  Near32 MAIN:28E0
??03E6				  Near32 MAIN:28E9
??03E7				  Near32 MAIN:2900
??03E8				  Near32 MAIN:2906
??03EA				  Near32 MAIN:290F
??03EB				  Near32 MAIN:2926
??03EC				  Near32 MAIN:292F
??03EE				  Near32 MAIN:2938
??03EF				  Near32 MAIN:294B
??03F0				  Near32 MAIN:294F
??03F2				  Near32 MAIN:2958
??03F3				  Near32 MAIN:2967
??03F4				  Near32 MAIN:296E
??03F6				  Near32 MAIN:2977
??03F7				  Near32 MAIN:297F
??03F8				  Near32 MAIN:2988
??03FA				  Near32 MAIN:2991
??03FB				  Near32 MAIN:2A0A
??03FC				  Near32 MAIN:2A12
??03FE				  Near32 MAIN:2A1B
??03FF				  Near32 MAIN:2A44
??0400				  Near32 MAIN:2A49
??0402				  Near32 MAIN:2A52
??0403				  Near32 MAIN:2A5B
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 251
Symbol Table



??0404				  Near32 MAIN:2A62
??0406				  Near32 MAIN:2A6B
??0407				  Near32 MAIN:2AAB
??0408				  Near32 MAIN:2AB4
??040A				  Near32 MAIN:2ABD
??040B				  Near32 MAIN:2AF1
??040C				  Near32 MAIN:2AF8
??040E				  Near32 MAIN:2B01
??040F				  Near32 MAIN:2B15
??0410				  Near32 MAIN:2B1A
??0412				  Near32 MAIN:2B23
??0413				  Near32 MAIN:2B27
??0414				  Near32 MAIN:2B2C
??0416				  Near32 MAIN:2B35
??0417				  Near32 MAIN:2B39
??0418				  Near32 MAIN:2B3E
??041A				  Near32 MAIN:2B47
??041B				  Near32 MAIN:2B4B
??041C				  Near32 MAIN:2B56
??041E				  Near32 MAIN:2B5F
??041F				  Near32 MAIN:2B63
??0420				  Near32 MAIN:2B6F
??0422				  Near32 MAIN:2B78
??0423				  Near32 MAIN:2B8C
??0424				  Near32 MAIN:2B96
??0426				  Near32 MAIN:2B9F
??0427				  Near32 MAIN:2BA3
??0428				  Near32 MAIN:2BB1
??042A				  Near32 MAIN:2BBA
??042B				  Near32 MAIN:2C5C
??042C				  Near32 MAIN:2C66
??042E				  Near32 MAIN:2C6F
??DATE				  Text	 "01-04-03"
??FILENAME			  Text	 "FKernel "
??TIME				  Text	 "17:03:07"
??VERSION			  Number 0502
@@01AC				  Near32 MAIN:14CB
@@01B1				  Near32 MAIN:1533
@@01B2				  Near32 MAIN:1541
@@042F				  Near32 MAIN:2CD6
@@0430				  Near32 MAIN:2CF0
@@0431				  Near32 MAIN:2D27
@@0432				  Near32 MAIN:2D69
@@0433				  Near32 MAIN:2D9F
@@UC				  Near32 MAIN:2165
@CPU				  Text	 090DH
@CURSEG				  Text	 MAIN
@FILENAME			  Text	 FKERNEL
@WORDSIZE			  Text	 4
ABSOK				  Near32 MAIN:1CAE
ACCEPT_FUNC			  Number 0007
ALLOCATE_FUNC			  Number 0017
AT_XY_FUNC			  Number 0013
BASE_VAR			  Number 001C
BLK_VAR				  Number 084C
BLOCK_NUM_VAR			  Number 0850
BLOCK_READ			  Near32 MAIN:2404
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 252
Symbol Table



BLOCK_UPDATED_VAR		  Number 0854
BLOCK_VAR			  Number 0858
BYE_FUNC			  Number 0004
CASE_SENSITIVE_VAR		  Number 0028
CDN_OK				  Near32 MAIN:1541
CELL_SIZE			  Text	 4
CMOVEGR_EXIT			  Near32 MAIN:27EA
CMOVE_EXIT			  Near32 MAIN:27AB
CMP_CONT			  Near32 MAIN:20FD
CMP_EXIT			  Near32 MAIN:210F
CMP_LOOP			  Near32 MAIN:20E9
COMPARE_FUNC			  Number 0015
CT_EXIT				  Near32 MAIN:0EDC
CT_FOUND			  Near32 MAIN:0E94
CT_IMM				  Near32 MAIN:0ED4
CT_NO_I_C			  Near32 MAIN:0EB8
CURRENT_VAR			  Number 0848
CURR_FILE_POS_VAR		  Number 0038
D2L_EXIT			  Near32 MAIN:11DA
DABS_OK				  Near32 MAIN:28D3
DATA_STACK_SIZE			  Text	 00001000h
DCD_EXIT			  Near32 MAIN:0FEF
DCD_NOT_IMMEDIATE		  Near32 MAIN:0FEB
DD_EXIT				  Near32 MAIN:1028
DD_INTERPRETATION		  Near32 MAIN:1024
DESIRED_BASE_EQU		  Text	 20000000h
DESIRED_SIZE_EQU		  Text	 00040000h
DESIRED_SIZE_VAR		  Near32 MAIN:0014
DID_INTERPRET			  Near32 MAIN:0FAD
DIGITS_TABLE			  Near32 MAIN:2A1F
DL_EXIT				  Near32 MAIN:1140
DMAX_OK				  Near32 MAIN:28F9
DMIN_OK				  Near32 MAIN:291F
DO_CR				  Near32 MAIN:2D9F
DO_FORTH_NO_EXCEPTIONS		  Near32 MAIN:2DB7
DO_FORTH_SEH			  Near32 MAIN:0D82
DO_SEH				  Near32 MAIN:0D77
DO_THREAD			  Near32 MAIN:0D2C
DP_VAR				  Near32 MAIN:0386
EBP_VAR				  Number 000C
EBX_VAR				  Number 0010
EDI_VAR				  Number 0004
EMIT_FUNC			  Number 0005
EQ_YES				  Near32 MAIN:1EB5
ESI_VAR				  Number 0008
ESP_VAR				  Number 0014
EVAL_VAR			  Number 0034
EXCEPTION_HANDLER_VAR		  Number 0C58
EXECUTOR_XT			  Near32 MAIN:15FA
FF_EXIT				  Near32 MAIN:21B7
FF_FOUND			  Near32 MAIN:21AF
FILE_CLOSE_FUNC			  Number 000A
FILE_CREATE_FUNC		  Number 000B
FILE_OPEN_FUNC			  Number 000D
FILE_POSITION_FUNC		  Number 000C
FILE_READ_FUNC			  Number 000E
FILE_READ_LINE_FUNC		  Number 0011
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 253
Symbol Table



FILE_REPOSITION_FUNC		  Number 000F
FILE_RESIZE_FUNC		  Number 0012
FILE_WRITE_FUNC			  Number 0010
FORTH_WORDLIST_EQU		  Near32 MAIN:209A
FREE_FUNC			  Number 0018
FREE_LIBRARY_FUNC		  Number 0002
FUNC_AREA_SIZE			  Number 001A
FUNC_TABLE			  Near32 MAIN:002C
FUNC_TABLE_PTR			  Near32 MAIN:0020
F_FALSE				  Text	 0
F_TRUE				  Text	 0FFFFFFFFh
GET_LAST_ERROR_FUNC		  Number 0000
GET_PROC_ADDRESS_FUNC		  Number 0003
GR_YES				  Near32 MAIN:1E93
HERE				  Near32 MAIN:2DBF
ILC2L_EXIT			  Near32 MAIN:11B0
ILC2L_EXIT1			  Near32 MAIN:11A8
ILC2L_EXIT2			  Near32 MAIN:11A4
ILC2L_UNSIGNED			  Near32 MAIN:1198
ILCL_EXIT			  Near32 MAIN:1117
ILCL_NO				  Near32 MAIN:1113
ILCL_UNSIGNED			  Near32 MAIN:1107
ILCS_EXIT			  Near32 MAIN:10B0
ILCS_SIGNED			  Near32 MAIN:1090
ILCS_UNSIGNED			  Near32 MAIN:10A0
IL_CHECK_2LIT			  Near32 MAIN:1256
IL_OK1				  Near32 MAIN:123E
IL_UNKNOWN			  Near32 MAIN:126E
INCLUDE_FILE_EXIT		  Near32 MAIN:2C1E
INCLUDE_FILE_LOOP		  Near32 MAIN:2BDE
INPUTFROMR_EXIT			  Near32 MAIN:0CB9
INT_EXIT			  Near32 MAIN:1307
INT_LOOP			  Near32 MAIN:12DF
IW_EXIT				  Near32 MAIN:12C7
IW_NOT_FOUND			  Near32 MAIN:12AB
LASTWORD			  Number MAIN:2C5C
LATEST_WORD			  Number MAIN:20002C5C
LE_YES				  Near32 MAIN:1E71
LINE_VAR			  Number 0044
LOAD_LIBRARY_FUNC		  Number 0001
MAIN_PROC			  Near32 MAIN:03D1
MAX_LINE_LENGTH			  Text	 1024
MAX_NAME_LENGTH			  Text	 32
MAX_ORDER_COUNT			  Text	 16
MAX_TIB_LENGTH			  Text	 1024
NAME_EXIT			  Near32 MAIN:15A1
NAME_OK				  Near32 MAIN:1493
NAME_ZEROGR			  Near32 MAIN:146F
NOEQ_YES			  Near32 MAIN:1ED8
NOQBRANCH			  Near32 MAIN:004A
NO_NAME				  Near32 MAIN:159D
NO_REPORT			  Near32 MAIN:14CB
NO_TYPE				  Near32 MAIN:2D8D
PADDLOOP_LOOP_CONT		  Near32 MAIN:232D
PADDLOOP_LOOP_EXIT		  Near32 MAIN:233C
PADDLOOP_NEGATIVE		  Near32 MAIN:234D
PAGE_FUNC			  Number 0016
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 254
Symbol Table



PDIC_INT			  Near32 MAIN:0179
PLOOP_NOEQ			  Near32 MAIN:22F5
POCKET_VAR			  Number 1164
PPARSE_EXIT			  Near32 MAIN:252E
PPARSE_LOOP			  Near32 MAIN:251C
PQDO_EXIT			  Near32 MAIN:22BD
PWORD_ADDCHAR			  Near32 MAIN:2494
PWORD_EXIT			  Near32 MAIN:24A1
PWORD_LOOP			  Near32 MAIN:2478
PWORD_NOT_IN_WORD		  Near32 MAIN:2499
QDUPZERO			  Near32 MAIN:18CA
READ_BLOCK_FUNC			  Number 0008
REALLOCATE_FUNC			  Number 0019
REFILL_EVAL_EXIT		  Near32 MAIN:0BC5
REFILL_EXIT			  Near32 MAIN:0BF5
REFILL_FROM_FILE		  Near32 MAIN:0B95
REFILL_FROM_USER		  Near32 MAIN:0BCD
REFILL_NOT_BLOCK		  Near32 MAIN:0B6D
RETURN_ADDR_VAR			  Number 0000
RETURN_STACK_SIZE		  Text	 00001000h
RSTACK_VAR			  Number 2268
SEH_HANDLER			  Near32 MAIN:0D38
SF_VAR				  Near32 MAIN:033B
SIGN				  Near32 MAIN:0000
SOURCE_EXIT			  Near32 MAIN:0B20
SOURCE_ID_VAR			  Number 0024
SOURCE_NOT_BLOCK		  Near32 MAIN:0AC8
SOURCE_NOT_EVALUATE		  Near32 MAIN:0AF0
SOURCE_NOT_EVALUATE_EXIT	  Near32 MAIN:0B20
SOURCE_NOT_USER			  Near32 MAIN:0B14
SOURCE_NOT_USER_EXIT		  Near32 MAIN:0B20
SQUOTE_BUFFER_VAR		  Number 0D64
START				  Near32 MAIN:2C36
START_THREAD_FUNC		  Number 0014
STATE_VAR			  Number 0018
SW_FOUND			  Near32 MAIN:211F
SW_FOUND_IMMEDIATE		  Near32 MAIN:212C
SW_LOOP				  Near32 MAIN:20D4
SW_NEXT				  Near32 MAIN:2112
SW_NOT_FOUND			  Near32 MAIN:2148
THREAD_PROC			  Near32 MAIN:0CF2
THROW_ADDRESS_VAR		  Number 0C5C
THROW_EXIT			  Near32 MAIN:2B11
THROW_WORD_VAR			  Number 0C60
TIB_VAR				  Number 0448
TN_CONT				  Near32 MAIN:29B4
TN_CONT1			  Near32 MAIN:29DD
TN_CONT2			  Near32 MAIN:29D3
TN_LOOP				  Near32 MAIN:299E
TN_STOP				  Near32 MAIN:29FB
TOIN_VAR			  Number 0020
TONUMBER_SIGNED_VAR		  Number 002C
TYPE_FUNC			  Number 0006
UD_DIV				  Near32 MAIN:1E0A
UD_LOOP				  Near32 MAIN:1DF8
UD_NEXT				  Near32 MAIN:1E0F
UGR_YES				  Near32 MAIN:1FA7
Turbo Assembler	 Version 5.2	    01-04-03 17:03:07	    Page 255
Symbol Table



ULE_YES				  Near32 MAIN:1F84
UPCASE				  Near32 MAIN:215B
USER_AREA_SIZE			  Number 226C
USER_AREA_SIZE0			  Text	 00010000h
VEF_COMPILE_ONLY		  Text	 04h
VEF_HIDDEN			  Text	 02h
VEF_IMMEDIATE			  Text	 01h
VEF_USUAL			  Text	 00h
VOC_LINK			  Number MAIN:20002C5C
WIN32_EXCEPTION_CONTEXT_VAR	  Number 0C64
WRITE_BLOCK_FUNC		  Number 0009
ZEROEQ_YES			  Near32 MAIN:1F1C
ZEROGR_YES			  Near32 MAIN:1F61
ZEROLE_YES			  Near32 MAIN:1EFA
ZERONOEQ_YES			  Near32 MAIN:1F3F

Macro Name

$CALL
$COLON
$CONST
$CR
$DEF
$DEFER
$FUNC
$JMP
$NEXT
$USER
$VAR
$WRITE
CBR
CC
CCLIT
CEXIT
CFETCH
CQBR
CSTORE
CTHROW
CW
CWLIT
FETCHDS
FETCHRS
FUNC_ALIGN
FUNC_ALLOC
POPDS
POPRS
PUSHDS
PUSHRS
_ALIGN
_ALLOC
_VAR

Groups & Segments		  Bit Size Align  Combine Class

MAIN				  32  2DBF Para	  none
