# extract

Import('env')
senv = env.Clone()
senv['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = True

senv.Append(CCFLAGS = ['-m32', '-Wall', '-zq', '-fno-exceptions'])

senv.Append(LINKFLAGS = ['-m32', '-Wl,--no-as-needed'])

extractPreProcessSrc = ['linconst-extract.c']

extractRegExSrc = ['regex-include', 'regex-exclude', 'regex-exclude-names']

penv = senv.Clone()
penv.Replace(CCFLAGS = [])
extractProcessSrc = penv.PreProcess(extractPreProcessSrc)

extractSrc0 = senv.Command('linconst-extract.E0',
        [extractProcessSrc, extractRegExSrc],
        "cat ${SOURCE} | grep -E --file build/linconst-extract/regex-include | grep -Ev --file build/linconst-extract/regex-exclude | sort -u > ${TARGET}")

extractSrc1 = senv.Command('linconst-extract.E1',
        [extractSrc0, extractRegExSrc],
        "cat ${SOURCE} | cut --delimiter ' ' -f 2 | sort -u | grep -Ev --file build/linconst-extract/regex-exclude-names > ${TARGET}")

extractSrc2 = senv.Command('linconst-extract.E2',
        [extractSrc1],
        "sort -u ${SOURCE} | sed -E 's/(.+)/CONSTANT\(\\1\)/' > ${TARGET}")

publishExec = senv.Program('linconst-publish.elf', 'linconst-publish.c')
senv.Depends(publishExec, [extractSrc2])

linconstForth = senv.Command('linconst.4th',
        publishExec,
        "${SOURCE} | sed 's/\\r//' > ${TARGET}")

forthLib = senv.Install('#lib', linconstForth)
senv.NoClean(forthLib)
senv.Precious(forthLib)

senv.Alias('linconst', [publishExec, forthLib])
