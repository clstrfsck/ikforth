import platform

Import('env')

if 'debug' in BUILD_TARGETS:
    env.Replace(DEBUG = 'TRUE')

if 'dtc' in BUILD_TARGETS:
    env.Replace(CODE_THREADING_TYPE = 'DTC')

if 'itc' in BUILD_TARGETS:
    env.Replace(CODE_THREADING_TYPE = 'ITC')

if platform.system().startswith("CYGWIN_NT"):
    env.Replace(HSYS = 'nt')

if platform.system() == 'Windows':
    env.Replace(HSYS = 'nt')

if platform.system() == 'Linux':
    env.Replace(HSYS = 'linux')

env.SetDefault(TSYS = env['HSYS'])

if 'win32' in BUILD_TARGETS:
    env.Replace(TSYS = 'nt')

if 'linux' in BUILD_TARGETS:
    env.Replace(TSYS = 'linux')

if env['TSYS'] == 'nt':
    env.Replace(TERMINIT = 'WINCONSOLE-INIT')

if env['TSYS'] == 'linux':
    env.Replace(TERMINIT = 'ANSITERM-INIT')

if env['HSYS'] == 'linux' and env['TSYS'] == 'nt':
    env.SetDefault(BUILD_LAUNCHER = 'WINEDEBUG=-all wine')
    if 'term' in BUILD_TARGETS or 'test-stdin' in BUILD_TARGETS:
        env.SetDefault(RUN_LAUNCHER = 'WINEDEBUG=-all wine')
    else:
        env.SetDefault(RUN_LAUNCHER = 'WINEDEBUG=-all wineconsole')

if 'term' in BUILD_TARGETS or 'test-stdin' in BUILD_TARGETS:
    env.Replace(TERMINIT = 'ANSITERM-INIT')

env.SetDefault(DEBUG = 'FALSE')
env.SetDefault(CODE_THREADING_TYPE = 'DTC')

def execname(env, basename):
    if env['TSYS'] == 'nt':
        return basename + '.exe'
    else:
        return basename

env.AddMethod(execname)

env.Alias('term')
env.Alias('debug')
env.Alias('dtc')
env.Alias('itc')
env.Alias('win32')
env.Alias('linux')
