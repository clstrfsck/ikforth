Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 1
FKernel.asm



      1					 ;******************************************************************************
      2					 ;
      3					 ;  FKernel.asm
      4					 ;
      5					 ;  Copyright (C) 1999-2003 Illya Kysil
      6					 ;
      7					 ;******************************************************************************
      8					 ;
      9					 ;  Minimal IKForth kernel, which supports compilation from files.
     10					 ;
     11					 ;******************************************************************************
     12					 ;
     13					 ;  Register usage:
     14					 ;  * EDI - UDP	user data area pointer
     15					 ;  * ESI - IP	instruction pointer
     16					 ;  * ESP - DSP	data stack pointer
     17					 ;  * EBP - RSP	return stack pointer
     18					 ;
     19					 ;    EBX - W pointer
     20					 ;
     21					 ;  * -	register should	remain unchanged in low-level primitives
     22					 ;
     23					 ;  All	other registers	have no	special	meaning.
     24					 ;
     25					 ;******************************************************************************
     26
     27								 IDEAL
     28								 P386
     29
     30	00000000						 SEGMENT MAIN USE32
     31
     32								 ASSUME	 CS:MAIN,DS:MAIN,ES:MAIN
     33
     34								 INCLUDE "macro.inc"
1    35					 ;******************************************************************************
1    36					 ;
1    37					 ;  macro.inc
1    38					 ;  IKForth
1    39					 ;
1    40					 ;  Copyright (C) 1999-2003 Illya Kysil
1    41					 ;
1    42					 ;******************************************************************************
1    43
1    44		  = 0FFFFFFFFh		 F_TRUE			 EQU	 0FFFFFFFFh
1    45		  = 0			 F_FALSE		 EQU	 0
1    46
1    47		  = 4			 CELL_SIZE		 EQU	 4
1    48
1    49					 ;******************************************************************************
1    50					 ;
1    51					 ;******************************************************************************
1    52								 MACRO	 $JMP
1    53								 MOV	 EBX,[DWORD PTR	EAX]
1    54								 JMP	 EBX			 ; execute
1    55								 ENDM	 $JMP
1    56
1    57					 ;******************************************************************************
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 2
FKernel.asm



1    58					 ;  Because of usage of	indirect threaded code the $NEXT macro is used at the end
1    59					 ;  of each definition to perform execution of next word.
1    60					 ;  Simply fetch a code	pointer	[DWORD PTR ESI]	and jump there.
1    61					 ;******************************************************************************
1    62								 MACRO	 $NEXT			 ;
1    63								 LODSD				 ; fetch address
1    64								 $JMP
1    65								 ENDM	 $NEXT
1    66
1    67		  =0000			 VOC_LINK		 =	 0			 ; link	to previous word
1    68					 ;******************************************************************************
1    69					 ;  Vocabulary entry flags
1    70					 ;******************************************************************************
1    71		  = 00h			 VEF_USUAL		 EQU	 00h
1    72		  = 01h			 VEF_IMMEDIATE		 EQU	 01h			 ; IMMEDIATE entry
1    73		  = 02h			 VEF_HIDDEN		 EQU	 02h			 ; hidden word
1    74		  = 04h			 VEF_COMPILE_ONLY	 EQU	 04h			 ; compile only	mode
1    75
1    76					 ;******************************************************************************
1    77					 ;  Macro $DEF defines a vocabulary entry.
1    78					 ;  Parameters:
1    79					 ;    NAME	 the name of the entry to be created
1    80					 ;    CODE	 label of the CFA
1    81					 ;    EXECUTOR	 the executor of a word	( = [DWORD PTR CODE] if	ommited)
1    82					 ;    FLAGS	 entry flags
1    83					 ;  Vocabulary entry layout
1    84					 ;  Offset Length // bytes
1    85					 ;  +0	   1	  FLAGS	(VEF_XXX)
1    86					 ;  +1	   1	  name length (or 0)			   // NFA
1    87					 ;  +2	   n	  name (in OEM codepage)
1    88					 ;  +2+n   1	  n + 2
1    89					 ;  +2+n+1 4	  link to previous word	or 0 if	first word // LFA
1    90					 ;  +2+n+5 4	  address of internal interpreter	   // CFA
1    91					 ;  +2+n+9 x						   // PFA
1    92					 ;******************************************************************************
1    93								 MACRO	 $DEF NAME,CODE,EXECUTOR,FLAGS
1    94								 LOCAL	 $$DEF,$$PREVFLD,$$LBLNAME,$$CODE
1    95					 $$DEF:
1    96					 LASTWORD		 =	 $$DEF
1    97								 IFNB	 <FLAGS>
1    98								   DB	 FLAGS
1    99								 ELSE
1   100								   DB	 VEF_USUAL
1   101								 ENDIF
1   102					 ;; NFA
1   103								 DB	 $$PREVFLD - $ - 1
1   104								 DB	 NAME
1   105					 $$PREVFLD:
1   106								 DB	 $$PREVFLD - $$DEF
1   107					 ;; LFA
1   108								 DD	 VOC_LINK
1   109					 VOC_LINK		 =	 $$DEF + DESIRED_BASE_EQU
1   110
1   111					 ;; CFA
1   112								 IFNB	 <CODE>
1   113								   LABEL   &CODE FAR
1   114								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 3
FKernel.asm



1   115								 IFNB	 <EXECUTOR>
1   116								   DD	   EXECUTOR + DESIRED_BASE_EQU
1   117								 ELSE
1   118								   DD	   $$CODE + DESIRED_BASE_EQU
1   119								 ENDIF
1   120					 $$CODE:
1   121					 ;; PFA
1   122								 ENDM	 $DEF
1   123
1   124					 ;******************************************************************************
1   125					 ;  Use	this macro to compile FORTH threaded definitions
1   126					 ;******************************************************************************
1   127								 MACRO	 CW NAME
1   128								 DD	 NAME +	DESIRED_BASE_EQU
1   129								 ENDM	 CW
1   130
1   131								 MACRO	 CWLIT VALUE
1   132								 CW	 $LIT
1   133								 CW	 VALUE
1   134								 ENDM	 CWLIT
1   135
1   136					 ;******************************************************************************
1   137					 ;  Use	this macro to compile constants
1   138					 ;******************************************************************************
1   139								 MACRO	 CC VALUE
1   140								 DD	 VALUE
1   141								 ENDM	 CC
1   142
1   143								 MACRO	 CCLIT VALUE
1   144								 CW	 $LIT
1   145								 CC	 VALUE
1   146								 ENDM	 CCLIT
1   147
1   148					 ;******************************************************************************
1   149					 ;  Compile @
1   150					 ;******************************************************************************
1   151								 MACRO	 CFETCH	ADDR
1   152								 CW	 ADDR
1   153								 CW	 $FETCH
1   154								 ENDM	 CFETCH
1   155
1   156					 ;******************************************************************************
1   157					 ;  Compile !
1   158					 ;******************************************************************************
1   159								 MACRO	 CSTORE	ADDR
1   160								 CW	 ADDR
1   161								 CW	 $STORE
1   162								 ENDM	 CSTORE
1   163
1   164					 ;******************************************************************************
1   165					 ;  Compile a conditional branch ?BRANCH
1   166					 ;******************************************************************************
1   167								 MACRO	 CQBR VALUE
1   168								 CW	 $QBRANCH
1   169								 CW	 VALUE
1   170								 ENDM	 CQBR
1   171
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 4
FKernel.asm



1   172					 ;******************************************************************************
1   173					 ;  Compile an unconditional branch BRANCH
1   174					 ;******************************************************************************
1   175								 MACRO	 CBR VALUE
1   176								 CW	 $BRANCH
1   177								 CW	 VALUE
1   178								 ENDM	 CBR
1   179
1   180					 ;******************************************************************************
1   181					 ;  Compile THROW
1   182					 ;******************************************************************************
1   183								 MACRO	 CTHROW	VALUE
1   184								 CCLIT	 VALUE
1   185								 CW	 $THROW
1   186								 ENDM	 CTHROW
1   187
1   188					 ;******************************************************************************
1   189					 ;  Compile EXIT
1   190					 ;******************************************************************************
1   191								 MACRO	 CEXIT
1   192								 CW	 $EXIT
1   193								 ENDM	 CEXIT
1   194
1   195					 ;******************************************************************************
1   196					 ;  Push a value to return stack
1   197					 ;******************************************************************************
1   198								 MACRO	 PUSHRS	SRC
1   199								 SUB	 EBP,CELL_SIZE
1   200								 MOV	 [DWORD	PTR EBP],SRC
1   201								 ENDM	 PUSHRS
1   202
1   203					 ;******************************************************************************
1   204					 ;  Pop	a value	from return stack
1   205					 ;******************************************************************************
1   206								 MACRO	 POPRS DST
1   207								 MOV	 DST,[DWORD PTR	EBP]
1   208								 ADD	 EBP,CELL_SIZE
1   209								 ENDM	 POPRS
1   210
1   211					 ;******************************************************************************
1   212					 ;  Fetch a value from the return stack
1   213					 ;******************************************************************************
1   214								 MACRO	 FETCHRS DST,NUM
1   215								 IFNB	 <NUM>
1   216								   MOV	   DST,[DWORD PTR EBP +	&NUM * CELL_SIZE]
1   217								 ELSE
1   218								   MOV	   DST,[DWORD PTR EBP]
1   219								 ENDIF
1   220								 ENDM	 FETCHRS
1   221
1   222					 ;******************************************************************************
1   223					 ;  Push a value to data stack
1   224					 ;******************************************************************************
1   225								 MACRO	 PUSHDS	SRC
1   226								 PUSH	 SRC
1   227								 ENDM	 PUSHDS
1   228
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 5
FKernel.asm



1   229					 ;******************************************************************************
1   230					 ;  Pop	a value	from data stack
1   231					 ;******************************************************************************
1   232								 MACRO	 POPDS DST
1   233								 POP	 DST
1   234								 ENDM	 POPDS
1   235
1   236					 ;******************************************************************************
1   237					 ;  Fetch a value from the data	stack
1   238					 ;******************************************************************************
1   239								 MACRO	 FETCHDS DST,NUM
1   240								 IFNB	 <NUM>
1   241								   MOV	   DST,[DWORD PTR ESP +	&NUM * CELL_SIZE]
1   242								 ELSE
1   243								   MOV	   DST,[DWORD PTR ESP]
1   244								 ENDIF
1   245								 ENDM	 FETCHDS
1   246
1   247					 ;******************************************************************************
1   248					 ;
1   249					 ;******************************************************************************
1   250								 MACRO	 $CONST	NAME,CODE
1   251								 $DEF	 NAME,CODE,$DOCONST
1   252								 ENDM	 $CONST
1   253
1   254								 MACRO	 $VAR NAME,CODE
1   255								 $DEF	 NAME,CODE,$DOVAR
1   256								 ENDM	 $VAR
1   257
1   258								 MACRO	 $USER NAME,CODE
1   259								 $DEF	 NAME,CODE,$DOUSER
1   260								 ENDM	 $USER
1   261
1   262								 MACRO	 $COLON	NAME,CODE,FLAGS
1   263								 $DEF	 NAME,CODE,$ENTER,FLAGS
1   264								 ENDM	 $COLON
1   265
1   266								 MACRO	 $DEFER	NAME,CODE,FLAGS
1   267								 $DEF	 NAME,CODE,$DODEFER,FLAGS
1   268								 ENDM	 $DEFER
1   269
1   270								 MACRO	 $CODE NAME,CODE,FLAGS
1   271								 $DEF	 NAME,CODE,,FLAGS
1   272								 ENDM	 $CODE
1   273
1   274					 ;******************************************************************************
1   275					 ;
1   276					 ;******************************************************************************
1   277								 MACRO	 $WRITE	TEXT
1   278								 LOCAL	 @@S_END
1   279								 CW	 $PTYPE
1   280								 DB	 @@S_END - $ - 1,'&TEXT'
1   281					 @@S_END:
1   282								 ENDM	 $WRITE
1   283
1   284					 ;******************************************************************************
1   285					 ;
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 6
FKernel.asm



1   286					 ;******************************************************************************
1   287								 MACRO	 $CR
1   288								 CW	 $LIT
1   289								 CC	 13
1   290								 CW	 $EMIT
1   291								 CW	 $LIT
1   292								 CC	 10
1   293								 CW	 $EMIT
1   294								 ENDM	 $CR
1   295
1   296
    297
    298					 ;******************************************************************************
    299					 ;  Header
    300					 ;******************************************************************************
    301	00000000			 SIGN:
    302	00000000  49 4B	46 49					 DB	 'IKFI'			 ; MAX.	15 bytes !!!
    303
    304	00000004  0C*(00)					 DB	 16 - (	$ - SIGN ) DUP ( 0 )
    305
    306		  = 20000000h		 DESIRED_BASE_EQU	 EQU	 20000000h
    307		  = 00040000h		 DESIRED_SIZE_EQU	 EQU	 00040000h		 ; 256KB
    308
    309		  = 00004000h		 DATA_STACK_SIZE	 EQU	 00004000h		 ; 16KB
    310		  = 00004000h		 RETURN_STACK_SIZE	 EQU	 00004000h		 ; 16KB
    311
    312		  = 00020000h		 USER_AREA_SIZE0	 EQU	 00020000h		 ; 128KB
    313
    314	00000010  20000000					 DD	 DESIRED_BASE_EQU
    315	00000014			 DESIRED_SIZE_VAR:
    316	00000014  00040000					 DD	 DESIRED_SIZE_EQU
    317	00000018  20002755					 DD	 OFFSET	START +	DESIRED_BASE_EQU
    318	0000001C  20000914					 DD	 OFFSET	THREAD_PROC + DESIRED_BASE_EQU
    319	00000020  2000002C					 DD	 OFFSET	FUNC_TABLE + DESIRED_BASE_EQU
    320	00000024  00024A48					 DD	 USER_AREA_SIZE0 + USER_AREA_SIZE
    321	00000028  00004000					 DD	 DATA_STACK_SIZE
    322
    323					 ;******************************************************************************
    324					 ;  Include functions table
    325					 ;******************************************************************************
    326					 ;			  ALIGN	  16
    327
    328								 INCLUDE "ftable.inc"
1   329					 ;******************************************************************************
1   330					 ;
1   331					 ;  ftable.inc
1   332					 ;  IKForth
1   333					 ;
1   334					 ;  Copyright (C) 1999-2003 Illya Kysil
1   335					 ;
1   336					 ;******************************************************************************
1   337					 ;  Functions provided by loader.
1   338					 ;  Define these functions as stdcall.
1   339					 ;  First argument is on the top of the	data stack.
1   340					 ;  Result ( if	any ) is returned via EAX ( int	), EDX:EAX ( long int ).
1   341					 ;******************************************************************************
1   342		  =0000			 FUNC_NUM		 =	 0
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 7
FKernel.asm



1   343								 MACRO	 FUNC_ALLOC SIZE
1   344								 DD	 0
1   345					 FUNC_NUM		 =	 FUNC_NUM + SIZE
1   346								 ENDM	 FUNC_ALLOC
1   347
1   348								 MACRO	 $FUNC NAME
1   349					 &NAME&_FUNC		 =	 FUNC_NUM
1   350								 FUNC_ALLOC  1
1   351								 ENDM	 $FUNC
1   352
1   353								 MACRO	 FUNC_ALIGN
1   354					 FUNC_NUM		 =	 ( FUNC_NUM / CELL_SIZE	+ 1 ) *	CELL_SIZE
1   355								 ENDM	 FUNC_ALIGN
1   356
1   357								 MACRO	 $CALL NAME
1   358								 PUSHRS	 EDI
1   359								 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + &NAME *	    +
    360					 CELL_SIZE]
1   361								 POPRS	 EDI
1   362								 ENDM	 $CALL
1   363
1   364	0000002C			 FUNC_TABLE:
1   365								 $FUNC	 LOAD_LIBRARY
2   366		  =0000			 LOAD_LIBRARY_FUNC	       =       FUNC_NUM
2   367								 FUNC_ALLOC  1
3   368	0000002C  00000000					 DD	 0
3   369		  =0001			 FUNC_NUM		 =	 FUNC_NUM + 1
1   370								 $FUNC	 FREE_LIBRARY
2   371		  =0001			 FREE_LIBRARY_FUNC	       =       FUNC_NUM
2   372								 FUNC_ALLOC  1
3   373	00000030  00000000					 DD	 0
3   374		  =0002			 FUNC_NUM		 =	 FUNC_NUM + 1
1   375								 $FUNC	 GET_PROC_ADDRESS
2   376		  =0002			 GET_PROC_ADDRESS_FUNC		   =	   FUNC_NUM
2   377								 FUNC_ALLOC  1
3   378	00000034  00000000					 DD	 0
3   379		  =0003			 FUNC_NUM		 =	 FUNC_NUM + 1
1   380								 $FUNC	 BYE
2   381		  =0003			 BYE_FUNC	      =	      FUNC_NUM
2   382								 FUNC_ALLOC  1
3   383	00000038  00000000					 DD	 0
3   384		  =0004			 FUNC_NUM		 =	 FUNC_NUM + 1
1   385								 $FUNC	 EMIT
2   386		  =0004			 EMIT_FUNC	       =       FUNC_NUM
2   387								 FUNC_ALLOC  1
3   388	0000003C  00000000					 DD	 0
3   389		  =0005			 FUNC_NUM		 =	 FUNC_NUM + 1
1   390								 $FUNC	 TYPE
2   391		  =0005			 TYPE_FUNC	       =       FUNC_NUM
2   392								 FUNC_ALLOC  1
3   393	00000040  00000000					 DD	 0
3   394		  =0006			 FUNC_NUM		 =	 FUNC_NUM + 1
1   395								 $FUNC	 FILE_CLOSE
2   396		  =0006			 FILE_CLOSE_FUNC	     =	     FUNC_NUM
2   397								 FUNC_ALLOC  1
3   398	00000044  00000000					 DD	 0
3   399		  =0007			 FUNC_NUM		 =	 FUNC_NUM + 1
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 8
FKernel.asm



1   400								 $FUNC	 FILE_CREATE
2   401		  =0007			 FILE_CREATE_FUNC	      =	      FUNC_NUM
2   402								 FUNC_ALLOC  1
3   403	00000048  00000000					 DD	 0
3   404		  =0008			 FUNC_NUM		 =	 FUNC_NUM + 1
1   405								 $FUNC	 FILE_POSITION
2   406		  =0008			 FILE_POSITION_FUNC		=	FUNC_NUM
2   407								 FUNC_ALLOC  1
3   408	0000004C  00000000					 DD	 0
3   409		  =0009			 FUNC_NUM		 =	 FUNC_NUM + 1
1   410								 $FUNC	 FILE_OPEN
2   411		  =0009			 FILE_OPEN_FUNC		    =	    FUNC_NUM
2   412								 FUNC_ALLOC  1
3   413	00000050  00000000					 DD	 0
3   414		  =000A			 FUNC_NUM		 =	 FUNC_NUM + 1
1   415								 $FUNC	 FILE_REPOSITION
2   416		  =000A			 FILE_REPOSITION_FUNC		  =	  FUNC_NUM
2   417								 FUNC_ALLOC  1
3   418	00000054  00000000					 DD	 0
3   419		  =000B			 FUNC_NUM		 =	 FUNC_NUM + 1
1   420								 $FUNC	 FILE_READ_LINE
2   421		  =000B			 FILE_READ_LINE_FUNC		 =	 FUNC_NUM
2   422								 FUNC_ALLOC  1
3   423	00000058  00000000					 DD	 0
3   424		  =000C			 FUNC_NUM		 =	 FUNC_NUM + 1
1   425								 $FUNC	 START_THREAD
2   426		  =000C			 START_THREAD_FUNC	       =       FUNC_NUM
2   427								 FUNC_ALLOC  1
3   428	0000005C  00000000					 DD	 0
3   429		  =000D			 FUNC_NUM		 =	 FUNC_NUM + 1
1   430								 $FUNC	 PAGE
2   431		  =000D			 PAGE_FUNC	       =       FUNC_NUM
2   432								 FUNC_ALLOC  1
3   433	00000060  00000000					 DD	 0
3   434		  =000E			 FUNC_NUM		 =	 FUNC_NUM + 1
1   435								 $FUNC	 ALLOCATE
2   436		  =000E			 ALLOCATE_FUNC		   =	   FUNC_NUM
2   437								 FUNC_ALLOC  1
3   438	00000064  00000000					 DD	 0
3   439		  =000F			 FUNC_NUM		 =	 FUNC_NUM + 1
1   440								 $FUNC	 FREE
2   441		  =000F			 FREE_FUNC	       =       FUNC_NUM
2   442								 FUNC_ALLOC  1
3   443	00000068  00000000					 DD	 0
3   444		  =0010			 FUNC_NUM		 =	 FUNC_NUM + 1
1   445								 $FUNC	 REALLOCATE
2   446		  =0010			 REALLOCATE_FUNC	     =	     FUNC_NUM
2   447								 FUNC_ALLOC  1
3   448	0000006C  00000000					 DD	 0
3   449		  =0011			 FUNC_NUM		 =	 FUNC_NUM + 1
1   450
1   451
    452
    453					 ;******************************************************************************
    454					 ;  Include user area variables. These variables are unique to any thread.
    455					 ;******************************************************************************
    456								 INCLUDE "user.inc"
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 9
FKernel.asm



1   457					 ;******************************************************************************
1   458					 ;
1   459					 ;  user.inc
1   460					 ;  IKForth
1   461					 ;
1   462					 ;  Copyright (C) 1999-2003 Illya Kysil
1   463					 ;
1   464					 ;******************************************************************************
1   465					 ;
1   466					 ;******************************************************************************
1   467
1   468		  =0000			 USER_AREA_SIZE		 =	 0
1   469								 MACRO	 _ALLOC	SIZE
1   470					 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ SIZE
1   471								 ENDM	 _ALLOC
1   472
1   473								 MACRO	 _VAR  NAME,SIZE
1   474					 &NAME&_VAR		 =	 USER_AREA_SIZE
1   475								 IFNB	 <SIZE>
1   476								   _ALLOC  SIZE
1   477								 ELSE
1   478								   _ALLOC  CELL_SIZE
1   479								 ENDIF
1   480								 ENDM	 _VAR
1   481
1   482								 MACRO	 _ALIGN
1   483					 USER_AREA_SIZE		 =	 ( USER_AREA_SIZE / CELL_SIZE +	1 ) * CELL_SIZE
1   484								 ENDM	 _ALIGN
1   485
1   486								 _VAR	 RETURN_ADDR
2   487		  =0000			 RETURN_ADDR_VAR	      =	      USER_AREA_SIZE
2   488								 IFNB	 <>
2   489								   _ALLOC
2   490								 ELSE
2   491								   _ALLOC  CELL_SIZE
3   492		  =0004			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   493								 ENDIF
1   494								 _VAR	 EDI
2   495		  =0004			 EDI_VAR	      =	      USER_AREA_SIZE
2   496								 IFNB	 <>
2   497								   _ALLOC
2   498								 ELSE
2   499								   _ALLOC  CELL_SIZE
3   500		  =0008			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   501								 ENDIF
1   502								 _VAR	 ESI
2   503		  =0008			 ESI_VAR	      =	      USER_AREA_SIZE
2   504								 IFNB	 <>
2   505								   _ALLOC
2   506								 ELSE
2   507								   _ALLOC  CELL_SIZE
3   508		  =000C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   509								 ENDIF
1   510								 _VAR	 EBP
2   511		  =000C			 EBP_VAR	      =	      USER_AREA_SIZE
2   512								 IFNB	 <>
2   513								   _ALLOC
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 10
FKernel.asm



2   514								 ELSE
2   515								   _ALLOC  CELL_SIZE
3   516		  =0010			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   517								 ENDIF
1   518								 _VAR	 EBX
2   519		  =0010			 EBX_VAR	      =	      USER_AREA_SIZE
2   520								 IFNB	 <>
2   521								   _ALLOC
2   522								 ELSE
2   523								   _ALLOC  CELL_SIZE
3   524		  =0014			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   525								 ENDIF
1   526								 _VAR	 ESP
2   527		  =0014			 ESP_VAR	      =	      USER_AREA_SIZE
2   528								 IFNB	 <>
2   529								   _ALLOC
2   530								 ELSE
2   531								   _ALLOC  CELL_SIZE
3   532		  =0018			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   533								 ENDIF
1   534								 _VAR	 BASE
2   535		  =0018			 BASE_VAR	       =       USER_AREA_SIZE
2   536								 IFNB	 <>
2   537								   _ALLOC
2   538								 ELSE
2   539								   _ALLOC  CELL_SIZE
3   540		  =001C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   541								 ENDIF
1   542								 _VAR	 TOIN
2   543		  =001C			 TOIN_VAR	       =       USER_AREA_SIZE
2   544								 IFNB	 <>
2   545								   _ALLOC
2   546								 ELSE
2   547								   _ALLOC  CELL_SIZE
3   548		  =0020			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   549								 ENDIF
1   550								 _VAR	 SOURCE_ID
2   551		  =0020			 SOURCE_ID_VAR		    =	    USER_AREA_SIZE
2   552								 IFNB	 <>
2   553								   _ALLOC
2   554								 ELSE
2   555								   _ALLOC  CELL_SIZE
3   556		  =0024			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   557								 ENDIF
1   558								 _VAR	 CASE_SENSITIVE
2   559		  =0024			 CASE_SENSITIVE_VAR		 =	 USER_AREA_SIZE
2   560								 IFNB	 <>
2   561								   _ALLOC
2   562								 ELSE
2   563								   _ALLOC  CELL_SIZE
3   564		  =0028			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   565								 ENDIF
1   566								 _VAR	 TONUMBER_SIGNED
2   567		  =0028			 TONUMBER_SIGNED_VAR		  =	  USER_AREA_SIZE
2   568								 IFNB	 <>
2   569								   _ALLOC
2   570								 ELSE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 11
FKernel.asm



2   571								   _ALLOC  CELL_SIZE
3   572		  =002C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   573								 ENDIF
1   574
1   575								 _VAR	 CURR_FILE_POS
2   576		  =002C			 CURR_FILE_POS_VAR		=	USER_AREA_SIZE
2   577								 IFNB	 <>
2   578								   _ALLOC
2   579								 ELSE
2   580								   _ALLOC  CELL_SIZE
3   581		  =0030			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   582								 ENDIF
1   583								 _ALLOC	 CELL_SIZE
2   584		  =0034			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
1   585
1   586		  = 1024		 MAX_FILE_LINE_LENGTH	  EQU	 1024
1   587								 _VAR	 #FILE_LINE
2   588		  =0034			 #FILE_LINE_VAR		     =	     USER_AREA_SIZE
2   589								 IFNB	 <>
2   590								   _ALLOC
2   591								 ELSE
2   592								   _ALLOC  CELL_SIZE
3   593		  =0038			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   594								 ENDIF
1   595								 _VAR	 FILE_LINE,<MAX_FILE_LINE_LENGTH + 1>
2   596		  =0038			 FILE_LINE_VAR		    =	    USER_AREA_SIZE
2   597								 IFNB	 <MAX_FILE_LINE_LENGTH + 1>
2   598								   _ALLOC  MAX_FILE_LINE_LENGTH	+ 1
3   599		  =0438			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ MAX_FILE_LINE_LENGTH
2   600								 ELSE
2   601								   _ALLOC  CELL_SIZE
2   602								 ENDIF
1   603
1   604								 _VAR	 CURRENT
2   605		  =0438			 CURRENT_VAR		  =	  USER_AREA_SIZE
2   606								 IFNB	 <>
2   607								   _ALLOC
2   608								 ELSE
2   609								   _ALLOC  CELL_SIZE
3   610		  =043C			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   611								 ENDIF
1   612
1   613								 _VAR	 EXCEPTION_HANDLER
2   614		  =043C			 EXCEPTION_HANDLER_VAR		    =	    USER_AREA_SIZE
2   615								 IFNB	 <>
2   616								   _ALLOC
2   617								 ELSE
2   618								   _ALLOC  CELL_SIZE
3   619		  =0440			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   620								 ENDIF
1   621
1   622								 _VAR	 WIN32_EXCEPTION_CONTEXT,256
2   623		  =0440			 WIN32_EXCEPTION_CONTEXT_VAR		  =	  USER_AREA_SIZE
2   624								 IFNB	 <256>
2   625								   _ALLOC  256
3   626		  =0540			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ 256
2   627								 ELSE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 12
FKernel.asm



2   628								   _ALLOC  CELL_SIZE
2   629								 ENDIF
1   630								 _VAR	 SQUOTE_BUFFER,1024
2   631		  =0540			 SQUOTE_BUFFER_VAR		=	USER_AREA_SIZE
2   632								 IFNB	 <1024>
2   633								   _ALLOC  1024
3   634		  =0940			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ 1024
2   635								 ELSE
2   636								   _ALLOC  CELL_SIZE
2   637								 ENDIF
1   638
1   639								 _VAR	 POCKET,256
2   640		  =0940			 POCKET_VAR		 =	 USER_AREA_SIZE
2   641								 IFNB	 <256>
2   642								   _ALLOC  256
3   643		  =0A40			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ 256
2   644								 ELSE
2   645								   _ALLOC  CELL_SIZE
2   646								 ENDIF
1   647
1   648								 _ALIGN
2   649		  =0A44			 USER_AREA_SIZE		 =	 ( USER_AREA_SIZE / CELL_SIZE +	1 ) * CELL_SIZE
1   650
1   651								 _ALLOC	 RETURN_STACK_SIZE
2   652		  =4A44			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ RETURN_STACK_SIZE
1   653								 _VAR	 RSTACK
2   654		  =4A44			 RSTACK_VAR		 =	 USER_AREA_SIZE
2   655								 IFNB	 <>
2   656								   _ALLOC
2   657								 ELSE
2   658								   _ALLOC  CELL_SIZE
3   659		  =4A48			 USER_AREA_SIZE		 =	 USER_AREA_SIZE	+ CELL_SIZE
2   660								 ENDIF
1   661
1   662
    663
    664					 ;******************************************************************************
    665					 ;  Include Forth definitions.
    666					 ;******************************************************************************
    667					 ;			  ALIGN	  16
    668
    669								 INCLUDE "words.inc"
1   670					 ;******************************************************************************
1   671					 ;
1   672					 ;  words.inc
1   673					 ;  IKForth
1   674					 ;
1   675					 ;  Copyright (C) 1999-2003 Illya Kysil
1   676					 ;
1   677					 ;******************************************************************************
1   678
1   679								 INCLUDE "primitives.inc"
2   680					 ;******************************************************************************
2   681					 ;
2   682					 ;  primitives.inc
2   683					 ;  IKForth
2   684					 ;
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 13
FKernel.asm



2   685					 ;  Copyright (C) 1999-2003 Illya Kysil
2   686					 ;
2   687					 ;******************************************************************************
2   688					 ;  Primitives
2   689					 ;******************************************************************************
2   690
2   691					 ;  ?BRANCH
2   692					 ;  Branch to address compiled next if flag on stack is	zero
2   693					 ;  D: flag --
2   694								 $CODE	 '?BRANCH',$QBRANCH
3   695								 $DEF	 '?BRANCH',$QBRANCH,,
4   696	00000070			 ??0000:
4   697		  =MAIN:0070		 LASTWORD		 =	 ??0000
4   698								 IFNB	 <>
4   699								   DB
4   700								 ELSE
4   701	00000070  00						   DB	 VEF_USUAL
4   702								 ENDIF
4   703	00000071  07						 DB	 ??0001	- $ - 1
4   704	00000072  3F 42	52 41 4E 43 48				 DB	 '?BRANCH'
4   705	00000079			 ??0001:
4   706	00000079  09						 DB	 ??0001	- ??0000
4   707	0000007A  00000000					 DD	 VOC_LINK
4   708		  =MAIN:20000070	 VOC_LINK		 =	 ??0000	+ DESIRED_BASE_EQU
4   709
4   710								 IFNB	 <$QBRANCH>
4   711	0000007E						   LABEL   $QBRANCH FAR
4   712								 ENDIF
4   713								 IFNB	 <>
4   714								   DD	    + DESIRED_BASE_EQU
4   715								 ELSE
4   716	0000007E  20000082					   DD	   ??0003 + DESIRED_BASE_EQU
4   717								 ENDIF
4   718	00000082			 ??0003:
2   719								 POPDS	 EAX
3   720	00000082  58						 POP	 EAX
2   721	00000083  0B C0						 OR	 EAX,EAX
2   722	00000085  AD						 LODSD
2   723	00000086  75 02						 JNZ	 SHORT NOQBRANCH
2   724	00000088  8B F0						 MOV	 ESI,EAX
2   725	0000008A			 NOQBRANCH:
2   726								 $NEXT
3   727	0000008A  AD						 LODSD				 ; fetch address
3   728								 $JMP
4   729	0000008B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   730	0000008D  FF E3						 JMP	 EBX			 ; execute
2   731
2   732					 ;  BRANCH
2   733					 ;  Branch to address compiled next
2   734								 $CODE	 'BRANCH',$BRANCH
3   735								 $DEF	 'BRANCH',$BRANCH,,
4   736	0000008F			 ??0004:
4   737		  =MAIN:008F		 LASTWORD		 =	 ??0004
4   738								 IFNB	 <>
4   739								   DB
4   740								 ELSE
4   741	0000008F  00						   DB	 VEF_USUAL
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 14
FKernel.asm



4   742								 ENDIF
4   743	00000090  06						 DB	 ??0005	- $ - 1
4   744	00000091  42 52	41 4E 43 48				 DB	 'BRANCH'
4   745	00000097			 ??0005:
4   746	00000097  08						 DB	 ??0005	- ??0004
4   747	00000098  20000070					 DD	 VOC_LINK
4   748		  =MAIN:2000008F	 VOC_LINK		 =	 ??0004	+ DESIRED_BASE_EQU
4   749
4   750								 IFNB	 <$BRANCH>
4   751	0000009C						   LABEL   $BRANCH FAR
4   752								 ENDIF
4   753								 IFNB	 <>
4   754								   DD	    + DESIRED_BASE_EQU
4   755								 ELSE
4   756	0000009C  200000A0					   DD	   ??0007 + DESIRED_BASE_EQU
4   757								 ENDIF
4   758	000000A0			 ??0007:
2   759	000000A0  AD						 LODSD
2   760	000000A1  8B F0						 MOV	 ESI,EAX
2   761								 $NEXT
3   762	000000A3  AD						 LODSD				 ; fetch address
3   763								 $JMP
4   764	000000A4  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   765	000000A6  FF E3						 JMP	 EBX			 ; execute
2   766
2   767					 ;  LIT
2   768					 ;  Compiled by	LITERAL
2   769								 $CODE	 'LIT',$LIT
3   770								 $DEF	 'LIT',$LIT,,
4   771	000000A8			 ??0008:
4   772		  =MAIN:00A8		 LASTWORD		 =	 ??0008
4   773								 IFNB	 <>
4   774								   DB
4   775								 ELSE
4   776	000000A8  00						   DB	 VEF_USUAL
4   777								 ENDIF
4   778	000000A9  03						 DB	 ??0009	- $ - 1
4   779	000000AA  4C 49	54					 DB	 'LIT'
4   780	000000AD			 ??0009:
4   781	000000AD  05						 DB	 ??0009	- ??0008
4   782	000000AE  2000008F					 DD	 VOC_LINK
4   783		  =MAIN:200000A8	 VOC_LINK		 =	 ??0008	+ DESIRED_BASE_EQU
4   784
4   785								 IFNB	 <$LIT>
4   786	000000B2						   LABEL   $LIT	FAR
4   787								 ENDIF
4   788								 IFNB	 <>
4   789								   DD	    + DESIRED_BASE_EQU
4   790								 ELSE
4   791	000000B2  200000B6					   DD	   ??000B + DESIRED_BASE_EQU
4   792								 ENDIF
4   793	000000B6			 ??000B:
2   794	000000B6  AD						 LODSD
2   795								 PUSHDS	 EAX
3   796	000000B7  50						 PUSH	 EAX
2   797								 $NEXT
3   798	000000B8  AD						 LODSD				 ; fetch address
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 15
FKernel.asm



3   799								 $JMP
4   800	000000B9  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   801	000000BB  FF E3						 JMP	 EBX			 ; execute
2   802
2   803					 ;  2LIT
2   804					 ;  Compiled by	2LITERAL
2   805								 $CODE	 '2LIT',$2LIT
3   806								 $DEF	 '2LIT',$2LIT,,
4   807	000000BD			 ??000C:
4   808		  =MAIN:00BD		 LASTWORD		 =	 ??000C
4   809								 IFNB	 <>
4   810								   DB
4   811								 ELSE
4   812	000000BD  00						   DB	 VEF_USUAL
4   813								 ENDIF
4   814	000000BE  04						 DB	 ??000D	- $ - 1
4   815	000000BF  32 4C	49 54					 DB	 '2LIT'
4   816	000000C3			 ??000D:
4   817	000000C3  06						 DB	 ??000D	- ??000C
4   818	000000C4  200000A8					 DD	 VOC_LINK
4   819		  =MAIN:200000BD	 VOC_LINK		 =	 ??000C	+ DESIRED_BASE_EQU
4   820
4   821								 IFNB	 <$2LIT>
4   822	000000C8						   LABEL   $2LIT FAR
4   823								 ENDIF
4   824								 IFNB	 <>
4   825								   DD	    + DESIRED_BASE_EQU
4   826								 ELSE
4   827	000000C8  200000CC					   DD	   ??000F + DESIRED_BASE_EQU
4   828								 ENDIF
4   829	000000CC			 ??000F:
2   830	000000CC  AD						 LODSD
2   831								 PUSHDS	 EAX
3   832	000000CD  50						 PUSH	 EAX
2   833	000000CE  AD						 LODSD
2   834								 PUSHDS	 EAX
3   835	000000CF  50						 PUSH	 EAX
2   836								 $NEXT
3   837	000000D0  AD						 LODSD				 ; fetch address
3   838								 $JMP
4   839	000000D1  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   840	000000D3  FF E3						 JMP	 EBX			 ; execute
2   841
2   842					 ;  (DO-VARIABLE)
2   843								 $VAR	 '(DO-VARIABLE)'
3   844								 $DEF	 '(DO-VARIABLE)',,$DOVAR
4   845	000000D5			 ??0010:
4   846		  =MAIN:00D5		 LASTWORD		 =	 ??0010
4   847								 IFNB	 <>
4   848								   DB
4   849								 ELSE
4   850	000000D5  00						   DB	 VEF_USUAL
4   851								 ENDIF
4   852	000000D6  0D						 DB	 ??0011	- $ - 1
4   853	000000D7  28 44	4F 2D 56 41 52+				 DB	 '(DO-VARIABLE)'
    854		  49 41	42 4C 45 29
4   855	000000E4			 ??0011:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 16
FKernel.asm



4   856	000000E4  0F						 DB	 ??0011	- ??0010
4   857	000000E5  200000BD					 DD	 VOC_LINK
4   858		  =MAIN:200000D5	 VOC_LINK		 =	 ??0010	+ DESIRED_BASE_EQU
4   859
4   860								 IFNB	 <>
4   861								   LABEL    FAR
4   862								 ENDIF
4   863								 IFNB	 <$DOVAR>
4   864	000000E9  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4   865								 ELSE
4   866								   DD	   ??0013 + DESIRED_BASE_EQU
4   867								 ENDIF
4   868	000000ED			 ??0013:
2   869	000000ED						 LABEL	 $DOVAR	FAR
2   870	000000ED  83 C0	04					 ADD	 EAX,CELL_SIZE
2   871								 PUSHDS	 EAX
3   872	000000F0  50						 PUSH	 EAX
2   873								 $NEXT
3   874	000000F1  AD						 LODSD				 ; fetch address
3   875								 $JMP
4   876	000000F2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   877	000000F4  FF E3						 JMP	 EBX			 ; execute
2   878
2   879					 ;  (DO-:)
2   880								 $VAR	 '(DO-:)'
3   881								 $DEF	 '(DO-:)',,$DOVAR
4   882	000000F6			 ??0014:
4   883		  =MAIN:00F6		 LASTWORD		 =	 ??0014
4   884								 IFNB	 <>
4   885								   DB
4   886								 ELSE
4   887	000000F6  00						   DB	 VEF_USUAL
4   888								 ENDIF
4   889	000000F7  06						 DB	 ??0015	- $ - 1
4   890	000000F8  28 44	4F 2D 3A 29				 DB	 '(DO-:)'
4   891	000000FE			 ??0015:
4   892	000000FE  08						 DB	 ??0015	- ??0014
4   893	000000FF  200000D5					 DD	 VOC_LINK
4   894		  =MAIN:200000F6	 VOC_LINK		 =	 ??0014	+ DESIRED_BASE_EQU
4   895
4   896								 IFNB	 <>
4   897								   LABEL    FAR
4   898								 ENDIF
4   899								 IFNB	 <$DOVAR>
4   900	00000103  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4   901								 ELSE
4   902								   DD	   ??0017 + DESIRED_BASE_EQU
4   903								 ENDIF
4   904	00000107			 ??0017:
2   905	00000107						 LABEL	 $ENTER	FAR
2   906								 PUSHRS	 ESI			 ; push	current	IP on return stack
3   907	00000107  83 ED	04					 SUB	 EBP,CELL_SIZE
3   908	0000010A  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2   909	0000010D  83 C0	04					 ADD	 EAX,CELL_SIZE
2   910	00000110  8B F0						 MOV	 ESI,EAX
2   911								 $NEXT				 ; fetch next word address and	    +
    912					 execute it
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 17
FKernel.asm



3   913	00000112  AD						 LODSD				 ; fetch address
3   914								 $JMP
4   915	00000113  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   916	00000115  FF E3						 JMP	 EBX			 ; execute
2   917
2   918					 ;  (DO-CONSTANT)
2   919								 $VAR	 '(DO-CONSTANT)'
3   920								 $DEF	 '(DO-CONSTANT)',,$DOVAR
4   921	00000117			 ??0018:
4   922		  =MAIN:0117		 LASTWORD		 =	 ??0018
4   923								 IFNB	 <>
4   924								   DB
4   925								 ELSE
4   926	00000117  00						   DB	 VEF_USUAL
4   927								 ENDIF
4   928	00000118  0D						 DB	 ??0019	- $ - 1
4   929	00000119  28 44	4F 2D 43 4F 4E+				 DB	 '(DO-CONSTANT)'
    930		  53 54	41 4E 54 29
4   931	00000126			 ??0019:
4   932	00000126  0F						 DB	 ??0019	- ??0018
4   933	00000127  200000F6					 DD	 VOC_LINK
4   934		  =MAIN:20000117	 VOC_LINK		 =	 ??0018	+ DESIRED_BASE_EQU
4   935
4   936								 IFNB	 <>
4   937								   LABEL    FAR
4   938								 ENDIF
4   939								 IFNB	 <$DOVAR>
4   940	0000012B  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4   941								 ELSE
4   942								   DD	   ??001B + DESIRED_BASE_EQU
4   943								 ENDIF
4   944	0000012F			 ??001B:
2   945	0000012F						 LABEL	 $DOCONST FAR
2   946								 PUSHDS	 <[DWORD PTR EAX + CELL_SIZE]>
3   947	0000012F  FF 70	04					 PUSH	 [DWORD	PTR EAX	+ CELL_SIZE]
2   948								 $NEXT
3   949	00000132  AD						 LODSD				 ; fetch address
3   950								 $JMP
4   951	00000133  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   952	00000135  FF E3						 JMP	 EBX			 ; execute
2   953
2   954					 ;  (DO-USER)
2   955								 $VAR	 '(DO-USER)'
3   956								 $DEF	 '(DO-USER)',,$DOVAR
4   957	00000137			 ??001C:
4   958		  =MAIN:0137		 LASTWORD		 =	 ??001C
4   959								 IFNB	 <>
4   960								   DB
4   961								 ELSE
4   962	00000137  00						   DB	 VEF_USUAL
4   963								 ENDIF
4   964	00000138  09						 DB	 ??001D	- $ - 1
4   965	00000139  28 44	4F 2D 55 53 45+				 DB	 '(DO-USER)'
    966		  52 29
4   967	00000142			 ??001D:
4   968	00000142  0B						 DB	 ??001D	- ??001C
4   969	00000143  20000117					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 18
FKernel.asm



4   970		  =MAIN:20000137	 VOC_LINK		 =	 ??001C	+ DESIRED_BASE_EQU
4   971
4   972								 IFNB	 <>
4   973								   LABEL    FAR
4   974								 ENDIF
4   975								 IFNB	 <$DOVAR>
4   976	00000147  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4   977								 ELSE
4   978								   DD	   ??001F + DESIRED_BASE_EQU
4   979								 ENDIF
4   980	0000014B			 ??001F:
2   981	0000014B						 LABEL	 $DOUSER FAR
2   982	0000014B  8B 58	04					 MOV	 EBX,[DWORD PTR	EAX + CELL_SIZE]
2   983	0000014E  03 DF						 ADD	 EBX,EDI
2   984								 PUSHDS	 EBX
3   985	00000150  53						 PUSH	 EBX
2   986								 $NEXT
3   987	00000151  AD						 LODSD				 ; fetch address
3   988								 $JMP
4   989	00000152  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4   990	00000154  FF E3						 JMP	 EBX			 ; execute
2   991
2   992					 ;  (DO-DEFER)
2   993								 $VAR	 '(DO-DEFER)'
3   994								 $DEF	 '(DO-DEFER)',,$DOVAR
4   995	00000156			 ??0020:
4   996		  =MAIN:0156		 LASTWORD		 =	 ??0020
4   997								 IFNB	 <>
4   998								   DB
4   999								 ELSE
4  1000	00000156  00						   DB	 VEF_USUAL
4  1001								 ENDIF
4  1002	00000157  0A						 DB	 ??0021	- $ - 1
4  1003	00000158  28 44	4F 2D 44 45 46+				 DB	 '(DO-DEFER)'
   1004		  45 52	29
4  1005	00000162			 ??0021:
4  1006	00000162  0C						 DB	 ??0021	- ??0020
4  1007	00000163  20000137					 DD	 VOC_LINK
4  1008		  =MAIN:20000156	 VOC_LINK		 =	 ??0020	+ DESIRED_BASE_EQU
4  1009
4  1010								 IFNB	 <>
4  1011								   LABEL    FAR
4  1012								 ENDIF
4  1013								 IFNB	 <$DOVAR>
4  1014	00000167  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1015								 ELSE
4  1016								   DD	   ??0023 + DESIRED_BASE_EQU
4  1017								 ENDIF
4  1018	0000016B			 ??0023:
2  1019	0000016B						 LABEL	 $DODEFER FAR
2  1020	0000016B  8B 40	04					 MOV	 EAX,[DWORD PTR	EAX + CELL_SIZE]
2  1021								 $JMP
3  1022	0000016E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
3  1023	00000170  FF E3						 JMP	 EBX			 ; execute
2  1024
2  1025					 ;  (DO-INT/COMP)
2  1026								 $VAR	 '(DO-INT/COMP)'
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 19
FKernel.asm



3  1027								 $DEF	 '(DO-INT/COMP)',,$DOVAR
4  1028	00000172			 ??0024:
4  1029		  =MAIN:0172		 LASTWORD		 =	 ??0024
4  1030								 IFNB	 <>
4  1031								   DB
4  1032								 ELSE
4  1033	00000172  00						   DB	 VEF_USUAL
4  1034								 ENDIF
4  1035	00000173  0D						 DB	 ??0025	- $ - 1
4  1036	00000174  28 44	4F 2D 49 4E 54+				 DB	 '(DO-INT/COMP)'
   1037		  2F 43	4F 4D 50 29
4  1038	00000181			 ??0025:
4  1039	00000181  0F						 DB	 ??0025	- ??0024
4  1040	00000182  20000156					 DD	 VOC_LINK
4  1041		  =MAIN:20000172	 VOC_LINK		 =	 ??0024	+ DESIRED_BASE_EQU
4  1042
4  1043								 IFNB	 <>
4  1044								   LABEL    FAR
4  1045								 ENDIF
4  1046								 IFNB	 <$DOVAR>
4  1047	00000186  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1048								 ELSE
4  1049								   DD	   ??0027 + DESIRED_BASE_EQU
4  1050								 ENDIF
4  1051	0000018A			 ??0027:
2  1052	0000018A						 LABEL	 $PDO_INT_COMP FAR
2  1053	0000018A  83 C0	04					 ADD	 EAX,CELL_SIZE
2  1054	0000018D  83 3D	20000341 00				 CMP	 [DWORD	PTR STATE_VAR +	DESIRED_BASE_EQU],F_FALSE
2  1055	00000194  74 03						 JZ	 SHORT PDIC_INT
2  1056	00000196  83 C0	04					 ADD	 EAX,CELL_SIZE
2  1057	00000199			 PDIC_INT:
2  1058	00000199  8B 00						 MOV	 EAX,[DWORD PTR	EAX]
2  1059								 $JMP
3  1060	0000019B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
3  1061	0000019D  FF E3						 JMP	 EBX			 ; execute
2  1062
2  1063
1  1064								 INCLUDE "varconst.inc"
2  1065					 ;******************************************************************************
2  1066					 ;
2  1067					 ;  varconst.inc
2  1068					 ;  IKForth
2  1069					 ;
2  1070					 ;  Copyright (C) 1999-2003 Illya Kysil
2  1071					 ;
2  1072					 ;******************************************************************************
2  1073					 ;  Variables &	constants
2  1074					 ;******************************************************************************
2  1075
2  1076					 ;  D: -- 0
2  1077								 $CONST	 '0',$ZERO
3  1078								 $DEF	 '0',$ZERO,$DOCONST
4  1079	0000019F			 ??0028:
4  1080		  =MAIN:019F		 LASTWORD		 =	 ??0028
4  1081								 IFNB	 <>
4  1082								   DB
4  1083								 ELSE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 20
FKernel.asm



4  1084	0000019F  00						   DB	 VEF_USUAL
4  1085								 ENDIF
4  1086	000001A0  01						 DB	 ??0029	- $ - 1
4  1087	000001A1  30						 DB	 '0'
4  1088	000001A2			 ??0029:
4  1089	000001A2  03						 DB	 ??0029	- ??0028
4  1090	000001A3  20000172					 DD	 VOC_LINK
4  1091		  =MAIN:2000019F	 VOC_LINK		 =	 ??0028	+ DESIRED_BASE_EQU
4  1092
4  1093								 IFNB	 <$ZERO>
4  1094	000001A7						   LABEL   $ZERO FAR
4  1095								 ENDIF
4  1096								 IFNB	 <$DOCONST>
4  1097	000001A7  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1098								 ELSE
4  1099								   DD	   ??002B + DESIRED_BASE_EQU
4  1100								 ENDIF
4  1101	000001AB			 ??002B:
2  1102								 CC	 0
3  1103	000001AB  00000000					 DD	 0
2  1104
2  1105					 ;  CASE-SENSITIVE
2  1106					 ;  If CASE-SENSITIVE is true, then FIND is case sensitive
2  1107								 $USER	 'CASE-SENSITIVE',$CASE_SENSITIVE
3  1108								 $DEF	 'CASE-SENSITIVE',$CASE_SENSITIVE,$DOUSER
4  1109	000001AF			 ??002C:
4  1110		  =MAIN:01AF		 LASTWORD		 =	 ??002C
4  1111								 IFNB	 <>
4  1112								   DB
4  1113								 ELSE
4  1114	000001AF  00						   DB	 VEF_USUAL
4  1115								 ENDIF
4  1116	000001B0  0E						 DB	 ??002D	- $ - 1
4  1117	000001B1  43 41	53 45 2D 53 45+				 DB	 'CASE-SENSITIVE'
   1118		  4E 53	49 54 49 56 45
4  1119	000001BF			 ??002D:
4  1120	000001BF  10						 DB	 ??002D	- ??002C
4  1121	000001C0  2000019F					 DD	 VOC_LINK
4  1122		  =MAIN:200001AF	 VOC_LINK		 =	 ??002C	+ DESIRED_BASE_EQU
4  1123
4  1124								 IFNB	 <$CASE_SENSITIVE>
4  1125	000001C4						   LABEL   $CASE_SENSITIVE FAR
4  1126								 ENDIF
4  1127								 IFNB	 <$DOUSER>
4  1128	000001C4  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1129								 ELSE
4  1130								   DD	   ??002F + DESIRED_BASE_EQU
4  1131								 ENDIF
4  1132	000001C8			 ??002F:
2  1133								 CC	 CASE_SENSITIVE_VAR
3  1134	000001C8  00000024					 DD	 CASE_SENSITIVE_VAR
2  1135
2  1136					 ;  CURRENT-FILE-POSITION
2  1137								 $USER	 'CURRENT-FILE-POSITION',$CURRENT_FILE_POSITION
3  1138								 $DEF	 'CURRENT-FILE-POSITION',$CURRENT_FILE_POSITION,$DOUSER
4  1139	000001CC			 ??0030:
4  1140		  =MAIN:01CC		 LASTWORD		 =	 ??0030
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 21
FKernel.asm



4  1141								 IFNB	 <>
4  1142								   DB
4  1143								 ELSE
4  1144	000001CC  00						   DB	 VEF_USUAL
4  1145								 ENDIF
4  1146	000001CD  15						 DB	 ??0031	- $ - 1
4  1147	000001CE  43 55	52 52 45 4E 54+				 DB	 'CURRENT-FILE-POSITION'
   1148		  2D 46	49 4C 45 2D 50+
   1149		  4F 53	49 54 49 4F 4E
4  1150	000001E3			 ??0031:
4  1151	000001E3  17						 DB	 ??0031	- ??0030
4  1152	000001E4  200001AF					 DD	 VOC_LINK
4  1153		  =MAIN:200001CC	 VOC_LINK		 =	 ??0030	+ DESIRED_BASE_EQU
4  1154
4  1155								 IFNB	 <$CURRENT_FILE_POSITION>
4  1156	000001E8						   LABEL   $CURRENT_FILE_POSITION FAR
4  1157								 ENDIF
4  1158								 IFNB	 <$DOUSER>
4  1159	000001E8  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1160								 ELSE
4  1161								   DD	   ??0033 + DESIRED_BASE_EQU
4  1162								 ENDIF
4  1163	000001EC			 ??0033:
2  1164								 CC	 CURR_FILE_POS_VAR
3  1165	000001EC  0000002C					 DD	 CURR_FILE_POS_VAR
2  1166
2  1167					 ;  FILE-LINE
2  1168					 ;  Line address for INCLUDED
2  1169								 $USER	 'FILE-LINE',$FILE_LINE
3  1170								 $DEF	 'FILE-LINE',$FILE_LINE,$DOUSER
4  1171	000001F0			 ??0034:
4  1172		  =MAIN:01F0		 LASTWORD		 =	 ??0034
4  1173								 IFNB	 <>
4  1174								   DB
4  1175								 ELSE
4  1176	000001F0  00						   DB	 VEF_USUAL
4  1177								 ENDIF
4  1178	000001F1  09						 DB	 ??0035	- $ - 1
4  1179	000001F2  46 49	4C 45 2D 4C 49+				 DB	 'FILE-LINE'
   1180		  4E 45
4  1181	000001FB			 ??0035:
4  1182	000001FB  0B						 DB	 ??0035	- ??0034
4  1183	000001FC  200001CC					 DD	 VOC_LINK
4  1184		  =MAIN:200001F0	 VOC_LINK		 =	 ??0034	+ DESIRED_BASE_EQU
4  1185
4  1186								 IFNB	 <$FILE_LINE>
4  1187	00000200						   LABEL   $FILE_LINE FAR
4  1188								 ENDIF
4  1189								 IFNB	 <$DOUSER>
4  1190	00000200  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1191								 ELSE
4  1192								   DD	   ??0037 + DESIRED_BASE_EQU
4  1193								 ENDIF
4  1194	00000204			 ??0037:
2  1195								 CC	 FILE_LINE_VAR
3  1196	00000204  00000038					 DD	 FILE_LINE_VAR
2  1197
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 22
FKernel.asm



2  1198					 ;  #FILE-LINE
2  1199					 ;  Line length	for INCLUDED
2  1200								 $USER	 '#FILE-LINE',$#FILE_LINE
3  1201								 $DEF	 '#FILE-LINE',$#FILE_LINE,$DOUSER
4  1202	00000208			 ??0038:
4  1203		  =MAIN:0208		 LASTWORD		 =	 ??0038
4  1204								 IFNB	 <>
4  1205								   DB
4  1206								 ELSE
4  1207	00000208  00						   DB	 VEF_USUAL
4  1208								 ENDIF
4  1209	00000209  0A						 DB	 ??0039	- $ - 1
4  1210	0000020A  23 46	49 4C 45 2D 4C+				 DB	 '#FILE-LINE'
   1211		  49 4E	45
4  1212	00000214			 ??0039:
4  1213	00000214  0C						 DB	 ??0039	- ??0038
4  1214	00000215  200001F0					 DD	 VOC_LINK
4  1215		  =MAIN:20000208	 VOC_LINK		 =	 ??0038	+ DESIRED_BASE_EQU
4  1216
4  1217								 IFNB	 <$#FILE_LINE>
4  1218	00000219						   LABEL   $#FILE_LINE FAR
4  1219								 ENDIF
4  1220								 IFNB	 <$DOUSER>
4  1221	00000219  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1222								 ELSE
4  1223								   DD	   ??003B + DESIRED_BASE_EQU
4  1224								 ENDIF
4  1225	0000021D			 ??003B:
2  1226								 CC	 #FILE_LINE_VAR
3  1227	0000021D  00000034					 DD	 #FILE_LINE_VAR
2  1228
2  1229								 $CONST	 'MAX-FILE-LINE-LENGTH'
3  1230								 $DEF	 'MAX-FILE-LINE-LENGTH',,$DOCONST
4  1231	00000221			 ??003C:
4  1232		  =MAIN:0221		 LASTWORD		 =	 ??003C
4  1233								 IFNB	 <>
4  1234								   DB
4  1235								 ELSE
4  1236	00000221  00						   DB	 VEF_USUAL
4  1237								 ENDIF
4  1238	00000222  14						 DB	 ??003D	- $ - 1
4  1239	00000223  4D 41	58 2D 46 49 4C+				 DB	 'MAX-FILE-LINE-LENGTH'
   1240		  45 2D	4C 49 4E 45 2D+
   1241		  4C 45	4E 47 54 48
4  1242	00000237			 ??003D:
4  1243	00000237  16						 DB	 ??003D	- ??003C
4  1244	00000238  20000208					 DD	 VOC_LINK
4  1245		  =MAIN:20000221	 VOC_LINK		 =	 ??003C	+ DESIRED_BASE_EQU
4  1246
4  1247								 IFNB	 <>
4  1248								   LABEL    FAR
4  1249								 ENDIF
4  1250								 IFNB	 <$DOCONST>
4  1251	0000023C  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1252								 ELSE
4  1253								   DD	   ??003F + DESIRED_BASE_EQU
4  1254								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 23
FKernel.asm



4  1255	00000240			 ??003F:
2  1256								 CC	 MAX_FILE_LINE_LENGTH
3  1257	00000240  00000400					 DD	 MAX_FILE_LINE_LENGTH
2  1258
2  1259					 ;  USER-SIZE-VAR
2  1260								 $VAR	 'USER-SIZE-VAR'
3  1261								 $DEF	 'USER-SIZE-VAR',,$DOVAR
4  1262	00000244			 ??0040:
4  1263		  =MAIN:0244		 LASTWORD		 =	 ??0040
4  1264								 IFNB	 <>
4  1265								   DB
4  1266								 ELSE
4  1267	00000244  00						   DB	 VEF_USUAL
4  1268								 ENDIF
4  1269	00000245  0D						 DB	 ??0041	- $ - 1
4  1270	00000246  55 53	45 52 2D 53 49+				 DB	 'USER-SIZE-VAR'
   1271		  5A 45	2D 56 41 52
4  1272	00000253			 ??0041:
4  1273	00000253  0F						 DB	 ??0041	- ??0040
4  1274	00000254  20000221					 DD	 VOC_LINK
4  1275		  =MAIN:20000244	 VOC_LINK		 =	 ??0040	+ DESIRED_BASE_EQU
4  1276
4  1277								 IFNB	 <>
4  1278								   LABEL    FAR
4  1279								 ENDIF
4  1280								 IFNB	 <$DOVAR>
4  1281	00000258  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1282								 ELSE
4  1283								   DD	   ??0043 + DESIRED_BASE_EQU
4  1284								 ENDIF
4  1285	0000025C			 ??0043:
2  1286								 CC	 USER_AREA_SIZE
3  1287	0000025C  00004A48					 DD	 USER_AREA_SIZE
2  1288
2  1289					 ;  EXCEPTION-HANDLER
2  1290								 $USER	 'EXCEPTION-HANDLER',$EXCEPTION_HANDLER
3  1291								 $DEF	 'EXCEPTION-HANDLER',$EXCEPTION_HANDLER,$DOUSER
4  1292	00000260			 ??0044:
4  1293		  =MAIN:0260		 LASTWORD		 =	 ??0044
4  1294								 IFNB	 <>
4  1295								   DB
4  1296								 ELSE
4  1297	00000260  00						   DB	 VEF_USUAL
4  1298								 ENDIF
4  1299	00000261  11						 DB	 ??0045	- $ - 1
4  1300	00000262  45 58	43 45 50 54 49+				 DB	 'EXCEPTION-HANDLER'
   1301		  4F 4E	2D 48 41 4E 44+
   1302		  4C 45	52
4  1303	00000273			 ??0045:
4  1304	00000273  13						 DB	 ??0045	- ??0044
4  1305	00000274  20000244					 DD	 VOC_LINK
4  1306		  =MAIN:20000260	 VOC_LINK		 =	 ??0044	+ DESIRED_BASE_EQU
4  1307
4  1308								 IFNB	 <$EXCEPTION_HANDLER>
4  1309	00000278						   LABEL   $EXCEPTION_HANDLER FAR
4  1310								 ENDIF
4  1311								 IFNB	 <$DOUSER>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 24
FKernel.asm



4  1312	00000278  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1313								 ELSE
4  1314								   DD	   ??0047 + DESIRED_BASE_EQU
4  1315								 ENDIF
4  1316	0000027C			 ??0047:
2  1317								 CC	 EXCEPTION_HANDLER_VAR
3  1318	0000027C  0000043C					 DD	 EXCEPTION_HANDLER_VAR
2  1319
2  1320					 ;  S"-BUFFER
2  1321								 $USER	 'S"-BUFFER',$SQUOTE_BUFFER
3  1322								 $DEF	 'S"-BUFFER',$SQUOTE_BUFFER,$DOUSER
4  1323	00000280			 ??0048:
4  1324		  =MAIN:0280		 LASTWORD		 =	 ??0048
4  1325								 IFNB	 <>
4  1326								   DB
4  1327								 ELSE
4  1328	00000280  00						   DB	 VEF_USUAL
4  1329								 ENDIF
4  1330	00000281  09						 DB	 ??0049	- $ - 1
4  1331	00000282  53 22	2D 42 55 46 46+				 DB	 'S"-BUFFER'
   1332		  45 52
4  1333	0000028B			 ??0049:
4  1334	0000028B  0B						 DB	 ??0049	- ??0048
4  1335	0000028C  20000260					 DD	 VOC_LINK
4  1336		  =MAIN:20000280	 VOC_LINK		 =	 ??0048	+ DESIRED_BASE_EQU
4  1337
4  1338								 IFNB	 <$SQUOTE_BUFFER>
4  1339	00000290						   LABEL   $SQUOTE_BUFFER FAR
4  1340								 ENDIF
4  1341								 IFNB	 <$DOUSER>
4  1342	00000290  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1343								 ELSE
4  1344								   DD	   ??004B + DESIRED_BASE_EQU
4  1345								 ENDIF
4  1346	00000294			 ??004B:
2  1347								 CC	 SQUOTE_BUFFER_VAR
3  1348	00000294  00000540					 DD	 SQUOTE_BUFFER_VAR
2  1349
2  1350					 ;  POCKET
2  1351								 $USER	 'POCKET',$POCKET
3  1352								 $DEF	 'POCKET',$POCKET,$DOUSER
4  1353	00000298			 ??004C:
4  1354		  =MAIN:0298		 LASTWORD		 =	 ??004C
4  1355								 IFNB	 <>
4  1356								   DB
4  1357								 ELSE
4  1358	00000298  00						   DB	 VEF_USUAL
4  1359								 ENDIF
4  1360	00000299  06						 DB	 ??004D	- $ - 1
4  1361	0000029A  50 4F	43 4B 45 54				 DB	 'POCKET'
4  1362	000002A0			 ??004D:
4  1363	000002A0  08						 DB	 ??004D	- ??004C
4  1364	000002A1  20000280					 DD	 VOC_LINK
4  1365		  =MAIN:20000298	 VOC_LINK		 =	 ??004C	+ DESIRED_BASE_EQU
4  1366
4  1367								 IFNB	 <$POCKET>
4  1368	000002A5						   LABEL   $POCKET FAR
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 25
FKernel.asm



4  1369								 ENDIF
4  1370								 IFNB	 <$DOUSER>
4  1371	000002A5  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1372								 ELSE
4  1373								   DD	   ??004F + DESIRED_BASE_EQU
4  1374								 ENDIF
4  1375	000002A9			 ??004F:
2  1376								 CC	 POCKET_VAR
3  1377	000002A9  00000940					 DD	 POCKET_VAR
2  1378
2  1379					 ;  CURRENT
2  1380								 $USER	 'CURRENT',$CURRENT
3  1381								 $DEF	 'CURRENT',$CURRENT,$DOUSER
4  1382	000002AD			 ??0050:
4  1383		  =MAIN:02AD		 LASTWORD		 =	 ??0050
4  1384								 IFNB	 <>
4  1385								   DB
4  1386								 ELSE
4  1387	000002AD  00						   DB	 VEF_USUAL
4  1388								 ENDIF
4  1389	000002AE  07						 DB	 ??0051	- $ - 1
4  1390	000002AF  43 55	52 52 45 4E 54				 DB	 'CURRENT'
4  1391	000002B6			 ??0051:
4  1392	000002B6  09						 DB	 ??0051	- ??0050
4  1393	000002B7  20000298					 DD	 VOC_LINK
4  1394		  =MAIN:200002AD	 VOC_LINK		 =	 ??0050	+ DESIRED_BASE_EQU
4  1395
4  1396								 IFNB	 <$CURRENT>
4  1397	000002BB						   LABEL   $CURRENT FAR
4  1398								 ENDIF
4  1399								 IFNB	 <$DOUSER>
4  1400	000002BB  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1401								 ELSE
4  1402								   DD	   ??0053 + DESIRED_BASE_EQU
4  1403								 ENDIF
4  1404	000002BF			 ??0053:
2  1405								 CC	 CURRENT_VAR
3  1406	000002BF  00000438					 DD	 CURRENT_VAR
2  1407
2  1408					 ;  Start file name
2  1409					 ;  #SF
2  1410								 $VAR	 '#SF',$#SF
3  1411								 $DEF	 '#SF',$#SF,$DOVAR
4  1412	000002C3			 ??0054:
4  1413		  =MAIN:02C3		 LASTWORD		 =	 ??0054
4  1414								 IFNB	 <>
4  1415								   DB
4  1416								 ELSE
4  1417	000002C3  00						   DB	 VEF_USUAL
4  1418								 ENDIF
4  1419	000002C4  03						 DB	 ??0055	- $ - 1
4  1420	000002C5  23 53	46					 DB	 '#SF'
4  1421	000002C8			 ??0055:
4  1422	000002C8  05						 DB	 ??0055	- ??0054
4  1423	000002C9  200002AD					 DD	 VOC_LINK
4  1424		  =MAIN:200002C3	 VOC_LINK		 =	 ??0054	+ DESIRED_BASE_EQU
4  1425
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 26
FKernel.asm



4  1426								 IFNB	 <$#SF>
4  1427	000002CD						   LABEL   $#SF	FAR
4  1428								 ENDIF
4  1429								 IFNB	 <$DOVAR>
4  1430	000002CD  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1431								 ELSE
4  1432								   DD	   ??0057 + DESIRED_BASE_EQU
4  1433								 ENDIF
4  1434	000002D1			 ??0057:
2  1435	000002D1			 #SF_VAR:
2  1436								 CC	 0
3  1437	000002D1  00000000					 DD	 0
2  1438
2  1439					 ;  SF
2  1440								 $VAR	 'SF',$SF
3  1441								 $DEF	 'SF',$SF,$DOVAR
4  1442	000002D5			 ??0058:
4  1443		  =MAIN:02D5		 LASTWORD		 =	 ??0058
4  1444								 IFNB	 <>
4  1445								   DB
4  1446								 ELSE
4  1447	000002D5  00						   DB	 VEF_USUAL
4  1448								 ENDIF
4  1449	000002D6  02						 DB	 ??0059	- $ - 1
4  1450	000002D7  53 46						 DB	 'SF'
4  1451	000002D9			 ??0059:
4  1452	000002D9  04						 DB	 ??0059	- ??0058
4  1453	000002DA  200002C3					 DD	 VOC_LINK
4  1454		  =MAIN:200002D5	 VOC_LINK		 =	 ??0058	+ DESIRED_BASE_EQU
4  1455
4  1456								 IFNB	 <$SF>
4  1457	000002DE						   LABEL   $SF FAR
4  1458								 ENDIF
4  1459								 IFNB	 <$DOVAR>
4  1460	000002DE  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1461								 ELSE
4  1462								   DD	   ??005B + DESIRED_BASE_EQU
4  1463								 ENDIF
4  1464	000002E2			 ??005B:
2  1465	000002E2			 SF_VAR:
2  1466								 CC	 0
3  1467	000002E2  00000000					 DD	 0
2  1468
2  1469					 ;  DATA-AREA-BASE
2  1470								 $CONST	 'DATA-AREA-BASE'
3  1471								 $DEF	 'DATA-AREA-BASE',,$DOCONST
4  1472	000002E6			 ??005C:
4  1473		  =MAIN:02E6		 LASTWORD		 =	 ??005C
4  1474								 IFNB	 <>
4  1475								   DB
4  1476								 ELSE
4  1477	000002E6  00						   DB	 VEF_USUAL
4  1478								 ENDIF
4  1479	000002E7  0E						 DB	 ??005D	- $ - 1
4  1480	000002E8  44 41	54 41 2D 41 52+				 DB	 'DATA-AREA-BASE'
   1481		  45 41	2D 42 41 53 45
4  1482	000002F6			 ??005D:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 27
FKernel.asm



4  1483	000002F6  10						 DB	 ??005D	- ??005C
4  1484	000002F7  200002D5					 DD	 VOC_LINK
4  1485		  =MAIN:200002E6	 VOC_LINK		 =	 ??005C	+ DESIRED_BASE_EQU
4  1486
4  1487								 IFNB	 <>
4  1488								   LABEL    FAR
4  1489								 ENDIF
4  1490								 IFNB	 <$DOCONST>
4  1491	000002FB  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1492								 ELSE
4  1493								   DD	   ??005F + DESIRED_BASE_EQU
4  1494								 ENDIF
4  1495	000002FF			 ??005F:
2  1496								 CC	 DESIRED_BASE_EQU
3  1497	000002FF  20000000					 DD	 DESIRED_BASE_EQU
2  1498
2  1499					 ;  DATA-AREA-SIZE
2  1500								 $CONST	 'DATA-AREA-SIZE'
3  1501								 $DEF	 'DATA-AREA-SIZE',,$DOCONST
4  1502	00000303			 ??0060:
4  1503		  =MAIN:0303		 LASTWORD		 =	 ??0060
4  1504								 IFNB	 <>
4  1505								   DB
4  1506								 ELSE
4  1507	00000303  00						   DB	 VEF_USUAL
4  1508								 ENDIF
4  1509	00000304  0E						 DB	 ??0061	- $ - 1
4  1510	00000305  44 41	54 41 2D 41 52+				 DB	 'DATA-AREA-SIZE'
   1511		  45 41	2D 53 49 5A 45
4  1512	00000313			 ??0061:
4  1513	00000313  10						 DB	 ??0061	- ??0060
4  1514	00000314  200002E6					 DD	 VOC_LINK
4  1515		  =MAIN:20000303	 VOC_LINK		 =	 ??0060	+ DESIRED_BASE_EQU
4  1516
4  1517								 IFNB	 <>
4  1518								   LABEL    FAR
4  1519								 ENDIF
4  1520								 IFNB	 <$DOCONST>
4  1521	00000318  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1522								 ELSE
4  1523								   DD	   ??0063 + DESIRED_BASE_EQU
4  1524								 ENDIF
4  1525	0000031C			 ??0063:
2  1526								 CW	 DESIRED_SIZE_VAR
3  1527	0000031C  20000014					 DD	 DESIRED_SIZE_VAR + DESIRED_BASE_EQU
2  1528
2  1529					 ;  DP
2  1530					 ;  HERE = DP @
2  1531								 $VAR	 'DP',$DP
3  1532								 $DEF	 'DP',$DP,$DOVAR
4  1533	00000320			 ??0064:
4  1534		  =MAIN:0320		 LASTWORD		 =	 ??0064
4  1535								 IFNB	 <>
4  1536								   DB
4  1537								 ELSE
4  1538	00000320  00						   DB	 VEF_USUAL
4  1539								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 28
FKernel.asm



4  1540	00000321  02						 DB	 ??0065	- $ - 1
4  1541	00000322  44 50						 DB	 'DP'
4  1542	00000324			 ??0065:
4  1543	00000324  04						 DB	 ??0065	- ??0064
4  1544	00000325  20000303					 DD	 VOC_LINK
4  1545		  =MAIN:20000320	 VOC_LINK		 =	 ??0064	+ DESIRED_BASE_EQU
4  1546
4  1547								 IFNB	 <$DP>
4  1548	00000329						   LABEL   $DP FAR
4  1549								 ENDIF
4  1550								 IFNB	 <$DOVAR>
4  1551	00000329  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1552								 ELSE
4  1553								   DD	   ??0067 + DESIRED_BASE_EQU
4  1554								 ENDIF
4  1555	0000032D			 ??0067:
2  1556	0000032D			 DP_VAR:
2  1557								 CW	 HERE
3  1558	0000032D  200028D7					 DD	 HERE +	DESIRED_BASE_EQU
2  1559
2  1560					 ;  6.1.2250 STATE
2  1561					 ;  D: -- a-addr
2  1562					 ;  a-addr is the address of a cell containing the compilation-state flag.
2  1563					 ;  STATE is true when in compilation state, false otherwise.
2  1564					 ;  The	true value in STATE is non-zero, but is	otherwise implementation-defined.
2  1565								 $VAR	 'STATE',$STATE
3  1566								 $DEF	 'STATE',$STATE,$DOVAR
4  1567	00000331			 ??0068:
4  1568		  =MAIN:0331		 LASTWORD		 =	 ??0068
4  1569								 IFNB	 <>
4  1570								   DB
4  1571								 ELSE
4  1572	00000331  00						   DB	 VEF_USUAL
4  1573								 ENDIF
4  1574	00000332  05						 DB	 ??0069	- $ - 1
4  1575	00000333  53 54	41 54 45				 DB	 'STATE'
4  1576	00000338			 ??0069:
4  1577	00000338  07						 DB	 ??0069	- ??0068
4  1578	00000339  20000320					 DD	 VOC_LINK
4  1579		  =MAIN:20000331	 VOC_LINK		 =	 ??0068	+ DESIRED_BASE_EQU
4  1580
4  1581								 IFNB	 <$STATE>
4  1582	0000033D						   LABEL   $STATE FAR
4  1583								 ENDIF
4  1584								 IFNB	 <$DOVAR>
4  1585	0000033D  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  1586								 ELSE
4  1587								   DD	   ??006B + DESIRED_BASE_EQU
4  1588								 ENDIF
4  1589	00000341			 ??006B:
2  1590	00000341			 STATE_VAR:
2  1591								 CC	 F_FALSE
3  1592	00000341  00000000					 DD	 F_FALSE
2  1593
2  1594					 ;  6.1.0750 BASE
2  1595					 ;  a-addr is the address of a cell containing the current number-conversion
2  1596					 ;  radix {{2...36}}.
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 29
FKernel.asm



2  1597					 ;  D: -- a-addr
2  1598								 $USER	 'BASE',$BASE
3  1599								 $DEF	 'BASE',$BASE,$DOUSER
4  1600	00000345			 ??006C:
4  1601		  =MAIN:0345		 LASTWORD		 =	 ??006C
4  1602								 IFNB	 <>
4  1603								   DB
4  1604								 ELSE
4  1605	00000345  00						   DB	 VEF_USUAL
4  1606								 ENDIF
4  1607	00000346  04						 DB	 ??006D	- $ - 1
4  1608	00000347  42 41	53 45					 DB	 'BASE'
4  1609	0000034B			 ??006D:
4  1610	0000034B  06						 DB	 ??006D	- ??006C
4  1611	0000034C  20000331					 DD	 VOC_LINK
4  1612		  =MAIN:20000345	 VOC_LINK		 =	 ??006C	+ DESIRED_BASE_EQU
4  1613
4  1614								 IFNB	 <$BASE>
4  1615	00000350						   LABEL   $BASE FAR
4  1616								 ENDIF
4  1617								 IFNB	 <$DOUSER>
4  1618	00000350  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  1619								 ELSE
4  1620								   DD	   ??006F + DESIRED_BASE_EQU
4  1621								 ENDIF
4  1622	00000354			 ??006F:
2  1623								 CC	 BASE_VAR
3  1624	00000354  00000018					 DD	 BASE_VAR
2  1625
2  1626					 ;  6.1.0770 BL
2  1627					 ;  Push space character on stack
2  1628					 ;  D: -- char
2  1629								 $CONST	 'BL',$BL
3  1630								 $DEF	 'BL',$BL,$DOCONST
4  1631	00000358			 ??0070:
4  1632		  =MAIN:0358		 LASTWORD		 =	 ??0070
4  1633								 IFNB	 <>
4  1634								   DB
4  1635								 ELSE
4  1636	00000358  00						   DB	 VEF_USUAL
4  1637								 ENDIF
4  1638	00000359  02						 DB	 ??0071	- $ - 1
4  1639	0000035A  42 4C						 DB	 'BL'
4  1640	0000035C			 ??0071:
4  1641	0000035C  04						 DB	 ??0071	- ??0070
4  1642	0000035D  20000345					 DD	 VOC_LINK
4  1643		  =MAIN:20000358	 VOC_LINK		 =	 ??0070	+ DESIRED_BASE_EQU
4  1644
4  1645								 IFNB	 <$BL>
4  1646	00000361						   LABEL   $BL FAR
4  1647								 ENDIF
4  1648								 IFNB	 <$DOCONST>
4  1649	00000361  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  1650								 ELSE
4  1651								   DD	   ??0073 + DESIRED_BASE_EQU
4  1652								 ENDIF
4  1653	00000365			 ??0073:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 30
FKernel.asm



2  1654								 CC	 ' '
3  1655	00000365  00000020					 DD	 ' '
2  1656
2  1657					 ;  MAIN
2  1658					 ;  First Forth	word to	EXECUTE
2  1659								 $DEFER	 'MAIN',$MAIN
3  1660								 $DEF	 'MAIN',$MAIN,$DODEFER,
4  1661	00000369			 ??0074:
4  1662		  =MAIN:0369		 LASTWORD		 =	 ??0074
4  1663								 IFNB	 <>
4  1664								   DB
4  1665								 ELSE
4  1666	00000369  00						   DB	 VEF_USUAL
4  1667								 ENDIF
4  1668	0000036A  04						 DB	 ??0075	- $ - 1
4  1669	0000036B  4D 41	49 4E					 DB	 'MAIN'
4  1670	0000036F			 ??0075:
4  1671	0000036F  06						 DB	 ??0075	- ??0074
4  1672	00000370  20000358					 DD	 VOC_LINK
4  1673		  =MAIN:20000369	 VOC_LINK		 =	 ??0074	+ DESIRED_BASE_EQU
4  1674
4  1675								 IFNB	 <$MAIN>
4  1676	00000374						   LABEL   $MAIN FAR
4  1677								 ENDIF
4  1678								 IFNB	 <$DODEFER>
4  1679	00000374  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  1680								 ELSE
4  1681								   DD	   ??0077 + DESIRED_BASE_EQU
4  1682								 ENDIF
4  1683	00000378			 ??0077:
2  1684	00000378			 MAIN_PROC:
2  1685								 CW	 $DO_FORTH
3  1686	00000378  20002783					 DD	 $DO_FORTH + DESIRED_BASE_EQU
2  1687
1  1688								 INCLUDE "host.inc"
2  1689					 ;******************************************************************************
2  1690					 ;
2  1691					 ;  host.inc
2  1692					 ;  IKForth
2  1693					 ;
2  1694					 ;  Copyright (C) 1999-2003 Illya Kysil
2  1695					 ;
2  1696					 ;******************************************************************************
2  1697					 ;  Contains words, provided by	hosting	application.
2  1698					 ;******************************************************************************
2  1699
2  1700								 MACRO	 CGET_LAST_ERROR
2  1701								 MOV	 EAX,[DWORD PTR	FS:18H]
2  1702								 PUSHDS	 <[DWORD PTR EAX + 34H]>
2  1703								 ENDM	 CGET_LAST_ERROR
2  1704
2  1705					 ;******************************************************************************
2  1706					 ;  FACILITY words
2  1707					 ;******************************************************************************
2  1708
2  1709					 ;  10.6.1.2005	PAGE
2  1710								 $CODE	 'PAGE'
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 31
FKernel.asm



3  1711								 $DEF	 'PAGE',,,
4  1712	0000037C			 ??0078:
4  1713		  =MAIN:037C		 LASTWORD		 =	 ??0078
4  1714								 IFNB	 <>
4  1715								   DB
4  1716								 ELSE
4  1717	0000037C  00						   DB	 VEF_USUAL
4  1718								 ENDIF
4  1719	0000037D  04						 DB	 ??0079	- $ - 1
4  1720	0000037E  50 41	47 45					 DB	 'PAGE'
4  1721	00000382			 ??0079:
4  1722	00000382  06						 DB	 ??0079	- ??0078
4  1723	00000383  20000369					 DD	 VOC_LINK
4  1724		  =MAIN:2000037C	 VOC_LINK		 =	 ??0078	+ DESIRED_BASE_EQU
4  1725
4  1726								 IFNB	 <>
4  1727								   LABEL    FAR
4  1728								 ENDIF
4  1729								 IFNB	 <>
4  1730								   DD	    + DESIRED_BASE_EQU
4  1731								 ELSE
4  1732	00000387  2000038B					   DD	   ??007B + DESIRED_BASE_EQU
4  1733								 ENDIF
4  1734	0000038B			 ??007B:
2  1735								 $CALL	 PAGE_FUNC
3  1736								 PUSHRS	 EDI
4  1737	0000038B  83 ED	04					 SUB	 EBP,CELL_SIZE
4  1738	0000038E  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  1739	00000391  FF 15	20000060				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + PAGE_FUNC *	    +
   1740					 CELL_SIZE]
3  1741								 POPRS	 EDI
4  1742	00000397  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  1743	0000039A  83 C5	04					 ADD	 EBP,CELL_SIZE
2  1744								 $NEXT
3  1745	0000039D  AD						 LODSD				 ; fetch address
3  1746								 $JMP
4  1747	0000039E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1748	000003A0  FF E3						 JMP	 EBX			 ; execute
2  1749
2  1750					 ;  (BYE)
2  1751								 $CODE	 '(BYE)',$PBYE
3  1752								 $DEF	 '(BYE)',$PBYE,,
4  1753	000003A2			 ??007C:
4  1754		  =MAIN:03A2		 LASTWORD		 =	 ??007C
4  1755								 IFNB	 <>
4  1756								   DB
4  1757								 ELSE
4  1758	000003A2  00						   DB	 VEF_USUAL
4  1759								 ENDIF
4  1760	000003A3  05						 DB	 ??007D	- $ - 1
4  1761	000003A4  28 42	59 45 29				 DB	 '(BYE)'
4  1762	000003A9			 ??007D:
4  1763	000003A9  07						 DB	 ??007D	- ??007C
4  1764	000003AA  2000037C					 DD	 VOC_LINK
4  1765		  =MAIN:200003A2	 VOC_LINK		 =	 ??007C	+ DESIRED_BASE_EQU
4  1766
4  1767								 IFNB	 <$PBYE>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 32
FKernel.asm



4  1768	000003AE						   LABEL   $PBYE FAR
4  1769								 ENDIF
4  1770								 IFNB	 <>
4  1771								   DD	    + DESIRED_BASE_EQU
4  1772								 ELSE
4  1773	000003AE  200003B2					   DD	   ??007F + DESIRED_BASE_EQU
4  1774								 ENDIF
4  1775	000003B2			 ??007F:
2  1776								 $CALL	 BYE_FUNC
3  1777								 PUSHRS	 EDI
4  1778	000003B2  83 ED	04					 SUB	 EBP,CELL_SIZE
4  1779	000003B5  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  1780	000003B8  FF 15	20000038				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + BYE_FUNC *	    +
   1781					 CELL_SIZE]
3  1782								 POPRS	 EDI
4  1783	000003BE  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  1784	000003C1  83 C5	04					 ADD	 EBP,CELL_SIZE
2  1785								 $NEXT
3  1786	000003C4  AD						 LODSD				 ; fetch address
3  1787								 $JMP
4  1788	000003C5  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1789	000003C7  FF E3						 JMP	 EBX			 ; execute
2  1790
2  1791					 ;******************************************************************************
2  1792					 ;  DLL	support
2  1793					 ;******************************************************************************
2  1794
2  1795					 ;  GetLastError
2  1796								 $CODE	 'GetLastError'
3  1797								 $DEF	 'GetLastError',,,
4  1798	000003C9			 ??0080:
4  1799		  =MAIN:03C9		 LASTWORD		 =	 ??0080
4  1800								 IFNB	 <>
4  1801								   DB
4  1802								 ELSE
4  1803	000003C9  00						   DB	 VEF_USUAL
4  1804								 ENDIF
4  1805	000003CA  0C						 DB	 ??0081	- $ - 1
4  1806	000003CB  47 65	74 4C 61 73 74+				 DB	 'GetLastError'
   1807		  45 72	72 6F 72
4  1808	000003D7			 ??0081:
4  1809	000003D7  0E						 DB	 ??0081	- ??0080
4  1810	000003D8  200003A2					 DD	 VOC_LINK
4  1811		  =MAIN:200003C9	 VOC_LINK		 =	 ??0080	+ DESIRED_BASE_EQU
4  1812
4  1813								 IFNB	 <>
4  1814								   LABEL    FAR
4  1815								 ENDIF
4  1816								 IFNB	 <>
4  1817								   DD	    + DESIRED_BASE_EQU
4  1818								 ELSE
4  1819	000003DC  200003E0					   DD	   ??0083 + DESIRED_BASE_EQU
4  1820								 ENDIF
4  1821	000003E0			 ??0083:
2  1822								 CGET_LAST_ERROR
3  1823	000003E0  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  1824								 PUSHDS	 <[DWORD PTR EAX + 34H]>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 33
FKernel.asm



4  1825	000003E5  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  1826								 $NEXT
3  1827	000003E8  AD						 LODSD				 ; fetch address
3  1828								 $JMP
4  1829	000003E9  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1830	000003EB  FF E3						 JMP	 EBX			 ; execute
2  1831
2  1832					 ;  (LoadLibrary)
2  1833								 $CODE	 '(LoadLibrary)'
3  1834								 $DEF	 '(LoadLibrary)',,,
4  1835	000003ED			 ??0084:
4  1836		  =MAIN:03ED		 LASTWORD		 =	 ??0084
4  1837								 IFNB	 <>
4  1838								   DB
4  1839								 ELSE
4  1840	000003ED  00						   DB	 VEF_USUAL
4  1841								 ENDIF
4  1842	000003EE  0D						 DB	 ??0085	- $ - 1
4  1843	000003EF  28 4C	6F 61 64 4C 69+				 DB	 '(LoadLibrary)'
   1844		  62 72	61 72 79 29
4  1845	000003FC			 ??0085:
4  1846	000003FC  0F						 DB	 ??0085	- ??0084
4  1847	000003FD  200003C9					 DD	 VOC_LINK
4  1848		  =MAIN:200003ED	 VOC_LINK		 =	 ??0084	+ DESIRED_BASE_EQU
4  1849
4  1850								 IFNB	 <>
4  1851								   LABEL    FAR
4  1852								 ENDIF
4  1853								 IFNB	 <>
4  1854								   DD	    + DESIRED_BASE_EQU
4  1855								 ELSE
4  1856	00000401  20000405					   DD	   ??0087 + DESIRED_BASE_EQU
4  1857								 ENDIF
4  1858	00000405			 ??0087:
2  1859								 $CALL	 LOAD_LIBRARY_FUNC
3  1860								 PUSHRS	 EDI
4  1861	00000405  83 ED	04					 SUB	 EBP,CELL_SIZE
4  1862	00000408  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  1863	0000040B  FF 15	2000002C				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU +		    +
   1864					 LOAD_LIBRARY_FUNC * CELL_SIZE]
3  1865								 POPRS	 EDI
4  1866	00000411  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  1867	00000414  83 C5	04					 ADD	 EBP,CELL_SIZE
2  1868								 PUSHDS	 EAX
3  1869	00000417  50						 PUSH	 EAX
2  1870								 $NEXT
3  1871	00000418  AD						 LODSD				 ; fetch address
3  1872								 $JMP
4  1873	00000419  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1874	0000041B  FF E3						 JMP	 EBX			 ; execute
2  1875
2  1876					 ;  FreeLibrary
2  1877								 $CODE	 'FreeLibrary'
3  1878								 $DEF	 'FreeLibrary',,,
4  1879	0000041D			 ??0088:
4  1880		  =MAIN:041D		 LASTWORD		 =	 ??0088
4  1881								 IFNB	 <>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 34
FKernel.asm



4  1882								   DB
4  1883								 ELSE
4  1884	0000041D  00						   DB	 VEF_USUAL
4  1885								 ENDIF
4  1886	0000041E  0B						 DB	 ??0089	- $ - 1
4  1887	0000041F  46 72	65 65 4C 69 62+				 DB	 'FreeLibrary'
   1888		  72 61	72 79
4  1889	0000042A			 ??0089:
4  1890	0000042A  0D						 DB	 ??0089	- ??0088
4  1891	0000042B  200003ED					 DD	 VOC_LINK
4  1892		  =MAIN:2000041D	 VOC_LINK		 =	 ??0088	+ DESIRED_BASE_EQU
4  1893
4  1894								 IFNB	 <>
4  1895								   LABEL    FAR
4  1896								 ENDIF
4  1897								 IFNB	 <>
4  1898								   DD	    + DESIRED_BASE_EQU
4  1899								 ELSE
4  1900	0000042F  20000433					   DD	   ??008B + DESIRED_BASE_EQU
4  1901								 ENDIF
4  1902	00000433			 ??008B:
2  1903								 $CALL	 FREE_LIBRARY_FUNC
3  1904								 PUSHRS	 EDI
4  1905	00000433  83 ED	04					 SUB	 EBP,CELL_SIZE
4  1906	00000436  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  1907	00000439  FF 15	20000030				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU +		    +
   1908					 FREE_LIBRARY_FUNC * CELL_SIZE]
3  1909								 POPRS	 EDI
4  1910	0000043F  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  1911	00000442  83 C5	04					 ADD	 EBP,CELL_SIZE
2  1912								 $NEXT
3  1913	00000445  AD						 LODSD				 ; fetch address
3  1914								 $JMP
4  1915	00000446  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1916	00000448  FF E3						 JMP	 EBX			 ; execute
2  1917
2  1918					 ;  (GetProcAddress)
2  1919								 $CODE	 '(GetProcAddress)'
3  1920								 $DEF	 '(GetProcAddress)',,,
4  1921	0000044A			 ??008C:
4  1922		  =MAIN:044A		 LASTWORD		 =	 ??008C
4  1923								 IFNB	 <>
4  1924								   DB
4  1925								 ELSE
4  1926	0000044A  00						   DB	 VEF_USUAL
4  1927								 ENDIF
4  1928	0000044B  10						 DB	 ??008D	- $ - 1
4  1929	0000044C  28 47	65 74 50 72 6F+				 DB	 '(GetProcAddress)'
   1930		  63 41	64 64 72 65 73+
   1931		  73 29
4  1932	0000045C			 ??008D:
4  1933	0000045C  12						 DB	 ??008D	- ??008C
4  1934	0000045D  2000041D					 DD	 VOC_LINK
4  1935		  =MAIN:2000044A	 VOC_LINK		 =	 ??008C	+ DESIRED_BASE_EQU
4  1936
4  1937								 IFNB	 <>
4  1938								   LABEL    FAR
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 35
FKernel.asm



4  1939								 ENDIF
4  1940								 IFNB	 <>
4  1941								   DD	    + DESIRED_BASE_EQU
4  1942								 ELSE
4  1943	00000461  20000465					   DD	   ??008F + DESIRED_BASE_EQU
4  1944								 ENDIF
4  1945	00000465			 ??008F:
2  1946								 $CALL	 GET_PROC_ADDRESS_FUNC
3  1947								 PUSHRS	 EDI
4  1948	00000465  83 ED	04					 SUB	 EBP,CELL_SIZE
4  1949	00000468  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  1950	0000046B  FF 15	20000034				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU +		    +
   1951					 GET_PROC_ADDRESS_FUNC * CELL_SIZE]
3  1952								 POPRS	 EDI
4  1953	00000471  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  1954	00000474  83 C5	04					 ADD	 EBP,CELL_SIZE
2  1955								 PUSHDS	 EAX
3  1956	00000477  50						 PUSH	 EAX
2  1957								 $NEXT
3  1958	00000478  AD						 LODSD				 ; fetch address
3  1959								 $JMP
4  1960	00000479  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  1961	0000047B  FF E3						 JMP	 EBX			 ; execute
2  1962
2  1963					 ;******************************************************************************
2  1964					 ;  FILE access	words
2  1965					 ;******************************************************************************
2  1966
2  1967								 $CODE	 'CLOSE-FILE',$CLOSE_FILE
3  1968								 $DEF	 'CLOSE-FILE',$CLOSE_FILE,,
4  1969	0000047D			 ??0090:
4  1970		  =MAIN:047D		 LASTWORD		 =	 ??0090
4  1971								 IFNB	 <>
4  1972								   DB
4  1973								 ELSE
4  1974	0000047D  00						   DB	 VEF_USUAL
4  1975								 ENDIF
4  1976	0000047E  0A						 DB	 ??0091	- $ - 1
4  1977	0000047F  43 4C	4F 53 45 2D 46+				 DB	 'CLOSE-FILE'
   1978		  49 4C	45
4  1979	00000489			 ??0091:
4  1980	00000489  0C						 DB	 ??0091	- ??0090
4  1981	0000048A  2000044A					 DD	 VOC_LINK
4  1982		  =MAIN:2000047D	 VOC_LINK		 =	 ??0090	+ DESIRED_BASE_EQU
4  1983
4  1984								 IFNB	 <$CLOSE_FILE>
4  1985	0000048E						   LABEL   $CLOSE_FILE FAR
4  1986								 ENDIF
4  1987								 IFNB	 <>
4  1988								   DD	    + DESIRED_BASE_EQU
4  1989								 ELSE
4  1990	0000048E  20000492					   DD	   ??0093 + DESIRED_BASE_EQU
4  1991								 ENDIF
4  1992	00000492			 ??0093:
2  1993								 $CALL	 FILE_CLOSE_FUNC
3  1994								 PUSHRS	 EDI
4  1995	00000492  83 ED	04					 SUB	 EBP,CELL_SIZE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 36
FKernel.asm



4  1996	00000495  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  1997	00000498  FF 15	20000044				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + FILE_CLOSE_FUNC +
   1998					 * CELL_SIZE]
3  1999								 POPRS	 EDI
4  2000	0000049E  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2001	000004A1  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2002								 CGET_LAST_ERROR
3  2003	000004A4  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2004								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2005	000004A9  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  2006								 $NEXT
3  2007	000004AC  AD						 LODSD				 ; fetch address
3  2008								 $JMP
4  2009	000004AD  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2010	000004AF  FF E3						 JMP	 EBX			 ; execute
2  2011
2  2012								 $CODE	 'CREATE-FILE',$CREATE_FILE
3  2013								 $DEF	 'CREATE-FILE',$CREATE_FILE,,
4  2014	000004B1			 ??0094:
4  2015		  =MAIN:04B1		 LASTWORD		 =	 ??0094
4  2016								 IFNB	 <>
4  2017								   DB
4  2018								 ELSE
4  2019	000004B1  00						   DB	 VEF_USUAL
4  2020								 ENDIF
4  2021	000004B2  0B						 DB	 ??0095	- $ - 1
4  2022	000004B3  43 52	45 41 54 45 2D+				 DB	 'CREATE-FILE'
   2023		  46 49	4C 45
4  2024	000004BE			 ??0095:
4  2025	000004BE  0D						 DB	 ??0095	- ??0094
4  2026	000004BF  2000047D					 DD	 VOC_LINK
4  2027		  =MAIN:200004B1	 VOC_LINK		 =	 ??0094	+ DESIRED_BASE_EQU
4  2028
4  2029								 IFNB	 <$CREATE_FILE>
4  2030	000004C3						   LABEL   $CREATE_FILE	FAR
4  2031								 ENDIF
4  2032								 IFNB	 <>
4  2033								   DD	    + DESIRED_BASE_EQU
4  2034								 ELSE
4  2035	000004C3  200004C7					   DD	   ??0097 + DESIRED_BASE_EQU
4  2036								 ENDIF
4  2037	000004C7			 ??0097:
2  2038								 $CALL	 FILE_CREATE_FUNC
3  2039								 PUSHRS	 EDI
4  2040	000004C7  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2041	000004CA  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2042	000004CD  FF 15	20000048				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + FILE_CREATE_FUNC+
   2043					 * CELL_SIZE]
3  2044								 POPRS	 EDI
4  2045	000004D3  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2046	000004D6  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2047								 PUSHDS	 EAX
3  2048	000004D9  50						 PUSH	 EAX
2  2049								 CGET_LAST_ERROR
3  2050	000004DA  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2051								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2052	000004DF  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 37
FKernel.asm



2  2053								 $NEXT
3  2054	000004E2  AD						 LODSD				 ; fetch address
3  2055								 $JMP
4  2056	000004E3  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2057	000004E5  FF E3						 JMP	 EBX			 ; execute
2  2058
2  2059								 $CODE	 'FILE-POSITION',$FILE_POSITION
3  2060								 $DEF	 'FILE-POSITION',$FILE_POSITION,,
4  2061	000004E7			 ??0098:
4  2062		  =MAIN:04E7		 LASTWORD		 =	 ??0098
4  2063								 IFNB	 <>
4  2064								   DB
4  2065								 ELSE
4  2066	000004E7  00						   DB	 VEF_USUAL
4  2067								 ENDIF
4  2068	000004E8  0D						 DB	 ??0099	- $ - 1
4  2069	000004E9  46 49	4C 45 2D 50 4F+				 DB	 'FILE-POSITION'
   2070		  53 49	54 49 4F 4E
4  2071	000004F6			 ??0099:
4  2072	000004F6  0F						 DB	 ??0099	- ??0098
4  2073	000004F7  200004B1					 DD	 VOC_LINK
4  2074		  =MAIN:200004E7	 VOC_LINK		 =	 ??0098	+ DESIRED_BASE_EQU
4  2075
4  2076								 IFNB	 <$FILE_POSITION>
4  2077	000004FB						   LABEL   $FILE_POSITION FAR
4  2078								 ENDIF
4  2079								 IFNB	 <>
4  2080								   DD	    + DESIRED_BASE_EQU
4  2081								 ELSE
4  2082	000004FB  200004FF					   DD	   ??009B + DESIRED_BASE_EQU
4  2083								 ENDIF
4  2084	000004FF			 ??009B:
2  2085								 $CALL	 FILE_POSITION_FUNC
3  2086								 PUSHRS	 EDI
4  2087	000004FF  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2088	00000502  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2089	00000505  FF 15	2000004C				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU +		    +
   2090					 FILE_POSITION_FUNC * CELL_SIZE]
3  2091								 POPRS	 EDI
4  2092	0000050B  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2093	0000050E  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2094								 PUSHDS	 EAX
3  2095	00000511  50						 PUSH	 EAX
2  2096								 PUSHDS	 EDX
3  2097	00000512  52						 PUSH	 EDX
2  2098								 CGET_LAST_ERROR
3  2099	00000513  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2100								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2101	00000518  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  2102								 $NEXT
3  2103	0000051B  AD						 LODSD				 ; fetch address
3  2104								 $JMP
4  2105	0000051C  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2106	0000051E  FF E3						 JMP	 EBX			 ; execute
2  2107
2  2108								 $CODE	 'OPEN-FILE',$OPEN_FILE
3  2109								 $DEF	 'OPEN-FILE',$OPEN_FILE,,
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 38
FKernel.asm



4  2110	00000520			 ??009C:
4  2111		  =MAIN:0520		 LASTWORD		 =	 ??009C
4  2112								 IFNB	 <>
4  2113								   DB
4  2114								 ELSE
4  2115	00000520  00						   DB	 VEF_USUAL
4  2116								 ENDIF
4  2117	00000521  09						 DB	 ??009D	- $ - 1
4  2118	00000522  4F 50	45 4E 2D 46 49+				 DB	 'OPEN-FILE'
   2119		  4C 45
4  2120	0000052B			 ??009D:
4  2121	0000052B  0B						 DB	 ??009D	- ??009C
4  2122	0000052C  200004E7					 DD	 VOC_LINK
4  2123		  =MAIN:20000520	 VOC_LINK		 =	 ??009C	+ DESIRED_BASE_EQU
4  2124
4  2125								 IFNB	 <$OPEN_FILE>
4  2126	00000530						   LABEL   $OPEN_FILE FAR
4  2127								 ENDIF
4  2128								 IFNB	 <>
4  2129								   DD	    + DESIRED_BASE_EQU
4  2130								 ELSE
4  2131	00000530  20000534					   DD	   ??009F + DESIRED_BASE_EQU
4  2132								 ENDIF
4  2133	00000534			 ??009F:
2  2134								 $CALL	 FILE_OPEN_FUNC
3  2135								 PUSHRS	 EDI
4  2136	00000534  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2137	00000537  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2138	0000053A  FF 15	20000050				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + FILE_OPEN_FUNC *+
   2139					 CELL_SIZE]
3  2140								 POPRS	 EDI
4  2141	00000540  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2142	00000543  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2143								 PUSHDS	 EAX
3  2144	00000546  50						 PUSH	 EAX
2  2145								 CGET_LAST_ERROR
3  2146	00000547  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2147								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2148	0000054C  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  2149								 $NEXT
3  2150	0000054F  AD						 LODSD				 ; fetch address
3  2151								 $JMP
4  2152	00000550  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2153	00000552  FF E3						 JMP	 EBX			 ; execute
2  2154
2  2155								 $CODE	 'REPOSITION-FILE',$REPOSITION_FILE
3  2156								 $DEF	 'REPOSITION-FILE',$REPOSITION_FILE,,
4  2157	00000554			 ??00A0:
4  2158		  =MAIN:0554		 LASTWORD		 =	 ??00A0
4  2159								 IFNB	 <>
4  2160								   DB
4  2161								 ELSE
4  2162	00000554  00						   DB	 VEF_USUAL
4  2163								 ENDIF
4  2164	00000555  0F						 DB	 ??00A1	- $ - 1
4  2165	00000556  52 45	50 4F 53 49 54+				 DB	 'REPOSITION-FILE'
   2166		  49 4F	4E 2D 46 49 4C+
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 39
FKernel.asm



   2167		  45
4  2168	00000565			 ??00A1:
4  2169	00000565  11						 DB	 ??00A1	- ??00A0
4  2170	00000566  20000520					 DD	 VOC_LINK
4  2171		  =MAIN:20000554	 VOC_LINK		 =	 ??00A0	+ DESIRED_BASE_EQU
4  2172
4  2173								 IFNB	 <$REPOSITION_FILE>
4  2174	0000056A						   LABEL   $REPOSITION_FILE FAR
4  2175								 ENDIF
4  2176								 IFNB	 <>
4  2177								   DD	    + DESIRED_BASE_EQU
4  2178								 ELSE
4  2179	0000056A  2000056E					   DD	   ??00A3 + DESIRED_BASE_EQU
4  2180								 ENDIF
4  2181	0000056E			 ??00A3:
2  2182								 $CALL	 FILE_REPOSITION_FUNC
3  2183								 PUSHRS	 EDI
4  2184	0000056E  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2185	00000571  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2186	00000574  FF 15	20000054				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU +		    +
   2187					 FILE_REPOSITION_FUNC *	CELL_SIZE]
3  2188								 POPRS	 EDI
4  2189	0000057A  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2190	0000057D  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2191								 CGET_LAST_ERROR
3  2192	00000580  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2193								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2194	00000585  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  2195								 $NEXT
3  2196	00000588  AD						 LODSD				 ; fetch address
3  2197								 $JMP
4  2198	00000589  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2199	0000058B  FF E3						 JMP	 EBX			 ; execute
2  2200
2  2201								 $CODE	 '(READ-LINE)',$PREAD_LINE
3  2202								 $DEF	 '(READ-LINE)',$PREAD_LINE,,
4  2203	0000058D			 ??00A4:
4  2204		  =MAIN:058D		 LASTWORD		 =	 ??00A4
4  2205								 IFNB	 <>
4  2206								   DB
4  2207								 ELSE
4  2208	0000058D  00						   DB	 VEF_USUAL
4  2209								 ENDIF
4  2210	0000058E  0B						 DB	 ??00A5	- $ - 1
4  2211	0000058F  28 52	45 41 44 2D 4C+				 DB	 '(READ-LINE)'
   2212		  49 4E	45 29
4  2213	0000059A			 ??00A5:
4  2214	0000059A  0D						 DB	 ??00A5	- ??00A4
4  2215	0000059B  20000554					 DD	 VOC_LINK
4  2216		  =MAIN:2000058D	 VOC_LINK		 =	 ??00A4	+ DESIRED_BASE_EQU
4  2217
4  2218								 IFNB	 <$PREAD_LINE>
4  2219	0000059F						   LABEL   $PREAD_LINE FAR
4  2220								 ENDIF
4  2221								 IFNB	 <>
4  2222								   DD	    + DESIRED_BASE_EQU
4  2223								 ELSE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 40
FKernel.asm



4  2224	0000059F  200005A3					   DD	   ??00A7 + DESIRED_BASE_EQU
4  2225								 ENDIF
4  2226	000005A3			 ??00A7:
2  2227								 $CALL	 FILE_READ_LINE_FUNC
3  2228								 PUSHRS	 EDI
4  2229	000005A3  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2230	000005A6  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2231	000005A9  FF 15	20000058				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU +		    +
   2232					 FILE_READ_LINE_FUNC * CELL_SIZE]
3  2233								 POPRS	 EDI
4  2234	000005AF  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2235	000005B2  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2236								 PUSHDS	 EAX
3  2237	000005B5  50						 PUSH	 EAX
2  2238								 PUSHDS	 EDX
3  2239	000005B6  52						 PUSH	 EDX
2  2240								 CGET_LAST_ERROR
3  2241	000005B7  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2242								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2243	000005BC  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  2244								 $NEXT
3  2245	000005BF  AD						 LODSD				 ; fetch address
3  2246								 $JMP
4  2247	000005C0  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2248	000005C2  FF E3						 JMP	 EBX			 ; execute
2  2249
2  2250					 ;  6.1.1320 EMIT
2  2251					 ;  Emit a char	to output
2  2252					 ;  D: char --
2  2253								 $CODE	 'EMIT',$EMIT
3  2254								 $DEF	 'EMIT',$EMIT,,
4  2255	000005C4			 ??00A8:
4  2256		  =MAIN:05C4		 LASTWORD		 =	 ??00A8
4  2257								 IFNB	 <>
4  2258								   DB
4  2259								 ELSE
4  2260	000005C4  00						   DB	 VEF_USUAL
4  2261								 ENDIF
4  2262	000005C5  04						 DB	 ??00A9	- $ - 1
4  2263	000005C6  45 4D	49 54					 DB	 'EMIT'
4  2264	000005CA			 ??00A9:
4  2265	000005CA  06						 DB	 ??00A9	- ??00A8
4  2266	000005CB  2000058D					 DD	 VOC_LINK
4  2267		  =MAIN:200005C4	 VOC_LINK		 =	 ??00A8	+ DESIRED_BASE_EQU
4  2268
4  2269								 IFNB	 <$EMIT>
4  2270	000005CF						   LABEL   $EMIT FAR
4  2271								 ENDIF
4  2272								 IFNB	 <>
4  2273								   DD	    + DESIRED_BASE_EQU
4  2274								 ELSE
4  2275	000005CF  200005D3					   DD	   ??00AB + DESIRED_BASE_EQU
4  2276								 ENDIF
4  2277	000005D3			 ??00AB:
2  2278								 $CALL	 EMIT_FUNC
3  2279								 PUSHRS	 EDI
4  2280	000005D3  83 ED	04					 SUB	 EBP,CELL_SIZE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 41
FKernel.asm



4  2281	000005D6  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2282	000005D9  FF 15	2000003C				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + EMIT_FUNC *	    +
   2283					 CELL_SIZE]
3  2284								 POPRS	 EDI
4  2285	000005DF  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2286	000005E2  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2287								 $NEXT
3  2288	000005E5  AD						 LODSD				 ; fetch address
3  2289								 $JMP
4  2290	000005E6  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2291	000005E8  FF E3						 JMP	 EBX			 ; execute
2  2292
2  2293					 ;  6.1.2310 TYPE
2  2294					 ;  Display the	character string specified by addr and length n
2  2295					 ;  D: addr n --
2  2296								 $CODE	 'TYPE',$TYPE
3  2297								 $DEF	 'TYPE',$TYPE,,
4  2298	000005EA			 ??00AC:
4  2299		  =MAIN:05EA		 LASTWORD		 =	 ??00AC
4  2300								 IFNB	 <>
4  2301								   DB
4  2302								 ELSE
4  2303	000005EA  00						   DB	 VEF_USUAL
4  2304								 ENDIF
4  2305	000005EB  04						 DB	 ??00AD	- $ - 1
4  2306	000005EC  54 59	50 45					 DB	 'TYPE'
4  2307	000005F0			 ??00AD:
4  2308	000005F0  06						 DB	 ??00AD	- ??00AC
4  2309	000005F1  200005C4					 DD	 VOC_LINK
4  2310		  =MAIN:200005EA	 VOC_LINK		 =	 ??00AC	+ DESIRED_BASE_EQU
4  2311
4  2312								 IFNB	 <$TYPE>
4  2313	000005F5						   LABEL   $TYPE FAR
4  2314								 ENDIF
4  2315								 IFNB	 <>
4  2316								   DD	    + DESIRED_BASE_EQU
4  2317								 ELSE
4  2318	000005F5  200005F9					   DD	   ??00AF + DESIRED_BASE_EQU
4  2319								 ENDIF
4  2320	000005F9			 ??00AF:
2  2321								 $CALL	 TYPE_FUNC
3  2322								 PUSHRS	 EDI
4  2323	000005F9  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2324	000005FC  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2325	000005FF  FF 15	20000040				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + TYPE_FUNC *	    +
   2326					 CELL_SIZE]
3  2327								 POPRS	 EDI
4  2328	00000605  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2329	00000608  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2330								 $NEXT
3  2331	0000060B  AD						 LODSD				 ; fetch address
3  2332								 $JMP
4  2333	0000060C  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2334	0000060E  FF E3						 JMP	 EBX			 ; execute
2  2335
2  2336					 ;******************************************************************************
2  2337					 ;  Threads
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 42
FKernel.asm



2  2338					 ;******************************************************************************
2  2339
2  2340					 ;  THREAD
2  2341								 $CODE	 'THREAD',$THREAD
3  2342								 $DEF	 'THREAD',$THREAD,,
4  2343	00000610			 ??00B0:
4  2344		  =MAIN:0610		 LASTWORD		 =	 ??00B0
4  2345								 IFNB	 <>
4  2346								   DB
4  2347								 ELSE
4  2348	00000610  00						   DB	 VEF_USUAL
4  2349								 ENDIF
4  2350	00000611  06						 DB	 ??00B1	- $ - 1
4  2351	00000612  54 48	52 45 41 44				 DB	 'THREAD'
4  2352	00000618			 ??00B1:
4  2353	00000618  08						 DB	 ??00B1	- ??00B0
4  2354	00000619  200005EA					 DD	 VOC_LINK
4  2355		  =MAIN:20000610	 VOC_LINK		 =	 ??00B0	+ DESIRED_BASE_EQU
4  2356
4  2357								 IFNB	 <$THREAD>
4  2358	0000061D						   LABEL   $THREAD FAR
4  2359								 ENDIF
4  2360								 IFNB	 <>
4  2361								   DD	    + DESIRED_BASE_EQU
4  2362								 ELSE
4  2363	0000061D  20000621					   DD	   ??00B3 + DESIRED_BASE_EQU
4  2364								 ENDIF
4  2365	00000621			 ??00B3:
2  2366								 PUSHDS	 EDI
3  2367	00000621  57						 PUSH	 EDI
2  2368								 $CALL	 START_THREAD_FUNC
3  2369								 PUSHRS	 EDI
4  2370	00000622  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2371	00000625  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2372	00000628  FF 15	2000005C				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU +		    +
   2373					 START_THREAD_FUNC * CELL_SIZE]
3  2374								 POPRS	 EDI
4  2375	0000062E  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2376	00000631  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2377								 PUSHDS	 EAX
3  2378	00000634  50						 PUSH	 EAX
2  2379								 $NEXT
3  2380	00000635  AD						 LODSD				 ; fetch address
3  2381								 $JMP
4  2382	00000636  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2383	00000638  FF E3						 JMP	 EBX			 ; execute
2  2384
2  2385					 ;******************************************************************************
2  2386					 ;  Memory
2  2387					 ;******************************************************************************
2  2388
2  2389								 $CODE	 'ALLOCATE'
3  2390								 $DEF	 'ALLOCATE',,,
4  2391	0000063A			 ??00B4:
4  2392		  =MAIN:063A		 LASTWORD		 =	 ??00B4
4  2393								 IFNB	 <>
4  2394								   DB
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 43
FKernel.asm



4  2395								 ELSE
4  2396	0000063A  00						   DB	 VEF_USUAL
4  2397								 ENDIF
4  2398	0000063B  08						 DB	 ??00B5	- $ - 1
4  2399	0000063C  41 4C	4C 4F 43 41 54+				 DB	 'ALLOCATE'
   2400		  45
4  2401	00000644			 ??00B5:
4  2402	00000644  0A						 DB	 ??00B5	- ??00B4
4  2403	00000645  20000610					 DD	 VOC_LINK
4  2404		  =MAIN:2000063A	 VOC_LINK		 =	 ??00B4	+ DESIRED_BASE_EQU
4  2405
4  2406								 IFNB	 <>
4  2407								   LABEL    FAR
4  2408								 ENDIF
4  2409								 IFNB	 <>
4  2410								   DD	    + DESIRED_BASE_EQU
4  2411								 ELSE
4  2412	00000649  2000064D					   DD	   ??00B7 + DESIRED_BASE_EQU
4  2413								 ENDIF
4  2414	0000064D			 ??00B7:
2  2415								 $CALL	 ALLOCATE_FUNC
3  2416								 PUSHRS	 EDI
4  2417	0000064D  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2418	00000650  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2419	00000653  FF 15	20000064				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + ALLOCATE_FUNC * +
   2420					 CELL_SIZE]
3  2421								 POPRS	 EDI
4  2422	00000659  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2423	0000065C  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2424								 PUSHDS	 EAX
3  2425	0000065F  50						 PUSH	 EAX
2  2426								 CGET_LAST_ERROR
3  2427	00000660  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2428								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2429	00000665  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  2430								 $NEXT
3  2431	00000668  AD						 LODSD				 ; fetch address
3  2432								 $JMP
4  2433	00000669  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2434	0000066B  FF E3						 JMP	 EBX			 ; execute
2  2435
2  2436								 $CODE	 'FREE'
3  2437								 $DEF	 'FREE',,,
4  2438	0000066D			 ??00B8:
4  2439		  =MAIN:066D		 LASTWORD		 =	 ??00B8
4  2440								 IFNB	 <>
4  2441								   DB
4  2442								 ELSE
4  2443	0000066D  00						   DB	 VEF_USUAL
4  2444								 ENDIF
4  2445	0000066E  04						 DB	 ??00B9	- $ - 1
4  2446	0000066F  46 52	45 45					 DB	 'FREE'
4  2447	00000673			 ??00B9:
4  2448	00000673  06						 DB	 ??00B9	- ??00B8
4  2449	00000674  2000063A					 DD	 VOC_LINK
4  2450		  =MAIN:2000066D	 VOC_LINK		 =	 ??00B8	+ DESIRED_BASE_EQU
4  2451
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 44
FKernel.asm



4  2452								 IFNB	 <>
4  2453								   LABEL    FAR
4  2454								 ENDIF
4  2455								 IFNB	 <>
4  2456								   DD	    + DESIRED_BASE_EQU
4  2457								 ELSE
4  2458	00000678  2000067C					   DD	   ??00BB + DESIRED_BASE_EQU
4  2459								 ENDIF
4  2460	0000067C			 ??00BB:
2  2461								 $CALL	 FREE_FUNC
3  2462								 PUSHRS	 EDI
4  2463	0000067C  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2464	0000067F  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
3  2465	00000682  FF 15	20000068				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + FREE_FUNC *	    +
   2466					 CELL_SIZE]
3  2467								 POPRS	 EDI
4  2468	00000688  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2469	0000068B  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2470								 CGET_LAST_ERROR
3  2471	0000068E  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2472								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2473	00000693  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  2474								 $NEXT
3  2475	00000696  AD						 LODSD				 ; fetch address
3  2476								 $JMP
4  2477	00000697  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2478	00000699  FF E3						 JMP	 EBX			 ; execute
2  2479
2  2480								 $CODE	 'RESIZE'
3  2481								 $DEF	 'RESIZE',,,
4  2482	0000069B			 ??00BC:
4  2483		  =MAIN:069B		 LASTWORD		 =	 ??00BC
4  2484								 IFNB	 <>
4  2485								   DB
4  2486								 ELSE
4  2487	0000069B  00						   DB	 VEF_USUAL
4  2488								 ENDIF
4  2489	0000069C  06						 DB	 ??00BD	- $ - 1
4  2490	0000069D  52 45	53 49 5A 45				 DB	 'RESIZE'
4  2491	000006A3			 ??00BD:
4  2492	000006A3  08						 DB	 ??00BD	- ??00BC
4  2493	000006A4  2000066D					 DD	 VOC_LINK
4  2494		  =MAIN:2000069B	 VOC_LINK		 =	 ??00BC	+ DESIRED_BASE_EQU
4  2495
4  2496								 IFNB	 <>
4  2497								   LABEL    FAR
4  2498								 ENDIF
4  2499								 IFNB	 <>
4  2500								   DD	    + DESIRED_BASE_EQU
4  2501								 ELSE
4  2502	000006A8  200006AC					   DD	   ??00BF + DESIRED_BASE_EQU
4  2503								 ENDIF
4  2504	000006AC			 ??00BF:
2  2505								 $CALL	 REALLOCATE_FUNC
3  2506								 PUSHRS	 EDI
4  2507	000006AC  83 ED	04					 SUB	 EBP,CELL_SIZE
4  2508	000006AF  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 45
FKernel.asm



3  2509	000006B2  FF 15	2000006C				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU + REALLOCATE_FUNC +
   2510					 * CELL_SIZE]
3  2511								 POPRS	 EDI
4  2512	000006B8  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
4  2513	000006BB  83 C5	04					 ADD	 EBP,CELL_SIZE
2  2514								 PUSHDS	 EAX
3  2515	000006BE  50						 PUSH	 EAX
2  2516								 CGET_LAST_ERROR
3  2517	000006BF  64: 67| A1 0018				 MOV	 EAX,[DWORD PTR	FS:18H]
3  2518								 PUSHDS	 <[DWORD PTR EAX + 34H]>
4  2519	000006C4  FF 70	34					 PUSH	 [DWORD	PTR EAX	+ 34H]
2  2520								 $NEXT
3  2521	000006C7  AD						 LODSD				 ; fetch address
3  2522								 $JMP
4  2523	000006C8  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2524	000006CA  FF E3						 JMP	 EBX			 ; execute
2  2525
2  2526
1  2527								 INCLUDE "ik.inc"
2  2528					 ;******************************************************************************
2  2529					 ;
2  2530					 ;  ik.inc
2  2531					 ;  IKForth
2  2532					 ;
2  2533					 ;  Copyright (C) 1999-2003 Illya Kysil
2  2534					 ;
2  2535					 ;******************************************************************************
2  2536					 ;  IK words
2  2537					 ;******************************************************************************
2  2538
2  2539					 ;  INIT-USER
2  2540								 $CODE	 'INIT-USER',$INIT_USER
3  2541								 $DEF	 'INIT-USER',$INIT_USER,,
4  2542	000006CC			 ??00C0:
4  2543		  =MAIN:06CC		 LASTWORD		 =	 ??00C0
4  2544								 IFNB	 <>
4  2545								   DB
4  2546								 ELSE
4  2547	000006CC  00						   DB	 VEF_USUAL
4  2548								 ENDIF
4  2549	000006CD  09						 DB	 ??00C1	- $ - 1
4  2550	000006CE  49 4E	49 54 2D 55 53+				 DB	 'INIT-USER'
   2551		  45 52
4  2552	000006D7			 ??00C1:
4  2553	000006D7  0B						 DB	 ??00C1	- ??00C0
4  2554	000006D8  2000069B					 DD	 VOC_LINK
4  2555		  =MAIN:200006CC	 VOC_LINK		 =	 ??00C0	+ DESIRED_BASE_EQU
4  2556
4  2557								 IFNB	 <$INIT_USER>
4  2558	000006DC						   LABEL   $INIT_USER FAR
4  2559								 ENDIF
4  2560								 IFNB	 <>
4  2561								   DD	    + DESIRED_BASE_EQU
4  2562								 ELSE
4  2563	000006DC  200006E0					   DD	   ??00C3 + DESIRED_BASE_EQU
4  2564								 ENDIF
4  2565	000006E0			 ??00C3:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 46
FKernel.asm



2  2566	000006E0  FC						 CLD
2  2567	000006E1  C7 47	18 0000000A				 MOV	 [DWORD	PTR EDI	+ BASE_VAR],10
2  2568	000006E8  C7 87	00000438      +				 MOV	 [DWORD	PTR EDI	+ CURRENT_VAR],OFFSET FORTH_WORDLIST_EQU +  +
   2569		  20001D5D		 DESIRED_BASE_EQU
2  2570								 $NEXT
3  2571	000006F2  AD						 LODSD				 ; fetch address
3  2572								 $JMP
4  2573	000006F3  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2574	000006F5  FF E3						 JMP	 EBX			 ; execute
2  2575
2  2576					 ;******************************************************************************
2  2577					 ;  I/O
2  2578					 ;******************************************************************************
2  2579
2  2580					 ;  (TYPE)
2  2581								 $COLON	 '(TYPE)',$PTYPE
3  2582								 $DEF	 '(TYPE)',$PTYPE,$ENTER,
4  2583	000006F7			 ??00C4:
4  2584		  =MAIN:06F7		 LASTWORD		 =	 ??00C4
4  2585								 IFNB	 <>
4  2586								   DB
4  2587								 ELSE
4  2588	000006F7  00						   DB	 VEF_USUAL
4  2589								 ENDIF
4  2590	000006F8  06						 DB	 ??00C5	- $ - 1
4  2591	000006F9  28 54	59 50 45 29				 DB	 '(TYPE)'
4  2592	000006FF			 ??00C5:
4  2593	000006FF  08						 DB	 ??00C5	- ??00C4
4  2594	00000700  200006CC					 DD	 VOC_LINK
4  2595		  =MAIN:200006F7	 VOC_LINK		 =	 ??00C4	+ DESIRED_BASE_EQU
4  2596
4  2597								 IFNB	 <$PTYPE>
4  2598	00000704						   LABEL   $PTYPE FAR
4  2599								 ENDIF
4  2600								 IFNB	 <$ENTER>
4  2601	00000704  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  2602								 ELSE
4  2603								   DD	   ??00C7 + DESIRED_BASE_EQU
4  2604								 ENDIF
4  2605	00000708			 ??00C7:
2  2606								 CW	 $RFROM			 ; a
3  2607	00000708  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  2608								 CW	 $COUNT			 ; a+1 b
3  2609	0000070C  20002306					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  2610								 CW	 $OVER			 ; a+1 b a+1
3  2611	00000710  20001616					 DD	 $OVER + DESIRED_BASE_EQU
2  2612								 CW	 $OVER			 ; a+1 b a+1 b
3  2613	00000714  20001616					 DD	 $OVER + DESIRED_BASE_EQU
2  2614								 CW	 $ADD			 ; a+1 b a+1+b
3  2615	00000718  200018FD					 DD	 $ADD +	DESIRED_BASE_EQU
2  2616								 CW	 $TOR			 ; a+1 b
3  2617	0000071C  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  2618								 CW	 $TYPE
3  2619	00000720  200005F5					 DD	 $TYPE + DESIRED_BASE_EQU
2  2620								 CEXIT
3  2621								 CW	 $EXIT
4  2622	00000724  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 47
FKernel.asm



2  2623
2  2624
1  2625								 INCLUDE "source.inc"
2  2626					 ;******************************************************************************
2  2627					 ;
2  2628					 ;  source.inc
2  2629					 ;  IKForth
2  2630					 ;
2  2631					 ;  Copyright (C) 1999-2003 Illya Kysil
2  2632					 ;
2  2633					 ;******************************************************************************
2  2634					 ;
2  2635					 ;******************************************************************************
2  2636
2  2637					 ;  6.2.2218 SOURCE-ID
2  2638					 ;  Identifies the input source	as follows:
2  2639					 ;
2  2640					 ;  SOURCE-ID	    Input source
2  2641					 ;  -1		    String (via	EVALUATE)
2  2642					 ;   0		    User input device
2  2643					 ;  >0		    File handle
2  2644								 $CODE	 'SOURCE-ID',$SOURCE_ID
3  2645								 $DEF	 'SOURCE-ID',$SOURCE_ID,,
4  2646	00000728			 ??00C8:
4  2647		  =MAIN:0728		 LASTWORD		 =	 ??00C8
4  2648								 IFNB	 <>
4  2649								   DB
4  2650								 ELSE
4  2651	00000728  00						   DB	 VEF_USUAL
4  2652								 ENDIF
4  2653	00000729  09						 DB	 ??00C9	- $ - 1
4  2654	0000072A  53 4F	55 52 43 45 2D+				 DB	 'SOURCE-ID'
   2655		  49 44
4  2656	00000733			 ??00C9:
4  2657	00000733  0B						 DB	 ??00C9	- ??00C8
4  2658	00000734  200006F7					 DD	 VOC_LINK
4  2659		  =MAIN:20000728	 VOC_LINK		 =	 ??00C8	+ DESIRED_BASE_EQU
4  2660
4  2661								 IFNB	 <$SOURCE_ID>
4  2662	00000738						   LABEL   $SOURCE_ID FAR
4  2663								 ENDIF
4  2664								 IFNB	 <>
4  2665								   DD	    + DESIRED_BASE_EQU
4  2666								 ELSE
4  2667	00000738  2000073C					   DD	   ??00CB + DESIRED_BASE_EQU
4  2668								 ENDIF
4  2669	0000073C			 ??00CB:
2  2670								 PUSHDS	 <[DWORD PTR EDI + SOURCE_ID_VAR]>
3  2671	0000073C  FF 77	20					 PUSH	 [DWORD	PTR EDI	+ SOURCE_ID_VAR]
2  2672								 $NEXT
3  2673	0000073F  AD						 LODSD				 ; fetch address
3  2674								 $JMP
4  2675	00000740  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2676	00000742  FF E3						 JMP	 EBX			 ; execute
2  2677
2  2678					 ;  SOURCE-ID!
2  2679								 $CODE	 'SOURCE-ID!',$SOURCE_ID_STORE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 48
FKernel.asm



3  2680								 $DEF	 'SOURCE-ID!',$SOURCE_ID_STORE,,
4  2681	00000744			 ??00CC:
4  2682		  =MAIN:0744		 LASTWORD		 =	 ??00CC
4  2683								 IFNB	 <>
4  2684								   DB
4  2685								 ELSE
4  2686	00000744  00						   DB	 VEF_USUAL
4  2687								 ENDIF
4  2688	00000745  0A						 DB	 ??00CD	- $ - 1
4  2689	00000746  53 4F	55 52 43 45 2D+				 DB	 'SOURCE-ID!'
   2690		  49 44	21
4  2691	00000750			 ??00CD:
4  2692	00000750  0C						 DB	 ??00CD	- ??00CC
4  2693	00000751  20000728					 DD	 VOC_LINK
4  2694		  =MAIN:20000744	 VOC_LINK		 =	 ??00CC	+ DESIRED_BASE_EQU
4  2695
4  2696								 IFNB	 <$SOURCE_ID_STORE>
4  2697	00000755						   LABEL   $SOURCE_ID_STORE FAR
4  2698								 ENDIF
4  2699								 IFNB	 <>
4  2700								   DD	    + DESIRED_BASE_EQU
4  2701								 ELSE
4  2702	00000755  20000759					   DD	   ??00CF + DESIRED_BASE_EQU
4  2703								 ENDIF
4  2704	00000759			 ??00CF:
2  2705								 POPDS	 <[DWORD PTR EDI + SOURCE_ID_VAR]>
3  2706	00000759  8F 47	20					 POP	 [DWORD	PTR EDI	+ SOURCE_ID_VAR]
2  2707								 $NEXT
3  2708	0000075C  AD						 LODSD				 ; fetch address
3  2709								 $JMP
4  2710	0000075D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  2711	0000075F  FF E3						 JMP	 EBX			 ; execute
2  2712
2  2713					 ;  6.1.2216 SOURCE
2  2714					 ;  c-addr is the address of, and u is the number of characters	in
2  2715					 ;  the	input buffer.
2  2716					 ;  D: -- c-addr u
2  2717								 $COLON	 '(SOURCE)',$PSOURCE
3  2718								 $DEF	 '(SOURCE)',$PSOURCE,$ENTER,
4  2719	00000761			 ??00D0:
4  2720		  =MAIN:0761		 LASTWORD		 =	 ??00D0
4  2721								 IFNB	 <>
4  2722								   DB
4  2723								 ELSE
4  2724	00000761  00						   DB	 VEF_USUAL
4  2725								 ENDIF
4  2726	00000762  08						 DB	 ??00D1	- $ - 1
4  2727	00000763  28 53	4F 55 52 43 45+				 DB	 '(SOURCE)'
   2728		  29
4  2729	0000076B			 ??00D1:
4  2730	0000076B  0A						 DB	 ??00D1	- ??00D0
4  2731	0000076C  20000744					 DD	 VOC_LINK
4  2732		  =MAIN:20000761	 VOC_LINK		 =	 ??00D0	+ DESIRED_BASE_EQU
4  2733
4  2734								 IFNB	 <$PSOURCE>
4  2735	00000770						   LABEL   $PSOURCE FAR
4  2736								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 49
FKernel.asm



4  2737								 IFNB	 <$ENTER>
4  2738	00000770  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  2739								 ELSE
4  2740								   DD	   ??00D3 + DESIRED_BASE_EQU
4  2741								 ENDIF
4  2742	00000774			 ??00D3:
2  2743								 CW	 $FILE_LINE
3  2744	00000774  20000200					 DD	 $FILE_LINE + DESIRED_BASE_EQU
2  2745								 CFETCH	 $#FILE_LINE
3  2746								 CW	 $#FILE_LINE
4  2747	00000778  20000219					 DD	 $#FILE_LINE + DESIRED_BASE_EQU
3  2748								 CW	 $FETCH
4  2749	0000077C  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  2750								 CEXIT
3  2751								 CW	 $EXIT
4  2752	00000780  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  2753
2  2754								 $DEFER	 'SOURCE',$SOURCE
3  2755								 $DEF	 'SOURCE',$SOURCE,$DODEFER,
4  2756	00000784			 ??00D4:
4  2757		  =MAIN:0784		 LASTWORD		 =	 ??00D4
4  2758								 IFNB	 <>
4  2759								   DB
4  2760								 ELSE
4  2761	00000784  00						   DB	 VEF_USUAL
4  2762								 ENDIF
4  2763	00000785  06						 DB	 ??00D5	- $ - 1
4  2764	00000786  53 4F	55 52 43 45				 DB	 'SOURCE'
4  2765	0000078C			 ??00D5:
4  2766	0000078C  08						 DB	 ??00D5	- ??00D4
4  2767	0000078D  20000761					 DD	 VOC_LINK
4  2768		  =MAIN:20000784	 VOC_LINK		 =	 ??00D4	+ DESIRED_BASE_EQU
4  2769
4  2770								 IFNB	 <$SOURCE>
4  2771	00000791						   LABEL   $SOURCE FAR
4  2772								 ENDIF
4  2773								 IFNB	 <$DODEFER>
4  2774	00000791  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  2775								 ELSE
4  2776								   DD	   ??00D7 + DESIRED_BASE_EQU
4  2777								 ENDIF
4  2778	00000795			 ??00D7:
2  2779								 CW	 $PSOURCE
3  2780	00000795  20000770					 DD	 $PSOURCE + DESIRED_BASE_EQU
2  2781
2  2782					 ;  6.2.2125 REFILL
2  2783					 ;  D: -- flag
2  2784								 $COLON	 '(REFILL)',$PREFILL
3  2785								 $DEF	 '(REFILL)',$PREFILL,$ENTER,
4  2786	00000799			 ??00D8:
4  2787		  =MAIN:0799		 LASTWORD		 =	 ??00D8
4  2788								 IFNB	 <>
4  2789								   DB
4  2790								 ELSE
4  2791	00000799  00						   DB	 VEF_USUAL
4  2792								 ENDIF
4  2793	0000079A  08						 DB	 ??00D9	- $ - 1
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 50
FKernel.asm



4  2794	0000079B  28 52	45 46 49 4C 4C+				 DB	 '(REFILL)'
   2795		  29
4  2796	000007A3			 ??00D9:
4  2797	000007A3  0A						 DB	 ??00D9	- ??00D8
4  2798	000007A4  20000784					 DD	 VOC_LINK
4  2799		  =MAIN:20000799	 VOC_LINK		 =	 ??00D8	+ DESIRED_BASE_EQU
4  2800
4  2801								 IFNB	 <$PREFILL>
4  2802	000007A8						   LABEL   $PREFILL FAR
4  2803								 ENDIF
4  2804								 IFNB	 <$ENTER>
4  2805	000007A8  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  2806								 ELSE
4  2807								   DD	   ??00DB + DESIRED_BASE_EQU
4  2808								 ENDIF
4  2809	000007AC			 ??00DB:
2  2810								 CW	 $FILE_LINE
3  2811	000007AC  20000200					 DD	 $FILE_LINE + DESIRED_BASE_EQU
2  2812								 CCLIT	 MAX_FILE_LINE_LENGTH
3  2813								 CW	 $LIT
4  2814	000007B0  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  2815								 CC	 MAX_FILE_LINE_LENGTH
4  2816	000007B4  00000400					 DD	 MAX_FILE_LINE_LENGTH
2  2817								 CW	 $SOURCE_ID
3  2818	000007B8  20000738					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2  2819								 CW	 $READ_LINE
3  2820	000007BC  200025A0					 DD	 $READ_LINE + DESIRED_BASE_EQU
2  2821								 CW	 $DROP
3  2822	000007C0  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  2823								 CW	 $SWAP
3  2824	000007C4  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  2825								 CSTORE	 $#FILE_LINE
3  2826								 CW	 $#FILE_LINE
4  2827	000007C8  20000219					 DD	 $#FILE_LINE + DESIRED_BASE_EQU
3  2828								 CW	 $STORE
4  2829	000007CC  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2  2830								 CW	 $ZERO
3  2831	000007D0  200001A7					 DD	 $ZERO + DESIRED_BASE_EQU
2  2832								 CSTORE	 $TOIN
3  2833								 CW	 $TOIN
4  2834	000007D4  20001F76					 DD	 $TOIN + DESIRED_BASE_EQU
3  2835								 CW	 $STORE
4  2836	000007D8  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2  2837								 CEXIT
3  2838								 CW	 $EXIT
4  2839	000007DC  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  2840
2  2841								 $DEFER	 'REFILL',$REFILL
3  2842								 $DEF	 'REFILL',$REFILL,$DODEFER,
4  2843	000007E0			 ??00DC:
4  2844		  =MAIN:07E0		 LASTWORD		 =	 ??00DC
4  2845								 IFNB	 <>
4  2846								   DB
4  2847								 ELSE
4  2848	000007E0  00						   DB	 VEF_USUAL
4  2849								 ENDIF
4  2850	000007E1  06						 DB	 ??00DD	- $ - 1
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 51
FKernel.asm



4  2851	000007E2  52 45	46 49 4C 4C				 DB	 'REFILL'
4  2852	000007E8			 ??00DD:
4  2853	000007E8  08						 DB	 ??00DD	- ??00DC
4  2854	000007E9  20000799					 DD	 VOC_LINK
4  2855		  =MAIN:200007E0	 VOC_LINK		 =	 ??00DC	+ DESIRED_BASE_EQU
4  2856
4  2857								 IFNB	 <$REFILL>
4  2858	000007ED						   LABEL   $REFILL FAR
4  2859								 ENDIF
4  2860								 IFNB	 <$DODEFER>
4  2861	000007ED  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  2862								 ELSE
4  2863								   DD	   ??00DF + DESIRED_BASE_EQU
4  2864								 ENDIF
4  2865	000007F1			 ??00DF:
2  2866								 CW	 $PREFILL
3  2867	000007F1  200007A8					 DD	 $PREFILL + DESIRED_BASE_EQU
2  2868
2  2869								 $DEFER	 '(SAVE-INPUT)',$PSAVE_INPUT
3  2870								 $DEF	 '(SAVE-INPUT)',$PSAVE_INPUT,$DODEFER,
4  2871	000007F5			 ??00E0:
4  2872		  =MAIN:07F5		 LASTWORD		 =	 ??00E0
4  2873								 IFNB	 <>
4  2874								   DB
4  2875								 ELSE
4  2876	000007F5  00						   DB	 VEF_USUAL
4  2877								 ENDIF
4  2878	000007F6  0C						 DB	 ??00E1	- $ - 1
4  2879	000007F7  28 53	41 56 45 2D 49+				 DB	 '(SAVE-INPUT)'
   2880		  4E 50	55 54 29
4  2881	00000803			 ??00E1:
4  2882	00000803  0E						 DB	 ??00E1	- ??00E0
4  2883	00000804  200007E0					 DD	 VOC_LINK
4  2884		  =MAIN:200007F5	 VOC_LINK		 =	 ??00E0	+ DESIRED_BASE_EQU
4  2885
4  2886								 IFNB	 <$PSAVE_INPUT>
4  2887	00000808						   LABEL   $PSAVE_INPUT	FAR
4  2888								 ENDIF
4  2889								 IFNB	 <$DODEFER>
4  2890	00000808  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  2891								 ELSE
4  2892								   DD	   ??00E3 + DESIRED_BASE_EQU
4  2893								 ENDIF
4  2894	0000080C			 ??00E3:
2  2895								 CW	 $SAVE_INPUT_FILE
3  2896	0000080C  20002679					 DD	 $SAVE_INPUT_FILE + DESIRED_BASE_EQU
2  2897
2  2898								 $COLON	 'SAVE-INPUT',$SAVE_INPUT
3  2899								 $DEF	 'SAVE-INPUT',$SAVE_INPUT,$ENTER,
4  2900	00000810			 ??00E4:
4  2901		  =MAIN:0810		 LASTWORD		 =	 ??00E4
4  2902								 IFNB	 <>
4  2903								   DB
4  2904								 ELSE
4  2905	00000810  00						   DB	 VEF_USUAL
4  2906								 ENDIF
4  2907	00000811  0A						 DB	 ??00E5	- $ - 1
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 52
FKernel.asm



4  2908	00000812  53 41	56 45 2D 49 4E+				 DB	 'SAVE-INPUT'
   2909		  50 55	54
4  2910	0000081C			 ??00E5:
4  2911	0000081C  0C						 DB	 ??00E5	- ??00E4
4  2912	0000081D  200007F5					 DD	 VOC_LINK
4  2913		  =MAIN:20000810	 VOC_LINK		 =	 ??00E4	+ DESIRED_BASE_EQU
4  2914
4  2915								 IFNB	 <$SAVE_INPUT>
4  2916	00000821						   LABEL   $SAVE_INPUT FAR
4  2917								 ENDIF
4  2918								 IFNB	 <$ENTER>
4  2919	00000821  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  2920								 ELSE
4  2921								   DD	   ??00E7 + DESIRED_BASE_EQU
4  2922								 ENDIF
4  2923	00000825			 ??00E7:
2  2924								 CW	 $PSAVE_INPUT
3  2925	00000825  20000808					 DD	 $PSAVE_INPUT +	DESIRED_BASE_EQU
2  2926								 CEXIT
3  2927								 CW	 $EXIT
4  2928	00000829  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  2929
2  2930								 $COLON	 'RESTORE-INPUT',$RESTORE_INPUT
3  2931								 $DEF	 'RESTORE-INPUT',$RESTORE_INPUT,$ENTER,
4  2932	0000082D			 ??00E8:
4  2933		  =MAIN:082D		 LASTWORD		 =	 ??00E8
4  2934								 IFNB	 <>
4  2935								   DB
4  2936								 ELSE
4  2937	0000082D  00						   DB	 VEF_USUAL
4  2938								 ENDIF
4  2939	0000082E  0D						 DB	 ??00E9	- $ - 1
4  2940	0000082F  52 45	53 54 4F 52 45+				 DB	 'RESTORE-INPUT'
   2941		  2D 49	4E 50 55 54
4  2942	0000083C			 ??00E9:
4  2943	0000083C  0F						 DB	 ??00E9	- ??00E8
4  2944	0000083D  20000810					 DD	 VOC_LINK
4  2945		  =MAIN:2000082D	 VOC_LINK		 =	 ??00E8	+ DESIRED_BASE_EQU
4  2946
4  2947								 IFNB	 <$RESTORE_INPUT>
4  2948	00000841						   LABEL   $RESTORE_INPUT FAR
4  2949								 ENDIF
4  2950								 IFNB	 <$ENTER>
4  2951	00000841  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  2952								 ELSE
4  2953								   DD	   ??00EB + DESIRED_BASE_EQU
4  2954								 ENDIF
4  2955	00000845			 ??00EB:
2  2956								 CW	 $1SUB
3  2957	00000845  2000193F					 DD	 $1SUB + DESIRED_BASE_EQU
2  2958								 CW	 $SWAP
3  2959	00000849  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  2960								 CW	 $EXECUTE
3  2961	0000084D  20001E9F					 DD	 $EXECUTE + DESIRED_BASE_EQU
2  2962								 CW	 $FALSE
3  2963	00000851  20001AF7					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  2964								 CEXIT
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 53
FKernel.asm



3  2965								 CW	 $EXIT
4  2966	00000855  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  2967
2  2968								 $DEFER	 '(RESET-INPUT)',$PRESET_INPUT
3  2969								 $DEF	 '(RESET-INPUT)',$PRESET_INPUT,$DODEFER,
4  2970	00000859			 ??00EC:
4  2971		  =MAIN:0859		 LASTWORD		 =	 ??00EC
4  2972								 IFNB	 <>
4  2973								   DB
4  2974								 ELSE
4  2975	00000859  00						   DB	 VEF_USUAL
4  2976								 ENDIF
4  2977	0000085A  0D						 DB	 ??00ED	- $ - 1
4  2978	0000085B  28 52	45 53 45 54 2D+				 DB	 '(RESET-INPUT)'
   2979		  49 4E	50 55 54 29
4  2980	00000868			 ??00ED:
4  2981	00000868  0F						 DB	 ??00ED	- ??00EC
4  2982	00000869  2000082D					 DD	 VOC_LINK
4  2983		  =MAIN:20000859	 VOC_LINK		 =	 ??00EC	+ DESIRED_BASE_EQU
4  2984
4  2985								 IFNB	 <$PRESET_INPUT>
4  2986	0000086D						   LABEL   $PRESET_INPUT FAR
4  2987								 ENDIF
4  2988								 IFNB	 <$DODEFER>
4  2989	0000086D  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  2990								 ELSE
4  2991								   DD	   ??00EF + DESIRED_BASE_EQU
4  2992								 ENDIF
4  2993	00000871			 ??00EF:
2  2994								 CW	 $RESET_INPUT_FILE
3  2995	00000871  20002729					 DD	 $RESET_INPUT_FILE + DESIRED_BASE_EQU
2  2996
2  2997								 $COLON	 'RESET-INPUT',$RESET_INPUT
3  2998								 $DEF	 'RESET-INPUT',$RESET_INPUT,$ENTER,
4  2999	00000875			 ??00F0:
4  3000		  =MAIN:0875		 LASTWORD		 =	 ??00F0
4  3001								 IFNB	 <>
4  3002								   DB
4  3003								 ELSE
4  3004	00000875  00						   DB	 VEF_USUAL
4  3005								 ENDIF
4  3006	00000876  0B						 DB	 ??00F1	- $ - 1
4  3007	00000877  52 45	53 45 54 2D 49+				 DB	 'RESET-INPUT'
   3008		  4E 50	55 54
4  3009	00000882			 ??00F1:
4  3010	00000882  0D						 DB	 ??00F1	- ??00F0
4  3011	00000883  20000859					 DD	 VOC_LINK
4  3012		  =MAIN:20000875	 VOC_LINK		 =	 ??00F0	+ DESIRED_BASE_EQU
4  3013
4  3014								 IFNB	 <$RESET_INPUT>
4  3015	00000887						   LABEL   $RESET_INPUT	FAR
4  3016								 ENDIF
4  3017								 IFNB	 <$ENTER>
4  3018	00000887  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3019								 ELSE
4  3020								   DD	   ??00F3 + DESIRED_BASE_EQU
4  3021								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 54
FKernel.asm



4  3022	0000088B			 ??00F3:
2  3023								 CW	 $PRESET_INPUT
3  3024	0000088B  2000086D					 DD	 $PRESET_INPUT + DESIRED_BASE_EQU
2  3025								 CEXIT
3  3026								 CW	 $EXIT
4  3027	0000088F  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3028
2  3029					 ;  INPUT>R
2  3030								 $COLON	 'INPUT>R',$INPUT_TO_R,VEF_COMPILE_ONLY
3  3031								 $DEF	 'INPUT>R',$INPUT_TO_R,$ENTER,VEF_COMPILE_ONLY
4  3032	00000893			 ??00F4:
4  3033		  =MAIN:0893		 LASTWORD		 =	 ??00F4
4  3034								 IFNB	 <VEF_COMPILE_ONLY>
4  3035	00000893  04						   DB	 VEF_COMPILE_ONLY
4  3036								 ELSE
4  3037								   DB	 VEF_USUAL
4  3038								 ENDIF
4  3039	00000894  07						 DB	 ??00F5	- $ - 1
4  3040	00000895  49 4E	50 55 54 3E 52				 DB	 'INPUT>R'
4  3041	0000089C			 ??00F5:
4  3042	0000089C  09						 DB	 ??00F5	- ??00F4
4  3043	0000089D  20000875					 DD	 VOC_LINK
4  3044		  =MAIN:20000893	 VOC_LINK		 =	 ??00F4	+ DESIRED_BASE_EQU
4  3045
4  3046								 IFNB	 <$INPUT_TO_R>
4  3047	000008A1						   LABEL   $INPUT_TO_R FAR
4  3048								 ENDIF
4  3049								 IFNB	 <$ENTER>
4  3050	000008A1  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3051								 ELSE
4  3052								   DD	   ??00F7 + DESIRED_BASE_EQU
4  3053								 ENDIF
4  3054	000008A5			 ??00F7:
2  3055								 CW	 $RFROM
3  3056	000008A5  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  3057								 CW	 $SAVE_INPUT
3  3058	000008A9  20000821					 DD	 $SAVE_INPUT + DESIRED_BASE_EQU
2  3059								 CW	 $N_TO_R
3  3060	000008AD  20001895					 DD	 $N_TO_R + DESIRED_BASE_EQU
2  3061								 CW	 $TOR
3  3062	000008B1  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  3063								 CEXIT
3  3064								 CW	 $EXIT
4  3065	000008B5  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3066
2  3067					 ;  R>INPUT
2  3068								 $COLON	 'R>INPUT',$R_TO_INPUT,VEF_COMPILE_ONLY
3  3069								 $DEF	 'R>INPUT',$R_TO_INPUT,$ENTER,VEF_COMPILE_ONLY
4  3070	000008B9			 ??00F8:
4  3071		  =MAIN:08B9		 LASTWORD		 =	 ??00F8
4  3072								 IFNB	 <VEF_COMPILE_ONLY>
4  3073	000008B9  04						   DB	 VEF_COMPILE_ONLY
4  3074								 ELSE
4  3075								   DB	 VEF_USUAL
4  3076								 ENDIF
4  3077	000008BA  07						 DB	 ??00F9	- $ - 1
4  3078	000008BB  52 3E	49 4E 50 55 54				 DB	 'R>INPUT'
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 55
FKernel.asm



4  3079	000008C2			 ??00F9:
4  3080	000008C2  09						 DB	 ??00F9	- ??00F8
4  3081	000008C3  20000893					 DD	 VOC_LINK
4  3082		  =MAIN:200008B9	 VOC_LINK		 =	 ??00F8	+ DESIRED_BASE_EQU
4  3083
4  3084								 IFNB	 <$R_TO_INPUT>
4  3085	000008C7						   LABEL   $R_TO_INPUT FAR
4  3086								 ENDIF
4  3087								 IFNB	 <$ENTER>
4  3088	000008C7  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3089								 ELSE
4  3090								   DD	   ??00FB + DESIRED_BASE_EQU
4  3091								 ENDIF
4  3092	000008CB			 ??00FB:
2  3093								 CW	 $RFROM
3  3094	000008CB  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  3095								 CW	 $N_R_FROM
3  3096	000008CF  200018BF					 DD	 $N_R_FROM + DESIRED_BASE_EQU
2  3097								 CW	 $RESTORE_INPUT
3  3098	000008D3  20000841					 DD	 $RESTORE_INPUT	+ DESIRED_BASE_EQU
2  3099								 CW	 $DROP
3  3100	000008D7  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  3101								 CW	 $TOR
3  3102	000008DB  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  3103								 CEXIT
3  3104								 CW	 $EXIT
4  3105	000008DF  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3106
2  3107
1  3108								 INCLUDE "thread.inc"
2  3109					 ;******************************************************************************
2  3110					 ;
2  3111					 ;  thread.inc
2  3112					 ;  IKForth
2  3113					 ;
2  3114					 ;  Copyright (C) 1999-2003 Illya Kysil
2  3115					 ;
2  3116					 ;******************************************************************************
2  3117					 ;  THREAD & support words
2  3118					 ;******************************************************************************
2  3119
2  3120					 ;  THREAD-EXIT
2  3121								 $CODE	 'THREAD-EXIT',$THREAD_EXIT
3  3122								 $DEF	 'THREAD-EXIT',$THREAD_EXIT,,
4  3123	000008E3			 ??00FC:
4  3124		  =MAIN:08E3		 LASTWORD		 =	 ??00FC
4  3125								 IFNB	 <>
4  3126								   DB
4  3127								 ELSE
4  3128	000008E3  00						   DB	 VEF_USUAL
4  3129								 ENDIF
4  3130	000008E4  0B						 DB	 ??00FD	- $ - 1
4  3131	000008E5  54 48	52 45 41 44 2D+				 DB	 'THREAD-EXIT'
   3132		  45 58	49 54
4  3133	000008F0			 ??00FD:
4  3134	000008F0  0D						 DB	 ??00FD	- ??00FC
4  3135	000008F1  200008B9					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 56
FKernel.asm



4  3136		  =MAIN:200008E3	 VOC_LINK		 =	 ??00FC	+ DESIRED_BASE_EQU
4  3137
4  3138								 IFNB	 <$THREAD_EXIT>
4  3139	000008F5						   LABEL   $THREAD_EXIT	FAR
4  3140								 ENDIF
4  3141								 IFNB	 <>
4  3142								   DD	    + DESIRED_BASE_EQU
4  3143								 ELSE
4  3144	000008F5  200008F9					   DD	   ??00FF + DESIRED_BASE_EQU
4  3145								 ENDIF
4  3146	000008F9			 ??00FF:
2  3147	000008F9  8B 77	08					 MOV	 ESI,[DWORD PTR	EDI + ESI_VAR]
2  3148	000008FC  8B 6F	0C					 MOV	 EBP,[DWORD PTR	EDI + EBP_VAR]
2  3149	000008FF  8B 67	14					 MOV	 ESP,[DWORD PTR	EDI + ESP_VAR]
2  3150	00000902  8B 5F	10					 MOV	 EBX,[DWORD PTR	EDI + EBX_VAR]
2  3151					 ; remove per-thread exception handler data
2  3152								 POPDS	 <[DWORD PTR FS:0]>
3  3153	00000905  64: 67| 8F 06	0000				 POP	 [DWORD	PTR FS:0]
2  3154	0000090B  83 C4	04					 ADD	 ESP,4
2  3155
2  3156								 PUSHDS	 <[DWORD PTR EDI + RETURN_ADDR_VAR]>
3  3157	0000090E  FF 37						 PUSH	 [DWORD	PTR EDI	+ RETURN_ADDR_VAR]
2  3158	00000910  8B 7F	04					 MOV	 EDI,[DWORD PTR	EDI + EDI_VAR]
2  3159	00000913  C3						 RET
2  3160
2  3161	00000914			 THREAD_PROC:
2  3162								 POPDS	 EDX			 ; return address
3  3163	00000914  5A						 POP	 EDX
2  3164	00000915  8B C7						 MOV	 EAX,EDI
2  3165								 POPDS	 EDI			 ; user	data pointer
3  3166	00000917  5F						 POP	 EDI
2  3167								 POPDS	 ECX			 ; xt
3  3168	00000918  59						 POP	 ECX
2  3169
2  3170					 ; setup per-thread exception handler
2  3171								 PUSHDS	 <OFFSET SEH_HANDLER + DESIRED_BASE_EQU>
3  3172	00000919  68 2000095A					 PUSH	 OFFSET	SEH_HANDLER + DESIRED_BASE_EQU
2  3173								 PUSHDS	 <[DWORD PTR FS:0]>
3  3174	0000091E  64: 67| FF 36	0000				 PUSH	 [DWORD	PTR FS:0]
2  3175	00000924  64: 67| 89 26	0000				 MOV	 [DWORD	PTR FS:0],ESP
2  3176
2  3177	0000092A  89 17						 MOV	 [DWORD	PTR EDI	+ RETURN_ADDR_VAR],EDX
2  3178	0000092C  89 47	04					 MOV	 [DWORD	PTR EDI	+ EDI_VAR],EAX
2  3179	0000092F  89 77	08					 MOV	 [DWORD	PTR EDI	+ ESI_VAR],ESI
2  3180	00000932  89 6F	0C					 MOV	 [DWORD	PTR EDI	+ EBP_VAR],EBP
2  3181	00000935  89 5F	10					 MOV	 [DWORD	PTR EDI	+ EBX_VAR],EBX
2  3182	00000938  8B EF						 MOV	 EBP,EDI
2  3183	0000093A  81 C5	00004A44				 ADD	 EBP,RSTACK_VAR
2  3184	00000940  89 67	14					 MOV	 [DWORD	PTR EDI	+ ESP_VAR],ESP
2  3185								 PUSHDS	 ECX
3  3186	00000943  51						 PUSH	 ECX
2  3187	00000944  BE 2000094E					 MOV	 ESI,OFFSET DO_THREAD +	DESIRED_BASE_EQU
2  3188								 $NEXT
3  3189	00000949  AD						 LODSD				 ; fetch address
3  3190								 $JMP
4  3191	0000094A  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3192	0000094C  FF E3						 JMP	 EBX			 ; execute
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 57
FKernel.asm



2  3193	0000094E			 DO_THREAD:
2  3194								 CW	 $CATCH
3  3195	0000094E  200024FC					 DD	 $CATCH	+ DESIRED_BASE_EQU
2  3196								 CW	 $DROP
3  3197	00000952  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  3198								 CW	 $THREAD_EXIT
3  3199	00000956  200008F5					 DD	 $THREAD_EXIT +	DESIRED_BASE_EQU
2  3200
2  3201	0000095A			 SEH_HANDLER:
2  3202	0000095A  55						 PUSH	 EBP
2  3203	0000095B  8B EC						 MOV	 EBP,ESP
2  3204	0000095D  53						 PUSH	 EBX
2  3205	0000095E  57						 PUSH	 EDI
2  3206	0000095F  56						 PUSH	 ESI
2  3207	00000960  8B 5D	08					 MOV	 EBX,[DWORD PTR	EBP + 08h] ; get pointer to ExceptionRecord
2  3208	00000963  8B 03						 MOV	 EAX,[DWORD PTR	EBX]	   ; get exception code
2  3209	00000965  8B 5D	10					 MOV	 EBX,[DWORD PTR	EBP + 10h] ; get pointer to CONTEXT
2  3210					 ; store CONTEXT
2  3211	00000968  B9 000000CC					 MOV	 ECX,0CCh
2  3212	0000096D  8B F3						 MOV	 ESI,EBX
2  3213					 ; load	EDI with UDP
2  3214	0000096F  8B BB	0000009C				 MOV	 EDI,[DWORD PTR	EBX + 39 * 4]
2  3215	00000975  81 C7	00000440				 ADD	 EDI,WIN32_EXCEPTION_CONTEXT_VAR
2  3216	0000097B  F3> A4				 REP	 MOVSB
2  3217					 ; fixup CONTEXT.EIP
2  3218	0000097D  C7 83	000000B8      +				 MOV	 [DWORD	PTR EBX	+ 46 * 4],OFFSET DO_SEH	+ DESIRED_BASE_EQU
   3219		  20000999
2  3220					 ; fixup CONTEXT.EAX (=	Win32 exception	code)
2  3221	00000987  89 83	000000B0				 MOV	 [DWORD	PTR EBX	+ 44 * 4],EAX
2  3222					 ; eax=0 reload	context	& continue execution
2  3223	0000098D  B8 00000000					 MOV	 EAX,0
2  3224	00000992  5E						 POP	 ESI
2  3225	00000993  5F						 POP	 EDI
2  3226	00000994  5B						 POP	 EBX
2  3227	00000995  8B E5						 MOV	 ESP,EBP
2  3228	00000997  5D						 POP	 EBP
2  3229	00000998  C3						 RET
2  3230	00000999			 DO_SEH:
2  3231								 PUSHDS	 EAX
3  3232	00000999  50						 PUSH	 EAX
2  3233	0000099A  BE 200009A4					 MOV	 ESI,OFFSET DO_FORTH_SEH + DESIRED_BASE_EQU
2  3234								 $NEXT
3  3235	0000099F  AD						 LODSD				 ; fetch address
3  3236								 $JMP
4  3237	000009A0  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  3238	000009A2  FF E3						 JMP	 EBX			 ; execute
2  3239	000009A4			 DO_FORTH_SEH:
2  3240								 CW	 $SEH_HANDLER
3  3241	000009A4  200009DA					 DD	 $SEH_HANDLER +	DESIRED_BASE_EQU
2  3242								 CW	 $THROW
3  3243	000009A8  20002566					 DD	 $THROW	+ DESIRED_BASE_EQU
2  3244
2  3245					 ;  (SEH-HANDLER)
2  3246					 ;  D: win32-exc-id -- exc-id
2  3247								 $COLON	 '(SEH-HANDLER)',$PSEH_HANDLER
3  3248								 $DEF	 '(SEH-HANDLER)',$PSEH_HANDLER,$ENTER,
4  3249	000009AC			 ??0100:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 58
FKernel.asm



4  3250		  =MAIN:09AC		 LASTWORD		 =	 ??0100
4  3251								 IFNB	 <>
4  3252								   DB
4  3253								 ELSE
4  3254	000009AC  00						   DB	 VEF_USUAL
4  3255								 ENDIF
4  3256	000009AD  0D						 DB	 ??0101	- $ - 1
4  3257	000009AE  28 53	45 48 2D 48 41+				 DB	 '(SEH-HANDLER)'
   3258		  4E 44	4C 45 52 29
4  3259	000009BB			 ??0101:
4  3260	000009BB  0F						 DB	 ??0101	- ??0100
4  3261	000009BC  200008E3					 DD	 VOC_LINK
4  3262		  =MAIN:200009AC	 VOC_LINK		 =	 ??0100	+ DESIRED_BASE_EQU
4  3263
4  3264								 IFNB	 <$PSEH_HANDLER>
4  3265	000009C0						   LABEL   $PSEH_HANDLER FAR
4  3266								 ENDIF
4  3267								 IFNB	 <$ENTER>
4  3268	000009C0  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3269								 ELSE
4  3270								   DD	   ??0103 + DESIRED_BASE_EQU
4  3271								 ENDIF
4  3272	000009C4			 ??0103:
2  3273								 CEXIT
3  3274								 CW	 $EXIT
4  3275	000009C4  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3276
2  3277					 ;  SEH-HANDLER
2  3278					 ;  D: win32-exc-id -- exc-id
2  3279								 $DEFER	 'SEH-HANDLER',$SEH_HANDLER
3  3280								 $DEF	 'SEH-HANDLER',$SEH_HANDLER,$DODEFER,
4  3281	000009C8			 ??0104:
4  3282		  =MAIN:09C8		 LASTWORD		 =	 ??0104
4  3283								 IFNB	 <>
4  3284								   DB
4  3285								 ELSE
4  3286	000009C8  00						   DB	 VEF_USUAL
4  3287								 ENDIF
4  3288	000009C9  0B						 DB	 ??0105	- $ - 1
4  3289	000009CA  53 45	48 2D 48 41 4E+				 DB	 'SEH-HANDLER'
   3290		  44 4C	45 52
4  3291	000009D5			 ??0105:
4  3292	000009D5  0D						 DB	 ??0105	- ??0104
4  3293	000009D6  200009AC					 DD	 VOC_LINK
4  3294		  =MAIN:200009C8	 VOC_LINK		 =	 ??0104	+ DESIRED_BASE_EQU
4  3295
4  3296								 IFNB	 <$SEH_HANDLER>
4  3297	000009DA						   LABEL   $SEH_HANDLER	FAR
4  3298								 ENDIF
4  3299								 IFNB	 <$DODEFER>
4  3300	000009DA  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  3301								 ELSE
4  3302								   DD	   ??0107 + DESIRED_BASE_EQU
4  3303								 ENDIF
4  3304	000009DE			 ??0107:
2  3305								 CW	 $PSEH_HANDLER
3  3306	000009DE  200009C0					 DD	 $PSEH_HANDLER + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 59
FKernel.asm



2  3307
2  3308								 $USER	 'WIN32-EXCEPTION-CONTEXT',$WIN32_EXCEPTION_CONTEXT
3  3309								 $DEF	 'WIN32-EXCEPTION-CONTEXT',$WIN32_EXCEPTION_CONTEXT,$DOUSER
4  3310	000009E2			 ??0108:
4  3311		  =MAIN:09E2		 LASTWORD		 =	 ??0108
4  3312								 IFNB	 <>
4  3313								   DB
4  3314								 ELSE
4  3315	000009E2  00						   DB	 VEF_USUAL
4  3316								 ENDIF
4  3317	000009E3  17						 DB	 ??0109	- $ - 1
4  3318	000009E4  57 49	4E 33 32 2D 45+				 DB	 'WIN32-EXCEPTION-CONTEXT'
   3319		  58 43	45 50 54 49 4F+
   3320		  4E 2D	43 4F 4E 54 45+
   3321		  58 54
4  3322	000009FB			 ??0109:
4  3323	000009FB  19						 DB	 ??0109	- ??0108
4  3324	000009FC  200009C8					 DD	 VOC_LINK
4  3325		  =MAIN:200009E2	 VOC_LINK		 =	 ??0108	+ DESIRED_BASE_EQU
4  3326
4  3327								 IFNB	 <$WIN32_EXCEPTION_CONTEXT>
4  3328	00000A00						   LABEL   $WIN32_EXCEPTION_CONTEXT FAR
4  3329								 ENDIF
4  3330								 IFNB	 <$DOUSER>
4  3331	00000A00  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  3332								 ELSE
4  3333								   DD	   ??010B + DESIRED_BASE_EQU
4  3334								 ENDIF
4  3335	00000A04			 ??010B:
2  3336								 CC	 WIN32_EXCEPTION_CONTEXT_VAR
3  3337	00000A04  00000440					 DD	 WIN32_EXCEPTION_CONTEXT_VAR
2  3338
2  3339
1  3340								 INCLUDE "int_comp.inc"
2  3341					 ;******************************************************************************
2  3342					 ;
2  3343					 ;  int_comp.inc
2  3344					 ;  IKForth
2  3345					 ;
2  3346					 ;  Copyright (C) 1999-2003 Illya Kysil
2  3347					 ;
2  3348					 ;******************************************************************************
2  3349					 ;  Interpretation/compilation time helper words
2  3350					 ;******************************************************************************
2  3351
2  3352					 ;  IS-INT/COMP?
2  3353								 $COLON	 'IS-INT/COMP?',$IS_INT_COMPQ
3  3354								 $DEF	 'IS-INT/COMP?',$IS_INT_COMPQ,$ENTER,
4  3355	00000A08			 ??010C:
4  3356		  =MAIN:0A08		 LASTWORD		 =	 ??010C
4  3357								 IFNB	 <>
4  3358								   DB
4  3359								 ELSE
4  3360	00000A08  00						   DB	 VEF_USUAL
4  3361								 ENDIF
4  3362	00000A09  0C						 DB	 ??010D	- $ - 1
4  3363	00000A0A  49 53	2D 49 4E 54 2F+				 DB	 'IS-INT/COMP?'
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 60
FKernel.asm



   3364		  43 4F	4D 50 3F
4  3365	00000A16			 ??010D:
4  3366	00000A16  0E						 DB	 ??010D	- ??010C
4  3367	00000A17  200009E2					 DD	 VOC_LINK
4  3368		  =MAIN:20000A08	 VOC_LINK		 =	 ??010C	+ DESIRED_BASE_EQU
4  3369
4  3370								 IFNB	 <$IS_INT_COMPQ>
4  3371	00000A1B						   LABEL   $IS_INT_COMPQ FAR
4  3372								 ENDIF
4  3373								 IFNB	 <$ENTER>
4  3374	00000A1B  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3375								 ELSE
4  3376								   DD	   ??010F + DESIRED_BASE_EQU
4  3377								 ENDIF
4  3378	00000A1F			 ??010F:
2  3379								 CW	 $FETCH
3  3380	00000A1F  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3381								 CWLIT	 $PDO_INT_COMP
3  3382								 CW	 $LIT
4  3383	00000A23  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  3384								 CW	 $PDO_INT_COMP
4  3385	00000A27  2000018A					 DD	 $PDO_INT_COMP + DESIRED_BASE_EQU
2  3386								 CW	 $EQ
3  3387	00000A2B  20001B64					 DD	 $EQ + DESIRED_BASE_EQU
2  3388								 CEXIT
3  3389								 CW	 $EXIT
4  3390	00000A2F  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3391
2  3392					 ;  INT/COMP>INT
2  3393								 $COLON	 'INT/COMP>INT',$INT_COMP_TO_INT
3  3394								 $DEF	 'INT/COMP>INT',$INT_COMP_TO_INT,$ENTER,
4  3395	00000A33			 ??0110:
4  3396		  =MAIN:0A33		 LASTWORD		 =	 ??0110
4  3397								 IFNB	 <>
4  3398								   DB
4  3399								 ELSE
4  3400	00000A33  00						   DB	 VEF_USUAL
4  3401								 ENDIF
4  3402	00000A34  0C						 DB	 ??0111	- $ - 1
4  3403	00000A35  49 4E	54 2F 43 4F 4D+				 DB	 'INT/COMP>INT'
   3404		  50 3E	49 4E 54
4  3405	00000A41			 ??0111:
4  3406	00000A41  0E						 DB	 ??0111	- ??0110
4  3407	00000A42  20000A08					 DD	 VOC_LINK
4  3408		  =MAIN:20000A33	 VOC_LINK		 =	 ??0110	+ DESIRED_BASE_EQU
4  3409
4  3410								 IFNB	 <$INT_COMP_TO_INT>
4  3411	00000A46						   LABEL   $INT_COMP_TO_INT FAR
4  3412								 ENDIF
4  3413								 IFNB	 <$ENTER>
4  3414	00000A46  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3415								 ELSE
4  3416								   DD	   ??0113 + DESIRED_BASE_EQU
4  3417								 ENDIF
4  3418	00000A4A			 ??0113:
2  3419								 CW	 $TOBODY
3  3420	00000A4A  20002392					 DD	 $TOBODY + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 61
FKernel.asm



2  3421								 CW	 $FETCH
3  3422	00000A4E  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3423								 CEXIT
3  3424								 CW	 $EXIT
4  3425	00000A52  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3426
2  3427					 ;  INT/COMP>COMP
2  3428								 $COLON	 'INT/COMP>COMP',$INT_COMP_TO_COMP
3  3429								 $DEF	 'INT/COMP>COMP',$INT_COMP_TO_COMP,$ENTER,
4  3430	00000A56			 ??0114:
4  3431		  =MAIN:0A56		 LASTWORD		 =	 ??0114
4  3432								 IFNB	 <>
4  3433								   DB
4  3434								 ELSE
4  3435	00000A56  00						   DB	 VEF_USUAL
4  3436								 ENDIF
4  3437	00000A57  0D						 DB	 ??0115	- $ - 1
4  3438	00000A58  49 4E	54 2F 43 4F 4D+				 DB	 'INT/COMP>COMP'
   3439		  50 3E	43 4F 4D 50
4  3440	00000A65			 ??0115:
4  3441	00000A65  0F						 DB	 ??0115	- ??0114
4  3442	00000A66  20000A33					 DD	 VOC_LINK
4  3443		  =MAIN:20000A56	 VOC_LINK		 =	 ??0114	+ DESIRED_BASE_EQU
4  3444
4  3445								 IFNB	 <$INT_COMP_TO_COMP>
4  3446	00000A6A						   LABEL   $INT_COMP_TO_COMP FAR
4  3447								 ENDIF
4  3448								 IFNB	 <$ENTER>
4  3449	00000A6A  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3450								 ELSE
4  3451								   DD	   ??0117 + DESIRED_BASE_EQU
4  3452								 ENDIF
4  3453	00000A6E			 ??0117:
2  3454								 CW	 $TOBODY
3  3455	00000A6E  20002392					 DD	 $TOBODY + DESIRED_BASE_EQU
2  3456								 CW	 $CELLADD
3  3457	00000A72  20001D03					 DD	 $CELLADD + DESIRED_BASE_EQU
2  3458								 CW	 $FETCH
3  3459	00000A76  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3460								 CEXIT
3  3461								 CW	 $EXIT
4  3462	00000A7A  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3463
2  3464					 ;  COMP'
2  3465								 $COLON	 'COMP''',$COMP_TICK
3  3466								 $DEF	 'COMP''',$COMP_TICK,$ENTER,
4  3467	00000A7E			 ??0118:
4  3468		  =MAIN:0A7E		 LASTWORD		 =	 ??0118
4  3469								 IFNB	 <>
4  3470								   DB
4  3471								 ELSE
4  3472	00000A7E  00						   DB	 VEF_USUAL
4  3473								 ENDIF
4  3474	00000A7F  05						 DB	 ??0119	- $ - 1
4  3475	00000A80  43 4F	4D 50 27				 DB	 'COMP'''
4  3476	00000A85			 ??0119:
4  3477	00000A85  07						 DB	 ??0119	- ??0118
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 62
FKernel.asm



4  3478	00000A86  20000A56					 DD	 VOC_LINK
4  3479		  =MAIN:20000A7E	 VOC_LINK		 =	 ??0118	+ DESIRED_BASE_EQU
4  3480
4  3481								 IFNB	 <$COMP_TICK>
4  3482	00000A8A						   LABEL   $COMP_TICK FAR
4  3483								 ENDIF
4  3484								 IFNB	 <$ENTER>
4  3485	00000A8A  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3486								 ELSE
4  3487								   DD	   ??011B + DESIRED_BASE_EQU
4  3488								 ENDIF
4  3489	00000A8E			 ??011B:
2  3490								 CW	 $BL
3  3491	00000A8E  20000361					 DD	 $BL + DESIRED_BASE_EQU
2  3492								 CW	 $WORD
3  3493	00000A92  20002004					 DD	 $WORD + DESIRED_BASE_EQU
2  3494								 CW	 $FIND
3  3495	00000A96  20001E89					 DD	 $FIND + DESIRED_BASE_EQU
2  3496								 CW	 $DUP
3  3497	00000A9A  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  3498								 CW	 $ZEROEQ
3  3499	00000A9E  20001BCC					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  3500								 CQBR	 CT_FOUND
3  3501								 CW	 $QBRANCH
4  3502	00000AA2  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3503								 CW	 CT_FOUND
4  3504	00000AA6  20000AB6					 DD	 CT_FOUND + DESIRED_BASE_EQU
2  3505								   CTHROW  -13
3  3506								 CCLIT	 -13
4  3507								 CW	 $LIT
5  3508	00000AAA  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
4  3509								 CC	 -13
5  3510	00000AAE  FFFFFFF3					 DD	 -13
3  3511								 CW	 $THROW
4  3512	00000AB2  20002566					 DD	 $THROW	+ DESIRED_BASE_EQU
2  3513	00000AB6			 CT_FOUND:
2  3514								 CW	 $OVER
3  3515	00000AB6  20001616					 DD	 $OVER + DESIRED_BASE_EQU
2  3516								 CW	 $IS_INT_COMPQ
3  3517	00000ABA  20000A1B					 DD	 $IS_INT_COMPQ + DESIRED_BASE_EQU
2  3518								 CW	 $TRUE
3  3519	00000ABE  20001B0D					 DD	 $TRUE + DESIRED_BASE_EQU
2  3520								 CW	 $EQ
3  3521	00000AC2  20001B64					 DD	 $EQ + DESIRED_BASE_EQU
2  3522								 CQBR	 CT_NO_I_C
3  3523								 CW	 $QBRANCH
4  3524	00000AC6  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3525								 CW	 CT_NO_I_C
4  3526	00000ACA  20000ADA					 DD	 CT_NO_I_C + DESIRED_BASE_EQU
2  3527								   CW	   $SWAP
3  3528	00000ACE  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  3529								   CW	   $INT_COMP_TO_COMP
3  3530	00000AD2  20000A6A					 DD	 $INT_COMP_TO_COMP + DESIRED_BASE_EQU
2  3531								   CW	   $SWAP
3  3532	00000AD6  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  3533	00000ADA			 CT_NO_I_C:
2  3534								 CW	 $ZEROLE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 63
FKernel.asm



3  3535	00000ADA  20001BAA					 DD	 $ZEROLE + DESIRED_BASE_EQU
2  3536								 CQBR	 CT_IMM
3  3537								 CW	 $QBRANCH
4  3538	00000ADE  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3539								 CW	 CT_IMM
4  3540	00000AE2  20000AF6					 DD	 CT_IMM	+ DESIRED_BASE_EQU
2  3541								   CWLIT   $COMPILEC
3  3542								 CW	 $LIT
4  3543	00000AE6  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  3544								 CW	 $COMPILEC
4  3545	00000AEA  200021E1					 DD	 $COMPILEC + DESIRED_BASE_EQU
2  3546								   CBR	   CT_EXIT
3  3547								 CW	 $BRANCH
4  3548	00000AEE  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3549								 CW	 CT_EXIT
4  3550	00000AF2  20000AFE					 DD	 CT_EXIT + DESIRED_BASE_EQU
2  3551	00000AF6			 CT_IMM:
2  3552								   CWLIT   $EXECUTE
3  3553								 CW	 $LIT
4  3554	00000AF6  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  3555								 CW	 $EXECUTE
4  3556	00000AFA  20001E9F					 DD	 $EXECUTE + DESIRED_BASE_EQU
2  3557	00000AFE			 CT_EXIT:
2  3558								 CEXIT
3  3559								 CW	 $EXIT
4  3560	00000AFE  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3561
2  3562					 ;  POSTPONE,
2  3563								 $COLON	 'POSTPONE,',$POSTPONEC
3  3564								 $DEF	 'POSTPONE,',$POSTPONEC,$ENTER,
4  3565	00000B02			 ??011C:
4  3566		  =MAIN:0B02		 LASTWORD		 =	 ??011C
4  3567								 IFNB	 <>
4  3568								   DB
4  3569								 ELSE
4  3570	00000B02  00						   DB	 VEF_USUAL
4  3571								 ENDIF
4  3572	00000B03  09						 DB	 ??011D	- $ - 1
4  3573	00000B04  50 4F	53 54 50 4F 4E+				 DB	 'POSTPONE,'
   3574		  45 2C
4  3575	00000B0D			 ??011D:
4  3576	00000B0D  0B						 DB	 ??011D	- ??011C
4  3577	00000B0E  20000A7E					 DD	 VOC_LINK
4  3578		  =MAIN:20000B02	 VOC_LINK		 =	 ??011C	+ DESIRED_BASE_EQU
4  3579
4  3580								 IFNB	 <$POSTPONEC>
4  3581	00000B12						   LABEL   $POSTPONEC FAR
4  3582								 ENDIF
4  3583								 IFNB	 <$ENTER>
4  3584	00000B12  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3585								 ELSE
4  3586								   DD	   ??011F + DESIRED_BASE_EQU
4  3587								 ENDIF
4  3588	00000B16			 ??011F:
2  3589								 CW	 $SWAP
3  3590	00000B16  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  3591								 CW	 $LITERAL
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 64
FKernel.asm



3  3592	00000B1A  20002251					 DD	 $LITERAL + DESIRED_BASE_EQU
2  3593								 CW	 $COMPILEC
3  3594	00000B1E  200021E1					 DD	 $COMPILEC + DESIRED_BASE_EQU
2  3595								 CEXIT
3  3596								 CW	 $EXIT
4  3597	00000B22  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3598
2  3599					 ;  POSTPONE
2  3600								 $COLON	 'POSTPONE',,VEF_IMMEDIATE
3  3601								 $DEF	 'POSTPONE',,$ENTER,VEF_IMMEDIATE
4  3602	00000B26			 ??0120:
4  3603		  =MAIN:0B26		 LASTWORD		 =	 ??0120
4  3604								 IFNB	 <VEF_IMMEDIATE>
4  3605	00000B26  01						   DB	 VEF_IMMEDIATE
4  3606								 ELSE
4  3607								   DB	 VEF_USUAL
4  3608								 ENDIF
4  3609	00000B27  08						 DB	 ??0121	- $ - 1
4  3610	00000B28  50 4F	53 54 50 4F 4E+				 DB	 'POSTPONE'
   3611		  45
4  3612	00000B30			 ??0121:
4  3613	00000B30  0A						 DB	 ??0121	- ??0120
4  3614	00000B31  20000B02					 DD	 VOC_LINK
4  3615		  =MAIN:20000B26	 VOC_LINK		 =	 ??0120	+ DESIRED_BASE_EQU
4  3616
4  3617								 IFNB	 <>
4  3618								   LABEL    FAR
4  3619								 ENDIF
4  3620								 IFNB	 <$ENTER>
4  3621	00000B35  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3622								 ELSE
4  3623								   DD	   ??0123 + DESIRED_BASE_EQU
4  3624								 ENDIF
4  3625	00000B39			 ??0123:
2  3626								 CW	 $COMP_TICK
3  3627	00000B39  20000A8A					 DD	 $COMP_TICK + DESIRED_BASE_EQU
2  3628								 CW	 $POSTPONEC
3  3629	00000B3D  20000B12					 DD	 $POSTPONEC + DESIRED_BASE_EQU
2  3630								 CEXIT
3  3631								 CW	 $EXIT
4  3632	00000B41  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3633
2  3634
1  3635								 INCLUDE "interpret.inc"
2  3636					 ;******************************************************************************
2  3637					 ;
2  3638					 ;  interpret.inc
2  3639					 ;  IKForth
2  3640					 ;
2  3641					 ;  Copyright (C) 1999-2003 Illya Kysil
2  3642					 ;
2  3643					 ;******************************************************************************
2  3644					 ;  INTERPRET support
2  3645					 ;******************************************************************************
2  3646
2  3647					 ;  >NUMBER-SIGNED
2  3648								 $USER	 '>NUMBER-SIGNED',$TONUMBER_SIGNED
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 65
FKernel.asm



3  3649								 $DEF	 '>NUMBER-SIGNED',$TONUMBER_SIGNED,$DOUSER
4  3650	00000B45			 ??0124:
4  3651		  =MAIN:0B45		 LASTWORD		 =	 ??0124
4  3652								 IFNB	 <>
4  3653								   DB
4  3654								 ELSE
4  3655	00000B45  00						   DB	 VEF_USUAL
4  3656								 ENDIF
4  3657	00000B46  0E						 DB	 ??0125	- $ - 1
4  3658	00000B47  3E 4E	55 4D 42 45 52+				 DB	 '>NUMBER-SIGNED'
   3659		  2D 53	49 47 4E 45 44
4  3660	00000B55			 ??0125:
4  3661	00000B55  10						 DB	 ??0125	- ??0124
4  3662	00000B56  20000B26					 DD	 VOC_LINK
4  3663		  =MAIN:20000B45	 VOC_LINK		 =	 ??0124	+ DESIRED_BASE_EQU
4  3664
4  3665								 IFNB	 <$TONUMBER_SIGNED>
4  3666	00000B5A						   LABEL   $TONUMBER_SIGNED FAR
4  3667								 ENDIF
4  3668								 IFNB	 <$DOUSER>
4  3669	00000B5A  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  3670								 ELSE
4  3671								   DD	   ??0127 + DESIRED_BASE_EQU
4  3672								 ENDIF
4  3673	00000B5E			 ??0127:
2  3674								 CC	 TONUMBER_SIGNED_VAR
3  3675	00000B5E  00000028					 DD	 TONUMBER_SIGNED_VAR
2  3676
2  3677					 ;  DO-INT-DEFINED
2  3678								 $COLON	 'DO-INT-DEFINED',$DO_INT_DEFINED
3  3679								 $DEF	 'DO-INT-DEFINED',$DO_INT_DEFINED,$ENTER,
4  3680	00000B62			 ??0128:
4  3681		  =MAIN:0B62		 LASTWORD		 =	 ??0128
4  3682								 IFNB	 <>
4  3683								   DB
4  3684								 ELSE
4  3685	00000B62  00						   DB	 VEF_USUAL
4  3686								 ENDIF
4  3687	00000B63  0E						 DB	 ??0129	- $ - 1
4  3688	00000B64  44 4F	2D 49 4E 54 2D+				 DB	 'DO-INT-DEFINED'
   3689		  44 45	46 49 4E 45 44
4  3690	00000B72			 ??0129:
4  3691	00000B72  10						 DB	 ??0129	- ??0128
4  3692	00000B73  20000B45					 DD	 VOC_LINK
4  3693		  =MAIN:20000B62	 VOC_LINK		 =	 ??0128	+ DESIRED_BASE_EQU
4  3694
4  3695								 IFNB	 <$DO_INT_DEFINED>
4  3696	00000B77						   LABEL   $DO_INT_DEFINED FAR
4  3697								 ENDIF
4  3698								 IFNB	 <$ENTER>
4  3699	00000B77  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3700								 ELSE
4  3701								   DD	   ??012B + DESIRED_BASE_EQU
4  3702								 ENDIF
4  3703	00000B7B			 ??012B:
2  3704								 CW	 $OVER
3  3705	00000B7B  20001616					 DD	 $OVER + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 66
FKernel.asm



2  3706								 CW	 $TO_HEAD
3  3707	00000B7F  2000140B					 DD	 $TO_HEAD + DESIRED_BASE_EQU
2  3708								 CW	 $HFLAGS_FETCH
3  3709	00000B83  20001348					 DD	 $HFLAGS_FETCH + DESIRED_BASE_EQU
2  3710								 CCLIT	 VEF_COMPILE_ONLY
3  3711								 CW	 $LIT
4  3712	00000B87  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  3713								 CC	 VEF_COMPILE_ONLY
4  3714	00000B8B  00000004					 DD	 VEF_COMPILE_ONLY
2  3715								 CW	 $AND
3  3716	00000B8F  20001A3C					 DD	 $AND +	DESIRED_BASE_EQU
2  3717								 CW	 $ZERONOEQ
3  3718	00000B93  20001BEF					 DD	 $ZERONOEQ + DESIRED_BASE_EQU
2  3719								 CQBR	 DID_INTERPRET
3  3720								 CW	 $QBRANCH
4  3721	00000B97  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3722								 CW	 DID_INTERPRET
4  3723	00000B9B  20000BAB					 DD	 DID_INTERPRET + DESIRED_BASE_EQU
2  3724								   CTHROW  -14
3  3725								 CCLIT	 -14
4  3726								 CW	 $LIT
5  3727	00000B9F  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
4  3728								 CC	 -14
5  3729	00000BA3  FFFFFFF2					 DD	 -14
3  3730								 CW	 $THROW
4  3731	00000BA7  20002566					 DD	 $THROW	+ DESIRED_BASE_EQU
2  3732	00000BAB			 DID_INTERPRET:
2  3733								 CW	 $DROP
3  3734	00000BAB  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  3735								 CW	 $EXECUTE
3  3736	00000BAF  20001E9F					 DD	 $EXECUTE + DESIRED_BASE_EQU
2  3737								 CEXIT
3  3738								 CW	 $EXIT
4  3739	00000BB3  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3740
2  3741					 ;  DO-COMP-DEFINED
2  3742								 $COLON	 'DO-COMP-DEFINED',$DO_COMP_DEFINED
3  3743								 $DEF	 'DO-COMP-DEFINED',$DO_COMP_DEFINED,$ENTER,
4  3744	00000BB7			 ??012C:
4  3745		  =MAIN:0BB7		 LASTWORD		 =	 ??012C
4  3746								 IFNB	 <>
4  3747								   DB
4  3748								 ELSE
4  3749	00000BB7  00						   DB	 VEF_USUAL
4  3750								 ENDIF
4  3751	00000BB8  0F						 DB	 ??012D	- $ - 1
4  3752	00000BB9  44 4F	2D 43 4F 4D 50+				 DB	 'DO-COMP-DEFINED'
   3753		  2D 44	45 46 49 4E 45+
   3754		  44
4  3755	00000BC8			 ??012D:
4  3756	00000BC8  11						 DB	 ??012D	- ??012C
4  3757	00000BC9  20000B62					 DD	 VOC_LINK
4  3758		  =MAIN:20000BB7	 VOC_LINK		 =	 ??012C	+ DESIRED_BASE_EQU
4  3759
4  3760								 IFNB	 <$DO_COMP_DEFINED>
4  3761	00000BCD						   LABEL   $DO_COMP_DEFINED FAR
4  3762								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 67
FKernel.asm



4  3763								 IFNB	 <$ENTER>
4  3764	00000BCD  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3765								 ELSE
4  3766								   DD	   ??012F + DESIRED_BASE_EQU
4  3767								 ENDIF
4  3768	00000BD1			 ??012F:
2  3769								 CW	 $ZEROGR
3  3770	00000BD1  20001C11					 DD	 $ZEROGR + DESIRED_BASE_EQU
2  3771								 CQBR	 DCD_NOT_IMMEDIATE
3  3772								 CW	 $QBRANCH
4  3773	00000BD5  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3774								 CW	 DCD_NOT_IMMEDIATE
4  3775	00000BD9  20000BE9					 DD	 DCD_NOT_IMMEDIATE + DESIRED_BASE_EQU
2  3776								   CW	   $EXECUTE
3  3777	00000BDD  20001E9F					 DD	 $EXECUTE + DESIRED_BASE_EQU
2  3778								 CBR	 DCD_EXIT
3  3779								 CW	 $BRANCH
4  3780	00000BE1  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3781								 CW	 DCD_EXIT
4  3782	00000BE5  20000BED					 DD	 DCD_EXIT + DESIRED_BASE_EQU
2  3783	00000BE9			 DCD_NOT_IMMEDIATE:
2  3784								   CW	   $COMPILEC
3  3785	00000BE9  200021E1					 DD	 $COMPILEC + DESIRED_BASE_EQU
2  3786	00000BED			 DCD_EXIT:
2  3787								 CEXIT
3  3788								 CW	 $EXIT
4  3789	00000BED  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3790
2  3791					 ;  DO-DEFINED
2  3792								 $COLON	 'DO-DEFINED',$DO_DEFINED
3  3793								 $DEF	 'DO-DEFINED',$DO_DEFINED,$ENTER,
4  3794	00000BF1			 ??0130:
4  3795		  =MAIN:0BF1		 LASTWORD		 =	 ??0130
4  3796								 IFNB	 <>
4  3797								   DB
4  3798								 ELSE
4  3799	00000BF1  00						   DB	 VEF_USUAL
4  3800								 ENDIF
4  3801	00000BF2  0A						 DB	 ??0131	- $ - 1
4  3802	00000BF3  44 4F	2D 44 45 46 49+				 DB	 'DO-DEFINED'
   3803		  4E 45	44
4  3804	00000BFD			 ??0131:
4  3805	00000BFD  0C						 DB	 ??0131	- ??0130
4  3806	00000BFE  20000BB7					 DD	 VOC_LINK
4  3807		  =MAIN:20000BF1	 VOC_LINK		 =	 ??0130	+ DESIRED_BASE_EQU
4  3808
4  3809								 IFNB	 <$DO_DEFINED>
4  3810	00000C02						   LABEL   $DO_DEFINED FAR
4  3811								 ENDIF
4  3812								 IFNB	 <$ENTER>
4  3813	00000C02  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3814								 ELSE
4  3815								   DD	   ??0133 + DESIRED_BASE_EQU
4  3816								 ENDIF
4  3817	00000C06			 ??0133:
2  3818								 CFETCH	 $STATE
3  3819								 CW	 $STATE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 68
FKernel.asm



4  3820	00000C06  2000033D					 DD	 $STATE	+ DESIRED_BASE_EQU
3  3821								 CW	 $FETCH
4  3822	00000C0A  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  3823								 CQBR	 DD_INTERPRETATION
3  3824								 CW	 $QBRANCH
4  3825	00000C0E  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3826								 CW	 DD_INTERPRETATION
4  3827	00000C12  20000C22					 DD	 DD_INTERPRETATION + DESIRED_BASE_EQU
2  3828								   CW	   $DO_COMP_DEFINED
3  3829	00000C16  20000BCD					 DD	 $DO_COMP_DEFINED + DESIRED_BASE_EQU
2  3830								 CBR	 DD_EXIT
3  3831								 CW	 $BRANCH
4  3832	00000C1A  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3833								 CW	 DD_EXIT
4  3834	00000C1E  20000C26					 DD	 DD_EXIT + DESIRED_BASE_EQU
2  3835	00000C22			 DD_INTERPRETATION:
2  3836								   CW	   $DO_INT_DEFINED
3  3837	00000C22  20000B77					 DD	 $DO_INT_DEFINED + DESIRED_BASE_EQU
2  3838	00000C26			 DD_EXIT:
2  3839								 CEXIT
3  3840								 CW	 $EXIT
4  3841	00000C26  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3842
2  3843					 ;  IL-CHECK-SIGN
2  3844					 ;  ( C-ADDR U -- C-ADDR U )
2  3845								 $COLON	 'IL-CHECK-SIGN',$ILCS
3  3846								 $DEF	 'IL-CHECK-SIGN',$ILCS,$ENTER,
4  3847	00000C2A			 ??0134:
4  3848		  =MAIN:0C2A		 LASTWORD		 =	 ??0134
4  3849								 IFNB	 <>
4  3850								   DB
4  3851								 ELSE
4  3852	00000C2A  00						   DB	 VEF_USUAL
4  3853								 ENDIF
4  3854	00000C2B  0D						 DB	 ??0135	- $ - 1
4  3855	00000C2C  49 4C	2D 43 48 45 43+				 DB	 'IL-CHECK-SIGN'
   3856		  4B 2D	53 49 47 4E
4  3857	00000C39			 ??0135:
4  3858	00000C39  0F						 DB	 ??0135	- ??0134
4  3859	00000C3A  20000BF1					 DD	 VOC_LINK
4  3860		  =MAIN:20000C2A	 VOC_LINK		 =	 ??0134	+ DESIRED_BASE_EQU
4  3861
4  3862								 IFNB	 <$ILCS>
4  3863	00000C3E						   LABEL   $ILCS FAR
4  3864								 ENDIF
4  3865								 IFNB	 <$ENTER>
4  3866	00000C3E  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3867								 ELSE
4  3868								   DD	   ??0137 + DESIRED_BASE_EQU
4  3869								 ENDIF
4  3870	00000C42			 ??0137:
2  3871								 CW	 $FALSE
3  3872	00000C42  20001AF7					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  3873								 CSTORE	 $TONUMBER_SIGNED
3  3874								 CW	 $TONUMBER_SIGNED
4  3875	00000C46  20000B5A					 DD	 $TONUMBER_SIGNED + DESIRED_BASE_EQU
3  3876								 CW	 $STORE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 69
FKernel.asm



4  3877	00000C4A  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3878								 CW	 $OVER
3  3879	00000C4E  20001616					 DD	 $OVER + DESIRED_BASE_EQU
2  3880								 CW	 $CFETCH
3  3881	00000C52  20001CE8					 DD	 $CFETCH + DESIRED_BASE_EQU
2  3882								 CW	 $DUP
3  3883	00000C56  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  3884								 CCLIT	 '-'
3  3885								 CW	 $LIT
4  3886	00000C5A  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  3887								 CC	 '-'
4  3888	00000C5E  0000002D					 DD	 '-'
2  3889								 CW	 $NOEQ
3  3890	00000C62  20001B87					 DD	 $NOEQ + DESIRED_BASE_EQU
2  3891								 CQBR	 ILCS_SIGNED
3  3892								 CW	 $QBRANCH
4  3893	00000C66  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3894								 CW	 ILCS_SIGNED
4  3895	00000C6A  20000C8A					 DD	 ILCS_SIGNED + DESIRED_BASE_EQU
2  3896								 CCLIT	 '+'
3  3897								 CW	 $LIT
4  3898	00000C6E  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  3899								 CC	 '+'
4  3900	00000C72  0000002B					 DD	 '+'
2  3901								 CW	 $NOEQ
3  3902	00000C76  20001B87					 DD	 $NOEQ + DESIRED_BASE_EQU
2  3903								 CQBR	 ILCS_UNSIGNED
3  3904								 CW	 $QBRANCH
4  3905	00000C7A  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3906								 CW	 ILCS_UNSIGNED
4  3907	00000C7E  20000C9A					 DD	 ILCS_UNSIGNED + DESIRED_BASE_EQU
2  3908								 CBR	 ILCS_EXIT
3  3909								 CW	 $BRANCH
4  3910	00000C82  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  3911								 CW	 ILCS_EXIT
4  3912	00000C86  20000CAA					 DD	 ILCS_EXIT + DESIRED_BASE_EQU
2  3913	00000C8A			 ILCS_SIGNED:
2  3914								 CW	 $DROP
3  3915	00000C8A  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  3916								 CW	 $TRUE
3  3917	00000C8E  20001B0D					 DD	 $TRUE + DESIRED_BASE_EQU
2  3918								 CSTORE	 $TONUMBER_SIGNED
3  3919								 CW	 $TONUMBER_SIGNED
4  3920	00000C92  20000B5A					 DD	 $TONUMBER_SIGNED + DESIRED_BASE_EQU
3  3921								 CW	 $STORE
4  3922	00000C96  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2  3923	00000C9A			 ILCS_UNSIGNED:
2  3924								 CW	 $SWAP
3  3925	00000C9A  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  3926								 CW	 $CHARADD
3  3927	00000C9E  20001D38					 DD	 $CHARADD + DESIRED_BASE_EQU
2  3928								 CW	 $SWAP
3  3929	00000CA2  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  3930								 CW	 $1SUB
3  3931	00000CA6  2000193F					 DD	 $1SUB + DESIRED_BASE_EQU
2  3932	00000CAA			 ILCS_EXIT:
2  3933								 CEXIT
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 70
FKernel.asm



3  3934								 CW	 $EXIT
4  3935	00000CAA  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  3936
2  3937					 ;  IL-CHECK-LIT
2  3938					 ;  ( C-ADDR U - N TRUE	| C-ADDR U FALSE )
2  3939								 $COLON	 'IL-CHECK-LIT',$ILCL
3  3940								 $DEF	 'IL-CHECK-LIT',$ILCL,$ENTER,
4  3941	00000CAE			 ??0138:
4  3942		  =MAIN:0CAE		 LASTWORD		 =	 ??0138
4  3943								 IFNB	 <>
4  3944								   DB
4  3945								 ELSE
4  3946	00000CAE  00						   DB	 VEF_USUAL
4  3947								 ENDIF
4  3948	00000CAF  0C						 DB	 ??0139	- $ - 1
4  3949	00000CB0  49 4C	2D 43 48 45 43+				 DB	 'IL-CHECK-LIT'
   3950		  4B 2D	4C 49 54
4  3951	00000CBC			 ??0139:
4  3952	00000CBC  0E						 DB	 ??0139	- ??0138
4  3953	00000CBD  20000C2A					 DD	 VOC_LINK
4  3954		  =MAIN:20000CAE	 VOC_LINK		 =	 ??0138	+ DESIRED_BASE_EQU
4  3955
4  3956								 IFNB	 <$ILCL>
4  3957	00000CC1						   LABEL   $ILCL FAR
4  3958								 ENDIF
4  3959								 IFNB	 <$ENTER>
4  3960	00000CC1  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  3961								 ELSE
4  3962								   DD	   ??013B + DESIRED_BASE_EQU
4  3963								 ENDIF
4  3964	00000CC5			 ??013B:
2  3965								 CW	 $ZERO
3  3966	00000CC5  200001A7					 DD	 $ZERO + DESIRED_BASE_EQU
2  3967								 CW	 $DUP
3  3968	00000CC9  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  3969								 CW	 $2SWAP
3  3970	00000CCD  200015B8					 DD	 $2SWAP	+ DESIRED_BASE_EQU
2  3971								 CW	 $TONUMBER
3  3972	00000CD1  200023AC					 DD	 $TONUMBER + DESIRED_BASE_EQU
2  3973								 CW	 $DUP
3  3974	00000CD5  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  3975								 CW	 $ZEROEQ
3  3976	00000CD9  20001BCC					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  3977								 CQBR	 ILCL_NO
3  3978								 CW	 $QBRANCH
4  3979	00000CDD  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3980								 CW	 ILCL_NO
4  3981	00000CE1  20000D0D					 DD	 ILCL_NO + DESIRED_BASE_EQU
2  3982								   CW	   $2DROP
3  3983	00000CE5  20001565					 DD	 $2DROP	+ DESIRED_BASE_EQU
2  3984								   CW	   $DROP
3  3985	00000CE9  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  3986								   CFETCH  $TONUMBER_SIGNED
3  3987								 CW	 $TONUMBER_SIGNED
4  3988	00000CED  20000B5A					 DD	 $TONUMBER_SIGNED + DESIRED_BASE_EQU
3  3989								 CW	 $FETCH
4  3990	00000CF1  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 71
FKernel.asm



2  3991								   CQBR	   ILCL_UNSIGNED
3  3992								 CW	 $QBRANCH
4  3993	00000CF5  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  3994								 CW	 ILCL_UNSIGNED
4  3995	00000CF9  20000D01					 DD	 ILCL_UNSIGNED + DESIRED_BASE_EQU
2  3996								     CW	     $NEGATE
3  3997	00000CFD  200019D2					 DD	 $NEGATE + DESIRED_BASE_EQU
2  3998	00000D01			 ILCL_UNSIGNED:
2  3999								   CW	   $TRUE
3  4000	00000D01  20001B0D					 DD	 $TRUE + DESIRED_BASE_EQU
2  4001								 CBR	 ILCL_EXIT
3  4002								 CW	 $BRANCH
4  4003	00000D05  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4004								 CW	 ILCL_EXIT
4  4005	00000D09  20000D11					 DD	 ILCL_EXIT + DESIRED_BASE_EQU
2  4006	00000D0D			 ILCL_NO:
2  4007								   CW	   $FALSE
3  4008	00000D0D  20001AF7					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  4009	00000D11			 ILCL_EXIT:
2  4010								 CEXIT
3  4011								 CW	 $EXIT
4  4012	00000D11  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4013
2  4014					 ;  DO-LIT
2  4015								 $COLON	 'DO-LIT',$DO_LIT
3  4016								 $DEF	 'DO-LIT',$DO_LIT,$ENTER,
4  4017	00000D15			 ??013C:
4  4018		  =MAIN:0D15		 LASTWORD		 =	 ??013C
4  4019								 IFNB	 <>
4  4020								   DB
4  4021								 ELSE
4  4022	00000D15  00						   DB	 VEF_USUAL
4  4023								 ENDIF
4  4024	00000D16  06						 DB	 ??013D	- $ - 1
4  4025	00000D17  44 4F	2D 4C 49 54				 DB	 'DO-LIT'
4  4026	00000D1D			 ??013D:
4  4027	00000D1D  08						 DB	 ??013D	- ??013C
4  4028	00000D1E  20000CAE					 DD	 VOC_LINK
4  4029		  =MAIN:20000D15	 VOC_LINK		 =	 ??013C	+ DESIRED_BASE_EQU
4  4030
4  4031								 IFNB	 <$DO_LIT>
4  4032	00000D22						   LABEL   $DO_LIT FAR
4  4033								 ENDIF
4  4034								 IFNB	 <$ENTER>
4  4035	00000D22  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4036								 ELSE
4  4037								   DD	   ??013F + DESIRED_BASE_EQU
4  4038								 ENDIF
4  4039	00000D26			 ??013F:
2  4040								 CFETCH	 $STATE
3  4041								 CW	 $STATE
4  4042	00000D26  2000033D					 DD	 $STATE	+ DESIRED_BASE_EQU
3  4043								 CW	 $FETCH
4  4044	00000D2A  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4045								 CQBR	 DL_EXIT
3  4046								 CW	 $QBRANCH
4  4047	00000D2E  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 72
FKernel.asm



3  4048								 CW	 DL_EXIT
4  4049	00000D32  20000D3A					 DD	 DL_EXIT + DESIRED_BASE_EQU
2  4050								   CW	   $LITERAL
3  4051	00000D36  20002251					 DD	 $LITERAL + DESIRED_BASE_EQU
2  4052	00000D3A			 DL_EXIT:
2  4053								 CEXIT
3  4054								 CW	 $EXIT
4  4055	00000D3A  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4056
2  4057					 ;  IL-CHECK-2LIT
2  4058					 ;  ( D	C-ADDR U - D TRUE | FALSE )
2  4059								 $COLON	 'IL-CHECK-2LIT',$ILC2L
3  4060								 $DEF	 'IL-CHECK-2LIT',$ILC2L,$ENTER,
4  4061	00000D3E			 ??0140:
4  4062		  =MAIN:0D3E		 LASTWORD		 =	 ??0140
4  4063								 IFNB	 <>
4  4064								   DB
4  4065								 ELSE
4  4066	00000D3E  00						   DB	 VEF_USUAL
4  4067								 ENDIF
4  4068	00000D3F  0D						 DB	 ??0141	- $ - 1
4  4069	00000D40  49 4C	2D 43 48 45 43+				 DB	 'IL-CHECK-2LIT'
   4070		  4B 2D	32 4C 49 54
4  4071	00000D4D			 ??0141:
4  4072	00000D4D  0F						 DB	 ??0141	- ??0140
4  4073	00000D4E  20000D15					 DD	 VOC_LINK
4  4074		  =MAIN:20000D3E	 VOC_LINK		 =	 ??0140	+ DESIRED_BASE_EQU
4  4075
4  4076								 IFNB	 <$ILC2L>
4  4077	00000D52						   LABEL   $ILC2L FAR
4  4078								 ENDIF
4  4079								 IFNB	 <$ENTER>
4  4080	00000D52  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4081								 ELSE
4  4082								   DD	   ??0143 + DESIRED_BASE_EQU
4  4083								 ENDIF
4  4084	00000D56			 ??0143:
2  4085								 CW	 $1SUB
3  4086	00000D56  2000193F					 DD	 $1SUB + DESIRED_BASE_EQU
2  4087								 CW	 $ZEROEQ
3  4088	00000D5A  20001BCC					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  4089								 CQBR	 ILC2L_EXIT2
3  4090								 CW	 $QBRANCH
4  4091	00000D5E  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4092								 CW	 ILC2L_EXIT2
4  4093	00000D62  20000D9E					 DD	 ILC2L_EXIT2 + DESIRED_BASE_EQU
2  4094								 CW	 $CFETCH
3  4095	00000D66  20001CE8					 DD	 $CFETCH + DESIRED_BASE_EQU
2  4096								 CCLIT	 '.'
3  4097								 CW	 $LIT
4  4098	00000D6A  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  4099								 CC	 '.'
4  4100	00000D6E  0000002E					 DD	 '.'
2  4101								 CW	 $EQ
3  4102	00000D72  20001B64					 DD	 $EQ + DESIRED_BASE_EQU
2  4103								 CQBR	 ILC2L_EXIT1
3  4104								 CW	 $QBRANCH
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 73
FKernel.asm



4  4105	00000D76  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4106								 CW	 ILC2L_EXIT1
4  4107	00000D7A  20000DA2					 DD	 ILC2L_EXIT1 + DESIRED_BASE_EQU
2  4108								 CFETCH	 $TONUMBER_SIGNED
3  4109								 CW	 $TONUMBER_SIGNED
4  4110	00000D7E  20000B5A					 DD	 $TONUMBER_SIGNED + DESIRED_BASE_EQU
3  4111								 CW	 $FETCH
4  4112	00000D82  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4113								 CQBR	 ILC2L_UNSIGNED
3  4114								 CW	 $QBRANCH
4  4115	00000D86  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4116								 CW	 ILC2L_UNSIGNED
4  4117	00000D8A  20000D92					 DD	 ILC2L_UNSIGNED	+ DESIRED_BASE_EQU
2  4118								 CW	 $DNEGATE
3  4119	00000D8E  2000236F					 DD	 $DNEGATE + DESIRED_BASE_EQU
2  4120	00000D92			 ILC2L_UNSIGNED:
2  4121								 CW	 $TRUE
3  4122	00000D92  20001B0D					 DD	 $TRUE + DESIRED_BASE_EQU
2  4123								 CBR	 ILC2L_EXIT
3  4124								 CW	 $BRANCH
4  4125	00000D96  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4126								 CW	 ILC2L_EXIT
4  4127	00000D9A  20000DAA					 DD	 ILC2L_EXIT + DESIRED_BASE_EQU
2  4128	00000D9E			 ILC2L_EXIT2:
2  4129								 CW	 $DROP
3  4130	00000D9E  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  4131	00000DA2			 ILC2L_EXIT1:
2  4132								 CW	 $2DROP
3  4133	00000DA2  20001565					 DD	 $2DROP	+ DESIRED_BASE_EQU
2  4134								 CW	 $FALSE
3  4135	00000DA6  20001AF7					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  4136	00000DAA			 ILC2L_EXIT:
2  4137								 CEXIT
3  4138								 CW	 $EXIT
4  4139	00000DAA  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4140
2  4141					 ;  DO-2LIT
2  4142								 $COLON	 'DO-2LIT',$DO_2LIT
3  4143								 $DEF	 'DO-2LIT',$DO_2LIT,$ENTER,
4  4144	00000DAE			 ??0144:
4  4145		  =MAIN:0DAE		 LASTWORD		 =	 ??0144
4  4146								 IFNB	 <>
4  4147								   DB
4  4148								 ELSE
4  4149	00000DAE  00						   DB	 VEF_USUAL
4  4150								 ENDIF
4  4151	00000DAF  07						 DB	 ??0145	- $ - 1
4  4152	00000DB0  44 4F	2D 32 4C 49 54				 DB	 'DO-2LIT'
4  4153	00000DB7			 ??0145:
4  4154	00000DB7  09						 DB	 ??0145	- ??0144
4  4155	00000DB8  20000D3E					 DD	 VOC_LINK
4  4156		  =MAIN:20000DAE	 VOC_LINK		 =	 ??0144	+ DESIRED_BASE_EQU
4  4157
4  4158								 IFNB	 <$DO_2LIT>
4  4159	00000DBC						   LABEL   $DO_2LIT FAR
4  4160								 ENDIF
4  4161								 IFNB	 <$ENTER>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 74
FKernel.asm



4  4162	00000DBC  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4163								 ELSE
4  4164								   DD	   ??0147 + DESIRED_BASE_EQU
4  4165								 ENDIF
4  4166	00000DC0			 ??0147:
2  4167								 CFETCH	 $STATE
3  4168								 CW	 $STATE
4  4169	00000DC0  2000033D					 DD	 $STATE	+ DESIRED_BASE_EQU
3  4170								 CW	 $FETCH
4  4171	00000DC4  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4172								 CQBR	 D2L_EXIT
3  4173								 CW	 $QBRANCH
4  4174	00000DC8  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4175								 CW	 D2L_EXIT
4  4176	00000DCC  20000DD4					 DD	 D2L_EXIT + DESIRED_BASE_EQU
2  4177								   CW	   $2LITERAL
3  4178	00000DD0  20002325					 DD	 $2LITERAL + DESIRED_BASE_EQU
2  4179	00000DD4			 D2L_EXIT:
2  4180								 CEXIT
3  4181								 CW	 $EXIT
4  4182	00000DD4  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4183
2  4184					 ;  INTERPRET-LITERAL
2  4185					 ;  ( C-ADDR U -- flag )
2  4186								 $COLON	 'INTERPRET-LITERAL',$INTERPRET_LITERAL
3  4187								 $DEF	 'INTERPRET-LITERAL',$INTERPRET_LITERAL,$ENTER,
4  4188	00000DD8			 ??0148:
4  4189		  =MAIN:0DD8		 LASTWORD		 =	 ??0148
4  4190								 IFNB	 <>
4  4191								   DB
4  4192								 ELSE
4  4193	00000DD8  00						   DB	 VEF_USUAL
4  4194								 ENDIF
4  4195	00000DD9  11						 DB	 ??0149	- $ - 1
4  4196	00000DDA  49 4E	54 45 52 50 52+				 DB	 'INTERPRET-LITERAL'
   4197		  45 54	2D 4C 49 54 45+
   4198		  52 41	4C
4  4199	00000DEB			 ??0149:
4  4200	00000DEB  13						 DB	 ??0149	- ??0148
4  4201	00000DEC  20000DAE					 DD	 VOC_LINK
4  4202		  =MAIN:20000DD8	 VOC_LINK		 =	 ??0148	+ DESIRED_BASE_EQU
4  4203
4  4204								 IFNB	 <$INTERPRET_LITERAL>
4  4205	00000DF0						   LABEL   $INTERPRET_LITERAL FAR
4  4206								 ENDIF
4  4207								 IFNB	 <$ENTER>
4  4208	00000DF0  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4209								 ELSE
4  4210								   DD	   ??014B + DESIRED_BASE_EQU
4  4211								 ENDIF
4  4212	00000DF4			 ??014B:
2  4213								 CW	 $DUP
3  4214	00000DF4  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  4215								 CW	 $ZERO
3  4216	00000DF8  200001A7					 DD	 $ZERO + DESIRED_BASE_EQU
2  4217								 CW	 $NOEQ
3  4218	00000DFC  20001B87					 DD	 $NOEQ + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 75
FKernel.asm



2  4219								 CQBR	 IL_UNKNOWN
3  4220								 CW	 $QBRANCH
4  4221	00000E00  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4222								 CW	 IL_UNKNOWN
4  4223	00000E04  20000E84					 DD	 IL_UNKNOWN + DESIRED_BASE_EQU
2  4224								 CW	 $ILCS		 ; c-addr u
3  4225	00000E08  20000C3E					 DD	 $ILCS + DESIRED_BASE_EQU
2  4226								 CW	 $DUP		 ; c-addr u u
3  4227	00000E0C  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  4228								 CCLIT	 1
3  4229								 CW	 $LIT
4  4230	00000E10  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  4231								 CC	 1
4  4232	00000E14  00000001					 DD	 1
2  4233								 CW	 $EQ
3  4234	00000E18  20001B64					 DD	 $EQ + DESIRED_BASE_EQU
2  4235								 CQBR	 IL_OK1		 ; branch if u <> 1
3  4236								 CW	 $QBRANCH
4  4237	00000E1C  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4238								 CW	 IL_OK1
4  4239	00000E20  20000E4C					 DD	 IL_OK1	+ DESIRED_BASE_EQU
2  4240								 CW	 $OVER		 ; c-addr u c-addr
3  4241	00000E24  20001616					 DD	 $OVER + DESIRED_BASE_EQU
2  4242								 CW	 $CFETCH
3  4243	00000E28  20001CE8					 DD	 $CFETCH + DESIRED_BASE_EQU
2  4244								 CCLIT	 '.'
3  4245								 CW	 $LIT
4  4246	00000E2C  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  4247								 CC	 '.'
4  4248	00000E30  0000002E					 DD	 '.'
2  4249								 CW	 $EQ
3  4250	00000E34  20001B64					 DD	 $EQ + DESIRED_BASE_EQU
2  4251								 CQBR	 IL_OK1		 ; branch if c-addr @ <> '.'
3  4252								 CW	 $QBRANCH
4  4253	00000E38  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4254								 CW	 IL_OK1
4  4255	00000E3C  20000E4C					 DD	 IL_OK1	+ DESIRED_BASE_EQU
2  4256								 CW	 $2DROP
3  4257	00000E40  20001565					 DD	 $2DROP	+ DESIRED_BASE_EQU
2  4258								 CBR	 IL_UNKNOWN
3  4259								 CW	 $BRANCH
4  4260	00000E44  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4261								 CW	 IL_UNKNOWN
4  4262	00000E48  20000E84					 DD	 IL_UNKNOWN + DESIRED_BASE_EQU
2  4263	00000E4C			 IL_OK1:
2  4264								 CW	 $ILCL
3  4265	00000E4C  20000CC1					 DD	 $ILCL + DESIRED_BASE_EQU
2  4266								 CQBR	 IL_CHECK_2LIT
3  4267								 CW	 $QBRANCH
4  4268	00000E50  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4269								 CW	 IL_CHECK_2LIT
4  4270	00000E54  20000E68					 DD	 IL_CHECK_2LIT + DESIRED_BASE_EQU
2  4271								   CW	   $DO_LIT
3  4272	00000E58  20000D22					 DD	 $DO_LIT + DESIRED_BASE_EQU
2  4273								   CW	   $TRUE
3  4274	00000E5C  20001B0D					 DD	 $TRUE + DESIRED_BASE_EQU
2  4275								   CBR	   IL_EXIT
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 76
FKernel.asm



3  4276								 CW	 $BRANCH
4  4277	00000E60  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4278								 CW	 IL_EXIT
4  4279	00000E64  20000E88					 DD	 IL_EXIT + DESIRED_BASE_EQU
2  4280	00000E68			 IL_CHECK_2LIT:
2  4281								 CW	 $ILC2L
3  4282	00000E68  20000D52					 DD	 $ILC2L	+ DESIRED_BASE_EQU
2  4283								 CQBR	 IL_UNKNOWN
3  4284								 CW	 $QBRANCH
4  4285	00000E6C  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4286								 CW	 IL_UNKNOWN
4  4287	00000E70  20000E84					 DD	 IL_UNKNOWN + DESIRED_BASE_EQU
2  4288								   CW	   $DO_2LIT
3  4289	00000E74  20000DBC					 DD	 $DO_2LIT + DESIRED_BASE_EQU
2  4290								   CW	   $TRUE
3  4291	00000E78  20001B0D					 DD	 $TRUE + DESIRED_BASE_EQU
2  4292								   CBR	   IL_EXIT
3  4293								 CW	 $BRANCH
4  4294	00000E7C  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4295								 CW	 IL_EXIT
4  4296	00000E80  20000E88					 DD	 IL_EXIT + DESIRED_BASE_EQU
2  4297	00000E84			 IL_UNKNOWN:
2  4298								 CW	 $FALSE
3  4299	00000E84  20001AF7					 DD	 $FALSE	+ DESIRED_BASE_EQU
2  4300	00000E88			 IL_EXIT:
2  4301								 CEXIT
3  4302								 CW	 $EXIT
4  4303	00000E88  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4304
2  4305					 ;  INTERPRET-WORD
2  4306					 ;  ( C-ADDR --	)
2  4307								 $COLON	 'INTERPRET-WORD',$INTERPRET_WORD
3  4308								 $DEF	 'INTERPRET-WORD',$INTERPRET_WORD,$ENTER,
4  4309	00000E8C			 ??014C:
4  4310		  =MAIN:0E8C		 LASTWORD		 =	 ??014C
4  4311								 IFNB	 <>
4  4312								   DB
4  4313								 ELSE
4  4314	00000E8C  00						   DB	 VEF_USUAL
4  4315								 ENDIF
4  4316	00000E8D  0E						 DB	 ??014D	- $ - 1
4  4317	00000E8E  49 4E	54 45 52 50 52+				 DB	 'INTERPRET-WORD'
   4318		  45 54	2D 57 4F 52 44
4  4319	00000E9C			 ??014D:
4  4320	00000E9C  10						 DB	 ??014D	- ??014C
4  4321	00000E9D  20000DD8					 DD	 VOC_LINK
4  4322		  =MAIN:20000E8C	 VOC_LINK		 =	 ??014C	+ DESIRED_BASE_EQU
4  4323
4  4324								 IFNB	 <$INTERPRET_WORD>
4  4325	00000EA1						   LABEL   $INTERPRET_WORD FAR
4  4326								 ENDIF
4  4327								 IFNB	 <$ENTER>
4  4328	00000EA1  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4329								 ELSE
4  4330								   DD	   ??014F + DESIRED_BASE_EQU
4  4331								 ENDIF
4  4332	00000EA5			 ??014F:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 77
FKernel.asm



2  4333								 CW	 $FIND
3  4334	00000EA5  20001E89					 DD	 $FIND + DESIRED_BASE_EQU
2  4335								 CW	 $QDUP
3  4336	00000EA9  20001548					 DD	 $QDUP + DESIRED_BASE_EQU
2  4337								 CQBR	 IW_NOT_FOUND
3  4338								 CW	 $QBRANCH
4  4339	00000EAD  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4340								 CW	 IW_NOT_FOUND
4  4341	00000EB1  20000EC1					 DD	 IW_NOT_FOUND +	DESIRED_BASE_EQU
2  4342								   CW	   $DO_DEFINED
3  4343	00000EB5  20000C02					 DD	 $DO_DEFINED + DESIRED_BASE_EQU
2  4344								 CBR	 IW_EXIT
3  4345								 CW	 $BRANCH
4  4346	00000EB9  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4347								 CW	 IW_EXIT
4  4348	00000EBD  20000EF9					 DD	 IW_EXIT + DESIRED_BASE_EQU
2  4349	00000EC1			 IW_NOT_FOUND:
2  4350								   CW	   $DUP
3  4351	00000EC1  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  4352								   CW	   $TOR
3  4353	00000EC5  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  4354								   CW	   $COUNT
3  4355	00000EC9  20002306					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  4356								   CW	   $INTERPRET_LITERAL
3  4357	00000ECD  20000DF0					 DD	 $INTERPRET_LITERAL + DESIRED_BASE_EQU
2  4358								   CW	   $INVERT
3  4359	00000ED1  20001A57					 DD	 $INVERT + DESIRED_BASE_EQU
2  4360								   CQBR	   IW_EXIT_1
3  4361								 CW	 $QBRANCH
4  4362	00000ED5  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4363								 CW	 IW_EXIT_1
4  4364	00000ED9  20000EF1					 DD	 IW_EXIT_1 + DESIRED_BASE_EQU
2  4365								     CW	     $RFROM
3  4366	00000EDD  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  4367								     CW	     $COUNT
3  4368	00000EE1  20002306					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  4369								     CW	     $INTERPRET_WORD_NOT_FOUND
3  4370	00000EE5  20000F55					 DD	 $INTERPRET_WORD_NOT_FOUND + DESIRED_BASE_EQU
2  4371								   CBR	   IW_EXIT
3  4372								 CW	 $BRANCH
4  4373	00000EE9  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4374								 CW	 IW_EXIT
4  4375	00000EED  20000EF9					 DD	 IW_EXIT + DESIRED_BASE_EQU
2  4376	00000EF1			 IW_EXIT_1:
2  4377								 CW	 $RFROM
3  4378	00000EF1  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  4379								 CW	 $DROP
3  4380	00000EF5  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  4381	00000EF9			 IW_EXIT:
2  4382								 CEXIT
3  4383								 CW	 $EXIT
4  4384	00000EF9  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4385
2  4386					 ;  D: c-addr u	--
2  4387								 $COLON	 '(INTERPRET-WORD-NOT-FOUND)',$PINTERPRET_WORD_NOT_FOUND
3  4388								 $DEF	 '(INTERPRET-WORD-NOT-FOUND)',$PINTERPRET_WORD_NOT_FOUND,   +
   4389					 $ENTER,
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 78
FKernel.asm



4  4390	00000EFD			 ??0150:
4  4391		  =MAIN:0EFD		 LASTWORD		 =	 ??0150
4  4392								 IFNB	 <>
4  4393								   DB
4  4394								 ELSE
4  4395	00000EFD  00						   DB	 VEF_USUAL
4  4396								 ENDIF
4  4397	00000EFE  1A						 DB	 ??0151	- $ - 1
4  4398	00000EFF  28 49	4E 54 45 52 50+				 DB	 '(INTERPRET-WORD-NOT-FOUND)'
   4399		  52 45	54 2D 57 4F 52+
   4400		  44 2D	4E 4F 54 2D 46+
   4401		  4F 55	4E 44 29
4  4402	00000F19			 ??0151:
4  4403	00000F19  1C						 DB	 ??0151	- ??0150
4  4404	00000F1A  20000E8C					 DD	 VOC_LINK
4  4405		  =MAIN:20000EFD	 VOC_LINK		 =	 ??0150	+ DESIRED_BASE_EQU
4  4406
4  4407								 IFNB	 <$PINTERPRET_WORD_NOT_FOUND>
4  4408	00000F1E						   LABEL   $PINTERPRET_WORD_NOT_FOUND FAR
4  4409								 ENDIF
4  4410								 IFNB	 <$ENTER>
4  4411	00000F1E  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4412								 ELSE
4  4413								   DD	   ??0153 + DESIRED_BASE_EQU
4  4414								 ENDIF
4  4415	00000F22			 ??0153:
2  4416								 CW	 $2DROP
3  4417	00000F22  20001565					 DD	 $2DROP	+ DESIRED_BASE_EQU
2  4418								 CTHROW	 -13
3  4419								 CCLIT	 -13
4  4420								 CW	 $LIT
5  4421	00000F26  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
4  4422								 CC	 -13
5  4423	00000F2A  FFFFFFF3					 DD	 -13
3  4424								 CW	 $THROW
4  4425	00000F2E  20002566					 DD	 $THROW	+ DESIRED_BASE_EQU
2  4426								 CEXIT
3  4427								 CW	 $EXIT
4  4428	00000F32  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4429
2  4430					 ;  INTERPRET-WORD-NOT-FOUND
2  4431					 ;  D: c-addr u	--
2  4432								 $DEFER	 'INTERPRET-WORD-NOT-FOUND',$INTERPRET_WORD_NOT_FOUND
3  4433								 $DEF	 'INTERPRET-WORD-NOT-FOUND',$INTERPRET_WORD_NOT_FOUND,	    +
   4434					 $DODEFER,
4  4435	00000F36			 ??0154:
4  4436		  =MAIN:0F36		 LASTWORD		 =	 ??0154
4  4437								 IFNB	 <>
4  4438								   DB
4  4439								 ELSE
4  4440	00000F36  00						   DB	 VEF_USUAL
4  4441								 ENDIF
4  4442	00000F37  18						 DB	 ??0155	- $ - 1
4  4443	00000F38  49 4E	54 45 52 50 52+				 DB	 'INTERPRET-WORD-NOT-FOUND'
   4444		  45 54	2D 57 4F 52 44+
   4445		  2D 4E	4F 54 2D 46 4F+
   4446		  55 4E	44
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 79
FKernel.asm



4  4447	00000F50			 ??0155:
4  4448	00000F50  1A						 DB	 ??0155	- ??0154
4  4449	00000F51  20000EFD					 DD	 VOC_LINK
4  4450		  =MAIN:20000F36	 VOC_LINK		 =	 ??0154	+ DESIRED_BASE_EQU
4  4451
4  4452								 IFNB	 <$INTERPRET_WORD_NOT_FOUND>
4  4453	00000F55						   LABEL   $INTERPRET_WORD_NOT_FOUND FAR
4  4454								 ENDIF
4  4455								 IFNB	 <$DODEFER>
4  4456	00000F55  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  4457								 ELSE
4  4458								   DD	   ??0157 + DESIRED_BASE_EQU
4  4459								 ENDIF
4  4460	00000F59			 ??0157:
2  4461								 CW	 $PINTERPRET_WORD_NOT_FOUND
3  4462	00000F59  20000F1E					 DD	 $PINTERPRET_WORD_NOT_FOUND + DESIRED_BASE_EQU
2  4463
2  4464					 ;  INTERPRET
2  4465								 $COLON	 'INTERPRET',$INTERPRET
3  4466								 $DEF	 'INTERPRET',$INTERPRET,$ENTER,
4  4467	00000F5D			 ??0158:
4  4468		  =MAIN:0F5D		 LASTWORD		 =	 ??0158
4  4469								 IFNB	 <>
4  4470								   DB
4  4471								 ELSE
4  4472	00000F5D  00						   DB	 VEF_USUAL
4  4473								 ENDIF
4  4474	00000F5E  09						 DB	 ??0159	- $ - 1
4  4475	00000F5F  49 4E	54 45 52 50 52+				 DB	 'INTERPRET'
   4476		  45 54
4  4477	00000F68			 ??0159:
4  4478	00000F68  0B						 DB	 ??0159	- ??0158
4  4479	00000F69  20000F36					 DD	 VOC_LINK
4  4480		  =MAIN:20000F5D	 VOC_LINK		 =	 ??0158	+ DESIRED_BASE_EQU
4  4481
4  4482								 IFNB	 <$INTERPRET>
4  4483	00000F6D						   LABEL   $INTERPRET FAR
4  4484								 ENDIF
4  4485								 IFNB	 <$ENTER>
4  4486	00000F6D  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4487								 ELSE
4  4488								   DD	   ??015B + DESIRED_BASE_EQU
4  4489								 ENDIF
4  4490	00000F71			 ??015B:
2  4491	00000F71			 INT_LOOP:
2  4492								 CW	 $BL
3  4493	00000F71  20000361					 DD	 $BL + DESIRED_BASE_EQU
2  4494								 CW	 $WORD			 ; c-addr
3  4495	00000F75  20002004					 DD	 $WORD + DESIRED_BASE_EQU
2  4496								 CW	 $DUP			 ; c-addr c-addr
3  4497	00000F79  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  4498								 CW	 $COUNT			 ; c-addr c-addr1 count
3  4499	00000F7D  20002306					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  4500								 CW	 $NIP			 ; c-addr count
3  4501	00000F81  200015FF					 DD	 $NIP +	DESIRED_BASE_EQU
2  4502								 CQBR	 INT_EXIT		 ; exit	loop if	parse area is	    +
   4503					 exhausted
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 80
FKernel.asm



3  4504								 CW	 $QBRANCH
4  4505	00000F85  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4506								 CW	 INT_EXIT
4  4507	00000F89  20000F99					 DD	 INT_EXIT + DESIRED_BASE_EQU
2  4508								   CW	   $INTERPRET_WORD
3  4509	00000F8D  20000EA1					 DD	 $INTERPRET_WORD + DESIRED_BASE_EQU
2  4510								 CBR	 INT_LOOP
3  4511								 CW	 $BRANCH
4  4512	00000F91  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  4513								 CW	 INT_LOOP
4  4514	00000F95  20000F71					 DD	 INT_LOOP + DESIRED_BASE_EQU
2  4515	00000F99			 INT_EXIT:
2  4516								 CW	 $DROP
3  4517	00000F99  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  4518								 CEXIT
3  4519								 CW	 $EXIT
4  4520	00000F9D  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4521
2  4522
1  4523								 INCLUDE "header.inc"
2  4524					 ;******************************************************************************
2  4525					 ;
2  4526					 ;  header.inc
2  4527					 ;  IKForth
2  4528					 ;
2  4529					 ;  Copyright (C) 1999-2003 Illya Kysil
2  4530					 ;
2  4531					 ;******************************************************************************
2  4532					 ;  HEADER & support words
2  4533					 ;******************************************************************************
2  4534
2  4535					 ;  REPORT-NEW-NAME
2  4536								 $VAR	 'REPORT-NEW-NAME',$REPORT_NEW_NAME
3  4537								 $DEF	 'REPORT-NEW-NAME',$REPORT_NEW_NAME,$DOVAR
4  4538	00000FA1			 ??015C:
4  4539		  =MAIN:0FA1		 LASTWORD		 =	 ??015C
4  4540								 IFNB	 <>
4  4541								   DB
4  4542								 ELSE
4  4543	00000FA1  00						   DB	 VEF_USUAL
4  4544								 ENDIF
4  4545	00000FA2  0F						 DB	 ??015D	- $ - 1
4  4546	00000FA3  52 45	50 4F 52 54 2D+				 DB	 'REPORT-NEW-NAME'
   4547		  4E 45	57 2D 4E 41 4D+
   4548		  45
4  4549	00000FB2			 ??015D:
4  4550	00000FB2  11						 DB	 ??015D	- ??015C
4  4551	00000FB3  20000F5D					 DD	 VOC_LINK
4  4552		  =MAIN:20000FA1	 VOC_LINK		 =	 ??015C	+ DESIRED_BASE_EQU
4  4553
4  4554								 IFNB	 <$REPORT_NEW_NAME>
4  4555	00000FB7						   LABEL   $REPORT_NEW_NAME FAR
4  4556								 ENDIF
4  4557								 IFNB	 <$DOVAR>
4  4558	00000FB7  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  4559								 ELSE
4  4560								   DD	   ??015F + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 81
FKernel.asm



4  4561								 ENDIF
4  4562	00000FBB			 ??015F:
2  4563								 CC	 F_FALSE
3  4564	00000FBB  00000000					 DD	 F_FALSE
2  4565
2  4566					 ;  REPORT-NEW-NAME-DUPLICATE
2  4567								 $VAR	 'REPORT-NEW-NAME-DUPLICATE',$REPORT_NEW_NAME_DUPLICATE
3  4568								 $DEF	 'REPORT-NEW-NAME-DUPLICATE',$REPORT_NEW_NAME_DUPLICATE,    +
   4569					 $DOVAR
4  4570	00000FBF			 ??0160:
4  4571		  =MAIN:0FBF		 LASTWORD		 =	 ??0160
4  4572								 IFNB	 <>
4  4573								   DB
4  4574								 ELSE
4  4575	00000FBF  00						   DB	 VEF_USUAL
4  4576								 ENDIF
4  4577	00000FC0  19						 DB	 ??0161	- $ - 1
4  4578	00000FC1  52 45	50 4F 52 54 2D+				 DB	 'REPORT-NEW-NAME-DUPLICATE'
   4579		  4E 45	57 2D 4E 41 4D+
   4580		  45 2D	44 55 50 4C 49+
   4581		  43 41	54 45
4  4582	00000FDA			 ??0161:
4  4583	00000FDA  1B						 DB	 ??0161	- ??0160
4  4584	00000FDB  20000FA1					 DD	 VOC_LINK
4  4585		  =MAIN:20000FBF	 VOC_LINK		 =	 ??0160	+ DESIRED_BASE_EQU
4  4586
4  4587								 IFNB	 <$REPORT_NEW_NAME_DUPLICATE>
4  4588	00000FDF						   LABEL   $REPORT_NEW_NAME_DUPLICATE FAR
4  4589								 ENDIF
4  4590								 IFNB	 <$DOVAR>
4  4591	00000FDF  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  4592								 ELSE
4  4593								   DD	   ??0163 + DESIRED_BASE_EQU
4  4594								 ENDIF
4  4595	00000FE3			 ??0163:
2  4596								 CC	 F_FALSE
3  4597	00000FE3  00000000					 DD	 F_FALSE
2  4598
2  4599					 ;  MAX-NAME-LENGTH
2  4600								 $VAR	 'MAX-NAME-LENGTH',$MAX_NAME_LENGTH
3  4601								 $DEF	 'MAX-NAME-LENGTH',$MAX_NAME_LENGTH,$DOVAR
4  4602	00000FE7			 ??0164:
4  4603		  =MAIN:0FE7		 LASTWORD		 =	 ??0164
4  4604								 IFNB	 <>
4  4605								   DB
4  4606								 ELSE
4  4607	00000FE7  00						   DB	 VEF_USUAL
4  4608								 ENDIF
4  4609	00000FE8  0F						 DB	 ??0165	- $ - 1
4  4610	00000FE9  4D 41	58 2D 4E 41 4D+				 DB	 'MAX-NAME-LENGTH'
   4611		  45 2D	4C 45 4E 47 54+
   4612		  48
4  4613	00000FF8			 ??0165:
4  4614	00000FF8  11						 DB	 ??0165	- ??0164
4  4615	00000FF9  20000FBF					 DD	 VOC_LINK
4  4616		  =MAIN:20000FE7	 VOC_LINK		 =	 ??0164	+ DESIRED_BASE_EQU
4  4617
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 82
FKernel.asm



4  4618								 IFNB	 <$MAX_NAME_LENGTH>
4  4619	00000FFD						   LABEL   $MAX_NAME_LENGTH FAR
4  4620								 ENDIF
4  4621								 IFNB	 <$DOVAR>
4  4622	00000FFD  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  4623								 ELSE
4  4624								   DD	   ??0167 + DESIRED_BASE_EQU
4  4625								 ENDIF
4  4626	00001001			 ??0167:
2  4627								 CC	 32
3  4628	00001001  00000020					 DD	 32
2  4629
2  4630					 ;  &USUAL
2  4631					 ;  D: -- VEF-USUAL
2  4632								 $CONST	 '&USUAL'
3  4633								 $DEF	 '&USUAL',,$DOCONST
4  4634	00001005			 ??0168:
4  4635		  =MAIN:1005		 LASTWORD		 =	 ??0168
4  4636								 IFNB	 <>
4  4637								   DB
4  4638								 ELSE
4  4639	00001005  00						   DB	 VEF_USUAL
4  4640								 ENDIF
4  4641	00001006  06						 DB	 ??0169	- $ - 1
4  4642	00001007  26 55	53 55 41 4C				 DB	 '&USUAL'
4  4643	0000100D			 ??0169:
4  4644	0000100D  08						 DB	 ??0169	- ??0168
4  4645	0000100E  20000FE7					 DD	 VOC_LINK
4  4646		  =MAIN:20001005	 VOC_LINK		 =	 ??0168	+ DESIRED_BASE_EQU
4  4647
4  4648								 IFNB	 <>
4  4649								   LABEL    FAR
4  4650								 ENDIF
4  4651								 IFNB	 <$DOCONST>
4  4652	00001012  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  4653								 ELSE
4  4654								   DD	   ??016B + DESIRED_BASE_EQU
4  4655								 ENDIF
4  4656	00001016			 ??016B:
2  4657								 CC	 VEF_USUAL
3  4658	00001016  00000000					 DD	 VEF_USUAL
2  4659
2  4660					 ;  &IMMEDIATE
2  4661					 ;  D: -- VEF-IMMEDIATE
2  4662								 $CONST	 '&IMMEDIATE'
3  4663								 $DEF	 '&IMMEDIATE',,$DOCONST
4  4664	0000101A			 ??016C:
4  4665		  =MAIN:101A		 LASTWORD		 =	 ??016C
4  4666								 IFNB	 <>
4  4667								   DB
4  4668								 ELSE
4  4669	0000101A  00						   DB	 VEF_USUAL
4  4670								 ENDIF
4  4671	0000101B  0A						 DB	 ??016D	- $ - 1
4  4672	0000101C  26 49	4D 4D 45 44 49+				 DB	 '&IMMEDIATE'
   4673		  41 54	45
4  4674	00001026			 ??016D:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 83
FKernel.asm



4  4675	00001026  0C						 DB	 ??016D	- ??016C
4  4676	00001027  20001005					 DD	 VOC_LINK
4  4677		  =MAIN:2000101A	 VOC_LINK		 =	 ??016C	+ DESIRED_BASE_EQU
4  4678
4  4679								 IFNB	 <>
4  4680								   LABEL    FAR
4  4681								 ENDIF
4  4682								 IFNB	 <$DOCONST>
4  4683	0000102B  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  4684								 ELSE
4  4685								   DD	   ??016F + DESIRED_BASE_EQU
4  4686								 ENDIF
4  4687	0000102F			 ??016F:
2  4688								 CC	 VEF_IMMEDIATE
3  4689	0000102F  00000001					 DD	 VEF_IMMEDIATE
2  4690
2  4691					 ;  &HIDDEN
2  4692					 ;  D: -- VEF-HIDDEN
2  4693								 $CONST	 '&HIDDEN'
3  4694								 $DEF	 '&HIDDEN',,$DOCONST
4  4695	00001033			 ??0170:
4  4696		  =MAIN:1033		 LASTWORD		 =	 ??0170
4  4697								 IFNB	 <>
4  4698								   DB
4  4699								 ELSE
4  4700	00001033  00						   DB	 VEF_USUAL
4  4701								 ENDIF
4  4702	00001034  07						 DB	 ??0171	- $ - 1
4  4703	00001035  26 48	49 44 44 45 4E				 DB	 '&HIDDEN'
4  4704	0000103C			 ??0171:
4  4705	0000103C  09						 DB	 ??0171	- ??0170
4  4706	0000103D  2000101A					 DD	 VOC_LINK
4  4707		  =MAIN:20001033	 VOC_LINK		 =	 ??0170	+ DESIRED_BASE_EQU
4  4708
4  4709								 IFNB	 <>
4  4710								   LABEL    FAR
4  4711								 ENDIF
4  4712								 IFNB	 <$DOCONST>
4  4713	00001041  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  4714								 ELSE
4  4715								   DD	   ??0173 + DESIRED_BASE_EQU
4  4716								 ENDIF
4  4717	00001045			 ??0173:
2  4718								 CC	 VEF_HIDDEN
3  4719	00001045  00000002					 DD	 VEF_HIDDEN
2  4720
2  4721					 ;  &COMPILE-ONLY
2  4722					 ;  D: -- VEF-COMPILE-ONLY
2  4723								 $CONST	 '&COMPILE-ONLY'
3  4724								 $DEF	 '&COMPILE-ONLY',,$DOCONST
4  4725	00001049			 ??0174:
4  4726		  =MAIN:1049		 LASTWORD		 =	 ??0174
4  4727								 IFNB	 <>
4  4728								   DB
4  4729								 ELSE
4  4730	00001049  00						   DB	 VEF_USUAL
4  4731								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 84
FKernel.asm



4  4732	0000104A  0D						 DB	 ??0175	- $ - 1
4  4733	0000104B  26 43	4F 4D 50 49 4C+				 DB	 '&COMPILE-ONLY'
   4734		  45 2D	4F 4E 4C 59
4  4735	00001058			 ??0175:
4  4736	00001058  0F						 DB	 ??0175	- ??0174
4  4737	00001059  20001033					 DD	 VOC_LINK
4  4738		  =MAIN:20001049	 VOC_LINK		 =	 ??0174	+ DESIRED_BASE_EQU
4  4739
4  4740								 IFNB	 <>
4  4741								   LABEL    FAR
4  4742								 ENDIF
4  4743								 IFNB	 <$DOCONST>
4  4744	0000105D  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  4745								 ELSE
4  4746								   DD	   ??0177 + DESIRED_BASE_EQU
4  4747								 ENDIF
4  4748	00001061			 ??0177:
2  4749								 CC	 VEF_COMPILE_ONLY
3  4750	00001061  00000004					 DD	 VEF_COMPILE_ONLY
2  4751
2  4752					 ;  &IMMEDIATE/COMPILE-ONLY
2  4753					 ;  D: -- VEF-IMMEDIATE	or VEF-COMPILE-ONLY
2  4754								 $CONST	 '&IMMEDIATE/COMPILE-ONLY'
3  4755								 $DEF	 '&IMMEDIATE/COMPILE-ONLY',,$DOCONST
4  4756	00001065			 ??0178:
4  4757		  =MAIN:1065		 LASTWORD		 =	 ??0178
4  4758								 IFNB	 <>
4  4759								   DB
4  4760								 ELSE
4  4761	00001065  00						   DB	 VEF_USUAL
4  4762								 ENDIF
4  4763	00001066  17						 DB	 ??0179	- $ - 1
4  4764	00001067  26 49	4D 4D 45 44 49+				 DB	 '&IMMEDIATE/COMPILE-ONLY'
   4765		  41 54	45 2F 43 4F 4D+
   4766		  50 49	4C 45 2D 4F 4E+
   4767		  4C 59
4  4768	0000107E			 ??0179:
4  4769	0000107E  19						 DB	 ??0179	- ??0178
4  4770	0000107F  20001049					 DD	 VOC_LINK
4  4771		  =MAIN:20001065	 VOC_LINK		 =	 ??0178	+ DESIRED_BASE_EQU
4  4772
4  4773								 IFNB	 <>
4  4774								   LABEL    FAR
4  4775								 ENDIF
4  4776								 IFNB	 <$DOCONST>
4  4777	00001083  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  4778								 ELSE
4  4779								   DD	   ??017B + DESIRED_BASE_EQU
4  4780								 ENDIF
4  4781	00001087			 ??017B:
2  4782								 CC	 <VEF_IMMEDIATE	OR VEF_COMPILE_ONLY>
3  4783	00001087  00000005					 DD	 VEF_IMMEDIATE OR VEF_COMPILE_ONLY
2  4784
2  4785					 ;  LATEST-HEAD@
2  4786					 ;  addr is the	link address of	the last compiled word in compilation wordlist.
2  4787					 ;  D: -- addr
2  4788								 $CODE	 'LATEST-HEAD@',$LATEST_HEAD_FETCH
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 85
FKernel.asm



3  4789								 $DEF	 'LATEST-HEAD@',$LATEST_HEAD_FETCH,,
4  4790	0000108B			 ??017C:
4  4791		  =MAIN:108B		 LASTWORD		 =	 ??017C
4  4792								 IFNB	 <>
4  4793								   DB
4  4794								 ELSE
4  4795	0000108B  00						   DB	 VEF_USUAL
4  4796								 ENDIF
4  4797	0000108C  0C						 DB	 ??017D	- $ - 1
4  4798	0000108D  4C 41	54 45 53 54 2D+				 DB	 'LATEST-HEAD@'
   4799		  48 45	41 44 40
4  4800	00001099			 ??017D:
4  4801	00001099  0E						 DB	 ??017D	- ??017C
4  4802	0000109A  20001065					 DD	 VOC_LINK
4  4803		  =MAIN:2000108B	 VOC_LINK		 =	 ??017C	+ DESIRED_BASE_EQU
4  4804
4  4805								 IFNB	 <$LATEST_HEAD_FETCH>
4  4806	0000109E						   LABEL   $LATEST_HEAD_FETCH FAR
4  4807								 ENDIF
4  4808								 IFNB	 <>
4  4809								   DD	    + DESIRED_BASE_EQU
4  4810								 ELSE
4  4811	0000109E  200010A2					   DD	   ??017F + DESIRED_BASE_EQU
4  4812								 ENDIF
4  4813	000010A2			 ??017F:
2  4814	000010A2  8B 87	00000438				 MOV	 EAX,[DWORD PTR	EDI + CURRENT_VAR]	 ; get CURRENT wid
2  4815								 PUSHDS	 <[DWORD PTR EAX]>
3  4816	000010A8  FF 30						 PUSH	 [DWORD	PTR EAX]
2  4817								 $NEXT
3  4818	000010AA  AD						 LODSD				 ; fetch address
3  4819								 $JMP
4  4820	000010AB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  4821	000010AD  FF E3						 JMP	 EBX			 ; execute
2  4822
2  4823					 ;  LATEST-HEAD!
2  4824					 ;  addr is the	link address of	the last compiled word in compilation wordlist.
2  4825					 ;  D: addr --
2  4826								 $CODE	 'LATEST-HEAD!',$LATEST_HEAD_STORE
3  4827								 $DEF	 'LATEST-HEAD!',$LATEST_HEAD_STORE,,
4  4828	000010AF			 ??0180:
4  4829		  =MAIN:10AF		 LASTWORD		 =	 ??0180
4  4830								 IFNB	 <>
4  4831								   DB
4  4832								 ELSE
4  4833	000010AF  00						   DB	 VEF_USUAL
4  4834								 ENDIF
4  4835	000010B0  0C						 DB	 ??0181	- $ - 1
4  4836	000010B1  4C 41	54 45 53 54 2D+				 DB	 'LATEST-HEAD!'
   4837		  48 45	41 44 21
4  4838	000010BD			 ??0181:
4  4839	000010BD  0E						 DB	 ??0181	- ??0180
4  4840	000010BE  2000108B					 DD	 VOC_LINK
4  4841		  =MAIN:200010AF	 VOC_LINK		 =	 ??0180	+ DESIRED_BASE_EQU
4  4842
4  4843								 IFNB	 <$LATEST_HEAD_STORE>
4  4844	000010C2						   LABEL   $LATEST_HEAD_STORE FAR
4  4845								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 86
FKernel.asm



4  4846								 IFNB	 <>
4  4847								   DD	    + DESIRED_BASE_EQU
4  4848								 ELSE
4  4849	000010C2  200010C6					   DD	   ??0183 + DESIRED_BASE_EQU
4  4850								 ENDIF
4  4851	000010C6			 ??0183:
2  4852	000010C6  8B 87	00000438				 MOV	 EAX,[DWORD PTR	EDI + CURRENT_VAR]	 ; get CURRENT wid
2  4853								 POPDS	 <[DWORD PTR EAX]>
3  4854	000010CC  8F 00						 POP	 [DWORD	PTR EAX]
2  4855								 $NEXT
3  4856	000010CE  AD						 LODSD				 ; fetch address
3  4857								 $JMP
4  4858	000010CF  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  4859	000010D1  FF E3						 JMP	 EBX			 ; execute
2  4860
2  4861					 ;  CHECK-NAME
2  4862					 ;  D: c-addr count -- c-addr count
2  4863								 $COLON	 'CHECK-NAME',$CHECK_NAME
3  4864								 $DEF	 'CHECK-NAME',$CHECK_NAME,$ENTER,
4  4865	000010D3			 ??0184:
4  4866		  =MAIN:10D3		 LASTWORD		 =	 ??0184
4  4867								 IFNB	 <>
4  4868								   DB
4  4869								 ELSE
4  4870	000010D3  00						   DB	 VEF_USUAL
4  4871								 ENDIF
4  4872	000010D4  0A						 DB	 ??0185	- $ - 1
4  4873	000010D5  43 48	45 43 4B 2D 4E+				 DB	 'CHECK-NAME'
   4874		  41 4D	45
4  4875	000010DF			 ??0185:
4  4876	000010DF  0C						 DB	 ??0185	- ??0184
4  4877	000010E0  200010AF					 DD	 VOC_LINK
4  4878		  =MAIN:200010D3	 VOC_LINK		 =	 ??0184	+ DESIRED_BASE_EQU
4  4879
4  4880								 IFNB	 <$CHECK_NAME>
4  4881	000010E4						   LABEL   $CHECK_NAME FAR
4  4882								 ENDIF
4  4883								 IFNB	 <$ENTER>
4  4884	000010E4  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4885								 ELSE
4  4886								   DD	   ??0187 + DESIRED_BASE_EQU
4  4887								 ENDIF
4  4888	000010E8			 ??0187:
2  4889								 CW	 $DUP
3  4890	000010E8  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  4891								 CW	 $ZEROEQ
3  4892	000010EC  20001BCC					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  4893								 CQBR	 NAME_ZEROGR
3  4894								 CW	 $QBRANCH
4  4895	000010F0  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4896								 CW	 NAME_ZEROGR
4  4897	000010F4  20001104					 DD	 NAME_ZEROGR + DESIRED_BASE_EQU
2  4898								   CTHROW  -16
3  4899								 CCLIT	 -16
4  4900								 CW	 $LIT
5  4901	000010F8  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
4  4902								 CC	 -16
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 87
FKernel.asm



5  4903	000010FC  FFFFFFF0					 DD	 -16
3  4904								 CW	 $THROW
4  4905	00001100  20002566					 DD	 $THROW	+ DESIRED_BASE_EQU
2  4906	00001104			 NAME_ZEROGR:
2  4907								 CW	 $DUP
3  4908	00001104  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  4909								 CFETCH	 $MAX_NAME_LENGTH
3  4910								 CW	 $MAX_NAME_LENGTH
4  4911	00001108  20000FFD					 DD	 $MAX_NAME_LENGTH + DESIRED_BASE_EQU
3  4912								 CW	 $FETCH
4  4913	0000110C  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4914								 CW	 $GR
3  4915	00001110  20001B42					 DD	 $GR + DESIRED_BASE_EQU
2  4916								 CQBR	 NAME_OK
3  4917								 CW	 $QBRANCH
4  4918	00001114  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4919								 CW	 NAME_OK
4  4920	00001118  20001128					 DD	 NAME_OK + DESIRED_BASE_EQU
2  4921								   CTHROW  -19
3  4922								 CCLIT	 -19
4  4923								 CW	 $LIT
5  4924	0000111C  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
4  4925								 CC	 -19
5  4926	00001120  FFFFFFED					 DD	 -19
3  4927								 CW	 $THROW
4  4928	00001124  20002566					 DD	 $THROW	+ DESIRED_BASE_EQU
2  4929	00001128			 NAME_OK:
2  4930								 CEXIT
3  4931								 CW	 $EXIT
4  4932	00001128  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  4933
2  4934					 ;  REPORT-NAME
2  4935					 ;  D: c-addr count -- c-addr count
2  4936								 $COLON	 '(REPORT-NAME)',$PREPORT_NAME
3  4937								 $DEF	 '(REPORT-NAME)',$PREPORT_NAME,$ENTER,
4  4938	0000112C			 ??0188:
4  4939		  =MAIN:112C		 LASTWORD		 =	 ??0188
4  4940								 IFNB	 <>
4  4941								   DB
4  4942								 ELSE
4  4943	0000112C  00						   DB	 VEF_USUAL
4  4944								 ENDIF
4  4945	0000112D  0D						 DB	 ??0189	- $ - 1
4  4946	0000112E  28 52	45 50 4F 52 54+				 DB	 '(REPORT-NAME)'
   4947		  2D 4E	41 4D 45 29
4  4948	0000113B			 ??0189:
4  4949	0000113B  0F						 DB	 ??0189	- ??0188
4  4950	0000113C  200010D3					 DD	 VOC_LINK
4  4951		  =MAIN:2000112C	 VOC_LINK		 =	 ??0188	+ DESIRED_BASE_EQU
4  4952
4  4953								 IFNB	 <$PREPORT_NAME>
4  4954	00001140						   LABEL   $PREPORT_NAME FAR
4  4955								 ENDIF
4  4956								 IFNB	 <$ENTER>
4  4957	00001140  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  4958								 ELSE
4  4959								   DD	   ??018B + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 88
FKernel.asm



4  4960								 ENDIF
4  4961	00001144			 ??018B:
2  4962								 CFETCH	 $REPORT_NEW_NAME
3  4963								 CW	 $REPORT_NEW_NAME
4  4964	00001144  20000FB7					 DD	 $REPORT_NEW_NAME + DESIRED_BASE_EQU
3  4965								 CW	 $FETCH
4  4966	00001148  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4967								 CQBR	 NO_REPORT
3  4968								 CW	 $QBRANCH
4  4969	0000114C  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4970								 CW	 NO_REPORT
4  4971	00001150  20001162					 DD	 NO_REPORT + DESIRED_BASE_EQU
2  4972								   CW	   $2DUP
3  4973	00001154  2000157B					 DD	 $2DUP + DESIRED_BASE_EQU
2  4974								   CW	   $TYPE
3  4975	00001158  200005F5					 DD	 $TYPE + DESIRED_BASE_EQU
2  4976								   $WRITE  < >
3  4977								 CW	 $PTYPE
4  4978	0000115C  20000704					 DD	 $PTYPE	+ DESIRED_BASE_EQU
3  4979	00001160  01 20						 DB	 @@018C	- $ - 1,' '
3  4980	00001162			 @@018C:
2  4981	00001162			 NO_REPORT:
2  4982								 CFETCH	 $REPORT_NEW_NAME_DUPLICATE
3  4983								 CW	 $REPORT_NEW_NAME_DUPLICATE
4  4984	00001162  20000FDF					 DD	 $REPORT_NEW_NAME_DUPLICATE + DESIRED_BASE_EQU
3  4985								 CW	 $FETCH
4  4986	00001166  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4987								 CQBR	 CDN_OK
3  4988								 CW	 $QBRANCH
4  4989	0000116A  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  4990								 CW	 CDN_OK
4  4991	0000116E  200011B5					 DD	 CDN_OK	+ DESIRED_BASE_EQU
2  4992								 CW	 $2DUP
3  4993	00001172  2000157B					 DD	 $2DUP + DESIRED_BASE_EQU
2  4994								 CFETCH	 $CURRENT
3  4995								 CW	 $CURRENT
4  4996	00001176  200002BB					 DD	 $CURRENT + DESIRED_BASE_EQU
3  4997								 CW	 $FETCH
4  4998	0000117A  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  4999								 CW	 $SEARCH_WORDLIST	 ; c-addr u 0 |	c-addr u xt +/-1
3  5000	0000117E  20001D8A					 DD	 $SEARCH_WORDLIST + DESIRED_BASE_EQU
2  5001								 CW	 $ZERONOEQ
3  5002	00001182  20001BEF					 DD	 $ZERONOEQ + DESIRED_BASE_EQU
2  5003								 CQBR	 CDN_OK
3  5004								 CW	 $QBRANCH
4  5005	00001186  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5006								 CW	 CDN_OK
4  5007	0000118A  200011B5					 DD	 CDN_OK	+ DESIRED_BASE_EQU
2  5008								   CW	   $DROP
3  5009	0000118E  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  5010								   $WRITE  <Redefinition of >
3  5011								 CW	 $PTYPE
4  5012	00001192  20000704					 DD	 $PTYPE	+ DESIRED_BASE_EQU
3  5013	00001196  10 52	65 64 65 66 69+				 DB	 @@018D	- $ - 1,'Redefinition of '
   5014		  6E 69	74 69 6F 6E 20+
   5015		  6F 66	20
3  5016	000011A7			 @@018D:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 89
FKernel.asm



2  5017								   CW	   $2DUP
3  5018	000011A7  2000157B					 DD	 $2DUP + DESIRED_BASE_EQU
2  5019								   CW	   $TYPE
3  5020	000011AB  200005F5					 DD	 $TYPE + DESIRED_BASE_EQU
2  5021								   $WRITE  < >
3  5022								 CW	 $PTYPE
4  5023	000011AF  20000704					 DD	 $PTYPE	+ DESIRED_BASE_EQU
3  5024	000011B3  01 20						 DB	 @@018E	- $ - 1,' '
3  5025	000011B5			 @@018E:
2  5026	000011B5			 CDN_OK:
2  5027								 CEXIT
3  5028								 CW	 $EXIT
4  5029	000011B5  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5030
2  5031					 ;  REPORT-NAME
2  5032					 ;  D: c-addr count -- c-addr count
2  5033								 $DEFER	 'REPORT-NAME',$REPORT_NAME
3  5034								 $DEF	 'REPORT-NAME',$REPORT_NAME,$DODEFER,
4  5035	000011B9			 ??018F:
4  5036		  =MAIN:11B9		 LASTWORD		 =	 ??018F
4  5037								 IFNB	 <>
4  5038								   DB
4  5039								 ELSE
4  5040	000011B9  00						   DB	 VEF_USUAL
4  5041								 ENDIF
4  5042	000011BA  0B						 DB	 ??0190	- $ - 1
4  5043	000011BB  52 45	50 4F 52 54 2D+				 DB	 'REPORT-NAME'
   5044		  4E 41	4D 45
4  5045	000011C6			 ??0190:
4  5046	000011C6  0D						 DB	 ??0190	- ??018F
4  5047	000011C7  2000112C					 DD	 VOC_LINK
4  5048		  =MAIN:200011B9	 VOC_LINK		 =	 ??018F	+ DESIRED_BASE_EQU
4  5049
4  5050								 IFNB	 <$REPORT_NAME>
4  5051	000011CB						   LABEL   $REPORT_NAME	FAR
4  5052								 ENDIF
4  5053								 IFNB	 <$DODEFER>
4  5054	000011CB  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  5055								 ELSE
4  5056								   DD	   ??0192 + DESIRED_BASE_EQU
4  5057								 ENDIF
4  5058	000011CF			 ??0192:
2  5059								 CW	 $PREPORT_NAME
3  5060	000011CF  20001140					 DD	 $PREPORT_NAME + DESIRED_BASE_EQU
2  5061
2  5062					 ;  (HEADER,)
2  5063					 ;  Compile header without CFA
2  5064					 ;  D: [ 0 0 | c-addr count ] flags --
2  5065								 $COLON	 '(HEADER,)',$PHEADERC
3  5066								 $DEF	 '(HEADER,)',$PHEADERC,$ENTER,
4  5067	000011D3			 ??0193:
4  5068		  =MAIN:11D3		 LASTWORD		 =	 ??0193
4  5069								 IFNB	 <>
4  5070								   DB
4  5071								 ELSE
4  5072	000011D3  00						   DB	 VEF_USUAL
4  5073								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 90
FKernel.asm



4  5074	000011D4  09						 DB	 ??0194	- $ - 1
4  5075	000011D5  28 48	45 41 44 45 52+				 DB	 '(HEADER,)'
   5076		  2C 29
4  5077	000011DE			 ??0194:
4  5078	000011DE  0B						 DB	 ??0194	- ??0193
4  5079	000011DF  200011B9					 DD	 VOC_LINK
4  5080		  =MAIN:200011D3	 VOC_LINK		 =	 ??0193	+ DESIRED_BASE_EQU
4  5081
4  5082								 IFNB	 <$PHEADERC>
4  5083	000011E3						   LABEL   $PHEADERC FAR
4  5084								 ENDIF
4  5085								 IFNB	 <$ENTER>
4  5086	000011E3  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5087								 ELSE
4  5088								   DD	   ??0196 + DESIRED_BASE_EQU
4  5089								 ENDIF
4  5090	000011E7			 ??0196:
2  5091								 CW	 $HERE
3  5092	000011E7  20002274					 DD	 $HERE + DESIRED_BASE_EQU
2  5093								 CW	 $TOR
3  5094	000011EB  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  5095								 CW	 $CCOMMA		 ; compile flags
3  5096	000011EF  20002212					 DD	 $CCOMMA + DESIRED_BASE_EQU
2  5097								 CW	 $SWAP			 ; count c-addr
3  5098	000011F3  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  5099								 CW	 $OVER			 ; count c-addr	count
3  5100	000011F7  20001616					 DD	 $OVER + DESIRED_BASE_EQU
2  5101								 CW	 $DUP
3  5102	000011FB  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  5103								 CW	 $CCOMMA		 ; compile length
3  5104	000011FF  20002212					 DD	 $CCOMMA + DESIRED_BASE_EQU
2  5105								 CW	 $QDUP
3  5106	00001203  20001548					 DD	 $QDUP + DESIRED_BASE_EQU
2  5107								 CQBR	 NO_NAME
3  5108								 CW	 $QBRANCH
4  5109	00001207  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5110								 CW	 NO_NAME
4  5111	0000120B  2000122B					 DD	 NO_NAME + DESIRED_BASE_EQU
2  5112								   CW	   $HERE		   ; count c-addr count	here
3  5113	0000120F  20002274					 DD	 $HERE + DESIRED_BASE_EQU
2  5114								   CW	   $SWAP		   ; count c-addr here count
3  5115	00001213  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  5116								   CW	   $DUP
3  5117	00001217  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  5118								   CW	   $ALLOT
3  5119	0000121B  200021F9					 DD	 $ALLOT	+ DESIRED_BASE_EQU
2  5120								   CW	   $CMOVE		   ; put name
3  5121	0000121F  20002290					 DD	 $CMOVE	+ DESIRED_BASE_EQU
2  5122								 CBR	 NAME_EXIT
3  5123								 CW	 $BRANCH
4  5124	00001223  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  5125								 CW	 NAME_EXIT
4  5126	00001227  2000122F					 DD	 NAME_EXIT + DESIRED_BASE_EQU
2  5127	0000122B			 NO_NAME:
2  5128								   CW	   $DROP
3  5129	0000122B  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  5130	0000122F			 NAME_EXIT:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 91
FKernel.asm



2  5131								 CCLIT	 2
3  5132								 CW	 $LIT
4  5133	0000122F  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  5134								 CC	 2
4  5135	00001233  00000002					 DD	 2
2  5136								 CW	 $ADD
3  5137	00001237  200018FD					 DD	 $ADD +	DESIRED_BASE_EQU
2  5138								 CW	 $CCOMMA		 ; compile (length + 2)
3  5139	0000123B  20002212					 DD	 $CCOMMA + DESIRED_BASE_EQU
2  5140								 CW	 $LATEST_HEAD_FETCH
3  5141	0000123F  2000109E					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
2  5142								 CW	 $COMMA
3  5143	00001243  200021B9					 DD	 $COMMA	+ DESIRED_BASE_EQU
2  5144								 CW	 $RFROM
3  5145	00001247  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  5146								 CW	 $LATEST_HEAD_STORE
3  5147	0000124B  200010C2					 DD	 $LATEST_HEAD_STORE + DESIRED_BASE_EQU
2  5148								 CEXIT
3  5149								 CW	 $EXIT
4  5150	0000124F  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5151
2  5152					 ;  (CFA,)
2  5153					 ;  Compile CFA	after (HEADER,)
2  5154					 ;  D: executor-xt | 0 -- xt
2  5155								 $COLON	 '(CFA,)',$PCFA_C
3  5156								 $DEF	 '(CFA,)',$PCFA_C,$ENTER,
4  5157	00001253			 ??0197:
4  5158		  =MAIN:1253		 LASTWORD		 =	 ??0197
4  5159								 IFNB	 <>
4  5160								   DB
4  5161								 ELSE
4  5162	00001253  00						   DB	 VEF_USUAL
4  5163								 ENDIF
4  5164	00001254  06						 DB	 ??0198	- $ - 1
4  5165	00001255  28 43	46 41 2C 29				 DB	 '(CFA,)'
4  5166	0000125B			 ??0198:
4  5167	0000125B  08						 DB	 ??0198	- ??0197
4  5168	0000125C  200011D3					 DD	 VOC_LINK
4  5169		  =MAIN:20001253	 VOC_LINK		 =	 ??0197	+ DESIRED_BASE_EQU
4  5170
4  5171								 IFNB	 <$PCFA_C>
4  5172	00001260						   LABEL   $PCFA_C FAR
4  5173								 ENDIF
4  5174								 IFNB	 <$ENTER>
4  5175	00001260  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5176								 ELSE
4  5177								   DD	   ??019A + DESIRED_BASE_EQU
4  5178								 ENDIF
4  5179	00001264			 ??019A:
2  5180								 CW	 $DUP
3  5181	00001264  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  5182								 CW	 $ZEROEQ
3  5183	00001268  20001BCC					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  5184								 CQBR	 EXECUTOR_XT
3  5185								 CW	 $QBRANCH
4  5186	0000126C  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  5187								 CW	 EXECUTOR_XT
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 92
FKernel.asm



4  5188	00001270  20001288					 DD	 EXECUTOR_XT + DESIRED_BASE_EQU
2  5189								   CW	   $DROP
3  5190	00001274  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  5191								   CW	   $HERE
3  5192	00001278  20002274					 DD	 $HERE + DESIRED_BASE_EQU
2  5193								   CCLIT   CELL_SIZE
3  5194								 CW	 $LIT
4  5195	0000127C  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  5196								 CC	 CELL_SIZE
4  5197	00001280  00000004					 DD	 CELL_SIZE
2  5198								   CW	   $ADD
3  5199	00001284  200018FD					 DD	 $ADD +	DESIRED_BASE_EQU
2  5200	00001288			 EXECUTOR_XT:
2  5201								 CW	 $HERE
3  5202	00001288  20002274					 DD	 $HERE + DESIRED_BASE_EQU
2  5203								 CW	 $SWAP
3  5204	0000128C  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  5205								 CW	 $COMMA
3  5206	00001290  200021B9					 DD	 $COMMA	+ DESIRED_BASE_EQU
2  5207								 CEXIT
3  5208								 CW	 $EXIT
4  5209	00001294  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5210
2  5211					 ;  HEADER,
2  5212					 ;  D: [ executor-xt | 0 ] [ 0 0 | c-addr count	] flags	-- xt
2  5213								 $COLON	 'HEADER,',$HEADERC
3  5214								 $DEF	 'HEADER,',$HEADERC,$ENTER,
4  5215	00001298			 ??019B:
4  5216		  =MAIN:1298		 LASTWORD		 =	 ??019B
4  5217								 IFNB	 <>
4  5218								   DB
4  5219								 ELSE
4  5220	00001298  00						   DB	 VEF_USUAL
4  5221								 ENDIF
4  5222	00001299  07						 DB	 ??019C	- $ - 1
4  5223	0000129A  48 45	41 44 45 52 2C				 DB	 'HEADER,'
4  5224	000012A1			 ??019C:
4  5225	000012A1  09						 DB	 ??019C	- ??019B
4  5226	000012A2  20001253					 DD	 VOC_LINK
4  5227		  =MAIN:20001298	 VOC_LINK		 =	 ??019B	+ DESIRED_BASE_EQU
4  5228
4  5229								 IFNB	 <$HEADERC>
4  5230	000012A6						   LABEL   $HEADERC FAR
4  5231								 ENDIF
4  5232								 IFNB	 <$ENTER>
4  5233	000012A6  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5234								 ELSE
4  5235								   DD	   ??019E + DESIRED_BASE_EQU
4  5236								 ENDIF
4  5237	000012AA			 ??019E:
2  5238								 CW	 $PHEADERC
3  5239	000012AA  200011E3					 DD	 $PHEADERC + DESIRED_BASE_EQU
2  5240								 CW	 $PCFA_C
3  5241	000012AE  20001260					 DD	 $PCFA_C + DESIRED_BASE_EQU
2  5242								 CEXIT
3  5243								 CW	 $EXIT
4  5244	000012B2  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 93
FKernel.asm



2  5245
2  5246					 ;  CHECK-HEADER,
2  5247					 ;  D: [ executor-xt | 0 ] [ 0 0 | c-addr count	] flags	-- xt
2  5248								 $COLON	 'CHECK-HEADER,',$CHECK_HEADERC
3  5249								 $DEF	 'CHECK-HEADER,',$CHECK_HEADERC,$ENTER,
4  5250	000012B6			 ??019F:
4  5251		  =MAIN:12B6		 LASTWORD		 =	 ??019F
4  5252								 IFNB	 <>
4  5253								   DB
4  5254								 ELSE
4  5255	000012B6  00						   DB	 VEF_USUAL
4  5256								 ENDIF
4  5257	000012B7  0D						 DB	 ??01A0	- $ - 1
4  5258	000012B8  43 48	45 43 4B 2D 48+				 DB	 'CHECK-HEADER,'
   5259		  45 41	44 45 52 2C
4  5260	000012C5			 ??01A0:
4  5261	000012C5  0F						 DB	 ??01A0	- ??019F
4  5262	000012C6  20001298					 DD	 VOC_LINK
4  5263		  =MAIN:200012B6	 VOC_LINK		 =	 ??019F	+ DESIRED_BASE_EQU
4  5264
4  5265								 IFNB	 <$CHECK_HEADERC>
4  5266	000012CA						   LABEL   $CHECK_HEADERC FAR
4  5267								 ENDIF
4  5268								 IFNB	 <$ENTER>
4  5269	000012CA  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5270								 ELSE
4  5271								   DD	   ??01A2 + DESIRED_BASE_EQU
4  5272								 ENDIF
4  5273	000012CE			 ??01A2:
2  5274								 CW	 $TOR
3  5275	000012CE  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  5276								 CW	 $CHECK_NAME
3  5277	000012D2  200010E4					 DD	 $CHECK_NAME + DESIRED_BASE_EQU
2  5278								 CW	 $REPORT_NAME
3  5279	000012D6  200011CB					 DD	 $REPORT_NAME +	DESIRED_BASE_EQU
2  5280								 CW	 $RFROM
3  5281	000012DA  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  5282								 CW	 $HEADERC
3  5283	000012DE  200012A6					 DD	 $HEADERC + DESIRED_BASE_EQU
2  5284								 CEXIT
3  5285								 CW	 $EXIT
4  5286	000012E2  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5287
2  5288					 ;  PARSE-CHECK-HEADER,
2  5289					 ;  D: [ executor-xt | 0 ] flags "name"	-- xt
2  5290								 $COLON	 'PARSE-CHECK-HEADER,',$PARSE_CHECK_HEADERC
3  5291								 $DEF	 'PARSE-CHECK-HEADER,',$PARSE_CHECK_HEADERC,$ENTER,
4  5292	000012E6			 ??01A3:
4  5293		  =MAIN:12E6		 LASTWORD		 =	 ??01A3
4  5294								 IFNB	 <>
4  5295								   DB
4  5296								 ELSE
4  5297	000012E6  00						   DB	 VEF_USUAL
4  5298								 ENDIF
4  5299	000012E7  13						 DB	 ??01A4	- $ - 1
4  5300	000012E8  50 41	52 53 45 2D 43+				 DB	 'PARSE-CHECK-HEADER,'
   5301		  48 45	43 4B 2D 48 45+
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 94
FKernel.asm



   5302		  41 44	45 52 2C
4  5303	000012FB			 ??01A4:
4  5304	000012FB  15						 DB	 ??01A4	- ??01A3
4  5305	000012FC  200012B6					 DD	 VOC_LINK
4  5306		  =MAIN:200012E6	 VOC_LINK		 =	 ??01A3	+ DESIRED_BASE_EQU
4  5307
4  5308								 IFNB	 <$PARSE_CHECK_HEADERC>
4  5309	00001300						   LABEL   $PARSE_CHECK_HEADERC	FAR
4  5310								 ENDIF
4  5311								 IFNB	 <$ENTER>
4  5312	00001300  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5313								 ELSE
4  5314								   DD	   ??01A6 + DESIRED_BASE_EQU
4  5315								 ENDIF
4  5316	00001304			 ??01A6:
2  5317								 CW	 $TOR
3  5318	00001304  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  5319								 CW	 $BL
3  5320	00001308  20000361					 DD	 $BL + DESIRED_BASE_EQU
2  5321								 CW	 $WORD
3  5322	0000130C  20002004					 DD	 $WORD + DESIRED_BASE_EQU
2  5323								 CW	 $COUNT
3  5324	00001310  20002306					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  5325								 CW	 $RFROM
3  5326	00001314  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  5327								 CW	 $CHECK_HEADERC
3  5328	00001318  200012CA					 DD	 $CHECK_HEADERC	+ DESIRED_BASE_EQU
2  5329								 CEXIT
3  5330								 CW	 $EXIT
4  5331	0000131C  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5332
2  5333					 ;  HFLAGS!
2  5334					 ;  D: x h-id --
2  5335					 ;  Store flags	specified by x to the flags field of the header
2  5336								 $COLON	 'HFLAGS!',$HFLAGS_STORE
3  5337								 $DEF	 'HFLAGS!',$HFLAGS_STORE,$ENTER,
4  5338	00001320			 ??01A7:
4  5339		  =MAIN:1320		 LASTWORD		 =	 ??01A7
4  5340								 IFNB	 <>
4  5341								   DB
4  5342								 ELSE
4  5343	00001320  00						   DB	 VEF_USUAL
4  5344								 ENDIF
4  5345	00001321  07						 DB	 ??01A8	- $ - 1
4  5346	00001322  48 46	4C 41 47 53 21				 DB	 'HFLAGS!'
4  5347	00001329			 ??01A8:
4  5348	00001329  09						 DB	 ??01A8	- ??01A7
4  5349	0000132A  200012E6					 DD	 VOC_LINK
4  5350		  =MAIN:20001320	 VOC_LINK		 =	 ??01A7	+ DESIRED_BASE_EQU
4  5351
4  5352								 IFNB	 <$HFLAGS_STORE>
4  5353	0000132E						   LABEL   $HFLAGS_STORE FAR
4  5354								 ENDIF
4  5355								 IFNB	 <$ENTER>
4  5356	0000132E  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5357								 ELSE
4  5358								   DD	   ??01AA + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 95
FKernel.asm



4  5359								 ENDIF
4  5360	00001332			 ??01AA:
2  5361								 CW	 $CSTORE
3  5362	00001332  20001CD2					 DD	 $CSTORE + DESIRED_BASE_EQU
2  5363								 CEXIT
3  5364								 CW	 $EXIT
4  5365	00001336  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5366
2  5367					 ;  HFLAGS@
2  5368					 ;  D: h-id -- x
2  5369					 ;  Get	flags from the flags field of the header
2  5370								 $COLON	 'HFLAGS@',$HFLAGS_FETCH
3  5371								 $DEF	 'HFLAGS@',$HFLAGS_FETCH,$ENTER,
4  5372	0000133A			 ??01AB:
4  5373		  =MAIN:133A		 LASTWORD		 =	 ??01AB
4  5374								 IFNB	 <>
4  5375								   DB
4  5376								 ELSE
4  5377	0000133A  00						   DB	 VEF_USUAL
4  5378								 ENDIF
4  5379	0000133B  07						 DB	 ??01AC	- $ - 1
4  5380	0000133C  48 46	4C 41 47 53 40				 DB	 'HFLAGS@'
4  5381	00001343			 ??01AC:
4  5382	00001343  09						 DB	 ??01AC	- ??01AB
4  5383	00001344  20001320					 DD	 VOC_LINK
4  5384		  =MAIN:2000133A	 VOC_LINK		 =	 ??01AB	+ DESIRED_BASE_EQU
4  5385
4  5386								 IFNB	 <$HFLAGS_FETCH>
4  5387	00001348						   LABEL   $HFLAGS_FETCH FAR
4  5388								 ENDIF
4  5389								 IFNB	 <$ENTER>
4  5390	00001348  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5391								 ELSE
4  5392								   DD	   ??01AE + DESIRED_BASE_EQU
4  5393								 ENDIF
4  5394	0000134C			 ??01AE:
2  5395								 CW	 $CFETCH
3  5396	0000134C  20001CE8					 DD	 $CFETCH + DESIRED_BASE_EQU
2  5397								 CEXIT
3  5398								 CW	 $EXIT
4  5399	00001350  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5400
2  5401					 ;  SET-HFLAGS!
2  5402					 ;  D: flags --
2  5403								 $COLON	 'SET-HFLAGS!'
3  5404								 $DEF	 'SET-HFLAGS!',,$ENTER,
4  5405	00001354			 ??01AF:
4  5406		  =MAIN:1354		 LASTWORD		 =	 ??01AF
4  5407								 IFNB	 <>
4  5408								   DB
4  5409								 ELSE
4  5410	00001354  00						   DB	 VEF_USUAL
4  5411								 ENDIF
4  5412	00001355  0B						 DB	 ??01B0	- $ - 1
4  5413	00001356  53 45	54 2D 48 46 4C+				 DB	 'SET-HFLAGS!'
   5414		  41 47	53 21
4  5415	00001361			 ??01B0:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 96
FKernel.asm



4  5416	00001361  0D						 DB	 ??01B0	- ??01AF
4  5417	00001362  2000133A					 DD	 VOC_LINK
4  5418		  =MAIN:20001354	 VOC_LINK		 =	 ??01AF	+ DESIRED_BASE_EQU
4  5419
4  5420								 IFNB	 <>
4  5421								   LABEL    FAR
4  5422								 ENDIF
4  5423								 IFNB	 <$ENTER>
4  5424	00001366  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5425								 ELSE
4  5426								   DD	   ??01B2 + DESIRED_BASE_EQU
4  5427								 ENDIF
4  5428	0000136A			 ??01B2:
2  5429								 CW	 $LATEST_HEAD_FETCH
3  5430	0000136A  2000109E					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
2  5431								 CW	 $DUP
3  5432	0000136E  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  5433								 CW	 $HFLAGS_FETCH
3  5434	00001372  20001348					 DD	 $HFLAGS_FETCH + DESIRED_BASE_EQU
2  5435								 CW	 $ROT
3  5436	00001376  2000162E					 DD	 $ROT +	DESIRED_BASE_EQU
2  5437								 CW	 $OR
3  5438	0000137A  20001A6D					 DD	 $OR + DESIRED_BASE_EQU
2  5439								 CW	 $SWAP
3  5440	0000137E  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  5441								 CW	 $HFLAGS_STORE
3  5442	00001382  2000132E					 DD	 $HFLAGS_STORE + DESIRED_BASE_EQU
2  5443								 CEXIT
3  5444								 CW	 $EXIT
4  5445	00001386  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5446
2  5447					 ;  RESET-HFLAGS!
2  5448					 ;  D: flags --
2  5449								 $COLON	 'RESET-HFLAGS!'
3  5450								 $DEF	 'RESET-HFLAGS!',,$ENTER,
4  5451	0000138A			 ??01B3:
4  5452		  =MAIN:138A		 LASTWORD		 =	 ??01B3
4  5453								 IFNB	 <>
4  5454								   DB
4  5455								 ELSE
4  5456	0000138A  00						   DB	 VEF_USUAL
4  5457								 ENDIF
4  5458	0000138B  0D						 DB	 ??01B4	- $ - 1
4  5459	0000138C  52 45	53 45 54 2D 48+				 DB	 'RESET-HFLAGS!'
   5460		  46 4C	41 47 53 21
4  5461	00001399			 ??01B4:
4  5462	00001399  0F						 DB	 ??01B4	- ??01B3
4  5463	0000139A  20001354					 DD	 VOC_LINK
4  5464		  =MAIN:2000138A	 VOC_LINK		 =	 ??01B3	+ DESIRED_BASE_EQU
4  5465
4  5466								 IFNB	 <>
4  5467								   LABEL    FAR
4  5468								 ENDIF
4  5469								 IFNB	 <$ENTER>
4  5470	0000139E  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5471								 ELSE
4  5472								   DD	   ??01B6 + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 97
FKernel.asm



4  5473								 ENDIF
4  5474	000013A2			 ??01B6:
2  5475								 CW	 $LATEST_HEAD_FETCH
3  5476	000013A2  2000109E					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
2  5477								 CW	 $DUP
3  5478	000013A6  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  5479								 CW	 $HFLAGS_FETCH
3  5480	000013AA  20001348					 DD	 $HFLAGS_FETCH + DESIRED_BASE_EQU
2  5481								 CW	 $ROT
3  5482	000013AE  2000162E					 DD	 $ROT +	DESIRED_BASE_EQU
2  5483								 CW	 $INVERT
3  5484	000013B2  20001A57					 DD	 $INVERT + DESIRED_BASE_EQU
2  5485								 CW	 $AND
3  5486	000013B6  20001A3C					 DD	 $AND +	DESIRED_BASE_EQU
2  5487								 CW	 $SWAP
3  5488	000013BA  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  5489								 CW	 $HFLAGS_STORE
3  5490	000013BE  2000132E					 DD	 $HFLAGS_STORE + DESIRED_BASE_EQU
2  5491								 CEXIT
3  5492								 CW	 $EXIT
4  5493	000013C2  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5494
2  5495					 ;  INVERT-HFLAGS!
2  5496					 ;  D: flags --
2  5497								 $COLON	 'INVERT-HFLAGS!'
3  5498								 $DEF	 'INVERT-HFLAGS!',,$ENTER,
4  5499	000013C6			 ??01B7:
4  5500		  =MAIN:13C6		 LASTWORD		 =	 ??01B7
4  5501								 IFNB	 <>
4  5502								   DB
4  5503								 ELSE
4  5504	000013C6  00						   DB	 VEF_USUAL
4  5505								 ENDIF
4  5506	000013C7  0E						 DB	 ??01B8	- $ - 1
4  5507	000013C8  49 4E	56 45 52 54 2D+				 DB	 'INVERT-HFLAGS!'
   5508		  48 46	4C 41 47 53 21
4  5509	000013D6			 ??01B8:
4  5510	000013D6  10						 DB	 ??01B8	- ??01B7
4  5511	000013D7  2000138A					 DD	 VOC_LINK
4  5512		  =MAIN:200013C6	 VOC_LINK		 =	 ??01B7	+ DESIRED_BASE_EQU
4  5513
4  5514								 IFNB	 <>
4  5515								   LABEL    FAR
4  5516								 ENDIF
4  5517								 IFNB	 <$ENTER>
4  5518	000013DB  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5519								 ELSE
4  5520								   DD	   ??01BA + DESIRED_BASE_EQU
4  5521								 ENDIF
4  5522	000013DF			 ??01BA:
2  5523								 CW	 $LATEST_HEAD_FETCH
3  5524	000013DF  2000109E					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
2  5525								 CW	 $DUP
3  5526	000013E3  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  5527								 CW	 $HFLAGS_FETCH
3  5528	000013E7  20001348					 DD	 $HFLAGS_FETCH + DESIRED_BASE_EQU
2  5529								 CW	 $ROT
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 98
FKernel.asm



3  5530	000013EB  2000162E					 DD	 $ROT +	DESIRED_BASE_EQU
2  5531								 CW	 $XOR
3  5532	000013EF  20001A85					 DD	 $XOR +	DESIRED_BASE_EQU
2  5533								 CW	 $SWAP
3  5534	000013F3  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  5535								 CW	 $HFLAGS_STORE
3  5536	000013F7  2000132E					 DD	 $HFLAGS_STORE + DESIRED_BASE_EQU
2  5537								 CEXIT
3  5538								 CW	 $EXIT
4  5539	000013FB  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5540
2  5541					 ;  >HEAD
2  5542					 ;  D: xt -- h-id
2  5543					 ;  h-id is the	address	of vocabulary entry flags
2  5544								 $CODE	 '>HEAD',$TO_HEAD
3  5545								 $DEF	 '>HEAD',$TO_HEAD,,
4  5546	000013FF			 ??01BB:
4  5547		  =MAIN:13FF		 LASTWORD		 =	 ??01BB
4  5548								 IFNB	 <>
4  5549								   DB
4  5550								 ELSE
4  5551	000013FF  00						   DB	 VEF_USUAL
4  5552								 ENDIF
4  5553	00001400  05						 DB	 ??01BC	- $ - 1
4  5554	00001401  3E 48	45 41 44				 DB	 '>HEAD'
4  5555	00001406			 ??01BC:
4  5556	00001406  07						 DB	 ??01BC	- ??01BB
4  5557	00001407  200013C6					 DD	 VOC_LINK
4  5558		  =MAIN:200013FF	 VOC_LINK		 =	 ??01BB	+ DESIRED_BASE_EQU
4  5559
4  5560								 IFNB	 <$TO_HEAD>
4  5561	0000140B						   LABEL   $TO_HEAD FAR
4  5562								 ENDIF
4  5563								 IFNB	 <>
4  5564								   DD	    + DESIRED_BASE_EQU
4  5565								 ELSE
4  5566	0000140B  2000140F					   DD	   ??01BE + DESIRED_BASE_EQU
4  5567								 ENDIF
4  5568	0000140F			 ??01BE:
2  5569								 POPDS	 EAX
3  5570	0000140F  58						 POP	 EAX
2  5571	00001410  83 E8	05					 SUB	 EAX,5
2  5572	00001413  33 DB						 XOR	 EBX,EBX
2  5573	00001415  8A 18						 MOV	 BL,[BYTE PTR EAX]
2  5574	00001417  2B C3						 SUB	 EAX,EBX
2  5575								 PUSHDS	 EAX
3  5576	00001419  50						 PUSH	 EAX
2  5577								 $NEXT
3  5578	0000141A  AD						 LODSD				 ; fetch address
3  5579								 $JMP
4  5580	0000141B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  5581	0000141D  FF E3						 JMP	 EBX			 ; execute
2  5582
2  5583					 ;  HEAD>
2  5584					 ;  D: h-id -- xt
2  5585					 ;  h-id is the	address	of vocabulary entry flags
2  5586								 $CODE	 'HEAD>',$HEAD_FROM
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 99
FKernel.asm



3  5587								 $DEF	 'HEAD>',$HEAD_FROM,,
4  5588	0000141F			 ??01BF:
4  5589		  =MAIN:141F		 LASTWORD		 =	 ??01BF
4  5590								 IFNB	 <>
4  5591								   DB
4  5592								 ELSE
4  5593	0000141F  00						   DB	 VEF_USUAL
4  5594								 ENDIF
4  5595	00001420  05						 DB	 ??01C0	- $ - 1
4  5596	00001421  48 45	41 44 3E				 DB	 'HEAD>'
4  5597	00001426			 ??01C0:
4  5598	00001426  07						 DB	 ??01C0	- ??01BF
4  5599	00001427  200013FF					 DD	 VOC_LINK
4  5600		  =MAIN:2000141F	 VOC_LINK		 =	 ??01BF	+ DESIRED_BASE_EQU
4  5601
4  5602								 IFNB	 <$HEAD_FROM>
4  5603	0000142B						   LABEL   $HEAD_FROM FAR
4  5604								 ENDIF
4  5605								 IFNB	 <>
4  5606								   DD	    + DESIRED_BASE_EQU
4  5607								 ELSE
4  5608	0000142B  2000142F					   DD	   ??01C2 + DESIRED_BASE_EQU
4  5609								 ENDIF
4  5610	0000142F			 ??01C2:
2  5611								 POPDS	 EAX
3  5612	0000142F  58						 POP	 EAX
2  5613	00001430  40						 INC	 EAX
2  5614	00001431  33 DB						 XOR	 EBX,EBX
2  5615	00001433  8A 18						 MOV	 BL,[BYTE PTR EAX]
2  5616	00001435  03 C3						 ADD	 EAX,EBX
2  5617	00001437  83 C0	06					 ADD	 EAX,6
2  5618								 PUSHDS	 EAX
3  5619	0000143A  50						 PUSH	 EAX
2  5620								 $NEXT
3  5621	0000143B  AD						 LODSD				 ; fetch address
3  5622								 $JMP
4  5623	0000143C  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  5624	0000143E  FF E3						 JMP	 EBX			 ; execute
2  5625
2  5626					 ;  HEAD>NAME
2  5627								 $COLON	 'HEAD>NAME',$HEAD_TO_NAME
3  5628								 $DEF	 'HEAD>NAME',$HEAD_TO_NAME,$ENTER,
4  5629	00001440			 ??01C3:
4  5630		  =MAIN:1440		 LASTWORD		 =	 ??01C3
4  5631								 IFNB	 <>
4  5632								   DB
4  5633								 ELSE
4  5634	00001440  00						   DB	 VEF_USUAL
4  5635								 ENDIF
4  5636	00001441  09						 DB	 ??01C4	- $ - 1
4  5637	00001442  48 45	41 44 3E 4E 41+				 DB	 'HEAD>NAME'
   5638		  4D 45
4  5639	0000144B			 ??01C4:
4  5640	0000144B  0B						 DB	 ??01C4	- ??01C3
4  5641	0000144C  2000141F					 DD	 VOC_LINK
4  5642		  =MAIN:20001440	 VOC_LINK		 =	 ??01C3	+ DESIRED_BASE_EQU
4  5643
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 100
FKernel.asm



4  5644								 IFNB	 <$HEAD_TO_NAME>
4  5645	00001450						   LABEL   $HEAD_TO_NAME FAR
4  5646								 ENDIF
4  5647								 IFNB	 <$ENTER>
4  5648	00001450  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5649								 ELSE
4  5650								   DD	   ??01C6 + DESIRED_BASE_EQU
4  5651								 ENDIF
4  5652	00001454			 ??01C6:
2  5653								 CW	 $1ADD
3  5654	00001454  2000192A					 DD	 $1ADD + DESIRED_BASE_EQU
2  5655								 CEXIT
3  5656								 CW	 $EXIT
4  5657	00001458  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5658
2  5659					 ;  NAME>HEAD
2  5660								 $COLON	 'NAME>HEAD',$NAME_TO_HEAD
3  5661								 $DEF	 'NAME>HEAD',$NAME_TO_HEAD,$ENTER,
4  5662	0000145C			 ??01C7:
4  5663		  =MAIN:145C		 LASTWORD		 =	 ??01C7
4  5664								 IFNB	 <>
4  5665								   DB
4  5666								 ELSE
4  5667	0000145C  00						   DB	 VEF_USUAL
4  5668								 ENDIF
4  5669	0000145D  09						 DB	 ??01C8	- $ - 1
4  5670	0000145E  4E 41	4D 45 3E 48 45+				 DB	 'NAME>HEAD'
   5671		  41 44
4  5672	00001467			 ??01C8:
4  5673	00001467  0B						 DB	 ??01C8	- ??01C7
4  5674	00001468  20001440					 DD	 VOC_LINK
4  5675		  =MAIN:2000145C	 VOC_LINK		 =	 ??01C7	+ DESIRED_BASE_EQU
4  5676
4  5677								 IFNB	 <$NAME_TO_HEAD>
4  5678	0000146C						   LABEL   $NAME_TO_HEAD FAR
4  5679								 ENDIF
4  5680								 IFNB	 <$ENTER>
4  5681	0000146C  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5682								 ELSE
4  5683								   DD	   ??01CA + DESIRED_BASE_EQU
4  5684								 ENDIF
4  5685	00001470			 ??01CA:
2  5686								 CW	 $1SUB
3  5687	00001470  2000193F					 DD	 $1SUB + DESIRED_BASE_EQU
2  5688								 CEXIT
3  5689								 CW	 $EXIT
4  5690	00001474  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5691
2  5692					 ;  >NAME
2  5693					 ;  D: xt -- name-addr
2  5694								 $COLON	 '>NAME',$TO_NAME
3  5695								 $DEF	 '>NAME',$TO_NAME,$ENTER,
4  5696	00001478			 ??01CB:
4  5697		  =MAIN:1478		 LASTWORD		 =	 ??01CB
4  5698								 IFNB	 <>
4  5699								   DB
4  5700								 ELSE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 101
FKernel.asm



4  5701	00001478  00						   DB	 VEF_USUAL
4  5702								 ENDIF
4  5703	00001479  05						 DB	 ??01CC	- $ - 1
4  5704	0000147A  3E 4E	41 4D 45				 DB	 '>NAME'
4  5705	0000147F			 ??01CC:
4  5706	0000147F  07						 DB	 ??01CC	- ??01CB
4  5707	00001480  2000145C					 DD	 VOC_LINK
4  5708		  =MAIN:20001478	 VOC_LINK		 =	 ??01CB	+ DESIRED_BASE_EQU
4  5709
4  5710								 IFNB	 <$TO_NAME>
4  5711	00001484						   LABEL   $TO_NAME FAR
4  5712								 ENDIF
4  5713								 IFNB	 <$ENTER>
4  5714	00001484  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5715								 ELSE
4  5716								   DD	   ??01CE + DESIRED_BASE_EQU
4  5717								 ENDIF
4  5718	00001488			 ??01CE:
2  5719								 CW	 $TO_HEAD
3  5720	00001488  2000140B					 DD	 $TO_HEAD + DESIRED_BASE_EQU
2  5721								 CW	 $HEAD_TO_NAME
3  5722	0000148C  20001450					 DD	 $HEAD_TO_NAME + DESIRED_BASE_EQU
2  5723								 CEXIT
3  5724								 CW	 $EXIT
4  5725	00001490  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5726
2  5727					 ;  NAME>
2  5728					 ;  D: name-addr -- xt
2  5729								 $COLON	 'NAME>',$NAME_FROM
3  5730								 $DEF	 'NAME>',$NAME_FROM,$ENTER,
4  5731	00001494			 ??01CF:
4  5732		  =MAIN:1494		 LASTWORD		 =	 ??01CF
4  5733								 IFNB	 <>
4  5734								   DB
4  5735								 ELSE
4  5736	00001494  00						   DB	 VEF_USUAL
4  5737								 ENDIF
4  5738	00001495  05						 DB	 ??01D0	- $ - 1
4  5739	00001496  4E 41	4D 45 3E				 DB	 'NAME>'
4  5740	0000149B			 ??01D0:
4  5741	0000149B  07						 DB	 ??01D0	- ??01CF
4  5742	0000149C  20001478					 DD	 VOC_LINK
4  5743		  =MAIN:20001494	 VOC_LINK		 =	 ??01CF	+ DESIRED_BASE_EQU
4  5744
4  5745								 IFNB	 <$NAME_FROM>
4  5746	000014A0						   LABEL   $NAME_FROM FAR
4  5747								 ENDIF
4  5748								 IFNB	 <$ENTER>
4  5749	000014A0  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5750								 ELSE
4  5751								   DD	   ??01D2 + DESIRED_BASE_EQU
4  5752								 ENDIF
4  5753	000014A4			 ??01D2:
2  5754								 CW	 $NAME_TO_HEAD
3  5755	000014A4  2000146C					 DD	 $NAME_TO_HEAD + DESIRED_BASE_EQU
2  5756								 CW	 $HEAD_FROM
3  5757	000014A8  2000142B					 DD	 $HEAD_FROM + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 102
FKernel.asm



2  5758								 CEXIT
3  5759								 CW	 $EXIT
4  5760	000014AC  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5761
2  5762					 ;  >LINK
2  5763					 ;  D: CFA -- LFA
2  5764								 $COLON	 '>LINK',$TO_LINK
3  5765								 $DEF	 '>LINK',$TO_LINK,$ENTER,
4  5766	000014B0			 ??01D3:
4  5767		  =MAIN:14B0		 LASTWORD		 =	 ??01D3
4  5768								 IFNB	 <>
4  5769								   DB
4  5770								 ELSE
4  5771	000014B0  00						   DB	 VEF_USUAL
4  5772								 ENDIF
4  5773	000014B1  05						 DB	 ??01D4	- $ - 1
4  5774	000014B2  3E 4C	49 4E 4B				 DB	 '>LINK'
4  5775	000014B7			 ??01D4:
4  5776	000014B7  07						 DB	 ??01D4	- ??01D3
4  5777	000014B8  20001494					 DD	 VOC_LINK
4  5778		  =MAIN:200014B0	 VOC_LINK		 =	 ??01D3	+ DESIRED_BASE_EQU
4  5779
4  5780								 IFNB	 <$TO_LINK>
4  5781	000014BC						   LABEL   $TO_LINK FAR
4  5782								 ENDIF
4  5783								 IFNB	 <$ENTER>
4  5784	000014BC  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5785								 ELSE
4  5786								   DD	   ??01D6 + DESIRED_BASE_EQU
4  5787								 ENDIF
4  5788	000014C0			 ??01D6:
2  5789								 CCLIT	 CELL_SIZE
3  5790								 CW	 $LIT
4  5791	000014C0  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  5792								 CC	 CELL_SIZE
4  5793	000014C4  00000004					 DD	 CELL_SIZE
2  5794								 CW	 $SUB
3  5795	000014C8  20001913					 DD	 $SUB +	DESIRED_BASE_EQU
2  5796								 CEXIT
3  5797								 CW	 $EXIT
4  5798	000014CC  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5799
2  5800					 ;  LINK>
2  5801					 ;  D: LFA -- CFA
2  5802								 $COLON	 'LINK>',$LINK_FROM
3  5803								 $DEF	 'LINK>',$LINK_FROM,$ENTER,
4  5804	000014D0			 ??01D7:
4  5805		  =MAIN:14D0		 LASTWORD		 =	 ??01D7
4  5806								 IFNB	 <>
4  5807								   DB
4  5808								 ELSE
4  5809	000014D0  00						   DB	 VEF_USUAL
4  5810								 ENDIF
4  5811	000014D1  05						 DB	 ??01D8	- $ - 1
4  5812	000014D2  4C 49	4E 4B 3E				 DB	 'LINK>'
4  5813	000014D7			 ??01D8:
4  5814	000014D7  07						 DB	 ??01D8	- ??01D7
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 103
FKernel.asm



4  5815	000014D8  200014B0					 DD	 VOC_LINK
4  5816		  =MAIN:200014D0	 VOC_LINK		 =	 ??01D7	+ DESIRED_BASE_EQU
4  5817
4  5818								 IFNB	 <$LINK_FROM>
4  5819	000014DC						   LABEL   $LINK_FROM FAR
4  5820								 ENDIF
4  5821								 IFNB	 <$ENTER>
4  5822	000014DC  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5823								 ELSE
4  5824								   DD	   ??01DA + DESIRED_BASE_EQU
4  5825								 ENDIF
4  5826	000014E0			 ??01DA:
2  5827								 CCLIT	 CELL_SIZE
3  5828								 CW	 $LIT
4  5829	000014E0  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3  5830								 CC	 CELL_SIZE
4  5831	000014E4  00000004					 DD	 CELL_SIZE
2  5832								 CW	 $ADD
3  5833	000014E8  200018FD					 DD	 $ADD +	DESIRED_BASE_EQU
2  5834								 CEXIT
3  5835								 CW	 $EXIT
4  5836	000014EC  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5837
2  5838					 ;  H>NEXT>H
2  5839					 ;  D: h-id -- prev_h-id | 0
2  5840								 $COLON	 'H>NEXT>H',$H_TO_NEXT_TO_H
3  5841								 $DEF	 'H>NEXT>H',$H_TO_NEXT_TO_H,$ENTER,
4  5842	000014F0			 ??01DB:
4  5843		  =MAIN:14F0		 LASTWORD		 =	 ??01DB
4  5844								 IFNB	 <>
4  5845								   DB
4  5846								 ELSE
4  5847	000014F0  00						   DB	 VEF_USUAL
4  5848								 ENDIF
4  5849	000014F1  08						 DB	 ??01DC	- $ - 1
4  5850	000014F2  48 3E	4E 45 58 54 3E+				 DB	 'H>NEXT>H'
   5851		  48
4  5852	000014FA			 ??01DC:
4  5853	000014FA  0A						 DB	 ??01DC	- ??01DB
4  5854	000014FB  200014D0					 DD	 VOC_LINK
4  5855		  =MAIN:200014F0	 VOC_LINK		 =	 ??01DB	+ DESIRED_BASE_EQU
4  5856
4  5857								 IFNB	 <$H_TO_NEXT_TO_H>
4  5858	000014FF						   LABEL   $H_TO_NEXT_TO_H FAR
4  5859								 ENDIF
4  5860								 IFNB	 <$ENTER>
4  5861	000014FF  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5862								 ELSE
4  5863								   DD	   ??01DE + DESIRED_BASE_EQU
4  5864								 ENDIF
4  5865	00001503			 ??01DE:
2  5866								 CW	 $HEAD_FROM
3  5867	00001503  2000142B					 DD	 $HEAD_FROM + DESIRED_BASE_EQU
2  5868								 CW	 $TO_LINK
3  5869	00001507  200014BC					 DD	 $TO_LINK + DESIRED_BASE_EQU
2  5870								 CW	 $FETCH
3  5871	0000150B  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 104
FKernel.asm



2  5872								 CEXIT
3  5873								 CW	 $EXIT
4  5874	0000150F  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5875
2  5876					 ;  H>#NAME
2  5877					 ;  D: h-id -- addr len
2  5878								 $COLON	 'H>#NAME',$H_TO_HASH_NAME
3  5879								 $DEF	 'H>#NAME',$H_TO_HASH_NAME,$ENTER,
4  5880	00001513			 ??01DF:
4  5881		  =MAIN:1513		 LASTWORD		 =	 ??01DF
4  5882								 IFNB	 <>
4  5883								   DB
4  5884								 ELSE
4  5885	00001513  00						   DB	 VEF_USUAL
4  5886								 ENDIF
4  5887	00001514  07						 DB	 ??01E0	- $ - 1
4  5888	00001515  48 3E	23 4E 41 4D 45				 DB	 'H>#NAME'
4  5889	0000151C			 ??01E0:
4  5890	0000151C  09						 DB	 ??01E0	- ??01DF
4  5891	0000151D  200014F0					 DD	 VOC_LINK
4  5892		  =MAIN:20001513	 VOC_LINK		 =	 ??01DF	+ DESIRED_BASE_EQU
4  5893
4  5894								 IFNB	 <$H_TO_HASH_NAME>
4  5895	00001521						   LABEL   $H_TO_HASH_NAME FAR
4  5896								 ENDIF
4  5897								 IFNB	 <$ENTER>
4  5898	00001521  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  5899								 ELSE
4  5900								   DD	   ??01E2 + DESIRED_BASE_EQU
4  5901								 ENDIF
4  5902	00001525			 ??01E2:
2  5903								 CW	 $HEAD_TO_NAME
3  5904	00001525  20001450					 DD	 $HEAD_TO_NAME + DESIRED_BASE_EQU
2  5905								 CW	 $DUP
3  5906	00001529  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  5907								 CW	 $1ADD
3  5908	0000152D  2000192A					 DD	 $1ADD + DESIRED_BASE_EQU
2  5909								 CW	 $SWAP
3  5910	00001531  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  5911								 CW	 $CFETCH
3  5912	00001535  20001CE8					 DD	 $CFETCH + DESIRED_BASE_EQU
2  5913								 CEXIT
3  5914								 CW	 $EXIT
4  5915	00001539  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  5916
2  5917
1  5918								 INCLUDE "stack.inc"
2  5919					 ;******************************************************************************
2  5920					 ;
2  5921					 ;  stack.inc
2  5922					 ;  IKForth
2  5923					 ;
2  5924					 ;  Copyright (C) 1999-2003 Illya Kysil
2  5925					 ;
2  5926					 ;******************************************************************************
2  5927					 ;  Stack manipulation
2  5928					 ;******************************************************************************
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 105
FKernel.asm



2  5929
2  5930					 ;  6.1.0630 ?DUP
2  5931					 ;  Duplicate top stack	cell if	it is not equal	to zero
2  5932					 ;  D: a -- a |	a a
2  5933								 $CODE	 '?DUP',$QDUP
3  5934								 $DEF	 '?DUP',$QDUP,,
4  5935	0000153D			 ??01E3:
4  5936		  =MAIN:153D		 LASTWORD		 =	 ??01E3
4  5937								 IFNB	 <>
4  5938								   DB
4  5939								 ELSE
4  5940	0000153D  00						   DB	 VEF_USUAL
4  5941								 ENDIF
4  5942	0000153E  04						 DB	 ??01E4	- $ - 1
4  5943	0000153F  3F 44	55 50					 DB	 '?DUP'
4  5944	00001543			 ??01E4:
4  5945	00001543  06						 DB	 ??01E4	- ??01E3
4  5946	00001544  20001513					 DD	 VOC_LINK
4  5947		  =MAIN:2000153D	 VOC_LINK		 =	 ??01E3	+ DESIRED_BASE_EQU
4  5948
4  5949								 IFNB	 <$QDUP>
4  5950	00001548						   LABEL   $QDUP FAR
4  5951								 ENDIF
4  5952								 IFNB	 <>
4  5953								   DD	    + DESIRED_BASE_EQU
4  5954								 ELSE
4  5955	00001548  2000154C					   DD	   ??01E6 + DESIRED_BASE_EQU
4  5956								 ENDIF
4  5957	0000154C			 ??01E6:
2  5958								 FETCHDS EAX
3  5959								 IFNB	 <>
3  5960								   MOV	   EAX,[DWORD PTR ESP +	 * CELL_SIZE]
3  5961								 ELSE
3  5962	0000154C  8B 04	24					   MOV	   EAX,[DWORD PTR ESP]
3  5963								 ENDIF
2  5964	0000154F  23 C0						 AND	 EAX,EAX
2  5965	00001551  74 01						 JZ	 SHORT QDUPZERO
2  5966								 PUSHDS	 EAX
3  5967	00001553  50						 PUSH	 EAX
2  5968	00001554			 QDUPZERO:
2  5969								 $NEXT
3  5970	00001554  AD						 LODSD				 ; fetch address
3  5971								 $JMP
4  5972	00001555  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  5973	00001557  FF E3						 JMP	 EBX			 ; execute
2  5974
2  5975					 ;  6.1.0370 2DROP
2  5976					 ;  D: a b --
2  5977								 $CODE	 '2DROP',$2DROP
3  5978								 $DEF	 '2DROP',$2DROP,,
4  5979	00001559			 ??01E7:
4  5980		  =MAIN:1559		 LASTWORD		 =	 ??01E7
4  5981								 IFNB	 <>
4  5982								   DB
4  5983								 ELSE
4  5984	00001559  00						   DB	 VEF_USUAL
4  5985								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 106
FKernel.asm



4  5986	0000155A  05						 DB	 ??01E8	- $ - 1
4  5987	0000155B  32 44	52 4F 50				 DB	 '2DROP'
4  5988	00001560			 ??01E8:
4  5989	00001560  07						 DB	 ??01E8	- ??01E7
4  5990	00001561  2000153D					 DD	 VOC_LINK
4  5991		  =MAIN:20001559	 VOC_LINK		 =	 ??01E7	+ DESIRED_BASE_EQU
4  5992
4  5993								 IFNB	 <$2DROP>
4  5994	00001565						   LABEL   $2DROP FAR
4  5995								 ENDIF
4  5996								 IFNB	 <>
4  5997								   DD	    + DESIRED_BASE_EQU
4  5998								 ELSE
4  5999	00001565  20001569					   DD	   ??01EA + DESIRED_BASE_EQU
4  6000								 ENDIF
4  6001	00001569			 ??01EA:
2  6002								 POPDS	 EAX
3  6003	00001569  58						 POP	 EAX
2  6004								 POPDS	 EAX
3  6005	0000156A  58						 POP	 EAX
2  6006								 $NEXT
3  6007	0000156B  AD						 LODSD				 ; fetch address
3  6008								 $JMP
4  6009	0000156C  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6010	0000156E  FF E3						 JMP	 EBX			 ; execute
2  6011
2  6012					 ;  6.1.0380 2DUP
2  6013					 ;  D: a b -- a	b a b
2  6014								 $CODE	 '2DUP',$2DUP
3  6015								 $DEF	 '2DUP',$2DUP,,
4  6016	00001570			 ??01EB:
4  6017		  =MAIN:1570		 LASTWORD		 =	 ??01EB
4  6018								 IFNB	 <>
4  6019								   DB
4  6020								 ELSE
4  6021	00001570  00						   DB	 VEF_USUAL
4  6022								 ENDIF
4  6023	00001571  04						 DB	 ??01EC	- $ - 1
4  6024	00001572  32 44	55 50					 DB	 '2DUP'
4  6025	00001576			 ??01EC:
4  6026	00001576  06						 DB	 ??01EC	- ??01EB
4  6027	00001577  20001559					 DD	 VOC_LINK
4  6028		  =MAIN:20001570	 VOC_LINK		 =	 ??01EB	+ DESIRED_BASE_EQU
4  6029
4  6030								 IFNB	 <$2DUP>
4  6031	0000157B						   LABEL   $2DUP FAR
4  6032								 ENDIF
4  6033								 IFNB	 <>
4  6034								   DD	    + DESIRED_BASE_EQU
4  6035								 ELSE
4  6036	0000157B  2000157F					   DD	   ??01EE + DESIRED_BASE_EQU
4  6037								 ENDIF
4  6038	0000157F			 ??01EE:
2  6039								 FETCHDS EAX,1
3  6040								 IFNB	 <1>
3  6041	0000157F  8B 44	24 04					   MOV	   EAX,[DWORD PTR ESP +	1 * CELL_SIZE]
3  6042								 ELSE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 107
FKernel.asm



3  6043								   MOV	   EAX,[DWORD PTR ESP]
3  6044								 ENDIF
2  6045								 FETCHDS EBX
3  6046								 IFNB	 <>
3  6047								   MOV	   EBX,[DWORD PTR ESP +	 * CELL_SIZE]
3  6048								 ELSE
3  6049	00001583  8B 1C	24					   MOV	   EBX,[DWORD PTR ESP]
3  6050								 ENDIF
2  6051								 PUSHDS	 EAX
3  6052	00001586  50						 PUSH	 EAX
2  6053								 PUSHDS	 EBX
3  6054	00001587  53						 PUSH	 EBX
2  6055								 $NEXT
3  6056	00001588  AD						 LODSD				 ; fetch address
3  6057								 $JMP
4  6058	00001589  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6059	0000158B  FF E3						 JMP	 EBX			 ; execute
2  6060
2  6061					 ;  6.1.0400 2OVER
2  6062					 ;  D: a b c d -- a b c	d a b
2  6063								 $CODE	 '2OVER',$2OVER
3  6064								 $DEF	 '2OVER',$2OVER,,
4  6065	0000158D			 ??01EF:
4  6066		  =MAIN:158D		 LASTWORD		 =	 ??01EF
4  6067								 IFNB	 <>
4  6068								   DB
4  6069								 ELSE
4  6070	0000158D  00						   DB	 VEF_USUAL
4  6071								 ENDIF
4  6072	0000158E  05						 DB	 ??01F0	- $ - 1
4  6073	0000158F  32 4F	56 45 52				 DB	 '2OVER'
4  6074	00001594			 ??01F0:
4  6075	00001594  07						 DB	 ??01F0	- ??01EF
4  6076	00001595  20001570					 DD	 VOC_LINK
4  6077		  =MAIN:2000158D	 VOC_LINK		 =	 ??01EF	+ DESIRED_BASE_EQU
4  6078
4  6079								 IFNB	 <$2OVER>
4  6080	00001599						   LABEL   $2OVER FAR
4  6081								 ENDIF
4  6082								 IFNB	 <>
4  6083								   DD	    + DESIRED_BASE_EQU
4  6084								 ELSE
4  6085	00001599  2000159D					   DD	   ??01F2 + DESIRED_BASE_EQU
4  6086								 ENDIF
4  6087	0000159D			 ??01F2:
2  6088								 FETCHDS EAX,3
3  6089								 IFNB	 <3>
3  6090	0000159D  8B 44	24 0C					   MOV	   EAX,[DWORD PTR ESP +	3 * CELL_SIZE]
3  6091								 ELSE
3  6092								   MOV	   EAX,[DWORD PTR ESP]
3  6093								 ENDIF
2  6094								 FETCHDS EBX,2
3  6095								 IFNB	 <2>
3  6096	000015A1  8B 5C	24 08					   MOV	   EBX,[DWORD PTR ESP +	2 * CELL_SIZE]
3  6097								 ELSE
3  6098								   MOV	   EBX,[DWORD PTR ESP]
3  6099								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 108
FKernel.asm



2  6100								 PUSHDS	 EAX
3  6101	000015A5  50						 PUSH	 EAX
2  6102								 PUSHDS	 EBX
3  6103	000015A6  53						 PUSH	 EBX
2  6104								 $NEXT
3  6105	000015A7  AD						 LODSD				 ; fetch address
3  6106								 $JMP
4  6107	000015A8  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6108	000015AA  FF E3						 JMP	 EBX			 ; execute
2  6109
2  6110					 ;  6.1.0430 2SWAP
2  6111					 ;  D: a b c d -- c d a	b
2  6112								 $CODE	 '2SWAP',$2SWAP
3  6113								 $DEF	 '2SWAP',$2SWAP,,
4  6114	000015AC			 ??01F3:
4  6115		  =MAIN:15AC		 LASTWORD		 =	 ??01F3
4  6116								 IFNB	 <>
4  6117								   DB
4  6118								 ELSE
4  6119	000015AC  00						   DB	 VEF_USUAL
4  6120								 ENDIF
4  6121	000015AD  05						 DB	 ??01F4	- $ - 1
4  6122	000015AE  32 53	57 41 50				 DB	 '2SWAP'
4  6123	000015B3			 ??01F4:
4  6124	000015B3  07						 DB	 ??01F4	- ??01F3
4  6125	000015B4  2000158D					 DD	 VOC_LINK
4  6126		  =MAIN:200015AC	 VOC_LINK		 =	 ??01F3	+ DESIRED_BASE_EQU
4  6127
4  6128								 IFNB	 <$2SWAP>
4  6129	000015B8						   LABEL   $2SWAP FAR
4  6130								 ENDIF
4  6131								 IFNB	 <>
4  6132								   DD	    + DESIRED_BASE_EQU
4  6133								 ELSE
4  6134	000015B8  200015BC					   DD	   ??01F6 + DESIRED_BASE_EQU
4  6135								 ENDIF
4  6136	000015BC			 ??01F6:
2  6137								 POPDS	 EDX
3  6138	000015BC  5A						 POP	 EDX
2  6139								 POPDS	 ECX
3  6140	000015BD  59						 POP	 ECX
2  6141								 POPDS	 EBX
3  6142	000015BE  5B						 POP	 EBX
2  6143								 POPDS	 EAX
3  6144	000015BF  58						 POP	 EAX
2  6145								 PUSHDS	 ECX
3  6146	000015C0  51						 PUSH	 ECX
2  6147								 PUSHDS	 EDX
3  6148	000015C1  52						 PUSH	 EDX
2  6149								 PUSHDS	 EAX
3  6150	000015C2  50						 PUSH	 EAX
2  6151								 PUSHDS	 EBX
3  6152	000015C3  53						 PUSH	 EBX
2  6153								 $NEXT
3  6154	000015C4  AD						 LODSD				 ; fetch address
3  6155								 $JMP
4  6156	000015C5  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 109
FKernel.asm



4  6157	000015C7  FF E3						 JMP	 EBX			 ; execute
2  6158
2  6159
2  6160					 ;  6.1.1260 DROP
2  6161					 ;  Remove top cell from the stack
2  6162					 ;  D: a --
2  6163								 $CODE	 'DROP',$DROP
3  6164								 $DEF	 'DROP',$DROP,,
4  6165	000015C9			 ??01F7:
4  6166		  =MAIN:15C9		 LASTWORD		 =	 ??01F7
4  6167								 IFNB	 <>
4  6168								   DB
4  6169								 ELSE
4  6170	000015C9  00						   DB	 VEF_USUAL
4  6171								 ENDIF
4  6172	000015CA  04						 DB	 ??01F8	- $ - 1
4  6173	000015CB  44 52	4F 50					 DB	 'DROP'
4  6174	000015CF			 ??01F8:
4  6175	000015CF  06						 DB	 ??01F8	- ??01F7
4  6176	000015D0  200015AC					 DD	 VOC_LINK
4  6177		  =MAIN:200015C9	 VOC_LINK		 =	 ??01F7	+ DESIRED_BASE_EQU
4  6178
4  6179								 IFNB	 <$DROP>
4  6180	000015D4						   LABEL   $DROP FAR
4  6181								 ENDIF
4  6182								 IFNB	 <>
4  6183								   DD	    + DESIRED_BASE_EQU
4  6184								 ELSE
4  6185	000015D4  200015D8					   DD	   ??01FA + DESIRED_BASE_EQU
4  6186								 ENDIF
4  6187	000015D8			 ??01FA:
2  6188								 POPDS	 EAX
3  6189	000015D8  58						 POP	 EAX
2  6190								 $NEXT
3  6191	000015D9  AD						 LODSD				 ; fetch address
3  6192								 $JMP
4  6193	000015DA  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6194	000015DC  FF E3						 JMP	 EBX			 ; execute
2  6195
2  6196					 ;  6.1.1290 DUP
2  6197					 ;  D: a -- a a
2  6198								 $CODE	 'DUP',$DUP
3  6199								 $DEF	 'DUP',$DUP,,
4  6200	000015DE			 ??01FB:
4  6201		  =MAIN:15DE		 LASTWORD		 =	 ??01FB
4  6202								 IFNB	 <>
4  6203								   DB
4  6204								 ELSE
4  6205	000015DE  00						   DB	 VEF_USUAL
4  6206								 ENDIF
4  6207	000015DF  03						 DB	 ??01FC	- $ - 1
4  6208	000015E0  44 55	50					 DB	 'DUP'
4  6209	000015E3			 ??01FC:
4  6210	000015E3  05						 DB	 ??01FC	- ??01FB
4  6211	000015E4  200015C9					 DD	 VOC_LINK
4  6212		  =MAIN:200015DE	 VOC_LINK		 =	 ??01FB	+ DESIRED_BASE_EQU
4  6213
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 110
FKernel.asm



4  6214								 IFNB	 <$DUP>
4  6215	000015E8						   LABEL   $DUP	FAR
4  6216								 ENDIF
4  6217								 IFNB	 <>
4  6218								   DD	    + DESIRED_BASE_EQU
4  6219								 ELSE
4  6220	000015E8  200015EC					   DD	   ??01FE + DESIRED_BASE_EQU
4  6221								 ENDIF
4  6222	000015EC			 ??01FE:
2  6223								 FETCHDS EAX
3  6224								 IFNB	 <>
3  6225								   MOV	   EAX,[DWORD PTR ESP +	 * CELL_SIZE]
3  6226								 ELSE
3  6227	000015EC  8B 04	24					   MOV	   EAX,[DWORD PTR ESP]
3  6228								 ENDIF
2  6229								 PUSHDS	 EAX
3  6230	000015EF  50						 PUSH	 EAX
2  6231								 $NEXT
3  6232	000015F0  AD						 LODSD				 ; fetch address
3  6233								 $JMP
4  6234	000015F1  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6235	000015F3  FF E3						 JMP	 EBX			 ; execute
2  6236
2  6237					 ;  6.2.1930 NIP
2  6238					 ;  Drop the first item	below the top of stack.
2  6239					 ;  D: x1 x2 --	x2
2  6240								 $CODE	 'NIP',$NIP
3  6241								 $DEF	 'NIP',$NIP,,
4  6242	000015F5			 ??01FF:
4  6243		  =MAIN:15F5		 LASTWORD		 =	 ??01FF
4  6244								 IFNB	 <>
4  6245								   DB
4  6246								 ELSE
4  6247	000015F5  00						   DB	 VEF_USUAL
4  6248								 ENDIF
4  6249	000015F6  03						 DB	 ??0200	- $ - 1
4  6250	000015F7  4E 49	50					 DB	 'NIP'
4  6251	000015FA			 ??0200:
4  6252	000015FA  05						 DB	 ??0200	- ??01FF
4  6253	000015FB  200015DE					 DD	 VOC_LINK
4  6254		  =MAIN:200015F5	 VOC_LINK		 =	 ??01FF	+ DESIRED_BASE_EQU
4  6255
4  6256								 IFNB	 <$NIP>
4  6257	000015FF						   LABEL   $NIP	FAR
4  6258								 ENDIF
4  6259								 IFNB	 <>
4  6260								   DD	    + DESIRED_BASE_EQU
4  6261								 ELSE
4  6262	000015FF  20001603					   DD	   ??0202 + DESIRED_BASE_EQU
4  6263								 ENDIF
4  6264	00001603			 ??0202:
2  6265								 POPDS	 EAX
3  6266	00001603  58						 POP	 EAX
2  6267								 POPDS	 EBX
3  6268	00001604  5B						 POP	 EBX
2  6269								 PUSHDS	 EAX
3  6270	00001605  50						 PUSH	 EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 111
FKernel.asm



2  6271								 $NEXT
3  6272	00001606  AD						 LODSD				 ; fetch address
3  6273								 $JMP
4  6274	00001607  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6275	00001609  FF E3						 JMP	 EBX			 ; execute
2  6276
2  6277					 ;  6.1.1990 OVER
2  6278					 ;  D: a b -- a	b a
2  6279								 $CODE	 'OVER',$OVER
3  6280								 $DEF	 'OVER',$OVER,,
4  6281	0000160B			 ??0203:
4  6282		  =MAIN:160B		 LASTWORD		 =	 ??0203
4  6283								 IFNB	 <>
4  6284								   DB
4  6285								 ELSE
4  6286	0000160B  00						   DB	 VEF_USUAL
4  6287								 ENDIF
4  6288	0000160C  04						 DB	 ??0204	- $ - 1
4  6289	0000160D  4F 56	45 52					 DB	 'OVER'
4  6290	00001611			 ??0204:
4  6291	00001611  06						 DB	 ??0204	- ??0203
4  6292	00001612  200015F5					 DD	 VOC_LINK
4  6293		  =MAIN:2000160B	 VOC_LINK		 =	 ??0203	+ DESIRED_BASE_EQU
4  6294
4  6295								 IFNB	 <$OVER>
4  6296	00001616						   LABEL   $OVER FAR
4  6297								 ENDIF
4  6298								 IFNB	 <>
4  6299								   DD	    + DESIRED_BASE_EQU
4  6300								 ELSE
4  6301	00001616  2000161A					   DD	   ??0206 + DESIRED_BASE_EQU
4  6302								 ENDIF
4  6303	0000161A			 ??0206:
2  6304								 FETCHDS EAX,1
3  6305								 IFNB	 <1>
3  6306	0000161A  8B 44	24 04					   MOV	   EAX,[DWORD PTR ESP +	1 * CELL_SIZE]
3  6307								 ELSE
3  6308								   MOV	   EAX,[DWORD PTR ESP]
3  6309								 ENDIF
2  6310								 PUSHDS	 EAX
3  6311	0000161E  50						 PUSH	 EAX
2  6312								 $NEXT
3  6313	0000161F  AD						 LODSD				 ; fetch address
3  6314								 $JMP
4  6315	00001620  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6316	00001622  FF E3						 JMP	 EBX			 ; execute
2  6317
2  6318					 ;  6.1.2160 ROT
2  6319					 ;  D: a b c --	b c a
2  6320								 $CODE	 'ROT',$ROT
3  6321								 $DEF	 'ROT',$ROT,,
4  6322	00001624			 ??0207:
4  6323		  =MAIN:1624		 LASTWORD		 =	 ??0207
4  6324								 IFNB	 <>
4  6325								   DB
4  6326								 ELSE
4  6327	00001624  00						   DB	 VEF_USUAL
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 112
FKernel.asm



4  6328								 ENDIF
4  6329	00001625  03						 DB	 ??0208	- $ - 1
4  6330	00001626  52 4F	54					 DB	 'ROT'
4  6331	00001629			 ??0208:
4  6332	00001629  05						 DB	 ??0208	- ??0207
4  6333	0000162A  2000160B					 DD	 VOC_LINK
4  6334		  =MAIN:20001624	 VOC_LINK		 =	 ??0207	+ DESIRED_BASE_EQU
4  6335
4  6336								 IFNB	 <$ROT>
4  6337	0000162E						   LABEL   $ROT	FAR
4  6338								 ENDIF
4  6339								 IFNB	 <>
4  6340								   DD	    + DESIRED_BASE_EQU
4  6341								 ELSE
4  6342	0000162E  20001632					   DD	   ??020A + DESIRED_BASE_EQU
4  6343								 ENDIF
4  6344	00001632			 ??020A:
2  6345								 POPDS	 ECX
3  6346	00001632  59						 POP	 ECX
2  6347								 POPDS	 EBX
3  6348	00001633  5B						 POP	 EBX
2  6349								 POPDS	 EAX
3  6350	00001634  58						 POP	 EAX
2  6351								 PUSHDS	 EBX
3  6352	00001635  53						 PUSH	 EBX
2  6353								 PUSHDS	 ECX
3  6354	00001636  51						 PUSH	 ECX
2  6355								 PUSHDS	 EAX
3  6356	00001637  50						 PUSH	 EAX
2  6357								 $NEXT
3  6358	00001638  AD						 LODSD				 ; fetch address
3  6359								 $JMP
4  6360	00001639  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6361	0000163B  FF E3						 JMP	 EBX			 ; execute
2  6362
2  6363					 ;  8.6.2.0420 2ROT
2  6364					 ;  D: a1 a2 b1	b2 c1 c2 -- b1 b2 c1 c2	a1 a2
2  6365								 $CODE	 '2ROT',$2ROT
3  6366								 $DEF	 '2ROT',$2ROT,,
4  6367	0000163D			 ??020B:
4  6368		  =MAIN:163D		 LASTWORD		 =	 ??020B
4  6369								 IFNB	 <>
4  6370								   DB
4  6371								 ELSE
4  6372	0000163D  00						   DB	 VEF_USUAL
4  6373								 ENDIF
4  6374	0000163E  04						 DB	 ??020C	- $ - 1
4  6375	0000163F  32 52	4F 54					 DB	 '2ROT'
4  6376	00001643			 ??020C:
4  6377	00001643  06						 DB	 ??020C	- ??020B
4  6378	00001644  20001624					 DD	 VOC_LINK
4  6379		  =MAIN:2000163D	 VOC_LINK		 =	 ??020B	+ DESIRED_BASE_EQU
4  6380
4  6381								 IFNB	 <$2ROT>
4  6382	00001648						   LABEL   $2ROT FAR
4  6383								 ENDIF
4  6384								 IFNB	 <>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 113
FKernel.asm



4  6385								   DD	    + DESIRED_BASE_EQU
4  6386								 ELSE
4  6387	00001648  2000164C					   DD	   ??020E + DESIRED_BASE_EQU
4  6388								 ENDIF
4  6389	0000164C			 ??020E:
2  6390								 PUSHRS	 EDI
3  6391	0000164C  83 ED	04					 SUB	 EBP,CELL_SIZE
3  6392	0000164F  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2  6393								 PUSHRS	 ESI
3  6394	00001652  83 ED	04					 SUB	 EBP,CELL_SIZE
3  6395	00001655  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  6396								 POPDS	 EDX	 \ c2
3  6397	00001658  5A						 POP	 EDX
2  6398								 POPDS	 ECX	 \ c1
3  6399	00001659  59						 POP	 ECX
2  6400								 POPDS	 EBX	 \ b2
3  6401	0000165A  5B						 POP	 EBX
2  6402								 POPDS	 EAX	 \ b1
3  6403	0000165B  58						 POP	 EAX
2  6404								 POPDS	 EDI	 \ a2
3  6405	0000165C  5F						 POP	 EDI
2  6406								 POPDS	 ESI	 \ a1
3  6407	0000165D  5E						 POP	 ESI
2  6408								 PUSHDS	 EAX
3  6409	0000165E  50						 PUSH	 EAX
2  6410								 PUSHDS	 EBX
3  6411	0000165F  53						 PUSH	 EBX
2  6412								 PUSHDS	 ECX
3  6413	00001660  51						 PUSH	 ECX
2  6414								 PUSHDS	 EDX
3  6415	00001661  52						 PUSH	 EDX
2  6416								 PUSHDS	 ESI
3  6417	00001662  56						 PUSH	 ESI
2  6418								 PUSHDS	 EDI
3  6419	00001663  57						 PUSH	 EDI
2  6420								 POPRS	 ESI
3  6421	00001664  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  6422	00001667  83 C5	04					 ADD	 EBP,CELL_SIZE
2  6423								 POPRS	 EDI
3  6424	0000166A  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  6425	0000166D  83 C5	04					 ADD	 EBP,CELL_SIZE
2  6426								 $NEXT
3  6427	00001670  AD						 LODSD				 ; fetch address
3  6428								 $JMP
4  6429	00001671  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6430	00001673  FF E3						 JMP	 EBX			 ; execute
2  6431
2  6432					 ;  -ROT
2  6433					 ;  D: a b c --	c a b
2  6434								 $CODE	 '-ROT',$MROT
3  6435								 $DEF	 '-ROT',$MROT,,
4  6436	00001675			 ??020F:
4  6437		  =MAIN:1675		 LASTWORD		 =	 ??020F
4  6438								 IFNB	 <>
4  6439								   DB
4  6440								 ELSE
4  6441	00001675  00						   DB	 VEF_USUAL
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 114
FKernel.asm



4  6442								 ENDIF
4  6443	00001676  04						 DB	 ??0210	- $ - 1
4  6444	00001677  2D 52	4F 54					 DB	 '-ROT'
4  6445	0000167B			 ??0210:
4  6446	0000167B  06						 DB	 ??0210	- ??020F
4  6447	0000167C  2000163D					 DD	 VOC_LINK
4  6448		  =MAIN:20001675	 VOC_LINK		 =	 ??020F	+ DESIRED_BASE_EQU
4  6449
4  6450								 IFNB	 <$MROT>
4  6451	00001680						   LABEL   $MROT FAR
4  6452								 ENDIF
4  6453								 IFNB	 <>
4  6454								   DD	    + DESIRED_BASE_EQU
4  6455								 ELSE
4  6456	00001680  20001684					   DD	   ??0212 + DESIRED_BASE_EQU
4  6457								 ENDIF
4  6458	00001684			 ??0212:
2  6459								 POPDS	 ECX
3  6460	00001684  59						 POP	 ECX
2  6461								 POPDS	 EBX
3  6462	00001685  5B						 POP	 EBX
2  6463								 POPDS	 EAX
3  6464	00001686  58						 POP	 EAX
2  6465								 PUSHDS	 ECX
3  6466	00001687  51						 PUSH	 ECX
2  6467								 PUSHDS	 EAX
3  6468	00001688  50						 PUSH	 EAX
2  6469								 PUSHDS	 EBX
3  6470	00001689  53						 PUSH	 EBX
2  6471								 $NEXT
3  6472	0000168A  AD						 LODSD				 ; fetch address
3  6473								 $JMP
4  6474	0000168B  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6475	0000168D  FF E3						 JMP	 EBX			 ; execute
2  6476
2  6477					 ;  6.1.2260 SWAP
2  6478					 ;  D: a b -- b	a
2  6479								 $CODE	 'SWAP',$SWAP
3  6480								 $DEF	 'SWAP',$SWAP,,
4  6481	0000168F			 ??0213:
4  6482		  =MAIN:168F		 LASTWORD		 =	 ??0213
4  6483								 IFNB	 <>
4  6484								   DB
4  6485								 ELSE
4  6486	0000168F  00						   DB	 VEF_USUAL
4  6487								 ENDIF
4  6488	00001690  04						 DB	 ??0214	- $ - 1
4  6489	00001691  53 57	41 50					 DB	 'SWAP'
4  6490	00001695			 ??0214:
4  6491	00001695  06						 DB	 ??0214	- ??0213
4  6492	00001696  20001675					 DD	 VOC_LINK
4  6493		  =MAIN:2000168F	 VOC_LINK		 =	 ??0213	+ DESIRED_BASE_EQU
4  6494
4  6495								 IFNB	 <$SWAP>
4  6496	0000169A						   LABEL   $SWAP FAR
4  6497								 ENDIF
4  6498								 IFNB	 <>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 115
FKernel.asm



4  6499								   DD	    + DESIRED_BASE_EQU
4  6500								 ELSE
4  6501	0000169A  2000169E					   DD	   ??0216 + DESIRED_BASE_EQU
4  6502								 ENDIF
4  6503	0000169E			 ??0216:
2  6504								 POPDS	 EAX
3  6505	0000169E  58						 POP	 EAX
2  6506								 POPDS	 EBX
3  6507	0000169F  5B						 POP	 EBX
2  6508								 PUSHDS	 EAX
3  6509	000016A0  50						 PUSH	 EAX
2  6510								 PUSHDS	 EBX
3  6511	000016A1  53						 PUSH	 EBX
2  6512								 $NEXT
3  6513	000016A2  AD						 LODSD				 ; fetch address
3  6514								 $JMP
4  6515	000016A3  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6516	000016A5  FF E3						 JMP	 EBX			 ; execute
2  6517
2  6518					 ;  6.2.2030 PICK
2  6519					 ;  D: xu ... x1 x0 u -- xu ...	x1 x0 xu
2  6520					 ;  Remove u. Copy the xu to the top of	the stack. An ambiguous	condition exists
2  6521					 ;  if there are less than u+2 items on	the stack before PICK is executed.
2  6522								 $CODE	 'PICK',$PICK
3  6523								 $DEF	 'PICK',$PICK,,
4  6524	000016A7			 ??0217:
4  6525		  =MAIN:16A7		 LASTWORD		 =	 ??0217
4  6526								 IFNB	 <>
4  6527								   DB
4  6528								 ELSE
4  6529	000016A7  00						   DB	 VEF_USUAL
4  6530								 ENDIF
4  6531	000016A8  04						 DB	 ??0218	- $ - 1
4  6532	000016A9  50 49	43 4B					 DB	 'PICK'
4  6533	000016AD			 ??0218:
4  6534	000016AD  06						 DB	 ??0218	- ??0217
4  6535	000016AE  2000168F					 DD	 VOC_LINK
4  6536		  =MAIN:200016A7	 VOC_LINK		 =	 ??0217	+ DESIRED_BASE_EQU
4  6537
4  6538								 IFNB	 <$PICK>
4  6539	000016B2						   LABEL   $PICK FAR
4  6540								 ENDIF
4  6541								 IFNB	 <>
4  6542								   DD	    + DESIRED_BASE_EQU
4  6543								 ELSE
4  6544	000016B2  200016B6					   DD	   ??021A + DESIRED_BASE_EQU
4  6545								 ENDIF
4  6546	000016B6			 ??021A:
2  6547								 POPDS	 EBX
3  6548	000016B6  5B						 POP	 EBX
2  6549								 FETCHDS EAX,EBX
3  6550								 IFNB	 <EBX>
3  6551	000016B7  8B 04	9C					   MOV	   EAX,[DWORD PTR ESP +	EBX * CELL_SIZE]
3  6552								 ELSE
3  6553								   MOV	   EAX,[DWORD PTR ESP]
3  6554								 ENDIF
2  6555								 PUSHDS	 EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 116
FKernel.asm



3  6556	000016BA  50						 PUSH	 EAX
2  6557								 $NEXT
3  6558	000016BB  AD						 LODSD				 ; fetch address
3  6559								 $JMP
4  6560	000016BC  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6561	000016BE  FF E3						 JMP	 EBX			 ; execute
2  6562
2  6563					 ;  6.2.2300 TUCK
2  6564					 ;  D: x1 x2 --	x2 x1 x2
2  6565					 ;  Copy the first (top) stack item below the second stack item.
2  6566								 $CODE	 'TUCK',$TUCK
3  6567								 $DEF	 'TUCK',$TUCK,,
4  6568	000016C0			 ??021B:
4  6569		  =MAIN:16C0		 LASTWORD		 =	 ??021B
4  6570								 IFNB	 <>
4  6571								   DB
4  6572								 ELSE
4  6573	000016C0  00						   DB	 VEF_USUAL
4  6574								 ENDIF
4  6575	000016C1  04						 DB	 ??021C	- $ - 1
4  6576	000016C2  54 55	43 4B					 DB	 'TUCK'
4  6577	000016C6			 ??021C:
4  6578	000016C6  06						 DB	 ??021C	- ??021B
4  6579	000016C7  200016A7					 DD	 VOC_LINK
4  6580		  =MAIN:200016C0	 VOC_LINK		 =	 ??021B	+ DESIRED_BASE_EQU
4  6581
4  6582								 IFNB	 <$TUCK>
4  6583	000016CB						   LABEL   $TUCK FAR
4  6584								 ENDIF
4  6585								 IFNB	 <>
4  6586								   DD	    + DESIRED_BASE_EQU
4  6587								 ELSE
4  6588	000016CB  200016CF					   DD	   ??021E + DESIRED_BASE_EQU
4  6589								 ENDIF
4  6590	000016CF			 ??021E:
2  6591								 POPDS	 EAX
3  6592	000016CF  58						 POP	 EAX
2  6593								 POPDS	 EBX
3  6594	000016D0  5B						 POP	 EBX
2  6595								 PUSHDS	 EAX
3  6596	000016D1  50						 PUSH	 EAX
2  6597								 PUSHDS	 EBX
3  6598	000016D2  53						 PUSH	 EBX
2  6599								 PUSHDS	 EAX
3  6600	000016D3  50						 PUSH	 EAX
2  6601								 $NEXT
3  6602	000016D4  AD						 LODSD				 ; fetch address
3  6603								 $JMP
4  6604	000016D5  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6605	000016D7  FF E3						 JMP	 EBX			 ; execute
2  6606
2  6607					 ;  DS-SIZE
2  6608								 $CONST	 'DS-SIZE'
3  6609								 $DEF	 'DS-SIZE',,$DOCONST
4  6610	000016D9			 ??021F:
4  6611		  =MAIN:16D9		 LASTWORD		 =	 ??021F
4  6612								 IFNB	 <>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 117
FKernel.asm



4  6613								   DB
4  6614								 ELSE
4  6615	000016D9  00						   DB	 VEF_USUAL
4  6616								 ENDIF
4  6617	000016DA  07						 DB	 ??0220	- $ - 1
4  6618	000016DB  44 53	2D 53 49 5A 45				 DB	 'DS-SIZE'
4  6619	000016E2			 ??0220:
4  6620	000016E2  09						 DB	 ??0220	- ??021F
4  6621	000016E3  200016C0					 DD	 VOC_LINK
4  6622		  =MAIN:200016D9	 VOC_LINK		 =	 ??021F	+ DESIRED_BASE_EQU
4  6623
4  6624								 IFNB	 <>
4  6625								   LABEL    FAR
4  6626								 ENDIF
4  6627								 IFNB	 <$DOCONST>
4  6628	000016E7  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  6629								 ELSE
4  6630								   DD	   ??0222 + DESIRED_BASE_EQU
4  6631								 ENDIF
4  6632	000016EB			 ??0222:
2  6633								 CC	 DATA_STACK_SIZE
3  6634	000016EB  00004000					 DD	 DATA_STACK_SIZE
2  6635
2  6636					 ;  SP0
2  6637								 $CODE	 'SP0',$SP0
3  6638								 $DEF	 'SP0',$SP0,,
4  6639	000016EF			 ??0223:
4  6640		  =MAIN:16EF		 LASTWORD		 =	 ??0223
4  6641								 IFNB	 <>
4  6642								   DB
4  6643								 ELSE
4  6644	000016EF  00						   DB	 VEF_USUAL
4  6645								 ENDIF
4  6646	000016F0  03						 DB	 ??0224	- $ - 1
4  6647	000016F1  53 50	30					 DB	 'SP0'
4  6648	000016F4			 ??0224:
4  6649	000016F4  05						 DB	 ??0224	- ??0223
4  6650	000016F5  200016D9					 DD	 VOC_LINK
4  6651		  =MAIN:200016EF	 VOC_LINK		 =	 ??0223	+ DESIRED_BASE_EQU
4  6652
4  6653								 IFNB	 <$SP0>
4  6654	000016F9						   LABEL   $SP0	FAR
4  6655								 ENDIF
4  6656								 IFNB	 <>
4  6657								   DD	    + DESIRED_BASE_EQU
4  6658								 ELSE
4  6659	000016F9  200016FD					   DD	   ??0226 + DESIRED_BASE_EQU
4  6660								 ENDIF
4  6661	000016FD			 ??0226:
2  6662								 PUSHDS	 <[DWORD PTR EDI + ESP_VAR]>
3  6663	000016FD  FF 77	14					 PUSH	 [DWORD	PTR EDI	+ ESP_VAR]
2  6664								 $NEXT
3  6665	00001700  AD						 LODSD				 ; fetch address
3  6666								 $JMP
4  6667	00001701  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6668	00001703  FF E3						 JMP	 EBX			 ; execute
2  6669
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 118
FKernel.asm



2  6670					 ;  SP@
2  6671								 $CODE	 'SP@',$SPFETCH
3  6672								 $DEF	 'SP@',$SPFETCH,,
4  6673	00001705			 ??0227:
4  6674		  =MAIN:1705		 LASTWORD		 =	 ??0227
4  6675								 IFNB	 <>
4  6676								   DB
4  6677								 ELSE
4  6678	00001705  00						   DB	 VEF_USUAL
4  6679								 ENDIF
4  6680	00001706  03						 DB	 ??0228	- $ - 1
4  6681	00001707  53 50	40					 DB	 'SP@'
4  6682	0000170A			 ??0228:
4  6683	0000170A  05						 DB	 ??0228	- ??0227
4  6684	0000170B  200016EF					 DD	 VOC_LINK
4  6685		  =MAIN:20001705	 VOC_LINK		 =	 ??0227	+ DESIRED_BASE_EQU
4  6686
4  6687								 IFNB	 <$SPFETCH>
4  6688	0000170F						   LABEL   $SPFETCH FAR
4  6689								 ENDIF
4  6690								 IFNB	 <>
4  6691								   DD	    + DESIRED_BASE_EQU
4  6692								 ELSE
4  6693	0000170F  20001713					   DD	   ??022A + DESIRED_BASE_EQU
4  6694								 ENDIF
4  6695	00001713			 ??022A:
2  6696	00001713  8B C4						 MOV	 EAX,ESP
2  6697								 PUSHDS	 EAX
3  6698	00001715  50						 PUSH	 EAX
2  6699								 $NEXT
3  6700	00001716  AD						 LODSD				 ; fetch address
3  6701								 $JMP
4  6702	00001717  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6703	00001719  FF E3						 JMP	 EBX			 ; execute
2  6704
2  6705					 ;  SP!
2  6706								 $CODE	 'SP!',$SPSTORE
3  6707								 $DEF	 'SP!',$SPSTORE,,
4  6708	0000171B			 ??022B:
4  6709		  =MAIN:171B		 LASTWORD		 =	 ??022B
4  6710								 IFNB	 <>
4  6711								   DB
4  6712								 ELSE
4  6713	0000171B  00						   DB	 VEF_USUAL
4  6714								 ENDIF
4  6715	0000171C  03						 DB	 ??022C	- $ - 1
4  6716	0000171D  53 50	21					 DB	 'SP!'
4  6717	00001720			 ??022C:
4  6718	00001720  05						 DB	 ??022C	- ??022B
4  6719	00001721  20001705					 DD	 VOC_LINK
4  6720		  =MAIN:2000171B	 VOC_LINK		 =	 ??022B	+ DESIRED_BASE_EQU
4  6721
4  6722								 IFNB	 <$SPSTORE>
4  6723	00001725						   LABEL   $SPSTORE FAR
4  6724								 ENDIF
4  6725								 IFNB	 <>
4  6726								   DD	    + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 119
FKernel.asm



4  6727								 ELSE
4  6728	00001725  20001729					   DD	   ??022E + DESIRED_BASE_EQU
4  6729								 ENDIF
4  6730	00001729			 ??022E:
2  6731								 POPDS	 EAX
3  6732	00001729  58						 POP	 EAX
2  6733	0000172A  8B E0						 MOV	 ESP,EAX
2  6734								 $NEXT
3  6735	0000172C  AD						 LODSD				 ; fetch address
3  6736								 $JMP
4  6737	0000172D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6738	0000172F  FF E3						 JMP	 EBX			 ; execute
2  6739
2  6740
1  6741								 INCLUDE "rstack.inc"
2  6742					 ;******************************************************************************
2  6743					 ;
2  6744					 ;  rstack.inc
2  6745					 ;  IKForth
2  6746					 ;
2  6747					 ;  Copyright (C) 1999-2003 Illya Kysil
2  6748					 ;
2  6749					 ;******************************************************************************
2  6750					 ;  Return stack manipulation
2  6751					 ;******************************************************************************
2  6752
2  6753					 ;  6.1.0580 >R
2  6754					 ;  Move value from the	data stack to return stack
2  6755					 ;  D: a --
2  6756					 ;  R:	 -- a
2  6757								 $CODE	 '>R',$TOR,VEF_COMPILE_ONLY
3  6758								 $DEF	 '>R',$TOR,,VEF_COMPILE_ONLY
4  6759	00001731			 ??022F:
4  6760		  =MAIN:1731		 LASTWORD		 =	 ??022F
4  6761								 IFNB	 <VEF_COMPILE_ONLY>
4  6762	00001731  04						   DB	 VEF_COMPILE_ONLY
4  6763								 ELSE
4  6764								   DB	 VEF_USUAL
4  6765								 ENDIF
4  6766	00001732  02						 DB	 ??0230	- $ - 1
4  6767	00001733  3E 52						 DB	 '>R'
4  6768	00001735			 ??0230:
4  6769	00001735  04						 DB	 ??0230	- ??022F
4  6770	00001736  2000171B					 DD	 VOC_LINK
4  6771		  =MAIN:20001731	 VOC_LINK		 =	 ??022F	+ DESIRED_BASE_EQU
4  6772
4  6773								 IFNB	 <$TOR>
4  6774	0000173A						   LABEL   $TOR	FAR
4  6775								 ENDIF
4  6776								 IFNB	 <>
4  6777								   DD	    + DESIRED_BASE_EQU
4  6778								 ELSE
4  6779	0000173A  2000173E					   DD	   ??0232 + DESIRED_BASE_EQU
4  6780								 ENDIF
4  6781	0000173E			 ??0232:
2  6782								 POPDS	 EAX
3  6783	0000173E  58						 POP	 EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 120
FKernel.asm



2  6784								 PUSHRS	 EAX
3  6785	0000173F  83 ED	04					 SUB	 EBP,CELL_SIZE
3  6786	00001742  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  6787								 $NEXT
3  6788	00001745  AD						 LODSD				 ; fetch address
3  6789								 $JMP
4  6790	00001746  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6791	00001748  FF E3						 JMP	 EBX			 ; execute
2  6792
2  6793					 ;  6.1.2060 R>
2  6794					 ;  Interpretation: Interpretation semantics for this word are undefined.
2  6795					 ;  Execution: ( -- x )	( R:  x	-- )
2  6796					 ;    Move x from the return stack to the data stack.
2  6797								 $CODE	 'R>',$RFROM,VEF_COMPILE_ONLY
3  6798								 $DEF	 'R>',$RFROM,,VEF_COMPILE_ONLY
4  6799	0000174A			 ??0233:
4  6800		  =MAIN:174A		 LASTWORD		 =	 ??0233
4  6801								 IFNB	 <VEF_COMPILE_ONLY>
4  6802	0000174A  04						   DB	 VEF_COMPILE_ONLY
4  6803								 ELSE
4  6804								   DB	 VEF_USUAL
4  6805								 ENDIF
4  6806	0000174B  02						 DB	 ??0234	- $ - 1
4  6807	0000174C  52 3E						 DB	 'R>'
4  6808	0000174E			 ??0234:
4  6809	0000174E  04						 DB	 ??0234	- ??0233
4  6810	0000174F  20001731					 DD	 VOC_LINK
4  6811		  =MAIN:2000174A	 VOC_LINK		 =	 ??0233	+ DESIRED_BASE_EQU
4  6812
4  6813								 IFNB	 <$RFROM>
4  6814	00001753						   LABEL   $RFROM FAR
4  6815								 ENDIF
4  6816								 IFNB	 <>
4  6817								   DD	    + DESIRED_BASE_EQU
4  6818								 ELSE
4  6819	00001753  20001757					   DD	   ??0236 + DESIRED_BASE_EQU
4  6820								 ENDIF
4  6821	00001757			 ??0236:
2  6822								 POPRS	 EAX
3  6823	00001757  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3  6824	0000175A  83 C5	04					 ADD	 EBP,CELL_SIZE
2  6825								 PUSHDS	 EAX
3  6826	0000175D  50						 PUSH	 EAX
2  6827								 $NEXT
3  6828	0000175E  AD						 LODSD				 ; fetch address
3  6829								 $JMP
4  6830	0000175F  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6831	00001761  FF E3						 JMP	 EBX			 ; execute
2  6832
2  6833					 ;  6.1.2070 R@
2  6834					 ;  Copy value from the	return stack to	data stack
2  6835					 ;  R: a -- a
2  6836					 ;  D:	 -- a
2  6837								 $CODE	 'R@',$RFETCH
3  6838								 $DEF	 'R@',$RFETCH,,
4  6839	00001763			 ??0237:
4  6840		  =MAIN:1763		 LASTWORD		 =	 ??0237
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 121
FKernel.asm



4  6841								 IFNB	 <>
4  6842								   DB
4  6843								 ELSE
4  6844	00001763  00						   DB	 VEF_USUAL
4  6845								 ENDIF
4  6846	00001764  02						 DB	 ??0238	- $ - 1
4  6847	00001765  52 40						 DB	 'R@'
4  6848	00001767			 ??0238:
4  6849	00001767  04						 DB	 ??0238	- ??0237
4  6850	00001768  2000174A					 DD	 VOC_LINK
4  6851		  =MAIN:20001763	 VOC_LINK		 =	 ??0237	+ DESIRED_BASE_EQU
4  6852
4  6853								 IFNB	 <$RFETCH>
4  6854	0000176C						   LABEL   $RFETCH FAR
4  6855								 ENDIF
4  6856								 IFNB	 <>
4  6857								   DD	    + DESIRED_BASE_EQU
4  6858								 ELSE
4  6859	0000176C  20001770					   DD	   ??023A + DESIRED_BASE_EQU
4  6860								 ENDIF
4  6861	00001770			 ??023A:
2  6862								 FETCHRS EAX
3  6863								 IFNB	 <>
3  6864								   MOV	   EAX,[DWORD PTR EBP +	 * CELL_SIZE]
3  6865								 ELSE
3  6866	00001770  8B 45	00					   MOV	   EAX,[DWORD PTR EBP]
3  6867								 ENDIF
2  6868								 PUSHDS	 EAX
3  6869	00001773  50						 PUSH	 EAX
2  6870								 $NEXT
3  6871	00001774  AD						 LODSD				 ; fetch address
3  6872								 $JMP
4  6873	00001775  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6874	00001777  FF E3						 JMP	 EBX			 ; execute
2  6875
2  6876					 ;  6.2.0340 2>R
2  6877					 ;  D: a b --
2  6878					 ;  R:	   -- a	b
2  6879								 $CODE	 '2>R',$2TOR,VEF_COMPILE_ONLY
3  6880								 $DEF	 '2>R',$2TOR,,VEF_COMPILE_ONLY
4  6881	00001779			 ??023B:
4  6882		  =MAIN:1779		 LASTWORD		 =	 ??023B
4  6883								 IFNB	 <VEF_COMPILE_ONLY>
4  6884	00001779  04						   DB	 VEF_COMPILE_ONLY
4  6885								 ELSE
4  6886								   DB	 VEF_USUAL
4  6887								 ENDIF
4  6888	0000177A  03						 DB	 ??023C	- $ - 1
4  6889	0000177B  32 3E	52					 DB	 '2>R'
4  6890	0000177E			 ??023C:
4  6891	0000177E  05						 DB	 ??023C	- ??023B
4  6892	0000177F  20001763					 DD	 VOC_LINK
4  6893		  =MAIN:20001779	 VOC_LINK		 =	 ??023B	+ DESIRED_BASE_EQU
4  6894
4  6895								 IFNB	 <$2TOR>
4  6896	00001783						   LABEL   $2TOR FAR
4  6897								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 122
FKernel.asm



4  6898								 IFNB	 <>
4  6899								   DD	    + DESIRED_BASE_EQU
4  6900								 ELSE
4  6901	00001783  20001787					   DD	   ??023E + DESIRED_BASE_EQU
4  6902								 ENDIF
4  6903	00001787			 ??023E:
2  6904								 POPDS	 EBX
3  6905	00001787  5B						 POP	 EBX
2  6906								 POPDS	 EAX
3  6907	00001788  58						 POP	 EAX
2  6908								 PUSHRS	 EAX
3  6909	00001789  83 ED	04					 SUB	 EBP,CELL_SIZE
3  6910	0000178C  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  6911								 PUSHRS	 EBX
3  6912	0000178F  83 ED	04					 SUB	 EBP,CELL_SIZE
3  6913	00001792  89 5D	00					 MOV	 [DWORD	PTR EBP],EBX
2  6914								 $NEXT
3  6915	00001795  AD						 LODSD				 ; fetch address
3  6916								 $JMP
4  6917	00001796  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6918	00001798  FF E3						 JMP	 EBX			 ; execute
2  6919
2  6920					 ;  6.2.0410 2R>
2  6921					 ;  D:	   -- a	b
2  6922					 ;  R: a b --
2  6923								 $CODE	 '2R>',$2RFROM,VEF_COMPILE_ONLY
3  6924								 $DEF	 '2R>',$2RFROM,,VEF_COMPILE_ONLY
4  6925	0000179A			 ??023F:
4  6926		  =MAIN:179A		 LASTWORD		 =	 ??023F
4  6927								 IFNB	 <VEF_COMPILE_ONLY>
4  6928	0000179A  04						   DB	 VEF_COMPILE_ONLY
4  6929								 ELSE
4  6930								   DB	 VEF_USUAL
4  6931								 ENDIF
4  6932	0000179B  03						 DB	 ??0240	- $ - 1
4  6933	0000179C  32 52	3E					 DB	 '2R>'
4  6934	0000179F			 ??0240:
4  6935	0000179F  05						 DB	 ??0240	- ??023F
4  6936	000017A0  20001779					 DD	 VOC_LINK
4  6937		  =MAIN:2000179A	 VOC_LINK		 =	 ??023F	+ DESIRED_BASE_EQU
4  6938
4  6939								 IFNB	 <$2RFROM>
4  6940	000017A4						   LABEL   $2RFROM FAR
4  6941								 ENDIF
4  6942								 IFNB	 <>
4  6943								   DD	    + DESIRED_BASE_EQU
4  6944								 ELSE
4  6945	000017A4  200017A8					   DD	   ??0242 + DESIRED_BASE_EQU
4  6946								 ENDIF
4  6947	000017A8			 ??0242:
2  6948								 POPRS	 EBX
3  6949	000017A8  8B 5D	00					 MOV	 EBX,[DWORD PTR	EBP]
3  6950	000017AB  83 C5	04					 ADD	 EBP,CELL_SIZE
2  6951								 POPRS	 EAX
3  6952	000017AE  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3  6953	000017B1  83 C5	04					 ADD	 EBP,CELL_SIZE
2  6954								 PUSHDS	 EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 123
FKernel.asm



3  6955	000017B4  50						 PUSH	 EAX
2  6956								 PUSHDS	 EBX
3  6957	000017B5  53						 PUSH	 EBX
2  6958								 $NEXT
3  6959	000017B6  AD						 LODSD				 ; fetch address
3  6960								 $JMP
4  6961	000017B7  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  6962	000017B9  FF E3						 JMP	 EBX			 ; execute
2  6963
2  6964					 ;  6.2.0415 2R@
2  6965					 ;  D:	   -- a	b
2  6966					 ;  R: a b -- a	b
2  6967								 $CODE	 '2R@',$2RFETCH
3  6968								 $DEF	 '2R@',$2RFETCH,,
4  6969	000017BB			 ??0243:
4  6970		  =MAIN:17BB		 LASTWORD		 =	 ??0243
4  6971								 IFNB	 <>
4  6972								   DB
4  6973								 ELSE
4  6974	000017BB  00						   DB	 VEF_USUAL
4  6975								 ENDIF
4  6976	000017BC  03						 DB	 ??0244	- $ - 1
4  6977	000017BD  32 52	40					 DB	 '2R@'
4  6978	000017C0			 ??0244:
4  6979	000017C0  05						 DB	 ??0244	- ??0243
4  6980	000017C1  2000179A					 DD	 VOC_LINK
4  6981		  =MAIN:200017BB	 VOC_LINK		 =	 ??0243	+ DESIRED_BASE_EQU
4  6982
4  6983								 IFNB	 <$2RFETCH>
4  6984	000017C5						   LABEL   $2RFETCH FAR
4  6985								 ENDIF
4  6986								 IFNB	 <>
4  6987								   DD	    + DESIRED_BASE_EQU
4  6988								 ELSE
4  6989	000017C5  200017C9					   DD	   ??0246 + DESIRED_BASE_EQU
4  6990								 ENDIF
4  6991	000017C9			 ??0246:
2  6992								 FETCHRS EBX,0
3  6993								 IFNB	 <0>
3  6994	000017C9  8B 5D	00					   MOV	   EBX,[DWORD PTR EBP +	0 * CELL_SIZE]
3  6995								 ELSE
3  6996								   MOV	   EBX,[DWORD PTR EBP]
3  6997								 ENDIF
2  6998								 FETCHRS EAX,1
3  6999								 IFNB	 <1>
3  7000	000017CC  8B 45	04					   MOV	   EAX,[DWORD PTR EBP +	1 * CELL_SIZE]
3  7001								 ELSE
3  7002								   MOV	   EAX,[DWORD PTR EBP]
3  7003								 ENDIF
2  7004								 PUSHDS	 EAX
3  7005	000017CF  50						 PUSH	 EAX
2  7006								 PUSHDS	 EBX
3  7007	000017D0  53						 PUSH	 EBX
2  7008								 $NEXT
3  7009	000017D1  AD						 LODSD				 ; fetch address
3  7010								 $JMP
4  7011	000017D2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 124
FKernel.asm



4  7012	000017D4  FF E3						 JMP	 EBX			 ; execute
2  7013
2  7014					 ;  R-PICK
2  7015								 $CODE	 'R-PICK',$R_PICK
3  7016								 $DEF	 'R-PICK',$R_PICK,,
4  7017	000017D6			 ??0247:
4  7018		  =MAIN:17D6		 LASTWORD		 =	 ??0247
4  7019								 IFNB	 <>
4  7020								   DB
4  7021								 ELSE
4  7022	000017D6  00						   DB	 VEF_USUAL
4  7023								 ENDIF
4  7024	000017D7  06						 DB	 ??0248	- $ - 1
4  7025	000017D8  52 2D	50 49 43 4B				 DB	 'R-PICK'
4  7026	000017DE			 ??0248:
4  7027	000017DE  08						 DB	 ??0248	- ??0247
4  7028	000017DF  200017BB					 DD	 VOC_LINK
4  7029		  =MAIN:200017D6	 VOC_LINK		 =	 ??0247	+ DESIRED_BASE_EQU
4  7030
4  7031								 IFNB	 <$R_PICK>
4  7032	000017E3						   LABEL   $R_PICK FAR
4  7033								 ENDIF
4  7034								 IFNB	 <>
4  7035								   DD	    + DESIRED_BASE_EQU
4  7036								 ELSE
4  7037	000017E3  200017E7					   DD	   ??024A + DESIRED_BASE_EQU
4  7038								 ENDIF
4  7039	000017E7			 ??024A:
2  7040								 POPDS	 EBX
3  7041	000017E7  5B						 POP	 EBX
2  7042								 FETCHRS EAX,EBX
3  7043								 IFNB	 <EBX>
3  7044	000017E8  8B 44	9D 00					   MOV	   EAX,[DWORD PTR EBP +	EBX * CELL_SIZE]
3  7045								 ELSE
3  7046								   MOV	   EAX,[DWORD PTR EBP]
3  7047								 ENDIF
2  7048								 PUSHDS	 EAX
3  7049	000017EC  50						 PUSH	 EAX
2  7050								 $NEXT
3  7051	000017ED  AD						 LODSD				 ; fetch address
3  7052								 $JMP
4  7053	000017EE  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7054	000017F0  FF E3						 JMP	 EBX			 ; execute
2  7055
2  7056					 ;  RS-SIZE
2  7057								 $CONST	 'RS-SIZE'
3  7058								 $DEF	 'RS-SIZE',,$DOCONST
4  7059	000017F2			 ??024B:
4  7060		  =MAIN:17F2		 LASTWORD		 =	 ??024B
4  7061								 IFNB	 <>
4  7062								   DB
4  7063								 ELSE
4  7064	000017F2  00						   DB	 VEF_USUAL
4  7065								 ENDIF
4  7066	000017F3  07						 DB	 ??024C	- $ - 1
4  7067	000017F4  52 53	2D 53 49 5A 45				 DB	 'RS-SIZE'
4  7068	000017FB			 ??024C:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 125
FKernel.asm



4  7069	000017FB  09						 DB	 ??024C	- ??024B
4  7070	000017FC  200017D6					 DD	 VOC_LINK
4  7071		  =MAIN:200017F2	 VOC_LINK		 =	 ??024B	+ DESIRED_BASE_EQU
4  7072
4  7073								 IFNB	 <>
4  7074								   LABEL    FAR
4  7075								 ENDIF
4  7076								 IFNB	 <$DOCONST>
4  7077	00001800  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4  7078								 ELSE
4  7079								   DD	   ??024E + DESIRED_BASE_EQU
4  7080								 ENDIF
4  7081	00001804			 ??024E:
2  7082								 CC	 RETURN_STACK_SIZE
3  7083	00001804  00004000					 DD	 RETURN_STACK_SIZE
2  7084
2  7085					 ;  RP0
2  7086								 $CODE	 'RP0',$RP0
3  7087								 $DEF	 'RP0',$RP0,,
4  7088	00001808			 ??024F:
4  7089		  =MAIN:1808		 LASTWORD		 =	 ??024F
4  7090								 IFNB	 <>
4  7091								   DB
4  7092								 ELSE
4  7093	00001808  00						   DB	 VEF_USUAL
4  7094								 ENDIF
4  7095	00001809  03						 DB	 ??0250	- $ - 1
4  7096	0000180A  52 50	30					 DB	 'RP0'
4  7097	0000180D			 ??0250:
4  7098	0000180D  05						 DB	 ??0250	- ??024F
4  7099	0000180E  200017F2					 DD	 VOC_LINK
4  7100		  =MAIN:20001808	 VOC_LINK		 =	 ??024F	+ DESIRED_BASE_EQU
4  7101
4  7102								 IFNB	 <$RP0>
4  7103	00001812						   LABEL   $RP0	FAR
4  7104								 ENDIF
4  7105								 IFNB	 <>
4  7106								   DD	    + DESIRED_BASE_EQU
4  7107								 ELSE
4  7108	00001812  20001816					   DD	   ??0252 + DESIRED_BASE_EQU
4  7109								 ENDIF
4  7110	00001816			 ??0252:
2  7111	00001816  8D 87	00004A44				 LEA	 EAX,[DWORD PTR	EDI + RSTACK_VAR]
2  7112								 PUSHDS	 EAX
3  7113	0000181C  50						 PUSH	 EAX
2  7114								 $NEXT
3  7115	0000181D  AD						 LODSD				 ; fetch address
3  7116								 $JMP
4  7117	0000181E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7118	00001820  FF E3						 JMP	 EBX			 ; execute
2  7119
2  7120					 ;  RP@
2  7121								 $CODE	 'RP@',$RPFETCH
3  7122								 $DEF	 'RP@',$RPFETCH,,
4  7123	00001822			 ??0253:
4  7124		  =MAIN:1822		 LASTWORD		 =	 ??0253
4  7125								 IFNB	 <>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 126
FKernel.asm



4  7126								   DB
4  7127								 ELSE
4  7128	00001822  00						   DB	 VEF_USUAL
4  7129								 ENDIF
4  7130	00001823  03						 DB	 ??0254	- $ - 1
4  7131	00001824  52 50	40					 DB	 'RP@'
4  7132	00001827			 ??0254:
4  7133	00001827  05						 DB	 ??0254	- ??0253
4  7134	00001828  20001808					 DD	 VOC_LINK
4  7135		  =MAIN:20001822	 VOC_LINK		 =	 ??0253	+ DESIRED_BASE_EQU
4  7136
4  7137								 IFNB	 <$RPFETCH>
4  7138	0000182C						   LABEL   $RPFETCH FAR
4  7139								 ENDIF
4  7140								 IFNB	 <>
4  7141								   DD	    + DESIRED_BASE_EQU
4  7142								 ELSE
4  7143	0000182C  20001830					   DD	   ??0256 + DESIRED_BASE_EQU
4  7144								 ENDIF
4  7145	00001830			 ??0256:
2  7146								 PUSHDS	 EBP
3  7147	00001830  55						 PUSH	 EBP
2  7148								 $NEXT
3  7149	00001831  AD						 LODSD				 ; fetch address
3  7150								 $JMP
4  7151	00001832  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7152	00001834  FF E3						 JMP	 EBX			 ; execute
2  7153
2  7154					 ;  RP!
2  7155								 $CODE	 'RP!',$RPSTORE,VEF_COMPILE_ONLY
3  7156								 $DEF	 'RP!',$RPSTORE,,VEF_COMPILE_ONLY
4  7157	00001836			 ??0257:
4  7158		  =MAIN:1836		 LASTWORD		 =	 ??0257
4  7159								 IFNB	 <VEF_COMPILE_ONLY>
4  7160	00001836  04						   DB	 VEF_COMPILE_ONLY
4  7161								 ELSE
4  7162								   DB	 VEF_USUAL
4  7163								 ENDIF
4  7164	00001837  03						 DB	 ??0258	- $ - 1
4  7165	00001838  52 50	21					 DB	 'RP!'
4  7166	0000183B			 ??0258:
4  7167	0000183B  05						 DB	 ??0258	- ??0257
4  7168	0000183C  20001822					 DD	 VOC_LINK
4  7169		  =MAIN:20001836	 VOC_LINK		 =	 ??0257	+ DESIRED_BASE_EQU
4  7170
4  7171								 IFNB	 <$RPSTORE>
4  7172	00001840						   LABEL   $RPSTORE FAR
4  7173								 ENDIF
4  7174								 IFNB	 <>
4  7175								   DD	    + DESIRED_BASE_EQU
4  7176								 ELSE
4  7177	00001840  20001844					   DD	   ??025A + DESIRED_BASE_EQU
4  7178								 ENDIF
4  7179	00001844			 ??025A:
2  7180								 POPDS	 EBP
3  7181	00001844  5D						 POP	 EBP
2  7182								 $NEXT
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 127
FKernel.asm



3  7183	00001845  AD						 LODSD				 ; fetch address
3  7184								 $JMP
4  7185	00001846  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7186	00001848  FF E3						 JMP	 EBX			 ; execute
2  7187
2  7188					 ;  +R
2  7189					 ;  D: x - x
2  7190					 ;  R:	 - x
2  7191								 $CODE	 '+R',$PLUS_R,VEF_COMPILE_ONLY
3  7192								 $DEF	 '+R',$PLUS_R,,VEF_COMPILE_ONLY
4  7193	0000184A			 ??025B:
4  7194		  =MAIN:184A		 LASTWORD		 =	 ??025B
4  7195								 IFNB	 <VEF_COMPILE_ONLY>
4  7196	0000184A  04						   DB	 VEF_COMPILE_ONLY
4  7197								 ELSE
4  7198								   DB	 VEF_USUAL
4  7199								 ENDIF
4  7200	0000184B  02						 DB	 ??025C	- $ - 1
4  7201	0000184C  2B 52						 DB	 '+R'
4  7202	0000184E			 ??025C:
4  7203	0000184E  04						 DB	 ??025C	- ??025B
4  7204	0000184F  20001836					 DD	 VOC_LINK
4  7205		  =MAIN:2000184A	 VOC_LINK		 =	 ??025B	+ DESIRED_BASE_EQU
4  7206
4  7207								 IFNB	 <$PLUS_R>
4  7208	00001853						   LABEL   $PLUS_R FAR
4  7209								 ENDIF
4  7210								 IFNB	 <>
4  7211								   DD	    + DESIRED_BASE_EQU
4  7212								 ELSE
4  7213	00001853  20001857					   DD	   ??025E + DESIRED_BASE_EQU
4  7214								 ENDIF
4  7215	00001857			 ??025E:
2  7216								 FETCHDS EAX
3  7217								 IFNB	 <>
3  7218								   MOV	   EAX,[DWORD PTR ESP +	 * CELL_SIZE]
3  7219								 ELSE
3  7220	00001857  8B 04	24					   MOV	   EAX,[DWORD PTR ESP]
3  7221								 ENDIF
2  7222								 PUSHRS	 EAX
3  7223	0000185A  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7224	0000185D  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  7225								 $NEXT
3  7226	00001860  AD						 LODSD				 ; fetch address
3  7227								 $JMP
4  7228	00001861  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7229	00001863  FF E3						 JMP	 EBX			 ; execute
2  7230
2  7231					 ;  2+R
2  7232					 ;  D: x1 x2 - x1 x2
2  7233					 ;  R:	     - x1 x2
2  7234								 $CODE	 '2+R',$2PLUS_R,VEF_COMPILE_ONLY
3  7235								 $DEF	 '2+R',$2PLUS_R,,VEF_COMPILE_ONLY
4  7236	00001865			 ??025F:
4  7237		  =MAIN:1865		 LASTWORD		 =	 ??025F
4  7238								 IFNB	 <VEF_COMPILE_ONLY>
4  7239	00001865  04						   DB	 VEF_COMPILE_ONLY
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 128
FKernel.asm



4  7240								 ELSE
4  7241								   DB	 VEF_USUAL
4  7242								 ENDIF
4  7243	00001866  03						 DB	 ??0260	- $ - 1
4  7244	00001867  32 2B	52					 DB	 '2+R'
4  7245	0000186A			 ??0260:
4  7246	0000186A  05						 DB	 ??0260	- ??025F
4  7247	0000186B  2000184A					 DD	 VOC_LINK
4  7248		  =MAIN:20001865	 VOC_LINK		 =	 ??025F	+ DESIRED_BASE_EQU
4  7249
4  7250								 IFNB	 <$2PLUS_R>
4  7251	0000186F						   LABEL   $2PLUS_R FAR
4  7252								 ENDIF
4  7253								 IFNB	 <>
4  7254								   DD	    + DESIRED_BASE_EQU
4  7255								 ELSE
4  7256	0000186F  20001873					   DD	   ??0262 + DESIRED_BASE_EQU
4  7257								 ENDIF
4  7258	00001873			 ??0262:
2  7259								 FETCHDS EAX
3  7260								 IFNB	 <>
3  7261								   MOV	   EAX,[DWORD PTR ESP +	 * CELL_SIZE]
3  7262								 ELSE
3  7263	00001873  8B 04	24					   MOV	   EAX,[DWORD PTR ESP]
3  7264								 ENDIF
2  7265								 FETCHDS EBX,1
3  7266								 IFNB	 <1>
3  7267	00001876  8B 5C	24 04					   MOV	   EBX,[DWORD PTR ESP +	1 * CELL_SIZE]
3  7268								 ELSE
3  7269								   MOV	   EBX,[DWORD PTR ESP]
3  7270								 ENDIF
2  7271								 PUSHRS	 EBX
3  7272	0000187A  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7273	0000187D  89 5D	00					 MOV	 [DWORD	PTR EBP],EBX
2  7274								 PUSHRS	 EAX
3  7275	00001880  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7276	00001883  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  7277								 $NEXT
3  7278	00001886  AD						 LODSD				 ; fetch address
3  7279								 $JMP
4  7280	00001887  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7281	00001889  FF E3						 JMP	 EBX			 ; execute
2  7282
2  7283					 ;  N>R
2  7284					 ;  D: xn .. x1	n -
2  7285					 ;  R:		  - x1 .. xn n
2  7286								 $CODE	 'N>R',$N_TO_R,VEF_COMPILE_ONLY
3  7287								 $DEF	 'N>R',$N_TO_R,,VEF_COMPILE_ONLY
4  7288	0000188B			 ??0263:
4  7289		  =MAIN:188B		 LASTWORD		 =	 ??0263
4  7290								 IFNB	 <VEF_COMPILE_ONLY>
4  7291	0000188B  04						   DB	 VEF_COMPILE_ONLY
4  7292								 ELSE
4  7293								   DB	 VEF_USUAL
4  7294								 ENDIF
4  7295	0000188C  03						 DB	 ??0264	- $ - 1
4  7296	0000188D  4E 3E	52					 DB	 'N>R'
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 129
FKernel.asm



4  7297	00001890			 ??0264:
4  7298	00001890  05						 DB	 ??0264	- ??0263
4  7299	00001891  20001865					 DD	 VOC_LINK
4  7300		  =MAIN:2000188B	 VOC_LINK		 =	 ??0263	+ DESIRED_BASE_EQU
4  7301
4  7302								 IFNB	 <$N_TO_R>
4  7303	00001895						   LABEL   $N_TO_R FAR
4  7304								 ENDIF
4  7305								 IFNB	 <>
4  7306								   DD	    + DESIRED_BASE_EQU
4  7307								 ELSE
4  7308	00001895  20001899					   DD	   ??0266 + DESIRED_BASE_EQU
4  7309								 ENDIF
4  7310	00001899			 ??0266:
2  7311								 POPDS	 ECX
3  7312	00001899  59						 POP	 ECX
2  7313	0000189A  8B C1						 MOV	 EAX,ECX
2  7314	0000189C  0B C9						 OR	 ECX,ECX
2  7315	0000189E			 @@N_TO_R_LOOP:
2  7316	0000189E  E3 0A						 JECXZ	 @@N_TO_R_EXIT
2  7317								 POPDS	 EBX
3  7318	000018A0  5B						 POP	 EBX
2  7319								 PUSHRS	 EBX
3  7320	000018A1  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7321	000018A4  89 5D	00					 MOV	 [DWORD	PTR EBP],EBX
2  7322	000018A7  49						 DEC	 ECX
2  7323	000018A8  EB F4						 JMP	 @@N_TO_R_LOOP
2  7324	000018AA			 @@N_TO_R_EXIT:
2  7325								 PUSHRS	 EAX
3  7326	000018AA  83 ED	04					 SUB	 EBP,CELL_SIZE
3  7327	000018AD  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  7328								 $NEXT
3  7329	000018B0  AD						 LODSD				 ; fetch address
3  7330								 $JMP
4  7331	000018B1  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7332	000018B3  FF E3						 JMP	 EBX			 ; execute
2  7333
2  7334					 ;  NR>
2  7335					 ;  D:		  - xn .. x1 n
2  7336					 ;  R: x1 .. xn	n -
2  7337								 $CODE	 'NR>',$N_R_FROM,VEF_COMPILE_ONLY
3  7338								 $DEF	 'NR>',$N_R_FROM,,VEF_COMPILE_ONLY
4  7339	000018B5			 ??0267:
4  7340		  =MAIN:18B5		 LASTWORD		 =	 ??0267
4  7341								 IFNB	 <VEF_COMPILE_ONLY>
4  7342	000018B5  04						   DB	 VEF_COMPILE_ONLY
4  7343								 ELSE
4  7344								   DB	 VEF_USUAL
4  7345								 ENDIF
4  7346	000018B6  03						 DB	 ??0268	- $ - 1
4  7347	000018B7  4E 52	3E					 DB	 'NR>'
4  7348	000018BA			 ??0268:
4  7349	000018BA  05						 DB	 ??0268	- ??0267
4  7350	000018BB  2000188B					 DD	 VOC_LINK
4  7351		  =MAIN:200018B5	 VOC_LINK		 =	 ??0267	+ DESIRED_BASE_EQU
4  7352
4  7353								 IFNB	 <$N_R_FROM>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 130
FKernel.asm



4  7354	000018BF						   LABEL   $N_R_FROM FAR
4  7355								 ENDIF
4  7356								 IFNB	 <>
4  7357								   DD	    + DESIRED_BASE_EQU
4  7358								 ELSE
4  7359	000018BF  200018C3					   DD	   ??026A + DESIRED_BASE_EQU
4  7360								 ENDIF
4  7361	000018C3			 ??026A:
2  7362								 POPRS	 ECX
3  7363	000018C3  8B 4D	00					 MOV	 ECX,[DWORD PTR	EBP]
3  7364	000018C6  83 C5	04					 ADD	 EBP,CELL_SIZE
2  7365	000018C9  8B C1						 MOV	 EAX,ECX
2  7366	000018CB  0B C9						 OR	 ECX,ECX
2  7367	000018CD			 @@N_R_FROM_LOOP:
2  7368	000018CD  E3 0A						 JECXZ	 @@N_R_FROM_EXIT
2  7369								 POPRS	 EBX
3  7370	000018CF  8B 5D	00					 MOV	 EBX,[DWORD PTR	EBP]
3  7371	000018D2  83 C5	04					 ADD	 EBP,CELL_SIZE
2  7372								 PUSHDS	 EBX
3  7373	000018D5  53						 PUSH	 EBX
2  7374	000018D6  49						 DEC	 ECX
2  7375	000018D7  EB F4						 JMP	 @@N_R_FROM_LOOP
2  7376	000018D9			 @@N_R_FROM_EXIT:
2  7377								 PUSHDS	 EAX
3  7378	000018D9  50						 PUSH	 EAX
2  7379								 $NEXT
3  7380	000018DA  AD						 LODSD				 ; fetch address
3  7381								 $JMP
4  7382	000018DB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7383	000018DD  FF E3						 JMP	 EBX			 ; execute
2  7384
2  7385
1  7386								 INCLUDE "math.inc"
2  7387					 ;******************************************************************************
2  7388					 ;
2  7389					 ;  math.inc
2  7390					 ;  IKForth
2  7391					 ;
2  7392					 ;  Copyright (C) 1999-2003 Illya Kysil
2  7393					 ;
2  7394					 ;******************************************************************************
2  7395					 ;  Integer math
2  7396					 ;******************************************************************************
2  7397
2  7398					 ;  6.1.0090 *
2  7399					 ;  Multiply n1|u1 by n2|u2 giving the product n3|u3.
2  7400					 ;  D: n1|u1 n2|u2 -- n3|u3
2  7401								 $CODE	 '*',$MUL
3  7402								 $DEF	 '*',$MUL,,
4  7403	000018DF			 ??026B:
4  7404		  =MAIN:18DF		 LASTWORD		 =	 ??026B
4  7405								 IFNB	 <>
4  7406								   DB
4  7407								 ELSE
4  7408	000018DF  00						   DB	 VEF_USUAL
4  7409								 ENDIF
4  7410	000018E0  01						 DB	 ??026C	- $ - 1
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 131
FKernel.asm



4  7411	000018E1  2A						 DB	 '*'
4  7412	000018E2			 ??026C:
4  7413	000018E2  03						 DB	 ??026C	- ??026B
4  7414	000018E3  200018B5					 DD	 VOC_LINK
4  7415		  =MAIN:200018DF	 VOC_LINK		 =	 ??026B	+ DESIRED_BASE_EQU
4  7416
4  7417								 IFNB	 <$MUL>
4  7418	000018E7						   LABEL   $MUL	FAR
4  7419								 ENDIF
4  7420								 IFNB	 <>
4  7421								   DD	    + DESIRED_BASE_EQU
4  7422								 ELSE
4  7423	000018E7  200018EB					   DD	   ??026E + DESIRED_BASE_EQU
4  7424								 ENDIF
4  7425	000018EB			 ??026E:
2  7426								 POPDS	 EAX
3  7427	000018EB  58						 POP	 EAX
2  7428								 POPDS	 EBX
3  7429	000018EC  5B						 POP	 EBX
2  7430	000018ED  F7 EB						 IMUL	 EBX
2  7431								 PUSHDS	 EAX
3  7432	000018EF  50						 PUSH	 EAX
2  7433								 $NEXT
3  7434	000018F0  AD						 LODSD				 ; fetch address
3  7435								 $JMP
4  7436	000018F1  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7437	000018F3  FF E3						 JMP	 EBX			 ; execute
2  7438
2  7439					 ;  6.1.0120 +
2  7440					 ;  D: a b -- a+b
2  7441								 $CODE	 '+',$ADD
3  7442								 $DEF	 '+',$ADD,,
4  7443	000018F5			 ??026F:
4  7444		  =MAIN:18F5		 LASTWORD		 =	 ??026F
4  7445								 IFNB	 <>
4  7446								   DB
4  7447								 ELSE
4  7448	000018F5  00						   DB	 VEF_USUAL
4  7449								 ENDIF
4  7450	000018F6  01						 DB	 ??0270	- $ - 1
4  7451	000018F7  2B						 DB	 '+'
4  7452	000018F8			 ??0270:
4  7453	000018F8  03						 DB	 ??0270	- ??026F
4  7454	000018F9  200018DF					 DD	 VOC_LINK
4  7455		  =MAIN:200018F5	 VOC_LINK		 =	 ??026F	+ DESIRED_BASE_EQU
4  7456
4  7457								 IFNB	 <$ADD>
4  7458	000018FD						   LABEL   $ADD	FAR
4  7459								 ENDIF
4  7460								 IFNB	 <>
4  7461								   DD	    + DESIRED_BASE_EQU
4  7462								 ELSE
4  7463	000018FD  20001901					   DD	   ??0272 + DESIRED_BASE_EQU
4  7464								 ENDIF
4  7465	00001901			 ??0272:
2  7466								 POPDS	 EAX
3  7467	00001901  58						 POP	 EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 132
FKernel.asm



2  7468								 POPDS	 EBX
3  7469	00001902  5B						 POP	 EBX
2  7470	00001903  03 C3						 ADD	 EAX,EBX
2  7471								 PUSHDS	 EAX
3  7472	00001905  50						 PUSH	 EAX
2  7473								 $NEXT
3  7474	00001906  AD						 LODSD				 ; fetch address
3  7475								 $JMP
4  7476	00001907  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7477	00001909  FF E3						 JMP	 EBX			 ; execute
2  7478
2  7479					 ;  6.1.0160 -
2  7480					 ;  D: a b -- a-b
2  7481								 $CODE	 '-',$SUB
3  7482								 $DEF	 '-',$SUB,,
4  7483	0000190B			 ??0273:
4  7484		  =MAIN:190B		 LASTWORD		 =	 ??0273
4  7485								 IFNB	 <>
4  7486								   DB
4  7487								 ELSE
4  7488	0000190B  00						   DB	 VEF_USUAL
4  7489								 ENDIF
4  7490	0000190C  01						 DB	 ??0274	- $ - 1
4  7491	0000190D  2D						 DB	 '-'
4  7492	0000190E			 ??0274:
4  7493	0000190E  03						 DB	 ??0274	- ??0273
4  7494	0000190F  200018F5					 DD	 VOC_LINK
4  7495		  =MAIN:2000190B	 VOC_LINK		 =	 ??0273	+ DESIRED_BASE_EQU
4  7496
4  7497								 IFNB	 <$SUB>
4  7498	00001913						   LABEL   $SUB	FAR
4  7499								 ENDIF
4  7500								 IFNB	 <>
4  7501								   DD	    + DESIRED_BASE_EQU
4  7502								 ELSE
4  7503	00001913  20001917					   DD	   ??0276 + DESIRED_BASE_EQU
4  7504								 ENDIF
4  7505	00001917			 ??0276:
2  7506								 POPDS	 EBX
3  7507	00001917  5B						 POP	 EBX
2  7508								 POPDS	 EAX
3  7509	00001918  58						 POP	 EAX
2  7510	00001919  2B C3						 SUB	 EAX,EBX
2  7511								 PUSHDS	 EAX
3  7512	0000191B  50						 PUSH	 EAX
2  7513								 $NEXT
3  7514	0000191C  AD						 LODSD				 ; fetch address
3  7515								 $JMP
4  7516	0000191D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7517	0000191F  FF E3						 JMP	 EBX			 ; execute
2  7518
2  7519					 ;  6.1.0290 1+
2  7520					 ;  D: a -- a+1
2  7521								 $CODE	 '1+',$1ADD
3  7522								 $DEF	 '1+',$1ADD,,
4  7523	00001921			 ??0277:
4  7524		  =MAIN:1921		 LASTWORD		 =	 ??0277
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 133
FKernel.asm



4  7525								 IFNB	 <>
4  7526								   DB
4  7527								 ELSE
4  7528	00001921  00						   DB	 VEF_USUAL
4  7529								 ENDIF
4  7530	00001922  02						 DB	 ??0278	- $ - 1
4  7531	00001923  31 2B						 DB	 '1+'
4  7532	00001925			 ??0278:
4  7533	00001925  04						 DB	 ??0278	- ??0277
4  7534	00001926  2000190B					 DD	 VOC_LINK
4  7535		  =MAIN:20001921	 VOC_LINK		 =	 ??0277	+ DESIRED_BASE_EQU
4  7536
4  7537								 IFNB	 <$1ADD>
4  7538	0000192A						   LABEL   $1ADD FAR
4  7539								 ENDIF
4  7540								 IFNB	 <>
4  7541								   DD	    + DESIRED_BASE_EQU
4  7542								 ELSE
4  7543	0000192A  2000192E					   DD	   ??027A + DESIRED_BASE_EQU
4  7544								 ENDIF
4  7545	0000192E			 ??027A:
2  7546								 POPDS	 EAX
3  7547	0000192E  58						 POP	 EAX
2  7548	0000192F  40						 INC	 EAX
2  7549								 PUSHDS	 EAX
3  7550	00001930  50						 PUSH	 EAX
2  7551								 $NEXT
3  7552	00001931  AD						 LODSD				 ; fetch address
3  7553								 $JMP
4  7554	00001932  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7555	00001934  FF E3						 JMP	 EBX			 ; execute
2  7556
2  7557					 ;  6.1.0300 1-
2  7558					 ;  D: a -- a-1
2  7559								 $CODE	 '1-',$1SUB
3  7560								 $DEF	 '1-',$1SUB,,
4  7561	00001936			 ??027B:
4  7562		  =MAIN:1936		 LASTWORD		 =	 ??027B
4  7563								 IFNB	 <>
4  7564								   DB
4  7565								 ELSE
4  7566	00001936  00						   DB	 VEF_USUAL
4  7567								 ENDIF
4  7568	00001937  02						 DB	 ??027C	- $ - 1
4  7569	00001938  31 2D						 DB	 '1-'
4  7570	0000193A			 ??027C:
4  7571	0000193A  04						 DB	 ??027C	- ??027B
4  7572	0000193B  20001921					 DD	 VOC_LINK
4  7573		  =MAIN:20001936	 VOC_LINK		 =	 ??027B	+ DESIRED_BASE_EQU
4  7574
4  7575								 IFNB	 <$1SUB>
4  7576	0000193F						   LABEL   $1SUB FAR
4  7577								 ENDIF
4  7578								 IFNB	 <>
4  7579								   DD	    + DESIRED_BASE_EQU
4  7580								 ELSE
4  7581	0000193F  20001943					   DD	   ??027E + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 134
FKernel.asm



4  7582								 ENDIF
4  7583	00001943			 ??027E:
2  7584								 POPDS	 EAX
3  7585	00001943  58						 POP	 EAX
2  7586	00001944  48						 DEC	 EAX
2  7587								 PUSHDS	 EAX
3  7588	00001945  50						 PUSH	 EAX
2  7589								 $NEXT
3  7590	00001946  AD						 LODSD				 ; fetch address
3  7591								 $JMP
4  7592	00001947  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7593	00001949  FF E3						 JMP	 EBX			 ; execute
2  7594
2  7595					 ;  6.1.0320 2*
2  7596					 ;  D: a -- a*2
2  7597								 $CODE	 '2*',$2MUL
3  7598								 $DEF	 '2*',$2MUL,,
4  7599	0000194B			 ??027F:
4  7600		  =MAIN:194B		 LASTWORD		 =	 ??027F
4  7601								 IFNB	 <>
4  7602								   DB
4  7603								 ELSE
4  7604	0000194B  00						   DB	 VEF_USUAL
4  7605								 ENDIF
4  7606	0000194C  02						 DB	 ??0280	- $ - 1
4  7607	0000194D  32 2A						 DB	 '2*'
4  7608	0000194F			 ??0280:
4  7609	0000194F  04						 DB	 ??0280	- ??027F
4  7610	00001950  20001936					 DD	 VOC_LINK
4  7611		  =MAIN:2000194B	 VOC_LINK		 =	 ??027F	+ DESIRED_BASE_EQU
4  7612
4  7613								 IFNB	 <$2MUL>
4  7614	00001954						   LABEL   $2MUL FAR
4  7615								 ENDIF
4  7616								 IFNB	 <>
4  7617								   DD	    + DESIRED_BASE_EQU
4  7618								 ELSE
4  7619	00001954  20001958					   DD	   ??0282 + DESIRED_BASE_EQU
4  7620								 ENDIF
4  7621	00001958			 ??0282:
2  7622								 POPDS	 EAX
3  7623	00001958  58						 POP	 EAX
2  7624	00001959  D1 E0						 SAL	 EAX,1
2  7625								 PUSHDS	 EAX
3  7626	0000195B  50						 PUSH	 EAX
2  7627								 $NEXT
3  7628	0000195C  AD						 LODSD				 ; fetch address
3  7629								 $JMP
4  7630	0000195D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7631	0000195F  FF E3						 JMP	 EBX			 ; execute
2  7632
2  7633					 ;  6.1.0330 2/
2  7634					 ;  D: a -- a/2
2  7635								 $CODE	 '2/',$2DIV
3  7636								 $DEF	 '2/',$2DIV,,
4  7637	00001961			 ??0283:
4  7638		  =MAIN:1961		 LASTWORD		 =	 ??0283
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 135
FKernel.asm



4  7639								 IFNB	 <>
4  7640								   DB
4  7641								 ELSE
4  7642	00001961  00						   DB	 VEF_USUAL
4  7643								 ENDIF
4  7644	00001962  02						 DB	 ??0284	- $ - 1
4  7645	00001963  32 2F						 DB	 '2/'
4  7646	00001965			 ??0284:
4  7647	00001965  04						 DB	 ??0284	- ??0283
4  7648	00001966  2000194B					 DD	 VOC_LINK
4  7649		  =MAIN:20001961	 VOC_LINK		 =	 ??0283	+ DESIRED_BASE_EQU
4  7650
4  7651								 IFNB	 <$2DIV>
4  7652	0000196A						   LABEL   $2DIV FAR
4  7653								 ENDIF
4  7654								 IFNB	 <>
4  7655								   DD	    + DESIRED_BASE_EQU
4  7656								 ELSE
4  7657	0000196A  2000196E					   DD	   ??0286 + DESIRED_BASE_EQU
4  7658								 ENDIF
4  7659	0000196E			 ??0286:
2  7660								 POPDS	 EAX
3  7661	0000196E  58						 POP	 EAX
2  7662	0000196F  D1 F8						 SAR	 EAX,1
2  7663								 PUSHDS	 EAX
3  7664	00001971  50						 PUSH	 EAX
2  7665								 $NEXT
3  7666	00001972  AD						 LODSD				 ; fetch address
3  7667								 $JMP
4  7668	00001973  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7669	00001975  FF E3						 JMP	 EBX			 ; execute
2  7670
2  7671					 ;  6.1.1805 LSHIFT
2  7672					 ;  D: a b -- a	<< b
2  7673								 $CODE	 'LSHIFT',$LSHIFT
3  7674								 $DEF	 'LSHIFT',$LSHIFT,,
4  7675	00001977			 ??0287:
4  7676		  =MAIN:1977		 LASTWORD		 =	 ??0287
4  7677								 IFNB	 <>
4  7678								   DB
4  7679								 ELSE
4  7680	00001977  00						   DB	 VEF_USUAL
4  7681								 ENDIF
4  7682	00001978  06						 DB	 ??0288	- $ - 1
4  7683	00001979  4C 53	48 49 46 54				 DB	 'LSHIFT'
4  7684	0000197F			 ??0288:
4  7685	0000197F  08						 DB	 ??0288	- ??0287
4  7686	00001980  20001961					 DD	 VOC_LINK
4  7687		  =MAIN:20001977	 VOC_LINK		 =	 ??0287	+ DESIRED_BASE_EQU
4  7688
4  7689								 IFNB	 <$LSHIFT>
4  7690	00001984						   LABEL   $LSHIFT FAR
4  7691								 ENDIF
4  7692								 IFNB	 <>
4  7693								   DD	    + DESIRED_BASE_EQU
4  7694								 ELSE
4  7695	00001984  20001988					   DD	   ??028A + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 136
FKernel.asm



4  7696								 ENDIF
4  7697	00001988			 ??028A:
2  7698								 POPDS	 ECX
3  7699	00001988  59						 POP	 ECX
2  7700								 POPDS	 EAX
3  7701	00001989  58						 POP	 EAX
2  7702	0000198A  D3 E0						 SHL	 EAX,CL
2  7703								 PUSHDS	 EAX
3  7704	0000198C  50						 PUSH	 EAX
2  7705								 $NEXT
3  7706	0000198D  AD						 LODSD				 ; fetch address
3  7707								 $JMP
4  7708	0000198E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7709	00001990  FF E3						 JMP	 EBX			 ; execute
2  7710
2  7711					 ;  6.1.2162 RSHIFT
2  7712					 ;  D: a b -- a	>> b
2  7713								 $CODE	 'RSHIFT',$RSHIFT
3  7714								 $DEF	 'RSHIFT',$RSHIFT,,
4  7715	00001992			 ??028B:
4  7716		  =MAIN:1992		 LASTWORD		 =	 ??028B
4  7717								 IFNB	 <>
4  7718								   DB
4  7719								 ELSE
4  7720	00001992  00						   DB	 VEF_USUAL
4  7721								 ENDIF
4  7722	00001993  06						 DB	 ??028C	- $ - 1
4  7723	00001994  52 53	48 49 46 54				 DB	 'RSHIFT'
4  7724	0000199A			 ??028C:
4  7725	0000199A  08						 DB	 ??028C	- ??028B
4  7726	0000199B  20001977					 DD	 VOC_LINK
4  7727		  =MAIN:20001992	 VOC_LINK		 =	 ??028B	+ DESIRED_BASE_EQU
4  7728
4  7729								 IFNB	 <$RSHIFT>
4  7730	0000199F						   LABEL   $RSHIFT FAR
4  7731								 ENDIF
4  7732								 IFNB	 <>
4  7733								   DD	    + DESIRED_BASE_EQU
4  7734								 ELSE
4  7735	0000199F  200019A3					   DD	   ??028E + DESIRED_BASE_EQU
4  7736								 ENDIF
4  7737	000019A3			 ??028E:
2  7738								 POPDS	 ECX
3  7739	000019A3  59						 POP	 ECX
2  7740								 POPDS	 EAX
3  7741	000019A4  58						 POP	 EAX
2  7742	000019A5  D3 E8						 SHR	 EAX,CL
2  7743								 PUSHDS	 EAX
3  7744	000019A7  50						 PUSH	 EAX
2  7745								 $NEXT
3  7746	000019A8  AD						 LODSD				 ; fetch address
3  7747								 $JMP
4  7748	000019A9  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7749	000019AB  FF E3						 JMP	 EBX			 ; execute
2  7750
2  7751					 ;  6.1.1810 M*
2  7752					 ;  d is the signed product of n1 times	n2.
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 137
FKernel.asm



2  7753					 ;  D: n1 n2 --	d
2  7754								 $CODE	 'M*',$MMUL
3  7755								 $DEF	 'M*',$MMUL,,
4  7756	000019AD			 ??028F:
4  7757		  =MAIN:19AD		 LASTWORD		 =	 ??028F
4  7758								 IFNB	 <>
4  7759								   DB
4  7760								 ELSE
4  7761	000019AD  00						   DB	 VEF_USUAL
4  7762								 ENDIF
4  7763	000019AE  02						 DB	 ??0290	- $ - 1
4  7764	000019AF  4D 2A						 DB	 'M*'
4  7765	000019B1			 ??0290:
4  7766	000019B1  04						 DB	 ??0290	- ??028F
4  7767	000019B2  20001992					 DD	 VOC_LINK
4  7768		  =MAIN:200019AD	 VOC_LINK		 =	 ??028F	+ DESIRED_BASE_EQU
4  7769
4  7770								 IFNB	 <$MMUL>
4  7771	000019B6						   LABEL   $MMUL FAR
4  7772								 ENDIF
4  7773								 IFNB	 <>
4  7774								   DD	    + DESIRED_BASE_EQU
4  7775								 ELSE
4  7776	000019B6  200019BA					   DD	   ??0292 + DESIRED_BASE_EQU
4  7777								 ENDIF
4  7778	000019BA			 ??0292:
2  7779								 POPDS	 EAX
3  7780	000019BA  58						 POP	 EAX
2  7781								 POPDS	 EBX
3  7782	000019BB  5B						 POP	 EBX
2  7783	000019BC  F7 EB						 IMUL	 EBX
2  7784								 PUSHDS	 EAX
3  7785	000019BE  50						 PUSH	 EAX
2  7786								 PUSHDS	 EDX
3  7787	000019BF  52						 PUSH	 EDX
2  7788								 $NEXT
3  7789	000019C0  AD						 LODSD				 ; fetch address
3  7790								 $JMP
4  7791	000019C1  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7792	000019C3  FF E3						 JMP	 EBX			 ; execute
2  7793
2  7794					 ;  6.1.1910 NEGATE
2  7795					 ;  D: a -- -a
2  7796								 $CODE	 'NEGATE',$NEGATE
3  7797								 $DEF	 'NEGATE',$NEGATE,,
4  7798	000019C5			 ??0293:
4  7799		  =MAIN:19C5		 LASTWORD		 =	 ??0293
4  7800								 IFNB	 <>
4  7801								   DB
4  7802								 ELSE
4  7803	000019C5  00						   DB	 VEF_USUAL
4  7804								 ENDIF
4  7805	000019C6  06						 DB	 ??0294	- $ - 1
4  7806	000019C7  4E 45	47 41 54 45				 DB	 'NEGATE'
4  7807	000019CD			 ??0294:
4  7808	000019CD  08						 DB	 ??0294	- ??0293
4  7809	000019CE  200019AD					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 138
FKernel.asm



4  7810		  =MAIN:200019C5	 VOC_LINK		 =	 ??0293	+ DESIRED_BASE_EQU
4  7811
4  7812								 IFNB	 <$NEGATE>
4  7813	000019D2						   LABEL   $NEGATE FAR
4  7814								 ENDIF
4  7815								 IFNB	 <>
4  7816								   DD	    + DESIRED_BASE_EQU
4  7817								 ELSE
4  7818	000019D2  200019D6					   DD	   ??0296 + DESIRED_BASE_EQU
4  7819								 ENDIF
4  7820	000019D6			 ??0296:
2  7821								 POPDS	 EAX
3  7822	000019D6  58						 POP	 EAX
2  7823	000019D7  F7 D8						 NEG	 EAX
2  7824								 PUSHDS	 EAX
3  7825	000019D9  50						 PUSH	 EAX
2  7826								 $NEXT
3  7827	000019DA  AD						 LODSD				 ; fetch address
3  7828								 $JMP
4  7829	000019DB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7830	000019DD  FF E3						 JMP	 EBX			 ; execute
2  7831
2  7832					 ;  6.1.2214 SM/REM
2  7833					 ;  Divide d1 by n1, giving the	symmetric quotient n3 and the remainder	n2.
2  7834					 ;  Input and output stack arguments are signed. An ambiguous condition	exists
2  7835					 ;  if n1 is zero or if	the quotient lies outside the range of a single-cell signed integer.
2  7836					 ;  D: d1 n1 --	n2 n3
2  7837								 $CODE	 'SM/REM',$SMDIVREM
3  7838								 $DEF	 'SM/REM',$SMDIVREM,,
4  7839	000019DF			 ??0297:
4  7840		  =MAIN:19DF		 LASTWORD		 =	 ??0297
4  7841								 IFNB	 <>
4  7842								   DB
4  7843								 ELSE
4  7844	000019DF  00						   DB	 VEF_USUAL
4  7845								 ENDIF
4  7846	000019E0  06						 DB	 ??0298	- $ - 1
4  7847	000019E1  53 4D	2F 52 45 4D				 DB	 'SM/REM'
4  7848	000019E7			 ??0298:
4  7849	000019E7  08						 DB	 ??0298	- ??0297
4  7850	000019E8  200019C5					 DD	 VOC_LINK
4  7851		  =MAIN:200019DF	 VOC_LINK		 =	 ??0297	+ DESIRED_BASE_EQU
4  7852
4  7853								 IFNB	 <$SMDIVREM>
4  7854	000019EC						   LABEL   $SMDIVREM FAR
4  7855								 ENDIF
4  7856								 IFNB	 <>
4  7857								   DD	    + DESIRED_BASE_EQU
4  7858								 ELSE
4  7859	000019EC  200019F0					   DD	   ??029A + DESIRED_BASE_EQU
4  7860								 ENDIF
4  7861	000019F0			 ??029A:
2  7862								 POPDS	 EBX			 ; n1
3  7863	000019F0  5B						 POP	 EBX
2  7864								 POPDS	 EDX
3  7865	000019F1  5A						 POP	 EDX
2  7866								 POPDS	 EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 139
FKernel.asm



3  7867	000019F2  58						 POP	 EAX
2  7868	000019F3  F7 FB						 IDIV	 EBX
2  7869								 PUSHDS	 EDX			 ; n2
3  7870	000019F5  52						 PUSH	 EDX
2  7871								 PUSHDS	 EAX			 ; n3
3  7872	000019F6  50						 PUSH	 EAX
2  7873								 $NEXT
3  7874	000019F7  AD						 LODSD				 ; fetch address
3  7875								 $JMP
4  7876	000019F8  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7877	000019FA  FF E3						 JMP	 EBX			 ; execute
2  7878
2  7879					 ;******************************************************************************
2  7880					 ;  Unsigned integer math
2  7881					 ;******************************************************************************
2  7882
2  7883					 ;  6.1.2360 UM*
2  7884					 ;  Multiply u1	by u2, giving the unsigned double-cell product ud.
2  7885					 ;  All	values and arithmetic are unsigned.
2  7886					 ;  D: u1 u2 --	ud
2  7887								 $CODE	 'UM*',$UMMUL
3  7888								 $DEF	 'UM*',$UMMUL,,
4  7889	000019FC			 ??029B:
4  7890		  =MAIN:19FC		 LASTWORD		 =	 ??029B
4  7891								 IFNB	 <>
4  7892								   DB
4  7893								 ELSE
4  7894	000019FC  00						   DB	 VEF_USUAL
4  7895								 ENDIF
4  7896	000019FD  03						 DB	 ??029C	- $ - 1
4  7897	000019FE  55 4D	2A					 DB	 'UM*'
4  7898	00001A01			 ??029C:
4  7899	00001A01  05						 DB	 ??029C	- ??029B
4  7900	00001A02  200019DF					 DD	 VOC_LINK
4  7901		  =MAIN:200019FC	 VOC_LINK		 =	 ??029B	+ DESIRED_BASE_EQU
4  7902
4  7903								 IFNB	 <$UMMUL>
4  7904	00001A06						   LABEL   $UMMUL FAR
4  7905								 ENDIF
4  7906								 IFNB	 <>
4  7907								   DD	    + DESIRED_BASE_EQU
4  7908								 ELSE
4  7909	00001A06  20001A0A					   DD	   ??029E + DESIRED_BASE_EQU
4  7910								 ENDIF
4  7911	00001A0A			 ??029E:
2  7912								 POPDS	 EBX
3  7913	00001A0A  5B						 POP	 EBX
2  7914								 POPDS	 EAX
3  7915	00001A0B  58						 POP	 EAX
2  7916	00001A0C  F7 E3						 MUL	 EBX
2  7917								 PUSHDS	 EAX
3  7918	00001A0E  50						 PUSH	 EAX
2  7919								 PUSHDS	 EDX
3  7920	00001A0F  52						 PUSH	 EDX
2  7921								 $NEXT
3  7922	00001A10  AD						 LODSD				 ; fetch address
3  7923								 $JMP
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 140
FKernel.asm



4  7924	00001A11  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7925	00001A13  FF E3						 JMP	 EBX			 ; execute
2  7926
2  7927					 ;  6.1.2370 UM/MOD
2  7928					 ;  Divide ud by u1, giving the	quotient u3 and	the remainder u2.
2  7929					 ;  All	values and arithmetic are unsigned. An ambiguous condition exists if u1
2  7930					 ;  is zero or if the quotient lies outside the	range of a single-cell unsigned	integer.
2  7931					 ;  D: ud u1 --	u2 u3
2  7932								 $CODE	 'UM/MOD',$UMDIVMOD
3  7933								 $DEF	 'UM/MOD',$UMDIVMOD,,
4  7934	00001A15			 ??029F:
4  7935		  =MAIN:1A15		 LASTWORD		 =	 ??029F
4  7936								 IFNB	 <>
4  7937								   DB
4  7938								 ELSE
4  7939	00001A15  00						   DB	 VEF_USUAL
4  7940								 ENDIF
4  7941	00001A16  06						 DB	 ??02A0	- $ - 1
4  7942	00001A17  55 4D	2F 4D 4F 44				 DB	 'UM/MOD'
4  7943	00001A1D			 ??02A0:
4  7944	00001A1D  08						 DB	 ??02A0	- ??029F
4  7945	00001A1E  200019FC					 DD	 VOC_LINK
4  7946		  =MAIN:20001A15	 VOC_LINK		 =	 ??029F	+ DESIRED_BASE_EQU
4  7947
4  7948								 IFNB	 <$UMDIVMOD>
4  7949	00001A22						   LABEL   $UMDIVMOD FAR
4  7950								 ENDIF
4  7951								 IFNB	 <>
4  7952								   DD	    + DESIRED_BASE_EQU
4  7953								 ELSE
4  7954	00001A22  20001A26					   DD	   ??02A2 + DESIRED_BASE_EQU
4  7955								 ENDIF
4  7956	00001A26			 ??02A2:
2  7957								 POPDS	 EBX			 ; u1
3  7958	00001A26  5B						 POP	 EBX
2  7959								 POPDS	 EDX
3  7960	00001A27  5A						 POP	 EDX
2  7961								 POPDS	 EAX
3  7962	00001A28  58						 POP	 EAX
2  7963	00001A29  F7 F3						 DIV	 EBX
2  7964								 PUSHDS	 EDX			 ; u2
3  7965	00001A2B  52						 PUSH	 EDX
2  7966								 PUSHDS	 EAX			 ; u3
3  7967	00001A2C  50						 PUSH	 EAX
2  7968								 $NEXT
3  7969	00001A2D  AD						 LODSD				 ; fetch address
3  7970								 $JMP
4  7971	00001A2E  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  7972	00001A30  FF E3						 JMP	 EBX			 ; execute
2  7973
2  7974					 ;******************************************************************************
2  7975					 ;  Logic
2  7976					 ;******************************************************************************
2  7977
2  7978					 ;  6.1.0720 AND
2  7979					 ;  D: a b -- a	and b
2  7980								 $CODE	 'AND',$AND
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 141
FKernel.asm



3  7981								 $DEF	 'AND',$AND,,
4  7982	00001A32			 ??02A3:
4  7983		  =MAIN:1A32		 LASTWORD		 =	 ??02A3
4  7984								 IFNB	 <>
4  7985								   DB
4  7986								 ELSE
4  7987	00001A32  00						   DB	 VEF_USUAL
4  7988								 ENDIF
4  7989	00001A33  03						 DB	 ??02A4	- $ - 1
4  7990	00001A34  41 4E	44					 DB	 'AND'
4  7991	00001A37			 ??02A4:
4  7992	00001A37  05						 DB	 ??02A4	- ??02A3
4  7993	00001A38  20001A15					 DD	 VOC_LINK
4  7994		  =MAIN:20001A32	 VOC_LINK		 =	 ??02A3	+ DESIRED_BASE_EQU
4  7995
4  7996								 IFNB	 <$AND>
4  7997	00001A3C						   LABEL   $AND	FAR
4  7998								 ENDIF
4  7999								 IFNB	 <>
4  8000								   DD	    + DESIRED_BASE_EQU
4  8001								 ELSE
4  8002	00001A3C  20001A40					   DD	   ??02A6 + DESIRED_BASE_EQU
4  8003								 ENDIF
4  8004	00001A40			 ??02A6:
2  8005								 POPDS	 EBX
3  8006	00001A40  5B						 POP	 EBX
2  8007								 POPDS	 EAX
3  8008	00001A41  58						 POP	 EAX
2  8009	00001A42  23 C3						 AND	 EAX,EBX
2  8010								 PUSHDS	 EAX
3  8011	00001A44  50						 PUSH	 EAX
2  8012								 $NEXT
3  8013	00001A45  AD						 LODSD				 ; fetch address
3  8014								 $JMP
4  8015	00001A46  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8016	00001A48  FF E3						 JMP	 EBX			 ; execute
2  8017
2  8018					 ;  6.1.1720 INVERT
2  8019					 ;  D: a -- NOT	a
2  8020								 $CODE	 'INVERT',$INVERT
3  8021								 $DEF	 'INVERT',$INVERT,,
4  8022	00001A4A			 ??02A7:
4  8023		  =MAIN:1A4A		 LASTWORD		 =	 ??02A7
4  8024								 IFNB	 <>
4  8025								   DB
4  8026								 ELSE
4  8027	00001A4A  00						   DB	 VEF_USUAL
4  8028								 ENDIF
4  8029	00001A4B  06						 DB	 ??02A8	- $ - 1
4  8030	00001A4C  49 4E	56 45 52 54				 DB	 'INVERT'
4  8031	00001A52			 ??02A8:
4  8032	00001A52  08						 DB	 ??02A8	- ??02A7
4  8033	00001A53  20001A32					 DD	 VOC_LINK
4  8034		  =MAIN:20001A4A	 VOC_LINK		 =	 ??02A7	+ DESIRED_BASE_EQU
4  8035
4  8036								 IFNB	 <$INVERT>
4  8037	00001A57						   LABEL   $INVERT FAR
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 142
FKernel.asm



4  8038								 ENDIF
4  8039								 IFNB	 <>
4  8040								   DD	    + DESIRED_BASE_EQU
4  8041								 ELSE
4  8042	00001A57  20001A5B					   DD	   ??02AA + DESIRED_BASE_EQU
4  8043								 ENDIF
4  8044	00001A5B			 ??02AA:
2  8045								 POPDS	 EAX
3  8046	00001A5B  58						 POP	 EAX
2  8047	00001A5C  F7 D0						 NOT	 EAX
2  8048								 PUSHDS	 EAX
3  8049	00001A5E  50						 PUSH	 EAX
2  8050								 $NEXT
3  8051	00001A5F  AD						 LODSD				 ; fetch address
3  8052								 $JMP
4  8053	00001A60  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8054	00001A62  FF E3						 JMP	 EBX			 ; execute
2  8055
2  8056					 ;  6.1.1980 OR
2  8057					 ;  D: a b -- a	or b
2  8058								 $CODE	 'OR',$OR
3  8059								 $DEF	 'OR',$OR,,
4  8060	00001A64			 ??02AB:
4  8061		  =MAIN:1A64		 LASTWORD		 =	 ??02AB
4  8062								 IFNB	 <>
4  8063								   DB
4  8064								 ELSE
4  8065	00001A64  00						   DB	 VEF_USUAL
4  8066								 ENDIF
4  8067	00001A65  02						 DB	 ??02AC	- $ - 1
4  8068	00001A66  4F 52						 DB	 'OR'
4  8069	00001A68			 ??02AC:
4  8070	00001A68  04						 DB	 ??02AC	- ??02AB
4  8071	00001A69  20001A4A					 DD	 VOC_LINK
4  8072		  =MAIN:20001A64	 VOC_LINK		 =	 ??02AB	+ DESIRED_BASE_EQU
4  8073
4  8074								 IFNB	 <$OR>
4  8075	00001A6D						   LABEL   $OR FAR
4  8076								 ENDIF
4  8077								 IFNB	 <>
4  8078								   DD	    + DESIRED_BASE_EQU
4  8079								 ELSE
4  8080	00001A6D  20001A71					   DD	   ??02AE + DESIRED_BASE_EQU
4  8081								 ENDIF
4  8082	00001A71			 ??02AE:
2  8083								 POPDS	 EBX
3  8084	00001A71  5B						 POP	 EBX
2  8085								 POPDS	 EAX
3  8086	00001A72  58						 POP	 EAX
2  8087	00001A73  0B C3						 OR	 EAX,EBX
2  8088								 PUSHDS	 EAX
3  8089	00001A75  50						 PUSH	 EAX
2  8090								 $NEXT
3  8091	00001A76  AD						 LODSD				 ; fetch address
3  8092								 $JMP
4  8093	00001A77  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8094	00001A79  FF E3						 JMP	 EBX			 ; execute
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 143
FKernel.asm



2  8095
2  8096					 ;  6.1.2490 XOR
2  8097					 ;  D: a b -- a	xor b
2  8098								 $CODE	 'XOR',$XOR
3  8099								 $DEF	 'XOR',$XOR,,
4  8100	00001A7B			 ??02AF:
4  8101		  =MAIN:1A7B		 LASTWORD		 =	 ??02AF
4  8102								 IFNB	 <>
4  8103								   DB
4  8104								 ELSE
4  8105	00001A7B  00						   DB	 VEF_USUAL
4  8106								 ENDIF
4  8107	00001A7C  03						 DB	 ??02B0	- $ - 1
4  8108	00001A7D  58 4F	52					 DB	 'XOR'
4  8109	00001A80			 ??02B0:
4  8110	00001A80  05						 DB	 ??02B0	- ??02AF
4  8111	00001A81  20001A64					 DD	 VOC_LINK
4  8112		  =MAIN:20001A7B	 VOC_LINK		 =	 ??02AF	+ DESIRED_BASE_EQU
4  8113
4  8114								 IFNB	 <$XOR>
4  8115	00001A85						   LABEL   $XOR	FAR
4  8116								 ENDIF
4  8117								 IFNB	 <>
4  8118								   DD	    + DESIRED_BASE_EQU
4  8119								 ELSE
4  8120	00001A85  20001A89					   DD	   ??02B2 + DESIRED_BASE_EQU
4  8121								 ENDIF
4  8122	00001A89			 ??02B2:
2  8123								 POPDS	 EBX
3  8124	00001A89  5B						 POP	 EBX
2  8125								 POPDS	 EAX
3  8126	00001A8A  58						 POP	 EAX
2  8127	00001A8B  33 C3						 XOR	 EAX,EBX
2  8128								 PUSHDS	 EAX
3  8129	00001A8D  50						 PUSH	 EAX
2  8130								 $NEXT
3  8131	00001A8E  AD						 LODSD				 ; fetch address
3  8132								 $JMP
4  8133	00001A8F  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8134	00001A91  FF E3						 JMP	 EBX			 ; execute
2  8135
2  8136					 ;  UD/
2  8137					 ;  D: UD1 UD2 -- REMD QD
2  8138								 $CODE	 'UD/',$UDDIV
3  8139								 $DEF	 'UD/',$UDDIV,,
4  8140	00001A93			 ??02B3:
4  8141		  =MAIN:1A93		 LASTWORD		 =	 ??02B3
4  8142								 IFNB	 <>
4  8143								   DB
4  8144								 ELSE
4  8145	00001A93  00						   DB	 VEF_USUAL
4  8146								 ENDIF
4  8147	00001A94  03						 DB	 ??02B4	- $ - 1
4  8148	00001A95  55 44	2F					 DB	 'UD/'
4  8149	00001A98			 ??02B4:
4  8150	00001A98  05						 DB	 ??02B4	- ??02B3
4  8151	00001A99  20001A7B					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 144
FKernel.asm



4  8152		  =MAIN:20001A93	 VOC_LINK		 =	 ??02B3	+ DESIRED_BASE_EQU
4  8153
4  8154								 IFNB	 <$UDDIV>
4  8155	00001A9D						   LABEL   $UDDIV FAR
4  8156								 ENDIF
4  8157								 IFNB	 <>
4  8158								   DD	    + DESIRED_BASE_EQU
4  8159								 ELSE
4  8160	00001A9D  20001AA1					   DD	   ??02B6 + DESIRED_BASE_EQU
4  8161								 ENDIF
4  8162	00001AA1			 ??02B6:
2  8163								 PUSHRS	 EDI
3  8164	00001AA1  83 ED	04					 SUB	 EBP,CELL_SIZE
3  8165	00001AA4  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2  8166								 PUSHRS	 ESI
3  8167	00001AA7  83 ED	04					 SUB	 EBP,CELL_SIZE
3  8168	00001AAA  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  8169								 POPDS	 ECX
3  8170	00001AAD  59						 POP	 ECX
2  8171								 POPDS	 EBX
3  8172	00001AAE  5B						 POP	 EBX
2  8173								 POPDS	 EDX
3  8174	00001AAF  5A						 POP	 EDX
2  8175								 POPDS	 EAX
3  8176	00001AB0  58						 POP	 EAX
2  8177								 PUSHDS	 EBP
3  8178	00001AB1  55						 PUSH	 EBP
2  8179					 ;
2  8180	00001AB2  BD 00000040					 MOV	 EBP,64
2  8181	00001AB7  33 F6						 XOR	 ESI,ESI
2  8182	00001AB9  33 FF						 XOR	 EDI,EDI
2  8183	00001ABB			 UD_LOOP:
2  8184	00001ABB  D1 E0						 SHL	 EAX,1
2  8185	00001ABD  D1 D2						 RCL	 EDX,1
2  8186	00001ABF  D1 D7						 RCL	 EDI,1
2  8187	00001AC1  D1 D6						 RCL	 ESI,1
2  8188	00001AC3  3B F1						 CMP	 ESI,ECX
2  8189	00001AC5  77 06						 JA	 SHORT UD_DIV
2  8190	00001AC7  72 09						 JB	 SHORT UD_NEXT
2  8191	00001AC9  3B FB						 CMP	 EDI,EBX
2  8192	00001ACB  72 05						 JB	 SHORT UD_NEXT
2  8193	00001ACD			 UD_DIV:
2  8194	00001ACD  2B FB						 SUB	 EDI,EBX
2  8195	00001ACF  1B F1						 SBB	 ESI,ECX
2  8196	00001AD1  40						 INC	 EAX
2  8197	00001AD2			 UD_NEXT:
2  8198	00001AD2  4D						 DEC	 EBP
2  8199	00001AD3  75 E6						 JNE	 UD_LOOP
2  8200					 ;
2  8201								 POPDS	 EBP
3  8202	00001AD5  5D						 POP	 EBP
2  8203								 PUSHDS	 EDI
3  8204	00001AD6  57						 PUSH	 EDI
2  8205								 PUSHDS	 ESI
3  8206	00001AD7  56						 PUSH	 ESI
2  8207								 PUSHDS	 EAX
3  8208	00001AD8  50						 PUSH	 EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 145
FKernel.asm



2  8209								 PUSHDS	 EDX
3  8210	00001AD9  52						 PUSH	 EDX
2  8211								 POPRS	 ESI
3  8212	00001ADA  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  8213	00001ADD  83 C5	04					 ADD	 EBP,CELL_SIZE
2  8214								 POPRS	 EDI
3  8215	00001AE0  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  8216	00001AE3  83 C5	04					 ADD	 EBP,CELL_SIZE
2  8217								 $NEXT
3  8218	00001AE6  AD						 LODSD				 ; fetch address
3  8219								 $JMP
4  8220	00001AE7  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8221	00001AE9  FF E3						 JMP	 EBX			 ; execute
2  8222
2  8223
1  8224								 INCLUDE "compare.inc"
2  8225					 ;******************************************************************************
2  8226					 ;
2  8227					 ;  compare.inc
2  8228					 ;  IKForth
2  8229					 ;
2  8230					 ;  Copyright (C) 1999-2003 Illya Kysil
2  8231					 ;
2  8232					 ;******************************************************************************
2  8233					 ;  Compare
2  8234					 ;******************************************************************************
2  8235
2  8236					 ;  6.2.1485 FALSE
2  8237					 ;  Return a false flag.
2  8238					 ;  D: -- false
2  8239								 $CODE	 'FALSE',$FALSE
3  8240								 $DEF	 'FALSE',$FALSE,,
4  8241	00001AEB			 ??02B7:
4  8242		  =MAIN:1AEB		 LASTWORD		 =	 ??02B7
4  8243								 IFNB	 <>
4  8244								   DB
4  8245								 ELSE
4  8246	00001AEB  00						   DB	 VEF_USUAL
4  8247								 ENDIF
4  8248	00001AEC  05						 DB	 ??02B8	- $ - 1
4  8249	00001AED  46 41	4C 53 45				 DB	 'FALSE'
4  8250	00001AF2			 ??02B8:
4  8251	00001AF2  07						 DB	 ??02B8	- ??02B7
4  8252	00001AF3  20001A93					 DD	 VOC_LINK
4  8253		  =MAIN:20001AEB	 VOC_LINK		 =	 ??02B7	+ DESIRED_BASE_EQU
4  8254
4  8255								 IFNB	 <$FALSE>
4  8256	00001AF7						   LABEL   $FALSE FAR
4  8257								 ENDIF
4  8258								 IFNB	 <>
4  8259								   DD	    + DESIRED_BASE_EQU
4  8260								 ELSE
4  8261	00001AF7  20001AFB					   DD	   ??02BA + DESIRED_BASE_EQU
4  8262								 ENDIF
4  8263	00001AFB			 ??02BA:
2  8264								 PUSHDS	 F_FALSE
3  8265	00001AFB  6A 00						 PUSH	 F_FALSE
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 146
FKernel.asm



2  8266								 $NEXT
3  8267	00001AFD  AD						 LODSD				 ; fetch address
3  8268								 $JMP
4  8269	00001AFE  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8270	00001B00  FF E3						 JMP	 EBX			 ; execute
2  8271
2  8272					 ;  6.2.2298 TRUE
2  8273					 ;  Return a true flag,	a single-cell value with all bits set.
2  8274					 ;  D: -- true
2  8275								 $CODE	 'TRUE',$TRUE
3  8276								 $DEF	 'TRUE',$TRUE,,
4  8277	00001B02			 ??02BB:
4  8278		  =MAIN:1B02		 LASTWORD		 =	 ??02BB
4  8279								 IFNB	 <>
4  8280								   DB
4  8281								 ELSE
4  8282	00001B02  00						   DB	 VEF_USUAL
4  8283								 ENDIF
4  8284	00001B03  04						 DB	 ??02BC	- $ - 1
4  8285	00001B04  54 52	55 45					 DB	 'TRUE'
4  8286	00001B08			 ??02BC:
4  8287	00001B08  06						 DB	 ??02BC	- ??02BB
4  8288	00001B09  20001AEB					 DD	 VOC_LINK
4  8289		  =MAIN:20001B02	 VOC_LINK		 =	 ??02BB	+ DESIRED_BASE_EQU
4  8290
4  8291								 IFNB	 <$TRUE>
4  8292	00001B0D						   LABEL   $TRUE FAR
4  8293								 ENDIF
4  8294								 IFNB	 <>
4  8295								   DD	    + DESIRED_BASE_EQU
4  8296								 ELSE
4  8297	00001B0D  20001B11					   DD	   ??02BE + DESIRED_BASE_EQU
4  8298								 ENDIF
4  8299	00001B11			 ??02BE:
2  8300								 PUSHDS	 F_TRUE
3  8301	00001B11  6A FF						 PUSH	 F_TRUE
2  8302								 $NEXT
3  8303	00001B13  AD						 LODSD				 ; fetch address
3  8304								 $JMP
4  8305	00001B14  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8306	00001B16  FF E3						 JMP	 EBX			 ; execute
2  8307
2  8308					 ;  <
2  8309								 $CODE	 '<',$LE
3  8310								 $DEF	 '<',$LE,,
4  8311	00001B18			 ??02BF:
4  8312		  =MAIN:1B18		 LASTWORD		 =	 ??02BF
4  8313								 IFNB	 <>
4  8314								   DB
4  8315								 ELSE
4  8316	00001B18  00						   DB	 VEF_USUAL
4  8317								 ENDIF
4  8318	00001B19  01						 DB	 ??02C0	- $ - 1
4  8319	00001B1A  3C						 DB	 '<'
4  8320	00001B1B			 ??02C0:
4  8321	00001B1B  03						 DB	 ??02C0	- ??02BF
4  8322	00001B1C  20001B02					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 147
FKernel.asm



4  8323		  =MAIN:20001B18	 VOC_LINK		 =	 ??02BF	+ DESIRED_BASE_EQU
4  8324
4  8325								 IFNB	 <$LE>
4  8326	00001B20						   LABEL   $LE FAR
4  8327								 ENDIF
4  8328								 IFNB	 <>
4  8329								   DD	    + DESIRED_BASE_EQU
4  8330								 ELSE
4  8331	00001B20  20001B24					   DD	   ??02C2 + DESIRED_BASE_EQU
4  8332								 ENDIF
4  8333	00001B24			 ??02C2:
2  8334								 POPDS	 EBX
3  8335	00001B24  5B						 POP	 EBX
2  8336								 POPDS	 EAX
3  8337	00001B25  58						 POP	 EAX
2  8338	00001B26  3B C3						 CMP	 EAX,EBX
2  8339	00001B28  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8340	00001B2D  7C 05						 JL	 SHORT LE_YES
2  8341	00001B2F  B8 00000000					 MOV	 EAX,F_FALSE
2  8342	00001B34			 LE_YES:
2  8343								 PUSHDS	 EAX
3  8344	00001B34  50						 PUSH	 EAX
2  8345								 $NEXT
3  8346	00001B35  AD						 LODSD				 ; fetch address
3  8347								 $JMP
4  8348	00001B36  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8349	00001B38  FF E3						 JMP	 EBX			 ; execute
2  8350
2  8351					 ;  >
2  8352								 $CODE	 '>',$GR
3  8353								 $DEF	 '>',$GR,,
4  8354	00001B3A			 ??02C3:
4  8355		  =MAIN:1B3A		 LASTWORD		 =	 ??02C3
4  8356								 IFNB	 <>
4  8357								   DB
4  8358								 ELSE
4  8359	00001B3A  00						   DB	 VEF_USUAL
4  8360								 ENDIF
4  8361	00001B3B  01						 DB	 ??02C4	- $ - 1
4  8362	00001B3C  3E						 DB	 '>'
4  8363	00001B3D			 ??02C4:
4  8364	00001B3D  03						 DB	 ??02C4	- ??02C3
4  8365	00001B3E  20001B18					 DD	 VOC_LINK
4  8366		  =MAIN:20001B3A	 VOC_LINK		 =	 ??02C3	+ DESIRED_BASE_EQU
4  8367
4  8368								 IFNB	 <$GR>
4  8369	00001B42						   LABEL   $GR FAR
4  8370								 ENDIF
4  8371								 IFNB	 <>
4  8372								   DD	    + DESIRED_BASE_EQU
4  8373								 ELSE
4  8374	00001B42  20001B46					   DD	   ??02C6 + DESIRED_BASE_EQU
4  8375								 ENDIF
4  8376	00001B46			 ??02C6:
2  8377								 POPDS	 EBX
3  8378	00001B46  5B						 POP	 EBX
2  8379								 POPDS	 EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 148
FKernel.asm



3  8380	00001B47  58						 POP	 EAX
2  8381	00001B48  3B C3						 CMP	 EAX,EBX
2  8382	00001B4A  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8383	00001B4F  7F 05						 JG	 SHORT GR_YES
2  8384	00001B51  B8 00000000					 MOV	 EAX,F_FALSE
2  8385	00001B56			 GR_YES:
2  8386								 PUSHDS	 EAX
3  8387	00001B56  50						 PUSH	 EAX
2  8388								 $NEXT
3  8389	00001B57  AD						 LODSD				 ; fetch address
3  8390								 $JMP
4  8391	00001B58  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8392	00001B5A  FF E3						 JMP	 EBX			 ; execute
2  8393
2  8394					 ;  6.1.0530 =
2  8395					 ;  D: a b -- flag ( a = b )
2  8396								 $CODE	 '=',$EQ
3  8397								 $DEF	 '=',$EQ,,
4  8398	00001B5C			 ??02C7:
4  8399		  =MAIN:1B5C		 LASTWORD		 =	 ??02C7
4  8400								 IFNB	 <>
4  8401								   DB
4  8402								 ELSE
4  8403	00001B5C  00						   DB	 VEF_USUAL
4  8404								 ENDIF
4  8405	00001B5D  01						 DB	 ??02C8	- $ - 1
4  8406	00001B5E  3D						 DB	 '='
4  8407	00001B5F			 ??02C8:
4  8408	00001B5F  03						 DB	 ??02C8	- ??02C7
4  8409	00001B60  20001B3A					 DD	 VOC_LINK
4  8410		  =MAIN:20001B5C	 VOC_LINK		 =	 ??02C7	+ DESIRED_BASE_EQU
4  8411
4  8412								 IFNB	 <$EQ>
4  8413	00001B64						   LABEL   $EQ FAR
4  8414								 ENDIF
4  8415								 IFNB	 <>
4  8416								   DD	    + DESIRED_BASE_EQU
4  8417								 ELSE
4  8418	00001B64  20001B68					   DD	   ??02CA + DESIRED_BASE_EQU
4  8419								 ENDIF
4  8420	00001B68			 ??02CA:
2  8421								 POPDS	 EBX
3  8422	00001B68  5B						 POP	 EBX
2  8423								 POPDS	 EAX
3  8424	00001B69  58						 POP	 EAX
2  8425	00001B6A  3B C3						 CMP	 EAX,EBX
2  8426	00001B6C  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8427	00001B71  74 05						 JZ	 SHORT EQ_YES
2  8428	00001B73  B8 00000000					 MOV	 EAX,F_FALSE
2  8429	00001B78			 EQ_YES:
2  8430								 PUSHDS	 EAX
3  8431	00001B78  50						 PUSH	 EAX
2  8432								 $NEXT
3  8433	00001B79  AD						 LODSD				 ; fetch address
3  8434								 $JMP
4  8435	00001B7A  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8436	00001B7C  FF E3						 JMP	 EBX			 ; execute
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 149
FKernel.asm



2  8437
2  8438					 ;  6.2.0500 <>
2  8439					 ;  Flag is true if and	only if	x1 is not bit-for-bit the same as x2.
2  8440					 ;  D: x1 x2 --	flag
2  8441								 $CODE	 '<>',$NOEQ
3  8442								 $DEF	 '<>',$NOEQ,,
4  8443	00001B7E			 ??02CB:
4  8444		  =MAIN:1B7E		 LASTWORD		 =	 ??02CB
4  8445								 IFNB	 <>
4  8446								   DB
4  8447								 ELSE
4  8448	00001B7E  00						   DB	 VEF_USUAL
4  8449								 ENDIF
4  8450	00001B7F  02						 DB	 ??02CC	- $ - 1
4  8451	00001B80  3C 3E						 DB	 '<>'
4  8452	00001B82			 ??02CC:
4  8453	00001B82  04						 DB	 ??02CC	- ??02CB
4  8454	00001B83  20001B5C					 DD	 VOC_LINK
4  8455		  =MAIN:20001B7E	 VOC_LINK		 =	 ??02CB	+ DESIRED_BASE_EQU
4  8456
4  8457								 IFNB	 <$NOEQ>
4  8458	00001B87						   LABEL   $NOEQ FAR
4  8459								 ENDIF
4  8460								 IFNB	 <>
4  8461								   DD	    + DESIRED_BASE_EQU
4  8462								 ELSE
4  8463	00001B87  20001B8B					   DD	   ??02CE + DESIRED_BASE_EQU
4  8464								 ENDIF
4  8465	00001B8B			 ??02CE:
2  8466								 POPDS	 EBX
3  8467	00001B8B  5B						 POP	 EBX
2  8468								 POPDS	 EAX
3  8469	00001B8C  58						 POP	 EAX
2  8470	00001B8D  3B C3						 CMP	 EAX,EBX
2  8471	00001B8F  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8472	00001B94  75 05						 JNZ	 SHORT NOEQ_YES
2  8473	00001B96  B8 00000000					 MOV	 EAX,F_FALSE
2  8474	00001B9B			 NOEQ_YES:
2  8475								 PUSHDS	 EAX
3  8476	00001B9B  50						 PUSH	 EAX
2  8477								 $NEXT
3  8478	00001B9C  AD						 LODSD				 ; fetch address
3  8479								 $JMP
4  8480	00001B9D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8481	00001B9F  FF E3						 JMP	 EBX			 ; execute
2  8482
2  8483					 ;  6.1.0250 0<
2  8484					 ;  D: a -- flag ( a < 0 )
2  8485								 $CODE	 '0<',$ZEROLE
3  8486								 $DEF	 '0<',$ZEROLE,,
4  8487	00001BA1			 ??02CF:
4  8488		  =MAIN:1BA1		 LASTWORD		 =	 ??02CF
4  8489								 IFNB	 <>
4  8490								   DB
4  8491								 ELSE
4  8492	00001BA1  00						   DB	 VEF_USUAL
4  8493								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 150
FKernel.asm



4  8494	00001BA2  02						 DB	 ??02D0	- $ - 1
4  8495	00001BA3  30 3C						 DB	 '0<'
4  8496	00001BA5			 ??02D0:
4  8497	00001BA5  04						 DB	 ??02D0	- ??02CF
4  8498	00001BA6  20001B7E					 DD	 VOC_LINK
4  8499		  =MAIN:20001BA1	 VOC_LINK		 =	 ??02CF	+ DESIRED_BASE_EQU
4  8500
4  8501								 IFNB	 <$ZEROLE>
4  8502	00001BAA						   LABEL   $ZEROLE FAR
4  8503								 ENDIF
4  8504								 IFNB	 <>
4  8505								   DD	    + DESIRED_BASE_EQU
4  8506								 ELSE
4  8507	00001BAA  20001BAE					   DD	   ??02D2 + DESIRED_BASE_EQU
4  8508								 ENDIF
4  8509	00001BAE			 ??02D2:
2  8510								 POPDS	 EAX
3  8511	00001BAE  58						 POP	 EAX
2  8512	00001BAF  0B C0						 OR	 EAX,EAX
2  8513	00001BB1  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8514	00001BB6  7C 05						 JL	 SHORT ZEROLE_YES
2  8515	00001BB8  B8 00000000					 MOV	 EAX,F_FALSE
2  8516	00001BBD			 ZEROLE_YES:
2  8517								 PUSHDS	 EAX
3  8518	00001BBD  50						 PUSH	 EAX
2  8519								 $NEXT
3  8520	00001BBE  AD						 LODSD				 ; fetch address
3  8521								 $JMP
4  8522	00001BBF  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8523	00001BC1  FF E3						 JMP	 EBX			 ; execute
2  8524
2  8525					 ;  6.1.0270 0=
2  8526					 ;  D: a -- flag ( a = 0 )
2  8527								 $CODE	 '0=',$ZEROEQ
3  8528								 $DEF	 '0=',$ZEROEQ,,
4  8529	00001BC3			 ??02D3:
4  8530		  =MAIN:1BC3		 LASTWORD		 =	 ??02D3
4  8531								 IFNB	 <>
4  8532								   DB
4  8533								 ELSE
4  8534	00001BC3  00						   DB	 VEF_USUAL
4  8535								 ENDIF
4  8536	00001BC4  02						 DB	 ??02D4	- $ - 1
4  8537	00001BC5  30 3D						 DB	 '0='
4  8538	00001BC7			 ??02D4:
4  8539	00001BC7  04						 DB	 ??02D4	- ??02D3
4  8540	00001BC8  20001BA1					 DD	 VOC_LINK
4  8541		  =MAIN:20001BC3	 VOC_LINK		 =	 ??02D3	+ DESIRED_BASE_EQU
4  8542
4  8543								 IFNB	 <$ZEROEQ>
4  8544	00001BCC						   LABEL   $ZEROEQ FAR
4  8545								 ENDIF
4  8546								 IFNB	 <>
4  8547								   DD	    + DESIRED_BASE_EQU
4  8548								 ELSE
4  8549	00001BCC  20001BD0					   DD	   ??02D6 + DESIRED_BASE_EQU
4  8550								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 151
FKernel.asm



4  8551	00001BD0			 ??02D6:
2  8552								 POPDS	 EAX
3  8553	00001BD0  58						 POP	 EAX
2  8554	00001BD1  0B C0						 OR	 EAX,EAX
2  8555	00001BD3  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8556	00001BD8  74 05						 JZ	 SHORT ZEROEQ_YES
2  8557	00001BDA  B8 00000000					 MOV	 EAX,F_FALSE
2  8558	00001BDF			 ZEROEQ_YES:
2  8559								 PUSHDS	 EAX
3  8560	00001BDF  50						 PUSH	 EAX
2  8561								 $NEXT
3  8562	00001BE0  AD						 LODSD				 ; fetch address
3  8563								 $JMP
4  8564	00001BE1  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8565	00001BE3  FF E3						 JMP	 EBX			 ; execute
2  8566
2  8567					 ;  6.2.0260 0<>
2  8568					 ;  Flag is true if and	only if	x is not equal to zero.
2  8569					 ;  D: x -- flag
2  8570								 $CODE	 '0<>',$ZERONOEQ
3  8571								 $DEF	 '0<>',$ZERONOEQ,,
4  8572	00001BE5			 ??02D7:
4  8573		  =MAIN:1BE5		 LASTWORD		 =	 ??02D7
4  8574								 IFNB	 <>
4  8575								   DB
4  8576								 ELSE
4  8577	00001BE5  00						   DB	 VEF_USUAL
4  8578								 ENDIF
4  8579	00001BE6  03						 DB	 ??02D8	- $ - 1
4  8580	00001BE7  30 3C	3E					 DB	 '0<>'
4  8581	00001BEA			 ??02D8:
4  8582	00001BEA  05						 DB	 ??02D8	- ??02D7
4  8583	00001BEB  20001BC3					 DD	 VOC_LINK
4  8584		  =MAIN:20001BE5	 VOC_LINK		 =	 ??02D7	+ DESIRED_BASE_EQU
4  8585
4  8586								 IFNB	 <$ZERONOEQ>
4  8587	00001BEF						   LABEL   $ZERONOEQ FAR
4  8588								 ENDIF
4  8589								 IFNB	 <>
4  8590								   DD	    + DESIRED_BASE_EQU
4  8591								 ELSE
4  8592	00001BEF  20001BF3					   DD	   ??02DA + DESIRED_BASE_EQU
4  8593								 ENDIF
4  8594	00001BF3			 ??02DA:
2  8595								 POPDS	 EAX
3  8596	00001BF3  58						 POP	 EAX
2  8597	00001BF4  0B C0						 OR	 EAX,EAX
2  8598	00001BF6  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8599	00001BFB  75 05						 JNZ	 SHORT ZERONOEQ_YES
2  8600	00001BFD  B8 00000000					 MOV	 EAX,F_FALSE
2  8601	00001C02			 ZERONOEQ_YES:
2  8602								 PUSHDS	 EAX
3  8603	00001C02  50						 PUSH	 EAX
2  8604								 $NEXT
3  8605	00001C03  AD						 LODSD				 ; fetch address
3  8606								 $JMP
4  8607	00001C04  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 152
FKernel.asm



4  8608	00001C06  FF E3						 JMP	 EBX			 ; execute
2  8609
2  8610					 ;  6.2.0280 0>
2  8611					 ;  Flag is true if and	only if	n is greater than zero.
2  8612					 ;  D: n -- flag
2  8613								 $CODE	 '0>',$ZEROGR
3  8614								 $DEF	 '0>',$ZEROGR,,
4  8615	00001C08			 ??02DB:
4  8616		  =MAIN:1C08		 LASTWORD		 =	 ??02DB
4  8617								 IFNB	 <>
4  8618								   DB
4  8619								 ELSE
4  8620	00001C08  00						   DB	 VEF_USUAL
4  8621								 ENDIF
4  8622	00001C09  02						 DB	 ??02DC	- $ - 1
4  8623	00001C0A  30 3E						 DB	 '0>'
4  8624	00001C0C			 ??02DC:
4  8625	00001C0C  04						 DB	 ??02DC	- ??02DB
4  8626	00001C0D  20001BE5					 DD	 VOC_LINK
4  8627		  =MAIN:20001C08	 VOC_LINK		 =	 ??02DB	+ DESIRED_BASE_EQU
4  8628
4  8629								 IFNB	 <$ZEROGR>
4  8630	00001C11						   LABEL   $ZEROGR FAR
4  8631								 ENDIF
4  8632								 IFNB	 <>
4  8633								   DD	    + DESIRED_BASE_EQU
4  8634								 ELSE
4  8635	00001C11  20001C15					   DD	   ??02DE + DESIRED_BASE_EQU
4  8636								 ENDIF
4  8637	00001C15			 ??02DE:
2  8638								 POPDS	 EAX
3  8639	00001C15  58						 POP	 EAX
2  8640	00001C16  0B C0						 OR	 EAX,EAX
2  8641	00001C18  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8642	00001C1D  7F 05						 JG	 SHORT ZEROGR_YES
2  8643	00001C1F  B8 00000000					 MOV	 EAX,F_FALSE
2  8644	00001C24			 ZEROGR_YES:
2  8645								 PUSHDS	 EAX
3  8646	00001C24  50						 PUSH	 EAX
2  8647								 $NEXT
3  8648	00001C25  AD						 LODSD				 ; fetch address
3  8649								 $JMP
4  8650	00001C26  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8651	00001C28  FF E3						 JMP	 EBX			 ; execute
2  8652
2  8653					 ;******************************************************************************
2  8654					 ;  Unsigned compare
2  8655					 ;******************************************************************************
2  8656
2  8657					 ;  6.1.2340 U<
2  8658					 ;  Flag is true if and	only if	u1 is less than	u2.
2  8659					 ;  D: u1 u2 --	flag ( u1 < u2 )
2  8660								 $CODE	 'U<',$ULE
3  8661								 $DEF	 'U<',$ULE,,
4  8662	00001C2A			 ??02DF:
4  8663		  =MAIN:1C2A		 LASTWORD		 =	 ??02DF
4  8664								 IFNB	 <>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 153
FKernel.asm



4  8665								   DB
4  8666								 ELSE
4  8667	00001C2A  00						   DB	 VEF_USUAL
4  8668								 ENDIF
4  8669	00001C2B  02						 DB	 ??02E0	- $ - 1
4  8670	00001C2C  55 3C						 DB	 'U<'
4  8671	00001C2E			 ??02E0:
4  8672	00001C2E  04						 DB	 ??02E0	- ??02DF
4  8673	00001C2F  20001C08					 DD	 VOC_LINK
4  8674		  =MAIN:20001C2A	 VOC_LINK		 =	 ??02DF	+ DESIRED_BASE_EQU
4  8675
4  8676								 IFNB	 <$ULE>
4  8677	00001C33						   LABEL   $ULE	FAR
4  8678								 ENDIF
4  8679								 IFNB	 <>
4  8680								   DD	    + DESIRED_BASE_EQU
4  8681								 ELSE
4  8682	00001C33  20001C37					   DD	   ??02E2 + DESIRED_BASE_EQU
4  8683								 ENDIF
4  8684	00001C37			 ??02E2:
2  8685								 POPDS	 EBX
3  8686	00001C37  5B						 POP	 EBX
2  8687								 POPDS	 EAX
3  8688	00001C38  58						 POP	 EAX
2  8689	00001C39  3B C3						 CMP	 EAX,EBX
2  8690	00001C3B  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8691	00001C40  72 05						 JB	 SHORT ULE_YES		 ; jump	if EAX < EBX
2  8692	00001C42  B8 00000000					 MOV	 EAX,F_FALSE
2  8693	00001C47			 ULE_YES:
2  8694								 PUSHDS	 EAX
3  8695	00001C47  50						 PUSH	 EAX
2  8696								 $NEXT
3  8697	00001C48  AD						 LODSD				 ; fetch address
3  8698								 $JMP
4  8699	00001C49  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8700	00001C4B  FF E3						 JMP	 EBX			 ; execute
2  8701
2  8702					 ;  6.2.2350 U>
2  8703					 ;  D: u1 u2 --	flag
2  8704					 ;  flag is true if and	only if	u1 is greater than u2.
2  8705								 $CODE	 'U>',$UGR
3  8706								 $DEF	 'U>',$UGR,,
4  8707	00001C4D			 ??02E3:
4  8708		  =MAIN:1C4D		 LASTWORD		 =	 ??02E3
4  8709								 IFNB	 <>
4  8710								   DB
4  8711								 ELSE
4  8712	00001C4D  00						   DB	 VEF_USUAL
4  8713								 ENDIF
4  8714	00001C4E  02						 DB	 ??02E4	- $ - 1
4  8715	00001C4F  55 3E						 DB	 'U>'
4  8716	00001C51			 ??02E4:
4  8717	00001C51  04						 DB	 ??02E4	- ??02E3
4  8718	00001C52  20001C2A					 DD	 VOC_LINK
4  8719		  =MAIN:20001C4D	 VOC_LINK		 =	 ??02E3	+ DESIRED_BASE_EQU
4  8720
4  8721								 IFNB	 <$UGR>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 154
FKernel.asm



4  8722	00001C56						   LABEL   $UGR	FAR
4  8723								 ENDIF
4  8724								 IFNB	 <>
4  8725								   DD	    + DESIRED_BASE_EQU
4  8726								 ELSE
4  8727	00001C56  20001C5A					   DD	   ??02E6 + DESIRED_BASE_EQU
4  8728								 ENDIF
4  8729	00001C5A			 ??02E6:
2  8730								 POPDS	 EBX
3  8731	00001C5A  5B						 POP	 EBX
2  8732								 POPDS	 EAX
3  8733	00001C5B  58						 POP	 EAX
2  8734	00001C5C  3B C3						 CMP	 EAX,EBX
2  8735	00001C5E  B8 FFFFFFFF					 MOV	 EAX,F_TRUE
2  8736	00001C63  77 05						 JA	 SHORT UGR_YES		 ; jump	if EAX > EBX
2  8737	00001C65  B8 00000000					 MOV	 EAX,F_FALSE
2  8738	00001C6A			 UGR_YES:
2  8739								 PUSHDS	 EAX
3  8740	00001C6A  50						 PUSH	 EAX
2  8741								 $NEXT
3  8742	00001C6B  AD						 LODSD				 ; fetch address
3  8743								 $JMP
4  8744	00001C6C  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8745	00001C6E  FF E3						 JMP	 EBX			 ; execute
2  8746
2  8747
1  8748								 INCLUDE "memory.inc"
2  8749					 ;******************************************************************************
2  8750					 ;
2  8751					 ;  memory.inc
2  8752					 ;  IKForth
2  8753					 ;
2  8754					 ;  Copyright (C) 1999-2003 Illya Kysil
2  8755					 ;
2  8756					 ;******************************************************************************
2  8757					 ;  Memory
2  8758					 ;******************************************************************************
2  8759
2  8760					 ;  6.1.0010 !
2  8761					 ;  Store x to the specified memory address
2  8762					 ;  D: x addr --
2  8763								 $CODE	 '!',$STORE
3  8764								 $DEF	 '!',$STORE,,
4  8765	00001C70			 ??02E7:
4  8766		  =MAIN:1C70		 LASTWORD		 =	 ??02E7
4  8767								 IFNB	 <>
4  8768								   DB
4  8769								 ELSE
4  8770	00001C70  00						   DB	 VEF_USUAL
4  8771								 ENDIF
4  8772	00001C71  01						 DB	 ??02E8	- $ - 1
4  8773	00001C72  21						 DB	 '!'
4  8774	00001C73			 ??02E8:
4  8775	00001C73  03						 DB	 ??02E8	- ??02E7
4  8776	00001C74  20001C4D					 DD	 VOC_LINK
4  8777		  =MAIN:20001C70	 VOC_LINK		 =	 ??02E7	+ DESIRED_BASE_EQU
4  8778
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 155
FKernel.asm



4  8779								 IFNB	 <$STORE>
4  8780	00001C78						   LABEL   $STORE FAR
4  8781								 ENDIF
4  8782								 IFNB	 <>
4  8783								   DD	    + DESIRED_BASE_EQU
4  8784								 ELSE
4  8785	00001C78  20001C7C					   DD	   ??02EA + DESIRED_BASE_EQU
4  8786								 ENDIF
4  8787	00001C7C			 ??02EA:
2  8788								 POPDS	 EBX
3  8789	00001C7C  5B						 POP	 EBX
2  8790								 POPDS	 EAX
3  8791	00001C7D  58						 POP	 EAX
2  8792	00001C7E  89 03						 MOV	 [DWORD	PTR EBX],EAX
2  8793								 $NEXT
3  8794	00001C80  AD						 LODSD				 ; fetch address
3  8795								 $JMP
4  8796	00001C81  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8797	00001C83  FF E3						 JMP	 EBX			 ; execute
2  8798
2  8799					 ;  6.1.0650 @
2  8800					 ;  Fetch a value from the specified address
2  8801					 ;  D: addr -- x
2  8802								 $CODE	 '@',$FETCH
3  8803								 $DEF	 '@',$FETCH,,
4  8804	00001C85			 ??02EB:
4  8805		  =MAIN:1C85		 LASTWORD		 =	 ??02EB
4  8806								 IFNB	 <>
4  8807								   DB
4  8808								 ELSE
4  8809	00001C85  00						   DB	 VEF_USUAL
4  8810								 ENDIF
4  8811	00001C86  01						 DB	 ??02EC	- $ - 1
4  8812	00001C87  40						 DB	 '@'
4  8813	00001C88			 ??02EC:
4  8814	00001C88  03						 DB	 ??02EC	- ??02EB
4  8815	00001C89  20001C70					 DD	 VOC_LINK
4  8816		  =MAIN:20001C85	 VOC_LINK		 =	 ??02EB	+ DESIRED_BASE_EQU
4  8817
4  8818								 IFNB	 <$FETCH>
4  8819	00001C8D						   LABEL   $FETCH FAR
4  8820								 ENDIF
4  8821								 IFNB	 <>
4  8822								   DD	    + DESIRED_BASE_EQU
4  8823								 ELSE
4  8824	00001C8D  20001C91					   DD	   ??02EE + DESIRED_BASE_EQU
4  8825								 ENDIF
4  8826	00001C91			 ??02EE:
2  8827								 POPDS	 EBX
3  8828	00001C91  5B						 POP	 EBX
2  8829								 PUSHDS	 <[DWORD PTR EBX]>
3  8830	00001C92  FF 33						 PUSH	 [DWORD	PTR EBX]
2  8831								 $NEXT
3  8832	00001C94  AD						 LODSD				 ; fetch address
3  8833								 $JMP
4  8834	00001C95  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8835	00001C97  FF E3						 JMP	 EBX			 ; execute
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 156
FKernel.asm



2  8836
2  8837					 ;  6.1.0310 2!
2  8838					 ;  Store two top cells	from the stack to the memory
2  8839					 ;  D: x1 x2 addr --
2  8840								 $CODE	 '2!',$2STORE
3  8841								 $DEF	 '2!',$2STORE,,
4  8842	00001C99			 ??02EF:
4  8843		  =MAIN:1C99		 LASTWORD		 =	 ??02EF
4  8844								 IFNB	 <>
4  8845								   DB
4  8846								 ELSE
4  8847	00001C99  00						   DB	 VEF_USUAL
4  8848								 ENDIF
4  8849	00001C9A  02						 DB	 ??02F0	- $ - 1
4  8850	00001C9B  32 21						 DB	 '2!'
4  8851	00001C9D			 ??02F0:
4  8852	00001C9D  04						 DB	 ??02F0	- ??02EF
4  8853	00001C9E  20001C85					 DD	 VOC_LINK
4  8854		  =MAIN:20001C99	 VOC_LINK		 =	 ??02EF	+ DESIRED_BASE_EQU
4  8855
4  8856								 IFNB	 <$2STORE>
4  8857	00001CA2						   LABEL   $2STORE FAR
4  8858								 ENDIF
4  8859								 IFNB	 <>
4  8860								   DD	    + DESIRED_BASE_EQU
4  8861								 ELSE
4  8862	00001CA2  20001CA6					   DD	   ??02F2 + DESIRED_BASE_EQU
4  8863								 ENDIF
4  8864	00001CA6			 ??02F2:
2  8865								 POPDS	 EBX
3  8866	00001CA6  5B						 POP	 EBX
2  8867								 POPDS	 <[DWORD PTR EBX]>
3  8868	00001CA7  8F 03						 POP	 [DWORD	PTR EBX]
2  8869								 POPDS	 <[DWORD PTR EBX + CELL_SIZE]>
3  8870	00001CA9  8F 43	04					 POP	 [DWORD	PTR EBX	+ CELL_SIZE]
2  8871								 $NEXT
3  8872	00001CAC  AD						 LODSD				 ; fetch address
3  8873								 $JMP
4  8874	00001CAD  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8875	00001CAF  FF E3						 JMP	 EBX			 ; execute
2  8876
2  8877					 ;  6.1.0350 2@
2  8878					 ;  Fetch two cells from the memory and	put them on stack
2  8879					 ;  D: addr -- x1 x2
2  8880								 $CODE	 '2@',$2FETCH
3  8881								 $DEF	 '2@',$2FETCH,,
4  8882	00001CB1			 ??02F3:
4  8883		  =MAIN:1CB1		 LASTWORD		 =	 ??02F3
4  8884								 IFNB	 <>
4  8885								   DB
4  8886								 ELSE
4  8887	00001CB1  00						   DB	 VEF_USUAL
4  8888								 ENDIF
4  8889	00001CB2  02						 DB	 ??02F4	- $ - 1
4  8890	00001CB3  32 40						 DB	 '2@'
4  8891	00001CB5			 ??02F4:
4  8892	00001CB5  04						 DB	 ??02F4	- ??02F3
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 157
FKernel.asm



4  8893	00001CB6  20001C99					 DD	 VOC_LINK
4  8894		  =MAIN:20001CB1	 VOC_LINK		 =	 ??02F3	+ DESIRED_BASE_EQU
4  8895
4  8896								 IFNB	 <$2FETCH>
4  8897	00001CBA						   LABEL   $2FETCH FAR
4  8898								 ENDIF
4  8899								 IFNB	 <>
4  8900								   DD	    + DESIRED_BASE_EQU
4  8901								 ELSE
4  8902	00001CBA  20001CBE					   DD	   ??02F6 + DESIRED_BASE_EQU
4  8903								 ENDIF
4  8904	00001CBE			 ??02F6:
2  8905								 POPDS	 EBX
3  8906	00001CBE  5B						 POP	 EBX
2  8907								 PUSHDS	 <[DWORD PTR EBX + CELL_SIZE]>
3  8908	00001CBF  FF 73	04					 PUSH	 [DWORD	PTR EBX	+ CELL_SIZE]
2  8909								 PUSHDS	 <[DWORD PTR EBX]>
3  8910	00001CC2  FF 33						 PUSH	 [DWORD	PTR EBX]
2  8911								 $NEXT
3  8912	00001CC4  AD						 LODSD				 ; fetch address
3  8913								 $JMP
4  8914	00001CC5  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8915	00001CC7  FF E3						 JMP	 EBX			 ; execute
2  8916
2  8917					 ;  6.1.0850 C!
2  8918					 ;  Store char value
2  8919					 ;  D: char addr --
2  8920								 $CODE	 'C!',$CSTORE
3  8921								 $DEF	 'C!',$CSTORE,,
4  8922	00001CC9			 ??02F7:
4  8923		  =MAIN:1CC9		 LASTWORD		 =	 ??02F7
4  8924								 IFNB	 <>
4  8925								   DB
4  8926								 ELSE
4  8927	00001CC9  00						   DB	 VEF_USUAL
4  8928								 ENDIF
4  8929	00001CCA  02						 DB	 ??02F8	- $ - 1
4  8930	00001CCB  43 21						 DB	 'C!'
4  8931	00001CCD			 ??02F8:
4  8932	00001CCD  04						 DB	 ??02F8	- ??02F7
4  8933	00001CCE  20001CB1					 DD	 VOC_LINK
4  8934		  =MAIN:20001CC9	 VOC_LINK		 =	 ??02F7	+ DESIRED_BASE_EQU
4  8935
4  8936								 IFNB	 <$CSTORE>
4  8937	00001CD2						   LABEL   $CSTORE FAR
4  8938								 ENDIF
4  8939								 IFNB	 <>
4  8940								   DD	    + DESIRED_BASE_EQU
4  8941								 ELSE
4  8942	00001CD2  20001CD6					   DD	   ??02FA + DESIRED_BASE_EQU
4  8943								 ENDIF
4  8944	00001CD6			 ??02FA:
2  8945								 POPDS	 EBX
3  8946	00001CD6  5B						 POP	 EBX
2  8947								 POPDS	 EAX
3  8948	00001CD7  58						 POP	 EAX
2  8949	00001CD8  88 03						 MOV	 [BYTE PTR EBX],AL
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 158
FKernel.asm



2  8950								 $NEXT
3  8951	00001CDA  AD						 LODSD				 ; fetch address
3  8952								 $JMP
4  8953	00001CDB  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8954	00001CDD  FF E3						 JMP	 EBX			 ; execute
2  8955
2  8956					 ;  6.1.0870 C@
2  8957					 ;  Fetch char value
2  8958					 ;  D: addr -- char
2  8959								 $CODE	 'C@',$CFETCH
3  8960								 $DEF	 'C@',$CFETCH,,
4  8961	00001CDF			 ??02FB:
4  8962		  =MAIN:1CDF		 LASTWORD		 =	 ??02FB
4  8963								 IFNB	 <>
4  8964								   DB
4  8965								 ELSE
4  8966	00001CDF  00						   DB	 VEF_USUAL
4  8967								 ENDIF
4  8968	00001CE0  02						 DB	 ??02FC	- $ - 1
4  8969	00001CE1  43 40						 DB	 'C@'
4  8970	00001CE3			 ??02FC:
4  8971	00001CE3  04						 DB	 ??02FC	- ??02FB
4  8972	00001CE4  20001CC9					 DD	 VOC_LINK
4  8973		  =MAIN:20001CDF	 VOC_LINK		 =	 ??02FB	+ DESIRED_BASE_EQU
4  8974
4  8975								 IFNB	 <$CFETCH>
4  8976	00001CE8						   LABEL   $CFETCH FAR
4  8977								 ENDIF
4  8978								 IFNB	 <>
4  8979								   DD	    + DESIRED_BASE_EQU
4  8980								 ELSE
4  8981	00001CE8  20001CEC					   DD	   ??02FE + DESIRED_BASE_EQU
4  8982								 ENDIF
4  8983	00001CEC			 ??02FE:
2  8984								 POPDS	 EBX
3  8985	00001CEC  5B						 POP	 EBX
2  8986	00001CED  33 C0						 XOR	 EAX,EAX
2  8987	00001CEF  8A 03						 MOV	 AL,[BYTE PTR EBX]
2  8988								 PUSHDS	 EAX
3  8989	00001CF1  50						 PUSH	 EAX
2  8990								 $NEXT
3  8991	00001CF2  AD						 LODSD				 ; fetch address
3  8992								 $JMP
4  8993	00001CF3  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  8994	00001CF5  FF E3						 JMP	 EBX			 ; execute
2  8995
2  8996					 ;  6.1.0880 CELL+
2  8997					 ;  D: addr - addr+cellsize
2  8998								 $CODE	 'CELL+',$CELLADD
3  8999								 $DEF	 'CELL+',$CELLADD,,
4  9000	00001CF7			 ??02FF:
4  9001		  =MAIN:1CF7		 LASTWORD		 =	 ??02FF
4  9002								 IFNB	 <>
4  9003								   DB
4  9004								 ELSE
4  9005	00001CF7  00						   DB	 VEF_USUAL
4  9006								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 159
FKernel.asm



4  9007	00001CF8  05						 DB	 ??0300	- $ - 1
4  9008	00001CF9  43 45	4C 4C 2B				 DB	 'CELL+'
4  9009	00001CFE			 ??0300:
4  9010	00001CFE  07						 DB	 ??0300	- ??02FF
4  9011	00001CFF  20001CDF					 DD	 VOC_LINK
4  9012		  =MAIN:20001CF7	 VOC_LINK		 =	 ??02FF	+ DESIRED_BASE_EQU
4  9013
4  9014								 IFNB	 <$CELLADD>
4  9015	00001D03						   LABEL   $CELLADD FAR
4  9016								 ENDIF
4  9017								 IFNB	 <>
4  9018								   DD	    + DESIRED_BASE_EQU
4  9019								 ELSE
4  9020	00001D03  20001D07					   DD	   ??0302 + DESIRED_BASE_EQU
4  9021								 ENDIF
4  9022	00001D07			 ??0302:
2  9023								 POPDS	 EAX
3  9024	00001D07  58						 POP	 EAX
2  9025	00001D08  83 C0	04					 ADD	 EAX,CELL_SIZE
2  9026								 PUSHDS	 EAX
3  9027	00001D0B  50						 PUSH	 EAX
2  9028								 $NEXT
3  9029	00001D0C  AD						 LODSD				 ; fetch address
3  9030								 $JMP
4  9031	00001D0D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9032	00001D0F  FF E3						 JMP	 EBX			 ; execute
2  9033
2  9034					 ;  6.1.0890 CELLS
2  9035					 ;  D: a - a*cellsize
2  9036								 $CODE	 'CELLS',$CELLS
3  9037								 $DEF	 'CELLS',$CELLS,,
4  9038	00001D11			 ??0303:
4  9039		  =MAIN:1D11		 LASTWORD		 =	 ??0303
4  9040								 IFNB	 <>
4  9041								   DB
4  9042								 ELSE
4  9043	00001D11  00						   DB	 VEF_USUAL
4  9044								 ENDIF
4  9045	00001D12  05						 DB	 ??0304	- $ - 1
4  9046	00001D13  43 45	4C 4C 53				 DB	 'CELLS'
4  9047	00001D18			 ??0304:
4  9048	00001D18  07						 DB	 ??0304	- ??0303
4  9049	00001D19  20001CF7					 DD	 VOC_LINK
4  9050		  =MAIN:20001D11	 VOC_LINK		 =	 ??0303	+ DESIRED_BASE_EQU
4  9051
4  9052								 IFNB	 <$CELLS>
4  9053	00001D1D						   LABEL   $CELLS FAR
4  9054								 ENDIF
4  9055								 IFNB	 <>
4  9056								   DD	    + DESIRED_BASE_EQU
4  9057								 ELSE
4  9058	00001D1D  20001D21					   DD	   ??0306 + DESIRED_BASE_EQU
4  9059								 ENDIF
4  9060	00001D21			 ??0306:
2  9061								 POPDS	 EAX
3  9062	00001D21  58						 POP	 EAX
2  9063	00001D22  03 C0						 ADD	 EAX,EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 160
FKernel.asm



2  9064	00001D24  03 C0						 ADD	 EAX,EAX
2  9065								 PUSHDS	 EAX
3  9066	00001D26  50						 PUSH	 EAX
2  9067								 $NEXT
3  9068	00001D27  AD						 LODSD				 ; fetch address
3  9069								 $JMP
4  9070	00001D28  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9071	00001D2A  FF E3						 JMP	 EBX			 ; execute
2  9072
2  9073					 ;  6.1.0897 CHAR+
2  9074					 ;  D: addr - addr+charsize
2  9075								 $CODE	 'CHAR+',$CHARADD
3  9076								 $DEF	 'CHAR+',$CHARADD,,
4  9077	00001D2C			 ??0307:
4  9078		  =MAIN:1D2C		 LASTWORD		 =	 ??0307
4  9079								 IFNB	 <>
4  9080								   DB
4  9081								 ELSE
4  9082	00001D2C  00						   DB	 VEF_USUAL
4  9083								 ENDIF
4  9084	00001D2D  05						 DB	 ??0308	- $ - 1
4  9085	00001D2E  43 48	41 52 2B				 DB	 'CHAR+'
4  9086	00001D33			 ??0308:
4  9087	00001D33  07						 DB	 ??0308	- ??0307
4  9088	00001D34  20001D11					 DD	 VOC_LINK
4  9089		  =MAIN:20001D2C	 VOC_LINK		 =	 ??0307	+ DESIRED_BASE_EQU
4  9090
4  9091								 IFNB	 <$CHARADD>
4  9092	00001D38						   LABEL   $CHARADD FAR
4  9093								 ENDIF
4  9094								 IFNB	 <>
4  9095								   DD	    + DESIRED_BASE_EQU
4  9096								 ELSE
4  9097	00001D38  20001D3C					   DD	   ??030A + DESIRED_BASE_EQU
4  9098								 ENDIF
4  9099	00001D3C			 ??030A:
2  9100								 POPDS	 EAX
3  9101	00001D3C  58						 POP	 EAX
2  9102	00001D3D  40						 INC	 EAX
2  9103								 PUSHDS	 EAX
3  9104	00001D3E  50						 PUSH	 EAX
2  9105								 $NEXT
3  9106	00001D3F  AD						 LODSD				 ; fetch address
3  9107								 $JMP
4  9108	00001D40  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9109	00001D42  FF E3						 JMP	 EBX			 ; execute
2  9110
2  9111
1  9112								 INCLUDE "search.inc"
2  9113					 ;******************************************************************************
2  9114					 ;
2  9115					 ;  search.inc
2  9116					 ;  IKForth
2  9117					 ;
2  9118					 ;  Copyright (C) 1999-2003 Illya Kysil
2  9119					 ;
2  9120					 ;******************************************************************************
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 161
FKernel.asm



2  9121					 ;  Words search
2  9122					 ;******************************************************************************
2  9123
2  9124					 ;  16.6.1.1595	FORTH-WORDLIST
2  9125								 $VAR	 'FORTH-WORDLIST',$FORTH_WORDLIST
3  9126								 $DEF	 'FORTH-WORDLIST',$FORTH_WORDLIST,$DOVAR
4  9127	00001D44			 ??030B:
4  9128		  =MAIN:1D44		 LASTWORD		 =	 ??030B
4  9129								 IFNB	 <>
4  9130								   DB
4  9131								 ELSE
4  9132	00001D44  00						   DB	 VEF_USUAL
4  9133								 ENDIF
4  9134	00001D45  0E						 DB	 ??030C	- $ - 1
4  9135	00001D46  46 4F	52 54 48 2D 57+				 DB	 'FORTH-WORDLIST'
   9136		  4F 52	44 4C 49 53 54
4  9137	00001D54			 ??030C:
4  9138	00001D54  10						 DB	 ??030C	- ??030B
4  9139	00001D55  20001D2C					 DD	 VOC_LINK
4  9140		  =MAIN:20001D44	 VOC_LINK		 =	 ??030B	+ DESIRED_BASE_EQU
4  9141
4  9142								 IFNB	 <$FORTH_WORDLIST>
4  9143	00001D59						   LABEL   $FORTH_WORDLIST FAR
4  9144								 ENDIF
4  9145								 IFNB	 <$DOVAR>
4  9146	00001D59  200000ED					   DD	   $DOVAR + DESIRED_BASE_EQU
4  9147								 ELSE
4  9148								   DD	   ??030E + DESIRED_BASE_EQU
4  9149								 ENDIF
4  9150	00001D5D			 ??030E:
2  9151	00001D5D			 FORTH_WORDLIST_EQU:
2  9152	00001D5D  20002774					 DD	 LATEST_WORD		 ; last	word in	a list
2  9153								 CC	 0			 ; wordlist name
3  9154	00001D61  00000000					 DD	 0
2  9155								 CC	 0			 ; wordlist link
3  9156	00001D65  00000000					 DD	 0
2  9157
2  9158	00001D69						 PROC	 UPCASE
2  9159	00001D69  3C 61						 CMP	 AL,'a'
2  9160	00001D6B  72 06						 JB	 SHORT @@UC		 ; jump	if AH <	'a'
2  9161	00001D6D  3C 7A						 CMP	 AL,'z'
2  9162	00001D6F  77 02						 JA	 SHORT @@UC		 ; jump	if AH >	'z'
2  9163	00001D71  2C 20						 SUB	 AL,'a'	- 'A'		 ; convert to uppercase
2  9164	00001D73			 @@UC:
2  9165	00001D73  C3						 RET
2  9166	00001D74						 ENDP	 UPCASE
2  9167
2  9168					 ;  16.6.1.2192	SEARCH-WORDLIST
2  9169					 ;  D: ( c-addr	u wid -- 0 | xt	1 | xt -1 )
2  9170								 $CODE	 'SEARCH-WORDLIST',$SEARCH_WORDLIST
3  9171								 $DEF	 'SEARCH-WORDLIST',$SEARCH_WORDLIST,,
4  9172	00001D74			 ??030F:
4  9173		  =MAIN:1D74		 LASTWORD		 =	 ??030F
4  9174								 IFNB	 <>
4  9175								   DB
4  9176								 ELSE
4  9177	00001D74  00						   DB	 VEF_USUAL
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 162
FKernel.asm



4  9178								 ENDIF
4  9179	00001D75  0F						 DB	 ??0310	- $ - 1
4  9180	00001D76  53 45	41 52 43 48 2D+				 DB	 'SEARCH-WORDLIST'
   9181		  57 4F	52 44 4C 49 53+
   9182		  54
4  9183	00001D85			 ??0310:
4  9184	00001D85  11						 DB	 ??0310	- ??030F
4  9185	00001D86  20001D44					 DD	 VOC_LINK
4  9186		  =MAIN:20001D74	 VOC_LINK		 =	 ??030F	+ DESIRED_BASE_EQU
4  9187
4  9188								 IFNB	 <$SEARCH_WORDLIST>
4  9189	00001D8A						   LABEL   $SEARCH_WORDLIST FAR
4  9190								 ENDIF
4  9191								 IFNB	 <>
4  9192								   DD	    + DESIRED_BASE_EQU
4  9193								 ELSE
4  9194	00001D8A  20001D8E					   DD	   ??0312 + DESIRED_BASE_EQU
4  9195								 ENDIF
4  9196	00001D8E			 ??0312:
2  9197								 PUSHRS	 EDI
3  9198	00001D8E  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9199	00001D91  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2  9200								 PUSHRS	 ESI
3  9201	00001D94  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9202	00001D97  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  9203								 POPDS	 EAX			 ; wid
3  9204	00001D9A  58						 POP	 EAX
2  9205	00001D9B  8B 30						 MOV	 ESI,[DWORD PTR	EAX]	 ; get LATEST word link
2  9206	00001D9D  8B 5F	24					 MOV	 EBX,[DWORD PTR	EDI + CASE_SENSITIVE_VAR]
2  9207								 POPDS	 ECX			 ; u
3  9208	00001DA0  59						 POP	 ECX
2  9209								 POPDS	 EDI			 ; c-addr
3  9210	00001DA1  5F						 POP	 EDI
2  9211	00001DA2			 SW_LOOP:
2  9212	00001DA2  0B F6						 OR	 ESI,ESI
2  9213	00001DA4  74 70						 JZ	 SHORT SW_NOT_FOUND
2  9214	00001DA6  66| 8B 06					 MOV	 AX,[WORD PTR ESI]
2  9215	00001DA9  3A E1						 CMP	 AH,CL
2  9216	00001DAB  75 33						 JNZ	 SHORT SW_NEXT
2  9217	00001DAD  A8 02						 TEST	 AL,VEF_HIDDEN
2  9218	00001DAF  75 2F						 JNZ	 SHORT SW_NEXT
2  9219								 PUSHDS	 ESI
3  9220	00001DB1  56						 PUSH	 ESI
2  9221								 PUSHDS	 EDI
3  9222	00001DB2  57						 PUSH	 EDI
2  9223								 PUSHDS	 ECX
3  9224	00001DB3  51						 PUSH	 ECX
2  9225	00001DB4  83 C6	02					 ADD	 ESI,2
2  9226	00001DB7			 CMP_LOOP:
2  9227	00001DB7  8A 06						 MOV	 AL,[BYTE PTR ESI]
2  9228	00001DB9  8A 27						 MOV	 AH,[BYTE PTR EDI]
2  9229	00001DBB  0B DB						 OR	 EBX,EBX
2  9230	00001DBD  75 0C						 JNZ	 SHORT CMP_CONT
2  9231	00001DBF  E8 FFFFFFA5					 CALL	 UPCASE
2  9232	00001DC4  86 C4						 XCHG	 AL,AH
2  9233	00001DC6  E8 FFFFFF9E					 CALL	 UPCASE
2  9234	00001DCB			 CMP_CONT:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 163
FKernel.asm



2  9235	00001DCB  3A C4						 CMP	 AL,AH
2  9236	00001DCD  75 0E						 JNZ	 SHORT CMP_EXIT
2  9237	00001DCF  46						 INC	 ESI
2  9238	00001DD0  47						 INC	 EDI
2  9239	00001DD1  49						 DEC	 ECX
2  9240	00001DD2  0B C9						 OR	 ECX,ECX
2  9241	00001DD4  75 E1						 JNZ	 SHORT CMP_LOOP
2  9242	00001DD6  3A C4						 CMP	 AL,AH
2  9243								 POPDS	 ECX
3  9244	00001DD8  59						 POP	 ECX
2  9245								 POPDS	 EDI
3  9246	00001DD9  5F						 POP	 EDI
2  9247								 POPDS	 ESI
3  9248	00001DDA  5E						 POP	 ESI
2  9249	00001DDB  74 10						 JZ	 SHORT SW_FOUND
2  9250	00001DDD			 CMP_EXIT:
2  9251								 POPDS	 ECX
3  9252	00001DDD  59						 POP	 ECX
2  9253								 POPDS	 EDI
3  9254	00001DDE  5F						 POP	 EDI
2  9255								 POPDS	 ESI
3  9256	00001DDF  5E						 POP	 ESI
2  9257	00001DE0			 SW_NEXT:
2  9258	00001DE0  0F B6	46 01					 MOVZX	 EAX,[BYTE PTR ESI + 1]
2  9259	00001DE4  03 F0						 ADD	 ESI,EAX
2  9260	00001DE6  83 C6	03					 ADD	 ESI,3
2  9261	00001DE9  8B 36						 MOV	 ESI,[DWORD PTR	ESI]
2  9262	00001DEB  EB B5						 JMP	 SHORT SW_LOOP
2  9263
2  9264	00001DED			 SW_FOUND:
2  9265	00001DED  8A 06						 MOV	 AL,[BYTE PTR ESI]
2  9266	00001DEF  A8 01						 TEST	 AL,VEF_IMMEDIATE
2  9267	00001DF1  B8 00000001					 MOV	 EAX,1
2  9268	00001DF6  75 02						 JNZ	 SHORT SW_FOUND_IMMEDIATE
2  9269	00001DF8  F7 D8						 NEG	 EAX
2  9270	00001DFA			 SW_FOUND_IMMEDIATE:
2  9271	00001DFA  0F B6	5E 01					 MOVZX	 EBX,[BYTE PTR ESI + 1]
2  9272	00001DFE  03 F3						 ADD	 ESI,EBX
2  9273	00001E00  83 C6	07					 ADD	 ESI,7
2  9274								 PUSHDS	 ESI
3  9275	00001E03  56						 PUSH	 ESI
2  9276								 PUSHDS	 EAX
3  9277	00001E04  50						 PUSH	 EAX
2  9278								 POPRS	 ESI
3  9279	00001E05  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  9280	00001E08  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9281								 POPRS	 EDI
3  9282	00001E0B  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  9283	00001E0E  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9284								 $NEXT
3  9285	00001E11  AD						 LODSD				 ; fetch address
3  9286								 $JMP
4  9287	00001E12  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9288	00001E14  FF E3						 JMP	 EBX			 ; execute
2  9289
2  9290	00001E16			 SW_NOT_FOUND:
2  9291								 PUSHDS	 0
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 164
FKernel.asm



3  9292	00001E16  6A 00						 PUSH	 0
2  9293								 POPRS	 ESI
3  9294	00001E18  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  9295	00001E1B  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9296								 POPRS	 EDI
3  9297	00001E1E  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  9298	00001E21  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9299								 $NEXT
3  9300	00001E24  AD						 LODSD				 ; fetch address
3  9301								 $JMP
4  9302	00001E25  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9303	00001E27  FF E3						 JMP	 EBX			 ; execute
2  9304
2  9305					 ;  FIND-FORTH
2  9306					 ;  D: ( c-addr	-- c-addr 0 | xt 1 | xt	-1 )
2  9307								 $COLON	 'FIND-FORTH',$FIND_FORTH
3  9308								 $DEF	 'FIND-FORTH',$FIND_FORTH,$ENTER,
4  9309	00001E29			 ??0313:
4  9310		  =MAIN:1E29		 LASTWORD		 =	 ??0313
4  9311								 IFNB	 <>
4  9312								   DB
4  9313								 ELSE
4  9314	00001E29  00						   DB	 VEF_USUAL
4  9315								 ENDIF
4  9316	00001E2A  0A						 DB	 ??0314	- $ - 1
4  9317	00001E2B  46 49	4E 44 2D 46 4F+				 DB	 'FIND-FORTH'
   9318		  52 54	48
4  9319	00001E35			 ??0314:
4  9320	00001E35  0C						 DB	 ??0314	- ??0313
4  9321	00001E36  20001D74					 DD	 VOC_LINK
4  9322		  =MAIN:20001E29	 VOC_LINK		 =	 ??0313	+ DESIRED_BASE_EQU
4  9323
4  9324								 IFNB	 <$FIND_FORTH>
4  9325	00001E3A						   LABEL   $FIND_FORTH FAR
4  9326								 ENDIF
4  9327								 IFNB	 <$ENTER>
4  9328	00001E3A  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  9329								 ELSE
4  9330								   DD	   ??0316 + DESIRED_BASE_EQU
4  9331								 ENDIF
4  9332	00001E3E			 ??0316:
2  9333								 CW	 $DUP
3  9334	00001E3E  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  9335								 CW	 $TOR
3  9336	00001E42  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  9337								 CW	 $COUNT
3  9338	00001E46  20002306					 DD	 $COUNT	+ DESIRED_BASE_EQU
2  9339								 CW	 $FORTH_WORDLIST
3  9340	00001E4A  20001D59					 DD	 $FORTH_WORDLIST + DESIRED_BASE_EQU
2  9341								 CW	 $SEARCH_WORDLIST
3  9342	00001E4E  20001D8A					 DD	 $SEARCH_WORDLIST + DESIRED_BASE_EQU
2  9343								 CW	 $DUP
3  9344	00001E52  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  9345								 CW	 $ZEROEQ
3  9346	00001E56  20001BCC					 DD	 $ZEROEQ + DESIRED_BASE_EQU
2  9347								 CQBR	 FF_FOUND
3  9348								 CW	 $QBRANCH
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 165
FKernel.asm



4  9349	00001E5A  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3  9350								 CW	 FF_FOUND
4  9351	00001E5E  20001E72					 DD	 FF_FOUND + DESIRED_BASE_EQU
2  9352								   CW	   $RFROM
3  9353	00001E62  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  9354								   CW	   $SWAP
3  9355	00001E66  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  9356								 CBR	 FF_EXIT
3  9357								 CW	 $BRANCH
4  9358	00001E6A  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
3  9359								 CW	 FF_EXIT
4  9360	00001E6E  20001E7A					 DD	 FF_EXIT + DESIRED_BASE_EQU
2  9361	00001E72			 FF_FOUND:
2  9362								   CW	   $RFROM
3  9363	00001E72  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  9364								   CW	   $DROP
3  9365	00001E76  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2  9366	00001E7A			 FF_EXIT:
2  9367								 CEXIT
3  9368								 CW	 $EXIT
4  9369	00001E7A  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  9370
2  9371					 ;  6.1.1550 FIND
2  9372					 ;  D: ( c-addr	-- c-addr 0 | xt 1 | xt	-1 )
2  9373								 $DEFER	 'FIND',$FIND
3  9374								 $DEF	 'FIND',$FIND,$DODEFER,
4  9375	00001E7E			 ??0317:
4  9376		  =MAIN:1E7E		 LASTWORD		 =	 ??0317
4  9377								 IFNB	 <>
4  9378								   DB
4  9379								 ELSE
4  9380	00001E7E  00						   DB	 VEF_USUAL
4  9381								 ENDIF
4  9382	00001E7F  04						 DB	 ??0318	- $ - 1
4  9383	00001E80  46 49	4E 44					 DB	 'FIND'
4  9384	00001E84			 ??0318:
4  9385	00001E84  06						 DB	 ??0318	- ??0317
4  9386	00001E85  20001E29					 DD	 VOC_LINK
4  9387		  =MAIN:20001E7E	 VOC_LINK		 =	 ??0317	+ DESIRED_BASE_EQU
4  9388
4  9389								 IFNB	 <$FIND>
4  9390	00001E89						   LABEL   $FIND FAR
4  9391								 ENDIF
4  9392								 IFNB	 <$DODEFER>
4  9393	00001E89  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4  9394								 ELSE
4  9395								   DD	   ??031A + DESIRED_BASE_EQU
4  9396								 ENDIF
4  9397	00001E8D			 ??031A:
2  9398								 CW	 $FIND_FORTH
3  9399	00001E8D  20001E3A					 DD	 $FIND_FORTH + DESIRED_BASE_EQU
2  9400
2  9401
1  9402								 INCLUDE "fcontrol.inc"
2  9403					 ;******************************************************************************
2  9404					 ;
2  9405					 ;  fcontrol.inc
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 166
FKernel.asm



2  9406					 ;  IKForth
2  9407					 ;
2  9408					 ;  Copyright (C) 1999-2003 Illya Kysil
2  9409					 ;
2  9410					 ;******************************************************************************
2  9411					 ;  Flow control words
2  9412					 ;******************************************************************************
2  9413
2  9414					 ;  6.1.1370 EXECUTE
2  9415								 $CODE	 'EXECUTE',$EXECUTE
3  9416								 $DEF	 'EXECUTE',$EXECUTE,,
4  9417	00001E91			 ??031B:
4  9418		  =MAIN:1E91		 LASTWORD		 =	 ??031B
4  9419								 IFNB	 <>
4  9420								   DB
4  9421								 ELSE
4  9422	00001E91  00						   DB	 VEF_USUAL
4  9423								 ENDIF
4  9424	00001E92  07						 DB	 ??031C	- $ - 1
4  9425	00001E93  45 58	45 43 55 54 45				 DB	 'EXECUTE'
4  9426	00001E9A			 ??031C:
4  9427	00001E9A  09						 DB	 ??031C	- ??031B
4  9428	00001E9B  20001E7E					 DD	 VOC_LINK
4  9429		  =MAIN:20001E91	 VOC_LINK		 =	 ??031B	+ DESIRED_BASE_EQU
4  9430
4  9431								 IFNB	 <$EXECUTE>
4  9432	00001E9F						   LABEL   $EXECUTE FAR
4  9433								 ENDIF
4  9434								 IFNB	 <>
4  9435								   DD	    + DESIRED_BASE_EQU
4  9436								 ELSE
4  9437	00001E9F  20001EA3					   DD	   ??031E + DESIRED_BASE_EQU
4  9438								 ENDIF
4  9439	00001EA3			 ??031E:
2  9440								 POPDS	 EAX			 ; pop new IP from data	stack
3  9441	00001EA3  58						 POP	 EAX
2  9442								 $JMP
3  9443	00001EA4  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
3  9444	00001EA6  FF E3						 JMP	 EBX			 ; execute
2  9445
2  9446					 ;******************************************************************************
2  9447					 ;  Loop support words
2  9448					 ;******************************************************************************
2  9449
2  9450					 ;  (?DO)
2  9451								 $CODE	 '(?DO)'
3  9452								 $DEF	 '(?DO)',,,
4  9453	00001EA8			 ??031F:
4  9454		  =MAIN:1EA8		 LASTWORD		 =	 ??031F
4  9455								 IFNB	 <>
4  9456								   DB
4  9457								 ELSE
4  9458	00001EA8  00						   DB	 VEF_USUAL
4  9459								 ENDIF
4  9460	00001EA9  05						 DB	 ??0320	- $ - 1
4  9461	00001EAA  28 3F	44 4F 29				 DB	 '(?DO)'
4  9462	00001EAF			 ??0320:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 167
FKernel.asm



4  9463	00001EAF  07						 DB	 ??0320	- ??031F
4  9464	00001EB0  20001E91					 DD	 VOC_LINK
4  9465		  =MAIN:20001EA8	 VOC_LINK		 =	 ??031F	+ DESIRED_BASE_EQU
4  9466
4  9467								 IFNB	 <>
4  9468								   LABEL    FAR
4  9469								 ENDIF
4  9470								 IFNB	 <>
4  9471								   DD	    + DESIRED_BASE_EQU
4  9472								 ELSE
4  9473	00001EB4  20001EB8					   DD	   ??0322 + DESIRED_BASE_EQU
4  9474								 ENDIF
4  9475	00001EB8			 ??0322:
2  9476	00001EB8  AD						 LODSD
2  9477								 POPDS	 ECX
3  9478	00001EB9  59						 POP	 ECX
2  9479								 POPDS	 EBX
3  9480	00001EBA  5B						 POP	 EBX
2  9481	00001EBB  3B CB						 CMP	 ECX,EBX
2  9482	00001EBD  74 17						 JZ	 SHORT PQDO_EXIT
2  9483								 PUSHRS	 EAX			 ; address for LEAVE
3  9484	00001EBF  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9485	00001EC2  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
2  9486								 PUSHRS	 EBX			 ; limit
3  9487	00001EC5  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9488	00001EC8  89 5D	00					 MOV	 [DWORD	PTR EBP],EBX
2  9489								 PUSHRS	 ECX			 ; current
3  9490	00001ECB  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9491	00001ECE  89 4D	00					 MOV	 [DWORD	PTR EBP],ECX
2  9492								 $NEXT
3  9493	00001ED1  AD						 LODSD				 ; fetch address
3  9494								 $JMP
4  9495	00001ED2  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9496	00001ED4  FF E3						 JMP	 EBX			 ; execute
2  9497	00001ED6			 PQDO_EXIT:
2  9498	00001ED6  8B F0						 MOV	 ESI,EAX
2  9499								 $NEXT
3  9500	00001ED8  AD						 LODSD				 ; fetch address
3  9501								 $JMP
4  9502	00001ED9  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9503	00001EDB  FF E3						 JMP	 EBX			 ; execute
2  9504
2  9505					 ;  (LOOP)
2  9506								 $CODE	 '(LOOP)'
3  9507								 $DEF	 '(LOOP)',,,
4  9508	00001EDD			 ??0323:
4  9509		  =MAIN:1EDD		 LASTWORD		 =	 ??0323
4  9510								 IFNB	 <>
4  9511								   DB
4  9512								 ELSE
4  9513	00001EDD  00						   DB	 VEF_USUAL
4  9514								 ENDIF
4  9515	00001EDE  06						 DB	 ??0324	- $ - 1
4  9516	00001EDF  28 4C	4F 4F 50 29				 DB	 '(LOOP)'
4  9517	00001EE5			 ??0324:
4  9518	00001EE5  08						 DB	 ??0324	- ??0323
4  9519	00001EE6  20001EA8					 DD	 VOC_LINK
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 168
FKernel.asm



4  9520		  =MAIN:20001EDD	 VOC_LINK		 =	 ??0323	+ DESIRED_BASE_EQU
4  9521
4  9522								 IFNB	 <>
4  9523								   LABEL    FAR
4  9524								 ENDIF
4  9525								 IFNB	 <>
4  9526								   DD	    + DESIRED_BASE_EQU
4  9527								 ELSE
4  9528	00001EEA  20001EEE					   DD	   ??0326 + DESIRED_BASE_EQU
4  9529								 ENDIF
4  9530	00001EEE			 ??0326:
2  9531	00001EEE  AD						 LODSD
2  9532								 POPRS	 ECX			 ; current
3  9533	00001EEF  8B 4D	00					 MOV	 ECX,[DWORD PTR	EBP]
3  9534	00001EF2  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9535								 FETCHRS EBX			 ; limit
3  9536								 IFNB	 <>
3  9537								   MOV	   EBX,[DWORD PTR EBP +	 * CELL_SIZE]
3  9538								 ELSE
3  9539	00001EF5  8B 5D	00					   MOV	   EBX,[DWORD PTR EBP]
3  9540								 ENDIF
2  9541	00001EF8  41						 INC	 ECX
2  9542	00001EF9  3B CB						 CMP	 ECX,EBX
2  9543	00001EFB  75 11						 JNZ	 SHORT PLOOP_NOEQ
2  9544								 POPRS	 EAX
3  9545	00001EFD  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3  9546	00001F00  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9547								 POPRS	 EAX
3  9548	00001F03  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3  9549	00001F06  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9550								 $NEXT
3  9551	00001F09  AD						 LODSD				 ; fetch address
3  9552								 $JMP
4  9553	00001F0A  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9554	00001F0C  FF E3						 JMP	 EBX			 ; execute
2  9555	00001F0E			 PLOOP_NOEQ:
2  9556								 PUSHRS	 ECX			 ; current
3  9557	00001F0E  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9558	00001F11  89 4D	00					 MOV	 [DWORD	PTR EBP],ECX
2  9559	00001F14  8B F0						 MOV	 ESI,EAX
2  9560								 $NEXT
3  9561	00001F16  AD						 LODSD				 ; fetch address
3  9562								 $JMP
4  9563	00001F17  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9564	00001F19  FF E3						 JMP	 EBX			 ; execute
2  9565
2  9566					 ;  (+LOOP)
2  9567								 $CODE	 '(+LOOP)'
3  9568								 $DEF	 '(+LOOP)',,,
4  9569	00001F1B			 ??0327:
4  9570		  =MAIN:1F1B		 LASTWORD		 =	 ??0327
4  9571								 IFNB	 <>
4  9572								   DB
4  9573								 ELSE
4  9574	00001F1B  00						   DB	 VEF_USUAL
4  9575								 ENDIF
4  9576	00001F1C  07						 DB	 ??0328	- $ - 1
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 169
FKernel.asm



4  9577	00001F1D  28 2B	4C 4F 4F 50 29				 DB	 '(+LOOP)'
4  9578	00001F24			 ??0328:
4  9579	00001F24  09						 DB	 ??0328	- ??0327
4  9580	00001F25  20001EDD					 DD	 VOC_LINK
4  9581		  =MAIN:20001F1B	 VOC_LINK		 =	 ??0327	+ DESIRED_BASE_EQU
4  9582
4  9583								 IFNB	 <>
4  9584								   LABEL    FAR
4  9585								 ENDIF
4  9586								 IFNB	 <>
4  9587								   DD	    + DESIRED_BASE_EQU
4  9588								 ELSE
4  9589	00001F29  20001F2D					   DD	   ??032A + DESIRED_BASE_EQU
4  9590								 ENDIF
4  9591	00001F2D			 ??032A:
2  9592	00001F2D  AD						 LODSD				 ; loop	addr
2  9593								 POPDS	 EDX			 ; loop	index increment
3  9594	00001F2E  5A						 POP	 EDX
2  9595								 POPRS	 ECX			 ; current
3  9596	00001F2F  8B 4D	00					 MOV	 ECX,[DWORD PTR	EBP]
3  9597	00001F32  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9598								 FETCHRS EBX			 ; limit
3  9599								 IFNB	 <>
3  9600								   MOV	   EBX,[DWORD PTR EBP +	 * CELL_SIZE]
3  9601								 ELSE
3  9602	00001F35  8B 5D	00					   MOV	   EBX,[DWORD PTR EBP]
3  9603								 ENDIF
2  9604	00001F38  2B D9						 SUB	 EBX,ECX
2  9605	00001F3A  0B D2						 OR	 EDX,EDX
2  9606	00001F3C  78 28	90 90 90 90				 JS	 PADDLOOP_NEGATIVE	 ; jump	if increment is	negative
2  9607	00001F42  3B DA						 CMP	 EBX,EDX
2  9608	00001F44  7E 0F						 JLE	 SHORT PADDLOOP_LOOP_EXIT
2  9609	00001F46			 PADDLOOP_LOOP_CONT:
2  9610	00001F46  03 CA						 ADD	 ECX,EDX
2  9611								 PUSHRS	 ECX			 ; current
3  9612	00001F48  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9613	00001F4B  89 4D	00					 MOV	 [DWORD	PTR EBP],ECX
2  9614	00001F4E  8B F0						 MOV	 ESI,EAX
2  9615								 $NEXT
3  9616	00001F50  AD						 LODSD				 ; fetch address
3  9617								 $JMP
4  9618	00001F51  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9619	00001F53  FF E3						 JMP	 EBX			 ; execute
2  9620	00001F55			 PADDLOOP_LOOP_EXIT:
2  9621								 POPRS	 EAX
3  9622	00001F55  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3  9623	00001F58  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9624								 POPRS	 EAX
3  9625	00001F5B  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3  9626	00001F5E  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9627								 $NEXT
3  9628	00001F61  AD						 LODSD				 ; fetch address
3  9629								 $JMP
4  9630	00001F62  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9631	00001F64  FF E3						 JMP	 EBX			 ; execute
2  9632
2  9633	00001F66			 PADDLOOP_NEGATIVE:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 170
FKernel.asm



2  9634	00001F66  3B DA						 CMP	 EBX,EDX
2  9635	00001F68  7F EB						 JG	 SHORT PADDLOOP_LOOP_EXIT
2  9636	00001F6A  EB DA						 JMP	 SHORT PADDLOOP_LOOP_CONT
2  9637
2  9638
1  9639								 INCLUDE "parse.inc"
2  9640					 ;******************************************************************************
2  9641					 ;
2  9642					 ;  parse.inc
2  9643					 ;  IKForth
2  9644					 ;
2  9645					 ;  Copyright (C) 1999-2003 Illya Kysil
2  9646					 ;
2  9647					 ;******************************************************************************
2  9648					 ;  Parsing
2  9649					 ;******************************************************************************
2  9650
2  9651					 ;  6.1.0560 >IN
2  9652								 $USER	 '>IN',$TOIN
3  9653								 $DEF	 '>IN',$TOIN,$DOUSER
4  9654	00001F6C			 ??032B:
4  9655		  =MAIN:1F6C		 LASTWORD		 =	 ??032B
4  9656								 IFNB	 <>
4  9657								   DB
4  9658								 ELSE
4  9659	00001F6C  00						   DB	 VEF_USUAL
4  9660								 ENDIF
4  9661	00001F6D  03						 DB	 ??032C	- $ - 1
4  9662	00001F6E  3E 49	4E					 DB	 '>IN'
4  9663	00001F71			 ??032C:
4  9664	00001F71  05						 DB	 ??032C	- ??032B
4  9665	00001F72  20001F1B					 DD	 VOC_LINK
4  9666		  =MAIN:20001F6C	 VOC_LINK		 =	 ??032B	+ DESIRED_BASE_EQU
4  9667
4  9668								 IFNB	 <$TOIN>
4  9669	00001F76						   LABEL   $TOIN FAR
4  9670								 ENDIF
4  9671								 IFNB	 <$DOUSER>
4  9672	00001F76  2000014B					   DD	   $DOUSER + DESIRED_BASE_EQU
4  9673								 ELSE
4  9674								   DD	   ??032E + DESIRED_BASE_EQU
4  9675								 ENDIF
4  9676	00001F7A			 ??032E:
2  9677								 CC	 TOIN_VAR
3  9678	00001F7A  0000001C					 DD	 TOIN_VAR
2  9679
2  9680					 ;  (WORD)
2  9681								 $CODE	 '(WORD)',$PWORD
3  9682								 $DEF	 '(WORD)',$PWORD,,
4  9683	00001F7E			 ??032F:
4  9684		  =MAIN:1F7E		 LASTWORD		 =	 ??032F
4  9685								 IFNB	 <>
4  9686								   DB
4  9687								 ELSE
4  9688	00001F7E  00						   DB	 VEF_USUAL
4  9689								 ENDIF
4  9690	00001F7F  06						 DB	 ??0330	- $ - 1
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 171
FKernel.asm



4  9691	00001F80  28 57	4F 52 44 29				 DB	 '(WORD)'
4  9692	00001F86			 ??0330:
4  9693	00001F86  08						 DB	 ??0330	- ??032F
4  9694	00001F87  20001F6C					 DD	 VOC_LINK
4  9695		  =MAIN:20001F7E	 VOC_LINK		 =	 ??032F	+ DESIRED_BASE_EQU
4  9696
4  9697								 IFNB	 <$PWORD>
4  9698	00001F8B						   LABEL   $PWORD FAR
4  9699								 ENDIF
4  9700								 IFNB	 <>
4  9701								   DD	    + DESIRED_BASE_EQU
4  9702								 ELSE
4  9703	00001F8B  20001F8F					   DD	   ??0332 + DESIRED_BASE_EQU
4  9704								 ENDIF
4  9705	00001F8F			 ??0332:
2  9706								 PUSHRS	 ESI
3  9707	00001F8F  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9708	00001F92  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  9709								 PUSHRS	 EDI
3  9710	00001F95  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9711	00001F98  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2  9712	00001F9B  8B C7						 MOV	 EAX,EDI
2  9713	00001F9D  83 C0	1C					 ADD	 EAX,TOIN_VAR
2  9714								 POPDS	 EDI			 ; dest	address
3  9715	00001FA0  5F						 POP	 EDI
2  9716								 PUSHRS	 EDI
3  9717	00001FA1  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9718	00001FA4  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2  9719	00001FA7  47						 INC	 EDI
2  9720								 POPDS	 ECX			 ; count
3  9721	00001FA8  59						 POP	 ECX
2  9722								 POPDS	 ESI			 ; source address
3  9723	00001FA9  5E						 POP	 ESI
2  9724								 POPDS	 EDX			 ; DL -	char
3  9725	00001FAA  5A						 POP	 EDX
2  9726								 PUSHDS	 EBP
3  9727	00001FAB  55						 PUSH	 EBP
2  9728	00001FAC  8B E8						 MOV	 EBP,EAX
2  9729	00001FAE  33 DB						 XOR	 EBX,EBX
2  9730	00001FB0  32 E4						 XOR	 AH,AH			 ; in word flag
2  9731	00001FB2			 PWORD_LOOP:
2  9732	00001FB2  49						 DEC	 ECX
2  9733	00001FB3  78 26						 JS	 SHORT PWORD_EXIT
2  9734	00001FB5  AC						 LODSB
2  9735	00001FB6  FF 45	00					 INC	 [DWORD	PTR EBP]	 ; inc >IN
2  9736	00001FB9  0A C0						 OR	 AL,AL
2  9737	00001FBB  74 1E						 JZ	 SHORT PWORD_EXIT
2  9738	00001FBD  0A E4						 OR	 AH,AH
2  9739	00001FBF  74 12						 JZ	 SHORT PWORD_NOT_IN_WORD
2  9740	00001FC1  3A C2						 CMP	 AL,DL
2  9741	00001FC3  74 16						 JZ	 SHORT PWORD_EXIT
2  9742	00001FC5  3C 20						 CMP	 AL,32
2  9743	00001FC7  7F 05						 JG	 SHORT PWORD_ADDCHAR
2  9744	00001FC9  80 FA	20					 CMP	 DL,32
2  9745	00001FCC  74 0D						 JZ	 SHORT PWORD_EXIT
2  9746	00001FCE			 PWORD_ADDCHAR:
2  9747	00001FCE  AA						 STOSB
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 172
FKernel.asm



2  9748	00001FCF  FE C3						 INC	 BL
2  9749	00001FD1  EB DF						 JMP	 SHORT PWORD_LOOP
2  9750	00001FD3			 PWORD_NOT_IN_WORD:
2  9751	00001FD3  3C 20						 CMP	 AL,32
2  9752	00001FD5  7E DB						 JLE	 SHORT PWORD_LOOP
2  9753	00001FD7  B4 01						 MOV	 AH,1
2  9754	00001FD9  EB F3						 JMP	 SHORT PWORD_ADDCHAR
2  9755	00001FDB			 PWORD_EXIT:
2  9756								 POPDS	 EBP
3  9757	00001FDB  5D						 POP	 EBP
2  9758	00001FDC  C6 07	20					 MOV	 [BYTE PTR EDI],32	 ; store space
2  9759								 POPRS	 EDI
3  9760	00001FDF  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  9761	00001FE2  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9762								 PUSHDS	 EDI
3  9763	00001FE5  57						 PUSH	 EDI
2  9764	00001FE6  88 1F						 MOV	 [BYTE PTR EDI],BL	 ; store length
2  9765								 POPRS	 EDI
3  9766	00001FE8  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3  9767	00001FEB  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9768								 POPRS	 ESI
3  9769	00001FEE  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  9770	00001FF1  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9771								 $NEXT
3  9772	00001FF4  AD						 LODSD				 ; fetch address
3  9773								 $JMP
4  9774	00001FF5  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9775	00001FF7  FF E3						 JMP	 EBX			 ; execute
2  9776
2  9777					 ;  6.1.2450 WORD
2  9778								 $COLON	 'WORD',$WORD
3  9779								 $DEF	 'WORD',$WORD,$ENTER,
4  9780	00001FF9			 ??0333:
4  9781		  =MAIN:1FF9		 LASTWORD		 =	 ??0333
4  9782								 IFNB	 <>
4  9783								   DB
4  9784								 ELSE
4  9785	00001FF9  00						   DB	 VEF_USUAL
4  9786								 ENDIF
4  9787	00001FFA  04						 DB	 ??0334	- $ - 1
4  9788	00001FFB  57 4F	52 44					 DB	 'WORD'
4  9789	00001FFF			 ??0334:
4  9790	00001FFF  06						 DB	 ??0334	- ??0333
4  9791	00002000  20001F7E					 DD	 VOC_LINK
4  9792		  =MAIN:20001FF9	 VOC_LINK		 =	 ??0333	+ DESIRED_BASE_EQU
4  9793
4  9794								 IFNB	 <$WORD>
4  9795	00002004						   LABEL   $WORD FAR
4  9796								 ENDIF
4  9797								 IFNB	 <$ENTER>
4  9798	00002004  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  9799								 ELSE
4  9800								   DD	   ??0336 + DESIRED_BASE_EQU
4  9801								 ENDIF
4  9802	00002008			 ??0336:
2  9803								 CW	 $SOURCE		 ; c c-addr u
3  9804	00002008  20000791					 DD	 $SOURCE + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 173
FKernel.asm



2  9805								 CFETCH	 $TOIN
3  9806								 CW	 $TOIN
4  9807	0000200C  20001F76					 DD	 $TOIN + DESIRED_BASE_EQU
3  9808								 CW	 $FETCH
4  9809	00002010  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  9810								 CW	 $SUB
3  9811	00002014  20001913					 DD	 $SUB +	DESIRED_BASE_EQU
2  9812								 CW	 $SWAP			 ; c u c-addr
3  9813	00002018  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  9814								 CFETCH	 $TOIN			 ; c u c-addr offset
3  9815								 CW	 $TOIN
4  9816	0000201C  20001F76					 DD	 $TOIN + DESIRED_BASE_EQU
3  9817								 CW	 $FETCH
4  9818	00002020  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  9819								 CW	 $ADD			 ; c u c-addr
3  9820	00002024  200018FD					 DD	 $ADD +	DESIRED_BASE_EQU
2  9821								 CW	 $SWAP			 ; c c-addr u
3  9822	00002028  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  9823								 CW	 $POCKET		 ; c c-addr u dest-addr
3  9824	0000202C  200002A5					 DD	 $POCKET + DESIRED_BASE_EQU
2  9825								 CW	 $PWORD
3  9826	00002030  20001F8B					 DD	 $PWORD	+ DESIRED_BASE_EQU
2  9827								 CEXIT
3  9828								 CW	 $EXIT
4  9829	00002034  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  9830
2  9831					 ;  (PARSE)
2  9832								 $CODE	 '(PARSE)',$PPARSE
3  9833								 $DEF	 '(PARSE)',$PPARSE,,
4  9834	00002038			 ??0337:
4  9835		  =MAIN:2038		 LASTWORD		 =	 ??0337
4  9836								 IFNB	 <>
4  9837								   DB
4  9838								 ELSE
4  9839	00002038  00						   DB	 VEF_USUAL
4  9840								 ENDIF
4  9841	00002039  07						 DB	 ??0338	- $ - 1
4  9842	0000203A  28 50	41 52 53 45 29				 DB	 '(PARSE)'
4  9843	00002041			 ??0338:
4  9844	00002041  09						 DB	 ??0338	- ??0337
4  9845	00002042  20001FF9					 DD	 VOC_LINK
4  9846		  =MAIN:20002038	 VOC_LINK		 =	 ??0337	+ DESIRED_BASE_EQU
4  9847
4  9848								 IFNB	 <$PPARSE>
4  9849	00002046						   LABEL   $PPARSE FAR
4  9850								 ENDIF
4  9851								 IFNB	 <>
4  9852								   DD	    + DESIRED_BASE_EQU
4  9853								 ELSE
4  9854	00002046  2000204A					   DD	   ??033A + DESIRED_BASE_EQU
4  9855								 ENDIF
4  9856	0000204A			 ??033A:
2  9857								 PUSHRS	 ESI
3  9858	0000204A  83 ED	04					 SUB	 EBP,CELL_SIZE
3  9859	0000204D  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2  9860								 POPDS	 ECX			 ; count
3  9861	00002050  59						 POP	 ECX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 174
FKernel.asm



2  9862								 POPDS	 ESI			 ; source address
3  9863	00002051  5E						 POP	 ESI
2  9864								 POPDS	 EDX			 ; DL -	char
3  9865	00002052  5A						 POP	 EDX
2  9866								 PUSHDS	 ESI			 ; result
3  9867	00002053  56						 PUSH	 ESI
2  9868	00002054  33 DB						 XOR	 EBX,EBX
2  9869	00002056			 PPARSE_LOOP:
2  9870	00002056  49						 DEC	 ECX
2  9871	00002057  78 0F						 JS	 SHORT PPARSE_EXIT
2  9872	00002059  AC						 LODSB
2  9873	0000205A  FF 47	1C					 INC	 [DWORD	PTR EDI	+ TOIN_VAR]
2  9874	0000205D  0A C0						 OR	 AL,AL
2  9875	0000205F  74 07						 JZ	 SHORT PPARSE_EXIT
2  9876	00002061  3A C2						 CMP	 AL,DL
2  9877	00002063  74 03						 JZ	 SHORT PPARSE_EXIT
2  9878	00002065  43						 INC	 EBX
2  9879	00002066  EB EE						 JMP	 SHORT PPARSE_LOOP
2  9880	00002068			 PPARSE_EXIT:
2  9881								 PUSHDS	 EBX
3  9882	00002068  53						 PUSH	 EBX
2  9883								 POPRS	 ESI
3  9884	00002069  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3  9885	0000206C  83 C5	04					 ADD	 EBP,CELL_SIZE
2  9886								 $NEXT
3  9887	0000206F  AD						 LODSD				 ; fetch address
3  9888								 $JMP
4  9889	00002070  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4  9890	00002072  FF E3						 JMP	 EBX			 ; execute
2  9891
2  9892					 ;  6.2.2008 PARSE
2  9893								 $COLON	 'PARSE',$PARSE
3  9894								 $DEF	 'PARSE',$PARSE,$ENTER,
4  9895	00002074			 ??033B:
4  9896		  =MAIN:2074		 LASTWORD		 =	 ??033B
4  9897								 IFNB	 <>
4  9898								   DB
4  9899								 ELSE
4  9900	00002074  00						   DB	 VEF_USUAL
4  9901								 ENDIF
4  9902	00002075  05						 DB	 ??033C	- $ - 1
4  9903	00002076  50 41	52 53 45				 DB	 'PARSE'
4  9904	0000207B			 ??033C:
4  9905	0000207B  07						 DB	 ??033C	- ??033B
4  9906	0000207C  20002038					 DD	 VOC_LINK
4  9907		  =MAIN:20002074	 VOC_LINK		 =	 ??033B	+ DESIRED_BASE_EQU
4  9908
4  9909								 IFNB	 <$PARSE>
4  9910	00002080						   LABEL   $PARSE FAR
4  9911								 ENDIF
4  9912								 IFNB	 <$ENTER>
4  9913	00002080  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  9914								 ELSE
4  9915								   DD	   ??033E + DESIRED_BASE_EQU
4  9916								 ENDIF
4  9917	00002084			 ??033E:
2  9918								 CW	 $SOURCE		 ; c c-addr u
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 175
FKernel.asm



3  9919	00002084  20000791					 DD	 $SOURCE + DESIRED_BASE_EQU
2  9920								 CFETCH	 $TOIN
3  9921								 CW	 $TOIN
4  9922	00002088  20001F76					 DD	 $TOIN + DESIRED_BASE_EQU
3  9923								 CW	 $FETCH
4  9924	0000208C  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  9925								 CW	 $SUB
3  9926	00002090  20001913					 DD	 $SUB +	DESIRED_BASE_EQU
2  9927								 CW	 $SWAP			 ; c u c-addr
3  9928	00002094  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  9929								 CFETCH	 $TOIN			 ; c u c-addr offset
3  9930								 CW	 $TOIN
4  9931	00002098  20001F76					 DD	 $TOIN + DESIRED_BASE_EQU
3  9932								 CW	 $FETCH
4  9933	0000209C  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  9934								 CW	 $ADD			 ; c u c-addr
3  9935	000020A0  200018FD					 DD	 $ADD +	DESIRED_BASE_EQU
2  9936								 CW	 $SWAP			 ; c c-addr u
3  9937	000020A4  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  9938								 CW	 $PPARSE		 ; c-addr u
3  9939	000020A8  20002046					 DD	 $PPARSE + DESIRED_BASE_EQU
2  9940								 CEXIT
3  9941								 CW	 $EXIT
4  9942	000020AC  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  9943
2  9944					 ;  (S")
2  9945					 ;  -- c-addr count
2  9946								 $COLON	 '(S")',$PSQUOTE
3  9947								 $DEF	 '(S")',$PSQUOTE,$ENTER,
4  9948	000020B0			 ??033F:
4  9949		  =MAIN:20B0		 LASTWORD		 =	 ??033F
4  9950								 IFNB	 <>
4  9951								   DB
4  9952								 ELSE
4  9953	000020B0  00						   DB	 VEF_USUAL
4  9954								 ENDIF
4  9955	000020B1  04						 DB	 ??0340	- $ - 1
4  9956	000020B2  28 53	22 29					 DB	 '(S")'
4  9957	000020B6			 ??0340:
4  9958	000020B6  06						 DB	 ??0340	- ??033F
4  9959	000020B7  20002074					 DD	 VOC_LINK
4  9960		  =MAIN:200020B0	 VOC_LINK		 =	 ??033F	+ DESIRED_BASE_EQU
4  9961
4  9962								 IFNB	 <$PSQUOTE>
4  9963	000020BB						   LABEL   $PSQUOTE FAR
4  9964								 ENDIF
4  9965								 IFNB	 <$ENTER>
4  9966	000020BB  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4  9967								 ELSE
4  9968								   DD	   ??0342 + DESIRED_BASE_EQU
4  9969								 ENDIF
4  9970	000020BF			 ??0342:
2  9971								 CW	 $RFROM
3  9972	000020BF  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2  9973								 CW	 $DUP
3  9974	000020C3  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2  9975								 CW	 $FETCH
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 176
FKernel.asm



3  9976	000020C7  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2  9977								 CW	 $SWAP
3  9978	000020CB  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  9979								 CW	 $CELLADD
3  9980	000020CF  20001D03					 DD	 $CELLADD + DESIRED_BASE_EQU
2  9981								 CW	 $2DUP
3  9982	000020D3  2000157B					 DD	 $2DUP + DESIRED_BASE_EQU
2  9983								 CW	 $ADD
3  9984	000020D7  200018FD					 DD	 $ADD +	DESIRED_BASE_EQU
2  9985								 CW	 $TOR
3  9986	000020DB  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2  9987								 CW	 $SWAP
3  9988	000020DF  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2  9989								 CEXIT
3  9990								 CW	 $EXIT
4  9991	000020E3  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2  9992
2  9993					 ;  S"-COMP
2  9994								 $COLON	 'S"-COMP',$SQ_COMP
3  9995								 $DEF	 'S"-COMP',$SQ_COMP,$ENTER,
4  9996	000020E7			 ??0343:
4  9997		  =MAIN:20E7		 LASTWORD		 =	 ??0343
4  9998								 IFNB	 <>
4  9999								   DB
4 10000								 ELSE
4 10001	000020E7  00						   DB	 VEF_USUAL
4 10002								 ENDIF
4 10003	000020E8  07						 DB	 ??0344	- $ - 1
4 10004	000020E9  53 22	2D 43 4F 4D 50				 DB	 'S"-COMP'
4 10005	000020F0			 ??0344:
4 10006	000020F0  09						 DB	 ??0344	- ??0343
4 10007	000020F1  200020B0					 DD	 VOC_LINK
4 10008		  =MAIN:200020E7	 VOC_LINK		 =	 ??0343	+ DESIRED_BASE_EQU
4 10009
4 10010								 IFNB	 <$SQ_COMP>
4 10011	000020F5						   LABEL   $SQ_COMP FAR
4 10012								 ENDIF
4 10013								 IFNB	 <$ENTER>
4 10014	000020F5  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 10015								 ELSE
4 10016								   DD	   ??0346 + DESIRED_BASE_EQU
4 10017								 ENDIF
4 10018	000020F9			 ??0346:
2 10019								 CCLIT	 '"'
3 10020								 CW	 $LIT
4 10021	000020F9  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3 10022								 CC	 '"'
4 10023	000020FD  00000022					 DD	 '"'
2 10024								 CW	 $PARSE
3 10025	00002101  20002080					 DD	 $PARSE	+ DESIRED_BASE_EQU
2 10026								 CWLIT	 $PSQUOTE
3 10027								 CW	 $LIT
4 10028	00002105  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3 10029								 CW	 $PSQUOTE
4 10030	00002109  200020BB					 DD	 $PSQUOTE + DESIRED_BASE_EQU
2 10031								 CW	 $COMPILEC
3 10032	0000210D  200021E1					 DD	 $COMPILEC + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 177
FKernel.asm



2 10033								 CW	 $DUP
3 10034	00002111  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2 10035								 CW	 $COMMA
3 10036	00002115  200021B9					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 10037								 CW	 $HERE
3 10038	00002119  20002274					 DD	 $HERE + DESIRED_BASE_EQU
2 10039								 CW	 $OVER
3 10040	0000211D  20001616					 DD	 $OVER + DESIRED_BASE_EQU
2 10041								 CW	 $ALLOT
3 10042	00002121  200021F9					 DD	 $ALLOT	+ DESIRED_BASE_EQU
2 10043								 CW	 $SWAP
3 10044	00002125  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2 10045								 CW	 $CMOVE
3 10046	00002129  20002290					 DD	 $CMOVE	+ DESIRED_BASE_EQU
2 10047								 CEXIT
3 10048								 CW	 $EXIT
4 10049	0000212D  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 10050
2 10051					 ;  S"-INT
2 10052								 $COLON	 'S"-INT',$SQ_INT
3 10053								 $DEF	 'S"-INT',$SQ_INT,$ENTER,
4 10054	00002131			 ??0347:
4 10055		  =MAIN:2131		 LASTWORD		 =	 ??0347
4 10056								 IFNB	 <>
4 10057								   DB
4 10058								 ELSE
4 10059	00002131  00						   DB	 VEF_USUAL
4 10060								 ENDIF
4 10061	00002132  06						 DB	 ??0348	- $ - 1
4 10062	00002133  53 22	2D 49 4E 54				 DB	 'S"-INT'
4 10063	00002139			 ??0348:
4 10064	00002139  08						 DB	 ??0348	- ??0347
4 10065	0000213A  200020E7					 DD	 VOC_LINK
4 10066		  =MAIN:20002131	 VOC_LINK		 =	 ??0347	+ DESIRED_BASE_EQU
4 10067
4 10068								 IFNB	 <$SQ_INT>
4 10069	0000213E						   LABEL   $SQ_INT FAR
4 10070								 ENDIF
4 10071								 IFNB	 <$ENTER>
4 10072	0000213E  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 10073								 ELSE
4 10074								   DD	   ??034A + DESIRED_BASE_EQU
4 10075								 ENDIF
4 10076	00002142			 ??034A:
2 10077								 CCLIT	 '"'
3 10078								 CW	 $LIT
4 10079	00002142  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3 10080								 CC	 '"'
4 10081	00002146  00000022					 DD	 '"'
2 10082								 CW	 $PARSE
3 10083	0000214A  20002080					 DD	 $PARSE	+ DESIRED_BASE_EQU
2 10084								 CW	 $2DUP
3 10085	0000214E  2000157B					 DD	 $2DUP + DESIRED_BASE_EQU
2 10086								 CW	 $SQUOTE_BUFFER
3 10087	00002152  20000290					 DD	 $SQUOTE_BUFFER	+ DESIRED_BASE_EQU
2 10088								 CW	 $SWAP
3 10089	00002156  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 178
FKernel.asm



2 10090								 CW	 $CMOVE
3 10091	0000215A  20002290					 DD	 $CMOVE	+ DESIRED_BASE_EQU
2 10092								 CW	 $NIP
3 10093	0000215E  200015FF					 DD	 $NIP +	DESIRED_BASE_EQU
2 10094								 CW	 $SQUOTE_BUFFER
3 10095	00002162  20000290					 DD	 $SQUOTE_BUFFER	+ DESIRED_BASE_EQU
2 10096								 CW	 $SWAP
3 10097	00002166  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2 10098								 CEXIT
3 10099								 CW	 $EXIT
4 10100	0000216A  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 10101
2 10102					 ;     6.1.2165	S"
2 10103					 ;  11.6.1.2165	S"
2 10104								 $DEF	 'S"',$SQUOTE,$PDO_INT_COMP,VEF_IMMEDIATE
3 10105	0000216E			 ??034B:
3 10106		  =MAIN:216E		 LASTWORD		 =	 ??034B
3 10107								 IFNB	 <VEF_IMMEDIATE>
3 10108	0000216E  01						   DB	 VEF_IMMEDIATE
3 10109								 ELSE
3 10110								   DB	 VEF_USUAL
3 10111								 ENDIF
3 10112	0000216F  02						 DB	 ??034C	- $ - 1
3 10113	00002170  53 22						 DB	 'S"'
3 10114	00002172			 ??034C:
3 10115	00002172  04						 DB	 ??034C	- ??034B
3 10116	00002173  20002131					 DD	 VOC_LINK
3 10117		  =MAIN:2000216E	 VOC_LINK		 =	 ??034B	+ DESIRED_BASE_EQU
3 10118
3 10119								 IFNB	 <$SQUOTE>
3 10120	00002177						   LABEL   $SQUOTE FAR
3 10121								 ENDIF
3 10122								 IFNB	 <$PDO_INT_COMP>
3 10123	00002177  2000018A					   DD	   $PDO_INT_COMP + DESIRED_BASE_EQU
3 10124								 ELSE
3 10125								   DD	   ??034E + DESIRED_BASE_EQU
3 10126								 ENDIF
3 10127	0000217B			 ??034E:
2 10128								 CW	 $SQ_INT
3 10129	0000217B  2000213E					 DD	 $SQ_INT + DESIRED_BASE_EQU
2 10130								 CW	 $SQ_COMP
3 10131	0000217F  200020F5					 DD	 $SQ_COMP + DESIRED_BASE_EQU
2 10132
2 10133					 ;  \
2 10134								 $DEFER	 '\',,VEF_IMMEDIATE
3 10135								 $DEF	 '\',,$DODEFER,VEF_IMMEDIATE
4 10136	00002183			 ??034F:
4 10137		  =MAIN:2183		 LASTWORD		 =	 ??034F
4 10138								 IFNB	 <VEF_IMMEDIATE>
4 10139	00002183  01						   DB	 VEF_IMMEDIATE
4 10140								 ELSE
4 10141								   DB	 VEF_USUAL
4 10142								 ENDIF
4 10143	00002184  01						 DB	 ??0350	- $ - 1
4 10144	00002185  5C						 DB	 '\'
4 10145	00002186			 ??0350:
4 10146	00002186  03						 DB	 ??0350	- ??034F
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 179
FKernel.asm



4 10147	00002187  2000216E					 DD	 VOC_LINK
4 10148		  =MAIN:20002183	 VOC_LINK		 =	 ??034F	+ DESIRED_BASE_EQU
4 10149
4 10150								 IFNB	 <>
4 10151								   LABEL    FAR
4 10152								 ENDIF
4 10153								 IFNB	 <$DODEFER>
4 10154	0000218B  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4 10155								 ELSE
4 10156								   DD	   ??0352 + DESIRED_BASE_EQU
4 10157								 ENDIF
4 10158	0000218F			 ??0352:
2 10159								 CW	 $PBSLASH
3 10160	0000218F  2000219D					 DD	 $PBSLASH + DESIRED_BASE_EQU
2 10161
2 10162								 $COLON	 '(\)',$PBSLASH,VEF_IMMEDIATE
3 10163								 $DEF	 '(\)',$PBSLASH,$ENTER,VEF_IMMEDIATE
4 10164	00002193			 ??0353:
4 10165		  =MAIN:2193		 LASTWORD		 =	 ??0353
4 10166								 IFNB	 <VEF_IMMEDIATE>
4 10167	00002193  01						   DB	 VEF_IMMEDIATE
4 10168								 ELSE
4 10169								   DB	 VEF_USUAL
4 10170								 ENDIF
4 10171	00002194  03						 DB	 ??0354	- $ - 1
4 10172	00002195  28 5C	29					 DB	 '(\)'
4 10173	00002198			 ??0354:
4 10174	00002198  05						 DB	 ??0354	- ??0353
4 10175	00002199  20002183					 DD	 VOC_LINK
4 10176		  =MAIN:20002193	 VOC_LINK		 =	 ??0353	+ DESIRED_BASE_EQU
4 10177
4 10178								 IFNB	 <$PBSLASH>
4 10179	0000219D						   LABEL   $PBSLASH FAR
4 10180								 ENDIF
4 10181								 IFNB	 <$ENTER>
4 10182	0000219D  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 10183								 ELSE
4 10184								   DD	   ??0356 + DESIRED_BASE_EQU
4 10185								 ENDIF
4 10186	000021A1			 ??0356:
2 10187								 CW	 $ZERO
3 10188	000021A1  200001A7					 DD	 $ZERO + DESIRED_BASE_EQU
2 10189								 CW	 $PARSE
3 10190	000021A5  20002080					 DD	 $PARSE	+ DESIRED_BASE_EQU
2 10191								 CW	 $2DROP
3 10192	000021A9  20001565					 DD	 $2DROP	+ DESIRED_BASE_EQU
2 10193								 CEXIT
3 10194								 CW	 $EXIT
4 10195	000021AD  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 10196
2 10197
1 10198								 INCLUDE "data.inc"
2 10199					 ;******************************************************************************
2 10200					 ;
2 10201					 ;  data.inc
2 10202					 ;  IKForth
2 10203					 ;
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 180
FKernel.asm



2 10204					 ;  Copyright (C) 1999-2003 Illya Kysil
2 10205					 ;
2 10206					 ;******************************************************************************
2 10207					 ;  Data space
2 10208					 ;******************************************************************************
2 10209
2 10210					 ;  6.1.0150 ,
2 10211					 ;  Reserve one	cell of	data space and store x in the cell
2 10212					 ;  D: x --
2 10213								 $CODE	 ',',$COMMA
3 10214								 $DEF	 ',',$COMMA,,
4 10215	000021B1			 ??0357:
4 10216		  =MAIN:21B1		 LASTWORD		 =	 ??0357
4 10217								 IFNB	 <>
4 10218								   DB
4 10219								 ELSE
4 10220	000021B1  00						   DB	 VEF_USUAL
4 10221								 ENDIF
4 10222	000021B2  01						 DB	 ??0358	- $ - 1
4 10223	000021B3  2C						 DB	 ','
4 10224	000021B4			 ??0358:
4 10225	000021B4  03						 DB	 ??0358	- ??0357
4 10226	000021B5  20002193					 DD	 VOC_LINK
4 10227		  =MAIN:200021B1	 VOC_LINK		 =	 ??0357	+ DESIRED_BASE_EQU
4 10228
4 10229								 IFNB	 <$COMMA>
4 10230	000021B9						   LABEL   $COMMA FAR
4 10231								 ENDIF
4 10232								 IFNB	 <>
4 10233								   DD	    + DESIRED_BASE_EQU
4 10234								 ELSE
4 10235	000021B9  200021BD					   DD	   ??035A + DESIRED_BASE_EQU
4 10236								 ENDIF
4 10237	000021BD			 ??035A:
2 10238								 POPDS	 EAX
3 10239	000021BD  58						 POP	 EAX
2 10240	000021BE  8B 1D	2000032D				 MOV	 EBX,[DWORD PTR	DP_VAR + DESIRED_BASE_EQU]
2 10241	000021C4  89 03						 MOV	 [DWORD	PTR EBX],EAX
2 10242	000021C6  83 05	2000032D 04				 ADD	 [DWORD	PTR DP_VAR + DESIRED_BASE_EQU],CELL_SIZE
2 10243								 $NEXT
3 10244	000021CD  AD						 LODSD				 ; fetch address
3 10245								 $JMP
4 10246	000021CE  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10247	000021D0  FF E3						 JMP	 EBX			 ; execute
2 10248
2 10249					 ;  COMPILE,
2 10250								 $COLON	 'COMPILE,',$COMPILEC,<VEF_COMPILE_ONLY>
3 10251								 $DEF	 'COMPILE,',$COMPILEC,$ENTER,VEF_COMPILE_ONLY
4 10252	000021D2			 ??035B:
4 10253		  =MAIN:21D2		 LASTWORD		 =	 ??035B
4 10254								 IFNB	 <VEF_COMPILE_ONLY>
4 10255	000021D2  04						   DB	 VEF_COMPILE_ONLY
4 10256								 ELSE
4 10257								   DB	 VEF_USUAL
4 10258								 ENDIF
4 10259	000021D3  08						 DB	 ??035C	- $ - 1
4 10260	000021D4  43 4F	4D 50 49 4C 45+				 DB	 'COMPILE,'
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 181
FKernel.asm



  10261		  2C
4 10262	000021DC			 ??035C:
4 10263	000021DC  0A						 DB	 ??035C	- ??035B
4 10264	000021DD  200021B1					 DD	 VOC_LINK
4 10265		  =MAIN:200021D2	 VOC_LINK		 =	 ??035B	+ DESIRED_BASE_EQU
4 10266
4 10267								 IFNB	 <$COMPILEC>
4 10268	000021E1						   LABEL   $COMPILEC FAR
4 10269								 ENDIF
4 10270								 IFNB	 <$ENTER>
4 10271	000021E1  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 10272								 ELSE
4 10273								   DD	   ??035E + DESIRED_BASE_EQU
4 10274								 ENDIF
4 10275	000021E5			 ??035E:
2 10276								 CW	 $COMMA
3 10277	000021E5  200021B9					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 10278								 CEXIT
3 10279								 CW	 $EXIT
4 10280	000021E9  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 10281
2 10282					 ;  6.1.0710 ALLOT
2 10283					 ;  Allocates n	memory cells on	the top	of vocabulary
2 10284					 ;  D: n --
2 10285								 $CODE	 'ALLOT',$ALLOT
3 10286								 $DEF	 'ALLOT',$ALLOT,,
4 10287	000021ED			 ??035F:
4 10288		  =MAIN:21ED		 LASTWORD		 =	 ??035F
4 10289								 IFNB	 <>
4 10290								   DB
4 10291								 ELSE
4 10292	000021ED  00						   DB	 VEF_USUAL
4 10293								 ENDIF
4 10294	000021EE  05						 DB	 ??0360	- $ - 1
4 10295	000021EF  41 4C	4C 4F 54				 DB	 'ALLOT'
4 10296	000021F4			 ??0360:
4 10297	000021F4  07						 DB	 ??0360	- ??035F
4 10298	000021F5  200021D2					 DD	 VOC_LINK
4 10299		  =MAIN:200021ED	 VOC_LINK		 =	 ??035F	+ DESIRED_BASE_EQU
4 10300
4 10301								 IFNB	 <$ALLOT>
4 10302	000021F9						   LABEL   $ALLOT FAR
4 10303								 ENDIF
4 10304								 IFNB	 <>
4 10305								   DD	    + DESIRED_BASE_EQU
4 10306								 ELSE
4 10307	000021F9  200021FD					   DD	   ??0362 + DESIRED_BASE_EQU
4 10308								 ENDIF
4 10309	000021FD			 ??0362:
2 10310								 POPDS	 EAX
3 10311	000021FD  58						 POP	 EAX
2 10312	000021FE  01 05	2000032D				 ADD	 [DWORD	PTR DP_VAR + DESIRED_BASE_EQU],EAX
2 10313								 $NEXT
3 10314	00002204  AD						 LODSD				 ; fetch address
3 10315								 $JMP
4 10316	00002205  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10317	00002207  FF E3						 JMP	 EBX			 ; execute
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 182
FKernel.asm



2 10318
2 10319					 ;  6.1.0860 C,
2 10320					 ;  Reserve one	character of data space	and store x in the character
2 10321					 ;  D: x --
2 10322								 $CODE	 'C,',$CCOMMA
3 10323								 $DEF	 'C,',$CCOMMA,,
4 10324	00002209			 ??0363:
4 10325		  =MAIN:2209		 LASTWORD		 =	 ??0363
4 10326								 IFNB	 <>
4 10327								   DB
4 10328								 ELSE
4 10329	00002209  00						   DB	 VEF_USUAL
4 10330								 ENDIF
4 10331	0000220A  02						 DB	 ??0364	- $ - 1
4 10332	0000220B  43 2C						 DB	 'C,'
4 10333	0000220D			 ??0364:
4 10334	0000220D  04						 DB	 ??0364	- ??0363
4 10335	0000220E  200021ED					 DD	 VOC_LINK
4 10336		  =MAIN:20002209	 VOC_LINK		 =	 ??0363	+ DESIRED_BASE_EQU
4 10337
4 10338								 IFNB	 <$CCOMMA>
4 10339	00002212						   LABEL   $CCOMMA FAR
4 10340								 ENDIF
4 10341								 IFNB	 <>
4 10342								   DD	    + DESIRED_BASE_EQU
4 10343								 ELSE
4 10344	00002212  20002216					   DD	   ??0366 + DESIRED_BASE_EQU
4 10345								 ENDIF
4 10346	00002216			 ??0366:
2 10347								 POPDS	 EAX
3 10348	00002216  58						 POP	 EAX
2 10349	00002217  8B 1D	2000032D				 MOV	 EBX,[DWORD PTR	DP_VAR + DESIRED_BASE_EQU]
2 10350	0000221D  88 03						 MOV	 [BYTE PTR EBX],AL
2 10351	0000221F  FF 05	2000032D				 INC	 [DWORD	PTR DP_VAR + DESIRED_BASE_EQU]
2 10352								 $NEXT
3 10353	00002225  AD						 LODSD				 ; fetch address
3 10354								 $JMP
4 10355	00002226  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10356	00002228  FF E3						 JMP	 EBX			 ; execute
2 10357
2 10358					 ;  (;)
2 10359								 $CODE	 '(;)',$EXIT,VEF_COMPILE_ONLY
3 10360								 $DEF	 '(;)',$EXIT,,VEF_COMPILE_ONLY
4 10361	0000222A			 ??0367:
4 10362		  =MAIN:222A		 LASTWORD		 =	 ??0367
4 10363								 IFNB	 <VEF_COMPILE_ONLY>
4 10364	0000222A  04						   DB	 VEF_COMPILE_ONLY
4 10365								 ELSE
4 10366								   DB	 VEF_USUAL
4 10367								 ENDIF
4 10368	0000222B  03						 DB	 ??0368	- $ - 1
4 10369	0000222C  28 3B	29					 DB	 '(;)'
4 10370	0000222F			 ??0368:
4 10371	0000222F  05						 DB	 ??0368	- ??0367
4 10372	00002230  20002209					 DD	 VOC_LINK
4 10373		  =MAIN:2000222A	 VOC_LINK		 =	 ??0367	+ DESIRED_BASE_EQU
4 10374
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 183
FKernel.asm



4 10375								 IFNB	 <$EXIT>
4 10376	00002234						   LABEL   $EXIT FAR
4 10377								 ENDIF
4 10378								 IFNB	 <>
4 10379								   DD	    + DESIRED_BASE_EQU
4 10380								 ELSE
4 10381	00002234  20002238					   DD	   ??036A + DESIRED_BASE_EQU
4 10382								 ENDIF
4 10383	00002238			 ??036A:
2 10384								 POPRS	 ESI			 ; pop previous	IP from	return stack
3 10385	00002238  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 10386	0000223B  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10387								 $NEXT
3 10388	0000223E  AD						 LODSD				 ; fetch address
3 10389								 $JMP
4 10390	0000223F  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10391	00002241  FF E3						 JMP	 EBX			 ; execute
2 10392
2 10393					 ;  6.1.1780 LITERAL
2 10394								 $COLON	 'LITERAL',$LITERAL,<VEF_IMMEDIATE OR VEF_COMPILE_ONLY>
3 10395								 $DEF	 'LITERAL',$LITERAL,$ENTER,VEF_IMMEDIATE OR VEF_COMPILE_ONLY
4 10396	00002243			 ??036B:
4 10397		  =MAIN:2243		 LASTWORD		 =	 ??036B
4 10398								 IFNB	 <VEF_IMMEDIATE>
4 10399	00002243  01						   DB	 VEF_IMMEDIATE
4 10400								 ELSE
4 10401								   DB	 VEF_USUAL
4 10402								 ENDIF
4 10403	00002244  07						 DB	 ??036C	- $ - 1
4 10404	00002245  4C 49	54 45 52 41 4C				 DB	 'LITERAL'
4 10405	0000224C			 ??036C:
4 10406	0000224C  09						 DB	 ??036C	- ??036B
4 10407	0000224D  2000222A					 DD	 VOC_LINK
4 10408		  =MAIN:20002243	 VOC_LINK		 =	 ??036B	+ DESIRED_BASE_EQU
4 10409
4 10410								 IFNB	 <$LITERAL>
4 10411	00002251						   LABEL   $LITERAL FAR
4 10412								 ENDIF
4 10413								 IFNB	 <$ENTER>
4 10414	00002251  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 10415								 ELSE
4 10416								   DD	   ??036E + DESIRED_BASE_EQU
4 10417								 ENDIF
4 10418	00002255			 ??036E:
2 10419								 CWLIT	 $LIT
3 10420								 CW	 $LIT
4 10421	00002255  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3 10422								 CW	 $LIT
4 10423	00002259  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
2 10424								 CW	 $COMPILEC
3 10425	0000225D  200021E1					 DD	 $COMPILEC + DESIRED_BASE_EQU
2 10426								 CW	 $COMMA
3 10427	00002261  200021B9					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 10428								 CEXIT
3 10429								 CW	 $EXIT
4 10430	00002265  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 10431
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 184
FKernel.asm



2 10432					 ;  6.1.1650 HERE
2 10433					 ;  addr is the	data-space pointer.
2 10434					 ;  D: -- addr
2 10435								 $COLON	 'HERE',$HERE
3 10436								 $DEF	 'HERE',$HERE,$ENTER,
4 10437	00002269			 ??036F:
4 10438		  =MAIN:2269		 LASTWORD		 =	 ??036F
4 10439								 IFNB	 <>
4 10440								   DB
4 10441								 ELSE
4 10442	00002269  00						   DB	 VEF_USUAL
4 10443								 ENDIF
4 10444	0000226A  04						 DB	 ??0370	- $ - 1
4 10445	0000226B  48 45	52 45					 DB	 'HERE'
4 10446	0000226F			 ??0370:
4 10447	0000226F  06						 DB	 ??0370	- ??036F
4 10448	00002270  20002243					 DD	 VOC_LINK
4 10449		  =MAIN:20002269	 VOC_LINK		 =	 ??036F	+ DESIRED_BASE_EQU
4 10450
4 10451								 IFNB	 <$HERE>
4 10452	00002274						   LABEL   $HERE FAR
4 10453								 ENDIF
4 10454								 IFNB	 <$ENTER>
4 10455	00002274  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 10456								 ELSE
4 10457								   DD	   ??0372 + DESIRED_BASE_EQU
4 10458								 ENDIF
4 10459	00002278			 ??0372:
2 10460								 CFETCH	 $DP
3 10461								 CW	 $DP
4 10462	00002278  20000329					 DD	 $DP + DESIRED_BASE_EQU
3 10463								 CW	 $FETCH
4 10464	0000227C  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 10465								 CEXIT
3 10466								 CW	 $EXIT
4 10467	00002280  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 10468
2 10469
1 10470								 INCLUDE "string.inc"
2 10471					 ;******************************************************************************
2 10472					 ;
2 10473					 ;  string.inc
2 10474					 ;  IKForth
2 10475					 ;
2 10476					 ;  Copyright (C) 1999-2003 Illya Kysil
2 10477					 ;
2 10478					 ;******************************************************************************
2 10479					 ;  String words
2 10480					 ;******************************************************************************
2 10481
2 10482					 ;  17.6.1.0910	CMOVE
2 10483					 ;  D: c-addr1 c-addr2 u --
2 10484					 ;  If u is greater than zero, copy u consecutive characters from the data space
2 10485					 ;  starting at	c-addr1	to that	starting at c-addr2, proceeding	character-by-character
2 10486					 ;  from lower addresses to higher addresses.
2 10487								 $CODE	 'CMOVE',$CMOVE
3 10488								 $DEF	 'CMOVE',$CMOVE,,
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 185
FKernel.asm



4 10489	00002284			 ??0373:
4 10490		  =MAIN:2284		 LASTWORD		 =	 ??0373
4 10491								 IFNB	 <>
4 10492								   DB
4 10493								 ELSE
4 10494	00002284  00						   DB	 VEF_USUAL
4 10495								 ENDIF
4 10496	00002285  05						 DB	 ??0374	- $ - 1
4 10497	00002286  43 4D	4F 56 45				 DB	 'CMOVE'
4 10498	0000228B			 ??0374:
4 10499	0000228B  07						 DB	 ??0374	- ??0373
4 10500	0000228C  20002269					 DD	 VOC_LINK
4 10501		  =MAIN:20002284	 VOC_LINK		 =	 ??0373	+ DESIRED_BASE_EQU
4 10502
4 10503								 IFNB	 <$CMOVE>
4 10504	00002290						   LABEL   $CMOVE FAR
4 10505								 ENDIF
4 10506								 IFNB	 <>
4 10507								   DD	    + DESIRED_BASE_EQU
4 10508								 ELSE
4 10509	00002290  20002294					   DD	   ??0376 + DESIRED_BASE_EQU
4 10510								 ENDIF
4 10511	00002294			 ??0376:
2 10512								 PUSHRS	 EDI
3 10513	00002294  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10514	00002297  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2 10515								 PUSHRS	 ESI
3 10516	0000229A  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10517	0000229D  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2 10518								 POPDS	 ECX
3 10519	000022A0  59						 POP	 ECX
2 10520								 POPDS	 EDI
3 10521	000022A1  5F						 POP	 EDI
2 10522								 POPDS	 ESI
3 10523	000022A2  5E						 POP	 ESI
2 10524	000022A3  0B C9						 OR	 ECX,ECX
2 10525	000022A5  74 03						 JZ	 SHORT CMOVE_EXIT
2 10526	000022A7  FC						 CLD
2 10527	000022A8  F3> A4				     REP MOVSB
2 10528	000022AA			 CMOVE_EXIT:
2 10529								 POPRS	 ESI
3 10530	000022AA  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 10531	000022AD  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10532								 POPRS	 EDI
3 10533	000022B0  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3 10534	000022B3  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10535								 $NEXT
3 10536	000022B6  AD						 LODSD				 ; fetch address
3 10537								 $JMP
4 10538	000022B7  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10539	000022B9  FF E3						 JMP	 EBX			 ; execute
2 10540
2 10541					 ;  17.6.1.0920	CMOVE>
2 10542					 ;  D: c-addr1 c-addr2 u --
2 10543					 ;  If u is greater than zero, copy u consecutive characters from the data space
2 10544					 ;  starting at	c-addr1	to that	starting at c-addr2, proceeding	character-by-character
2 10545					 ;  from higher	addresses to lower addresses.
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 186
FKernel.asm



2 10546								 $CODE	 'CMOVE>',$CMOVEGR
3 10547								 $DEF	 'CMOVE>',$CMOVEGR,,
4 10548	000022BB			 ??0377:
4 10549		  =MAIN:22BB		 LASTWORD		 =	 ??0377
4 10550								 IFNB	 <>
4 10551								   DB
4 10552								 ELSE
4 10553	000022BB  00						   DB	 VEF_USUAL
4 10554								 ENDIF
4 10555	000022BC  06						 DB	 ??0378	- $ - 1
4 10556	000022BD  43 4D	4F 56 45 3E				 DB	 'CMOVE>'
4 10557	000022C3			 ??0378:
4 10558	000022C3  08						 DB	 ??0378	- ??0377
4 10559	000022C4  20002284					 DD	 VOC_LINK
4 10560		  =MAIN:200022BB	 VOC_LINK		 =	 ??0377	+ DESIRED_BASE_EQU
4 10561
4 10562								 IFNB	 <$CMOVEGR>
4 10563	000022C8						   LABEL   $CMOVEGR FAR
4 10564								 ENDIF
4 10565								 IFNB	 <>
4 10566								   DD	    + DESIRED_BASE_EQU
4 10567								 ELSE
4 10568	000022C8  200022CC					   DD	   ??037A + DESIRED_BASE_EQU
4 10569								 ENDIF
4 10570	000022CC			 ??037A:
2 10571								 PUSHRS	 EDI
3 10572	000022CC  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10573	000022CF  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2 10574								 PUSHRS	 ESI
3 10575	000022D2  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10576	000022D5  89 75	00					 MOV	 [DWORD	PTR EBP],ESI
2 10577								 POPDS	 ECX
3 10578	000022D8  59						 POP	 ECX
2 10579								 POPDS	 EDI
3 10580	000022D9  5F						 POP	 EDI
2 10581	000022DA  03 F9						 ADD	 EDI,ECX
2 10582	000022DC  4F						 DEC	 EDI
2 10583								 POPDS	 ESI
3 10584	000022DD  5E						 POP	 ESI
2 10585	000022DE  03 F1						 ADD	 ESI,ECX
2 10586	000022E0  4E						 DEC	 ESI
2 10587	000022E1  0B C9						 OR	 ECX,ECX
2 10588	000022E3  76 04						 JBE	 SHORT CMOVEGR_EXIT
2 10589	000022E5  FD						 STD
2 10590	000022E6  F3> A4				     REP MOVSB
2 10591	000022E8  FC						 CLD
2 10592	000022E9			 CMOVEGR_EXIT:
2 10593								 POPRS	 ESI
3 10594	000022E9  8B 75	00					 MOV	 ESI,[DWORD PTR	EBP]
3 10595	000022EC  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10596								 POPRS	 EDI
3 10597	000022EF  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3 10598	000022F2  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10599								 $NEXT
3 10600	000022F5  AD						 LODSD				 ; fetch address
3 10601								 $JMP
4 10602	000022F6  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 187
FKernel.asm



4 10603	000022F8  FF E3						 JMP	 EBX			 ; execute
2 10604
2 10605					 ;  6.1.0980 COUNT
2 10606								 $CODE	 'COUNT',$COUNT
3 10607								 $DEF	 'COUNT',$COUNT,,
4 10608	000022FA			 ??037B:
4 10609		  =MAIN:22FA		 LASTWORD		 =	 ??037B
4 10610								 IFNB	 <>
4 10611								   DB
4 10612								 ELSE
4 10613	000022FA  00						   DB	 VEF_USUAL
4 10614								 ENDIF
4 10615	000022FB  05						 DB	 ??037C	- $ - 1
4 10616	000022FC  43 4F	55 4E 54				 DB	 'COUNT'
4 10617	00002301			 ??037C:
4 10618	00002301  07						 DB	 ??037C	- ??037B
4 10619	00002302  200022BB					 DD	 VOC_LINK
4 10620		  =MAIN:200022FA	 VOC_LINK		 =	 ??037B	+ DESIRED_BASE_EQU
4 10621
4 10622								 IFNB	 <$COUNT>
4 10623	00002306						   LABEL   $COUNT FAR
4 10624								 ENDIF
4 10625								 IFNB	 <>
4 10626								   DD	    + DESIRED_BASE_EQU
4 10627								 ELSE
4 10628	00002306  2000230A					   DD	   ??037E + DESIRED_BASE_EQU
4 10629								 ENDIF
4 10630	0000230A			 ??037E:
2 10631								 POPDS	 EBX
3 10632	0000230A  5B						 POP	 EBX
2 10633	0000230B  0F B6	03					 MOVZX	 EAX,[BYTE PTR EBX]
2 10634	0000230E  43						 INC	 EBX
2 10635								 PUSHDS	 EBX
3 10636	0000230F  53						 PUSH	 EBX
2 10637								 PUSHDS	 EAX
3 10638	00002310  50						 PUSH	 EAX
2 10639								 $NEXT
3 10640	00002311  AD						 LODSD				 ; fetch address
3 10641								 $JMP
4 10642	00002312  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10643	00002314  FF E3						 JMP	 EBX			 ; execute
2 10644
2 10645
1 10646								 INCLUDE "double.inc"
2 10647					 ;******************************************************************************
2 10648					 ;
2 10649					 ;  double.inc
2 10650					 ;  IKForth
2 10651					 ;
2 10652					 ;  Copyright (C) 1999-2003 Illya Kysil
2 10653					 ;
2 10654					 ;******************************************************************************
2 10655					 ;  Double number words
2 10656					 ;******************************************************************************
2 10657
2 10658					 ;  8.6.1.0390 2LITERAL
2 10659								 $COLON	 '2LITERAL',$2LITERAL,<VEF_IMMEDIATE OR	VEF_COMPILE_ONLY>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 188
FKernel.asm



3 10660								 $DEF	 '2LITERAL',$2LITERAL,$ENTER,VEF_IMMEDIATE OR		    +
  10661					 VEF_COMPILE_ONLY
4 10662	00002316			 ??037F:
4 10663		  =MAIN:2316		 LASTWORD		 =	 ??037F
4 10664								 IFNB	 <VEF_IMMEDIATE>
4 10665	00002316  01						   DB	 VEF_IMMEDIATE
4 10666								 ELSE
4 10667								   DB	 VEF_USUAL
4 10668								 ENDIF
4 10669	00002317  08						 DB	 ??0380	- $ - 1
4 10670	00002318  32 4C	49 54 45 52 41+				 DB	 '2LITERAL'
  10671		  4C
4 10672	00002320			 ??0380:
4 10673	00002320  0A						 DB	 ??0380	- ??037F
4 10674	00002321  200022FA					 DD	 VOC_LINK
4 10675		  =MAIN:20002316	 VOC_LINK		 =	 ??037F	+ DESIRED_BASE_EQU
4 10676
4 10677								 IFNB	 <$2LITERAL>
4 10678	00002325						   LABEL   $2LITERAL FAR
4 10679								 ENDIF
4 10680								 IFNB	 <$ENTER>
4 10681	00002325  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 10682								 ELSE
4 10683								   DD	   ??0382 + DESIRED_BASE_EQU
4 10684								 ENDIF
4 10685	00002329			 ??0382:
2 10686								 CWLIT	 $2LIT
3 10687								 CW	 $LIT
4 10688	00002329  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3 10689								 CW	 $2LIT
4 10690	0000232D  200000C8					 DD	 $2LIT + DESIRED_BASE_EQU
2 10691								 CW	 $COMPILEC
3 10692	00002331  200021E1					 DD	 $COMPILEC + DESIRED_BASE_EQU
2 10693								 CW	 $SWAP
3 10694	00002335  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2 10695								 CW	 $COMMA
3 10696	00002339  200021B9					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 10697								 CW	 $COMMA
3 10698	0000233D  200021B9					 DD	 $COMMA	+ DESIRED_BASE_EQU
2 10699								 CEXIT
3 10700								 CW	 $EXIT
4 10701	00002341  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 10702
2 10703					 ;  8.6.1.1040 D+
2 10704					 ;  ( d1|ud1 d2|ud2 -- d3|ud3 )
2 10705					 ;  Add	d2|ud2 to d1|ud1, giving the sum d3|ud3.
2 10706								 $CODE	 'D+',$DADD
3 10707								 $DEF	 'D+',$DADD,,
4 10708	00002345			 ??0383:
4 10709		  =MAIN:2345		 LASTWORD		 =	 ??0383
4 10710								 IFNB	 <>
4 10711								   DB
4 10712								 ELSE
4 10713	00002345  00						   DB	 VEF_USUAL
4 10714								 ENDIF
4 10715	00002346  02						 DB	 ??0384	- $ - 1
4 10716	00002347  44 2B						 DB	 'D+'
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 189
FKernel.asm



4 10717	00002349			 ??0384:
4 10718	00002349  04						 DB	 ??0384	- ??0383
4 10719	0000234A  20002316					 DD	 VOC_LINK
4 10720		  =MAIN:20002345	 VOC_LINK		 =	 ??0383	+ DESIRED_BASE_EQU
4 10721
4 10722								 IFNB	 <$DADD>
4 10723	0000234E						   LABEL   $DADD FAR
4 10724								 ENDIF
4 10725								 IFNB	 <>
4 10726								   DD	    + DESIRED_BASE_EQU
4 10727								 ELSE
4 10728	0000234E  20002352					   DD	   ??0386 + DESIRED_BASE_EQU
4 10729								 ENDIF
4 10730	00002352			 ??0386:
2 10731								 POPDS	 ECX
3 10732	00002352  59						 POP	 ECX
2 10733								 POPDS	 EBX
3 10734	00002353  5B						 POP	 EBX
2 10735								 POPDS	 EDX
3 10736	00002354  5A						 POP	 EDX
2 10737								 POPDS	 EAX
3 10738	00002355  58						 POP	 EAX
2 10739	00002356  03 C3						 ADD	 EAX,EBX
2 10740	00002358  13 D1						 ADC	 EDX,ECX
2 10741								 PUSHDS	 EAX
3 10742	0000235A  50						 PUSH	 EAX
2 10743								 PUSHDS	 EDX
3 10744	0000235B  52						 PUSH	 EDX
2 10745								 $NEXT
3 10746	0000235C  AD						 LODSD				 ; fetch address
3 10747								 $JMP
4 10748	0000235D  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10749	0000235F  FF E3						 JMP	 EBX			 ; execute
2 10750
2 10751					 ;  8.6.1.1230 DNEGATE
2 10752					 ;  ( d1 -- d2 )
2 10753					 ;  d2 is the negation of d1.
2 10754								 $CODE	 'DNEGATE',$DNEGATE
3 10755								 $DEF	 'DNEGATE',$DNEGATE,,
4 10756	00002361			 ??0387:
4 10757		  =MAIN:2361		 LASTWORD		 =	 ??0387
4 10758								 IFNB	 <>
4 10759								   DB
4 10760								 ELSE
4 10761	00002361  00						   DB	 VEF_USUAL
4 10762								 ENDIF
4 10763	00002362  07						 DB	 ??0388	- $ - 1
4 10764	00002363  44 4E	45 47 41 54 45				 DB	 'DNEGATE'
4 10765	0000236A			 ??0388:
4 10766	0000236A  09						 DB	 ??0388	- ??0387
4 10767	0000236B  20002345					 DD	 VOC_LINK
4 10768		  =MAIN:20002361	 VOC_LINK		 =	 ??0387	+ DESIRED_BASE_EQU
4 10769
4 10770								 IFNB	 <$DNEGATE>
4 10771	0000236F						   LABEL   $DNEGATE FAR
4 10772								 ENDIF
4 10773								 IFNB	 <>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 190
FKernel.asm



4 10774								   DD	    + DESIRED_BASE_EQU
4 10775								 ELSE
4 10776	0000236F  20002373					   DD	   ??038A + DESIRED_BASE_EQU
4 10777								 ENDIF
4 10778	00002373			 ??038A:
2 10779								 POPDS	 EDX
3 10780	00002373  5A						 POP	 EDX
2 10781								 POPDS	 EAX
3 10782	00002374  58						 POP	 EAX
2 10783	00002375  83 E8	01					 SUB	 EAX,1
2 10784	00002378  83 DA	00					 SBB	 EDX,0
2 10785	0000237B  F7 D0						 NOT	 EAX
2 10786	0000237D  F7 D2						 NOT	 EDX
2 10787								 PUSHDS	 EAX
3 10788	0000237F  50						 PUSH	 EAX
2 10789								 PUSHDS	 EDX
3 10790	00002380  52						 PUSH	 EDX
2 10791								 $NEXT
3 10792	00002381  AD						 LODSD				 ; fetch address
3 10793								 $JMP
4 10794	00002382  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10795	00002384  FF E3						 JMP	 EBX			 ; execute
2 10796
2 10797
1 10798								 INCLUDE "convert.inc"
2 10799					 ;******************************************************************************
2 10800					 ;
2 10801					 ;  convert.inc
2 10802					 ;  IKForth
2 10803					 ;
2 10804					 ;  Copyright (C) 1999-2003 Illya Kysil
2 10805					 ;
2 10806					 ;******************************************************************************
2 10807					 ;  Misc convertion words
2 10808					 ;******************************************************************************
2 10809
2 10810					 ;  6.1.0550 >BODY
2 10811					 ;  Convert CFA	to PFA
2 10812					 ;  D: CFA -- PFA
2 10813								 $COLON	 '>BODY',$TOBODY
3 10814								 $DEF	 '>BODY',$TOBODY,$ENTER,
4 10815	00002386			 ??038B:
4 10816		  =MAIN:2386		 LASTWORD		 =	 ??038B
4 10817								 IFNB	 <>
4 10818								   DB
4 10819								 ELSE
4 10820	00002386  00						   DB	 VEF_USUAL
4 10821								 ENDIF
4 10822	00002387  05						 DB	 ??038C	- $ - 1
4 10823	00002388  3E 42	4F 44 59				 DB	 '>BODY'
4 10824	0000238D			 ??038C:
4 10825	0000238D  07						 DB	 ??038C	- ??038B
4 10826	0000238E  20002361					 DD	 VOC_LINK
4 10827		  =MAIN:20002386	 VOC_LINK		 =	 ??038B	+ DESIRED_BASE_EQU
4 10828
4 10829								 IFNB	 <$TOBODY>
4 10830	00002392						   LABEL   $TOBODY FAR
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 191
FKernel.asm



4 10831								 ENDIF
4 10832								 IFNB	 <$ENTER>
4 10833	00002392  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 10834								 ELSE
4 10835								   DD	   ??038E + DESIRED_BASE_EQU
4 10836								 ENDIF
4 10837	00002396			 ??038E:
2 10838								 CW	 $CELLADD
3 10839	00002396  20001D03					 DD	 $CELLADD + DESIRED_BASE_EQU
2 10840								 CEXIT
3 10841								 CW	 $EXIT
4 10842	0000239A  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 10843
2 10844					 ;  6.1.0570 >NUMBER
2 10845								 $CODE	 '>NUMBER',$TONUMBER
3 10846								 $DEF	 '>NUMBER',$TONUMBER,,
4 10847	0000239E			 ??038F:
4 10848		  =MAIN:239E		 LASTWORD		 =	 ??038F
4 10849								 IFNB	 <>
4 10850								   DB
4 10851								 ELSE
4 10852	0000239E  00						   DB	 VEF_USUAL
4 10853								 ENDIF
4 10854	0000239F  07						 DB	 ??0390	- $ - 1
4 10855	000023A0  3E 4E	55 4D 42 45 52				 DB	 '>NUMBER'
4 10856	000023A7			 ??0390:
4 10857	000023A7  09						 DB	 ??0390	- ??038F
4 10858	000023A8  20002386					 DD	 VOC_LINK
4 10859		  =MAIN:2000239E	 VOC_LINK		 =	 ??038F	+ DESIRED_BASE_EQU
4 10860
4 10861								 IFNB	 <$TONUMBER>
4 10862	000023AC						   LABEL   $TONUMBER FAR
4 10863								 ENDIF
4 10864								 IFNB	 <>
4 10865								   DD	    + DESIRED_BASE_EQU
4 10866								 ELSE
4 10867	000023AC  200023B0					   DD	   ??0392 + DESIRED_BASE_EQU
4 10868								 ENDIF
4 10869	000023B0			 ??0392:
2 10870								 PUSHRS	 EDI
3 10871	000023B0  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10872	000023B3  89 7D	00					 MOV	 [DWORD	PTR EBP],EDI
2 10873	000023B6  8B 5F	18					 MOV	 EBX,[DWORD PTR	EDI + BASE_VAR]
2 10874								 POPDS	 ECX			 ; u1
3 10875	000023B9  59						 POP	 ECX
2 10876								 POPDS	 EDI			 ; c-addr1
3 10877	000023BA  5F						 POP	 EDI
2 10878								 POPDS	 EDX			 ; ud1
3 10879	000023BB  5A						 POP	 EDX
2 10880								 POPDS	 EAX
3 10881	000023BC  58						 POP	 EAX
2 10882	000023BD			 TN_LOOP:
2 10883	000023BD  0B C9						 OR	 ECX,ECX
2 10884	000023BF  74 59						 JZ	 SHORT TN_STOP
2 10885								 PUSHRS	 EAX
3 10886	000023C1  83 ED	04					 SUB	 EBP,CELL_SIZE
3 10887	000023C4  89 45	00					 MOV	 [DWORD	PTR EBP],EAX
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 192
FKernel.asm



2 10888	000023C7  8A 07						 MOV	 AL,[BYTE PTR EDI]
2 10889	000023C9  3C 61						 CMP	 AL,'a'
2 10890	000023CB  72 06						 JB	 SHORT TN_CONT		 ; jump	if AL <	'a'
2 10891	000023CD  3C 7A						 CMP	 AL,'z'
2 10892	000023CF  77 02						 JA	 SHORT TN_CONT		 ; jump	if AL >	'z'
2 10893	000023D1  2C 20						 SUB	 AL,'a'	- 'A'		 ; convert to uppercase
2 10894	000023D3			 TN_CONT:
2 10895								 PUSHDS	 EDI
3 10896	000023D3  57						 PUSH	 EDI
2 10897								 PUSHDS	 ECX
3 10898	000023D4  51						 PUSH	 ECX
2 10899	000023D5  BF 2000243E					 MOV	 EDI,OFFSET DIGITS_TABLE + DESIRED_BASE_EQU
2 10900	000023DA  8B CB						 MOV	 ECX,EBX
2 10901	000023DC  41						 INC	 ECX
2 10902	000023DD  F2> AE				   REPNE SCASB
2 10903	000023DF  75 11						 JNZ	 SHORT TN_CONT2
2 10904	000023E1  4F						 DEC	 EDI
2 10905	000023E2  4F						 DEC	 EDI
2 10906	000023E3  81 EF	2000243E				 SUB	 EDI,OFFSET DIGITS_TABLE + DESIRED_BASE_EQU
2 10907	000023E9  3B FB						 CMP	 EDI,EBX
2 10908	000023EB  7D 05						 JGE	 SHORT TN_CONT2
2 10909	000023ED  83 F9	00					 CMP	 ECX,0
2 10910	000023F0  7F 0A						 JG	 SHORT TN_CONT1
2 10911	000023F2			 TN_CONT2:
2 10912								 POPDS	 ECX
3 10913	000023F2  59						 POP	 ECX
2 10914								 POPDS	 EDI
3 10915	000023F3  5F						 POP	 EDI
2 10916								 POPRS	 EAX
3 10917	000023F4  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 10918	000023F7  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10919	000023FA  EB 1E						 JMP	 SHORT TN_STOP
2 10920	000023FC			 TN_CONT1:
2 10921								 PUSHDS	 EBX
3 10922	000023FC  53						 PUSH	 EBX
2 10923	000023FD  2B D9						 SUB	 EBX,ECX
2 10924	000023FF  8B CB						 MOV	 ECX,EBX
2 10925								 POPDS	 EBX
3 10926	00002401  5B						 POP	 EBX
2 10927	00002402  8B C2						 MOV	 EAX,EDX
2 10928	00002404  F7 E3						 MUL	 EBX
2 10929								 PUSHDS	 EAX
3 10930	00002406  50						 PUSH	 EAX
2 10931								 POPRS	 EAX
3 10932	00002407  8B 45	00					 MOV	 EAX,[DWORD PTR	EBP]
3 10933	0000240A  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10934	0000240D  F7 E3						 MUL	 EBX
2 10935	0000240F  03 C1						 ADD	 EAX,ECX
2 10936								 POPDS	 ECX
3 10937	00002411  59						 POP	 ECX
2 10938	00002412  13 D1						 ADC	 EDX,ECX
2 10939								 POPDS	 ECX
3 10940	00002414  59						 POP	 ECX
2 10941	00002415  49						 DEC	 ECX
2 10942								 POPDS	 EDI
3 10943	00002416  5F						 POP	 EDI
2 10944	00002417  47						 INC	 EDI
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 193
FKernel.asm



2 10945	00002418  EB A3						 JMP	 SHORT TN_LOOP
2 10946	0000241A			 TN_STOP:
2 10947								 PUSHDS	 EAX
3 10948	0000241A  50						 PUSH	 EAX
2 10949								 PUSHDS	 EDX
3 10950	0000241B  52						 PUSH	 EDX
2 10951								 PUSHDS	 EDI
3 10952	0000241C  57						 PUSH	 EDI
2 10953								 PUSHDS	 ECX
3 10954	0000241D  51						 PUSH	 ECX
2 10955								 POPRS	 EDI
3 10956	0000241E  8B 7D	00					 MOV	 EDI,[DWORD PTR	EBP]
3 10957	00002421  83 C5	04					 ADD	 EBP,CELL_SIZE
2 10958								 $NEXT
3 10959	00002424  AD						 LODSD				 ; fetch address
3 10960								 $JMP
4 10961	00002425  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 10962	00002427  FF E3						 JMP	 EBX			 ; execute
2 10963
2 10964					 ;  DIGITS
2 10965								 $CONST	 'DIGITS',$DIGITS
3 10966								 $DEF	 'DIGITS',$DIGITS,$DOCONST
4 10967	00002429			 ??0393:
4 10968		  =MAIN:2429		 LASTWORD		 =	 ??0393
4 10969								 IFNB	 <>
4 10970								   DB
4 10971								 ELSE
4 10972	00002429  00						   DB	 VEF_USUAL
4 10973								 ENDIF
4 10974	0000242A  06						 DB	 ??0394	- $ - 1
4 10975	0000242B  44 49	47 49 54 53				 DB	 'DIGITS'
4 10976	00002431			 ??0394:
4 10977	00002431  08						 DB	 ??0394	- ??0393
4 10978	00002432  2000239E					 DD	 VOC_LINK
4 10979		  =MAIN:20002429	 VOC_LINK		 =	 ??0393	+ DESIRED_BASE_EQU
4 10980
4 10981								 IFNB	 <$DIGITS>
4 10982	00002436						   LABEL   $DIGITS FAR
4 10983								 ENDIF
4 10984								 IFNB	 <$DOCONST>
4 10985	00002436  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4 10986								 ELSE
4 10987								   DD	   ??0396 + DESIRED_BASE_EQU
4 10988								 ENDIF
4 10989	0000243A			 ??0396:
2 10990								 CW	 DIGITS_TABLE
3 10991	0000243A  2000243E					 DD	 DIGITS_TABLE +	DESIRED_BASE_EQU
2 10992	0000243E			 DIGITS_TABLE:
2 10993	0000243E  30 31	32 33 34 35 36+				 DB	 '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',0
  10994		  37 38	39 41 42 43 44+
  10995		  45 46	47 48 49 4A 4B+
  10996		  4C 4D	4E 4F 50 51 52+
  10997		  53 54	55 56 57 58 59+
  10998		  5A 00
2 10999
2 11000					 ;  6.1.2170 S>D
2 11001					 ;  Convert single cell	value to double	cell value
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 194
FKernel.asm



2 11002					 ;  D: a -- aa
2 11003								 $CODE	 'S>D',$STOD
3 11004								 $DEF	 'S>D',$STOD,,
4 11005	00002463			 ??0397:
4 11006		  =MAIN:2463		 LASTWORD		 =	 ??0397
4 11007								 IFNB	 <>
4 11008								   DB
4 11009								 ELSE
4 11010	00002463  00						   DB	 VEF_USUAL
4 11011								 ENDIF
4 11012	00002464  03						 DB	 ??0398	- $ - 1
4 11013	00002465  53 3E	44					 DB	 'S>D'
4 11014	00002468			 ??0398:
4 11015	00002468  05						 DB	 ??0398	- ??0397
4 11016	00002469  20002429					 DD	 VOC_LINK
4 11017		  =MAIN:20002463	 VOC_LINK		 =	 ??0397	+ DESIRED_BASE_EQU
4 11018
4 11019								 IFNB	 <$STOD>
4 11020	0000246D						   LABEL   $STOD FAR
4 11021								 ENDIF
4 11022								 IFNB	 <>
4 11023								   DD	    + DESIRED_BASE_EQU
4 11024								 ELSE
4 11025	0000246D  20002471					   DD	   ??039A + DESIRED_BASE_EQU
4 11026								 ENDIF
4 11027	00002471			 ??039A:
2 11028								 POPDS	 EAX
3 11029	00002471  58						 POP	 EAX
2 11030	00002472  99						 CDQ
2 11031								 PUSHDS	 EAX
3 11032	00002473  50						 PUSH	 EAX
2 11033								 PUSHDS	 EDX
3 11034	00002474  52						 PUSH	 EDX
2 11035								 $NEXT
3 11036	00002475  AD						 LODSD				 ; fetch address
3 11037								 $JMP
4 11038	00002476  8B 18						 MOV	 EBX,[DWORD PTR	EAX]
4 11039	00002478  FF E3						 JMP	 EBX			 ; execute
2 11040
2 11041
1 11042								 INCLUDE "except.inc"
2 11043					 ;******************************************************************************
2 11044					 ;
2 11045					 ;  except.inc
2 11046					 ;  IKForth
2 11047					 ;
2 11048					 ;  Copyright (C) 1999-2003 Illya Kysil
2 11049					 ;
2 11050					 ;******************************************************************************
2 11051					 ;  EXCEPTION words
2 11052					 ;******************************************************************************
2 11053
2 11054								 $COLON	 'EXC-PUSH',$EXC_PUSH
3 11055								 $DEF	 'EXC-PUSH',$EXC_PUSH,$ENTER,
4 11056	0000247A			 ??039B:
4 11057		  =MAIN:247A		 LASTWORD		 =	 ??039B
4 11058								 IFNB	 <>
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 195
FKernel.asm



4 11059								   DB
4 11060								 ELSE
4 11061	0000247A  00						   DB	 VEF_USUAL
4 11062								 ENDIF
4 11063	0000247B  08						 DB	 ??039C	- $ - 1
4 11064	0000247C  45 58	43 2D 50 55 53+				 DB	 'EXC-PUSH'
  11065		  48
4 11066	00002484			 ??039C:
4 11067	00002484  0A						 DB	 ??039C	- ??039B
4 11068	00002485  20002463					 DD	 VOC_LINK
4 11069		  =MAIN:2000247A	 VOC_LINK		 =	 ??039B	+ DESIRED_BASE_EQU
4 11070
4 11071								 IFNB	 <$EXC_PUSH>
4 11072	00002489						   LABEL   $EXC_PUSH FAR
4 11073								 ENDIF
4 11074								 IFNB	 <$ENTER>
4 11075	00002489  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11076								 ELSE
4 11077								   DD	   ??039E + DESIRED_BASE_EQU
4 11078								 ENDIF
4 11079	0000248D			 ??039E:
2 11080								 CW	 $SPFETCH
3 11081	0000248D  2000170F					 DD	 $SPFETCH + DESIRED_BASE_EQU
2 11082								 CW	 $RFROM
3 11083	00002491  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 11084								 CW	 $SWAP
3 11085	00002495  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2 11086								 CW	 $TOR
3 11087	00002499  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2 11088								 CFETCH	 $EXCEPTION_HANDLER
3 11089								 CW	 $EXCEPTION_HANDLER
4 11090	0000249D  20000278					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 11091								 CW	 $FETCH
4 11092	000024A1  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 11093								 CW	 $TOR
3 11094	000024A5  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2 11095								 CW	 $RPFETCH
3 11096	000024A9  2000182C					 DD	 $RPFETCH + DESIRED_BASE_EQU
2 11097								 CSTORE	 $EXCEPTION_HANDLER
3 11098								 CW	 $EXCEPTION_HANDLER
4 11099	000024AD  20000278					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 11100								 CW	 $STORE
4 11101	000024B1  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2 11102								 CW	 $TOR
3 11103	000024B5  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2 11104								 CEXIT
3 11105								 CW	 $EXIT
4 11106	000024B9  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 11107
2 11108								 $COLON	 'EXC-DROP',$EXC_DROP
3 11109								 $DEF	 'EXC-DROP',$EXC_DROP,$ENTER,
4 11110	000024BD			 ??039F:
4 11111		  =MAIN:24BD		 LASTWORD		 =	 ??039F
4 11112								 IFNB	 <>
4 11113								   DB
4 11114								 ELSE
4 11115	000024BD  00						   DB	 VEF_USUAL
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 196
FKernel.asm



4 11116								 ENDIF
4 11117	000024BE  08						 DB	 ??03A0	- $ - 1
4 11118	000024BF  45 58	43 2D 44 52 4F+				 DB	 'EXC-DROP'
  11119		  50
4 11120	000024C7			 ??03A0:
4 11121	000024C7  0A						 DB	 ??03A0	- ??039F
4 11122	000024C8  2000247A					 DD	 VOC_LINK
4 11123		  =MAIN:200024BD	 VOC_LINK		 =	 ??039F	+ DESIRED_BASE_EQU
4 11124
4 11125								 IFNB	 <$EXC_DROP>
4 11126	000024CC						   LABEL   $EXC_DROP FAR
4 11127								 ENDIF
4 11128								 IFNB	 <$ENTER>
4 11129	000024CC  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11130								 ELSE
4 11131								   DD	   ??03A2 + DESIRED_BASE_EQU
4 11132								 ENDIF
4 11133	000024D0			 ??03A2:
2 11134								 CW	 $RFROM
3 11135	000024D0  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 11136								 CW	 $RFROM
3 11137	000024D4  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 11138								 CSTORE	 $EXCEPTION_HANDLER
3 11139								 CW	 $EXCEPTION_HANDLER
4 11140	000024D8  20000278					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 11141								 CW	 $STORE
4 11142	000024DC  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2 11143								 CW	 $RFROM
3 11144	000024E0  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 11145								 CW	 $DROP
3 11146	000024E4  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2 11147								 CW	 $TOR
3 11148	000024E8  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2 11149								 CEXIT
3 11150								 CW	 $EXIT
4 11151	000024EC  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 11152
2 11153					 ;  9.6.1.0875 CATCH
2 11154								 $COLON	 'CATCH',$CATCH
3 11155								 $DEF	 'CATCH',$CATCH,$ENTER,
4 11156	000024F0			 ??03A3:
4 11157		  =MAIN:24F0		 LASTWORD		 =	 ??03A3
4 11158								 IFNB	 <>
4 11159								   DB
4 11160								 ELSE
4 11161	000024F0  00						   DB	 VEF_USUAL
4 11162								 ENDIF
4 11163	000024F1  05						 DB	 ??03A4	- $ - 1
4 11164	000024F2  43 41	54 43 48				 DB	 'CATCH'
4 11165	000024F7			 ??03A4:
4 11166	000024F7  07						 DB	 ??03A4	- ??03A3
4 11167	000024F8  200024BD					 DD	 VOC_LINK
4 11168		  =MAIN:200024F0	 VOC_LINK		 =	 ??03A3	+ DESIRED_BASE_EQU
4 11169
4 11170								 IFNB	 <$CATCH>
4 11171	000024FC						   LABEL   $CATCH FAR
4 11172								 ENDIF
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 197
FKernel.asm



4 11173								 IFNB	 <$ENTER>
4 11174	000024FC  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11175								 ELSE
4 11176								   DD	   ??03A6 + DESIRED_BASE_EQU
4 11177								 ENDIF
4 11178	00002500			 ??03A6:
2 11179								 CW	 $EXC_PUSH
3 11180	00002500  20002489					 DD	 $EXC_PUSH + DESIRED_BASE_EQU
2 11181								 CW	 $EXECUTE
3 11182	00002504  20001E9F					 DD	 $EXECUTE + DESIRED_BASE_EQU
2 11183								 CW	 $EXC_DROP
3 11184	00002508  200024CC					 DD	 $EXC_DROP + DESIRED_BASE_EQU
2 11185								 CW	 $ZERO
3 11186	0000250C  200001A7					 DD	 $ZERO + DESIRED_BASE_EQU
2 11187								 CEXIT
3 11188								 CW	 $EXIT
4 11189	00002510  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 11190
2 11191					 ;  (THROW)
2 11192					 ;  D: exc-id --
2 11193								 $COLON	 '(THROW)',$PTHROW
3 11194								 $DEF	 '(THROW)',$PTHROW,$ENTER,
4 11195	00002514			 ??03A7:
4 11196		  =MAIN:2514		 LASTWORD		 =	 ??03A7
4 11197								 IFNB	 <>
4 11198								   DB
4 11199								 ELSE
4 11200	00002514  00						   DB	 VEF_USUAL
4 11201								 ENDIF
4 11202	00002515  07						 DB	 ??03A8	- $ - 1
4 11203	00002516  28 54	48 52 4F 57 29				 DB	 '(THROW)'
4 11204	0000251D			 ??03A8:
4 11205	0000251D  09						 DB	 ??03A8	- ??03A7
4 11206	0000251E  200024F0					 DD	 VOC_LINK
4 11207		  =MAIN:20002514	 VOC_LINK		 =	 ??03A7	+ DESIRED_BASE_EQU
4 11208
4 11209								 IFNB	 <$PTHROW>
4 11210	00002522						   LABEL   $PTHROW FAR
4 11211								 ENDIF
4 11212								 IFNB	 <$ENTER>
4 11213	00002522  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11214								 ELSE
4 11215								   DD	   ??03AA + DESIRED_BASE_EQU
4 11216								 ENDIF
4 11217	00002526			 ??03AA:
2 11218								 CFETCH	 $EXCEPTION_HANDLER
3 11219								 CW	 $EXCEPTION_HANDLER
4 11220	00002526  20000278					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
3 11221								 CW	 $FETCH
4 11222	0000252A  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 11223								 CW	 $RPSTORE
3 11224	0000252E  20001840					 DD	 $RPSTORE + DESIRED_BASE_EQU
2 11225								 CW	 $RFROM
3 11226	00002532  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 11227								 CSTORE	 $EXCEPTION_HANDLER
3 11228								 CW	 $EXCEPTION_HANDLER
4 11229	00002536  20000278					 DD	 $EXCEPTION_HANDLER + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 198
FKernel.asm



3 11230								 CW	 $STORE
4 11231	0000253A  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2 11232								 CW	 $RFROM
3 11233	0000253E  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 11234								 CW	 $SWAP
3 11235	00002542  2000169A					 DD	 $SWAP + DESIRED_BASE_EQU
2 11236								 CW	 $TOR
3 11237	00002546  2000173A					 DD	 $TOR +	DESIRED_BASE_EQU
2 11238								 CW	 $SPSTORE
3 11239	0000254A  20001725					 DD	 $SPSTORE + DESIRED_BASE_EQU
2 11240								 CW	 $DROP
3 11241	0000254E  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2 11242								 CW	 $RFROM
3 11243	00002552  20001753					 DD	 $RFROM	+ DESIRED_BASE_EQU
2 11244								 CEXIT
3 11245								 CW	 $EXIT
4 11246	00002556  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 11247
2 11248					 ;  9.6.1.2275 THROW
2 11249								 $COLON	 'THROW',$THROW
3 11250								 $DEF	 'THROW',$THROW,$ENTER,
4 11251	0000255A			 ??03AB:
4 11252		  =MAIN:255A		 LASTWORD		 =	 ??03AB
4 11253								 IFNB	 <>
4 11254								   DB
4 11255								 ELSE
4 11256	0000255A  00						   DB	 VEF_USUAL
4 11257								 ENDIF
4 11258	0000255B  05						 DB	 ??03AC	- $ - 1
4 11259	0000255C  54 48	52 4F 57				 DB	 'THROW'
4 11260	00002561			 ??03AC:
4 11261	00002561  07						 DB	 ??03AC	- ??03AB
4 11262	00002562  20002514					 DD	 VOC_LINK
4 11263		  =MAIN:2000255A	 VOC_LINK		 =	 ??03AB	+ DESIRED_BASE_EQU
4 11264
4 11265								 IFNB	 <$THROW>
4 11266	00002566						   LABEL   $THROW FAR
4 11267								 ENDIF
4 11268								 IFNB	 <$ENTER>
4 11269	00002566  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11270								 ELSE
4 11271								   DD	   ??03AE + DESIRED_BASE_EQU
4 11272								 ENDIF
4 11273	0000256A			 ??03AE:
2 11274								 CW	 $QDUP
3 11275	0000256A  20001548					 DD	 $QDUP + DESIRED_BASE_EQU
2 11276								 CQBR	 THROW_EXIT
3 11277								 CW	 $QBRANCH
4 11278	0000256E  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3 11279								 CW	 THROW_EXIT
4 11280	00002572  2000257A					 DD	 THROW_EXIT + DESIRED_BASE_EQU
2 11281								   CW	   $PTHROW
3 11282	00002576  20002522					 DD	 $PTHROW + DESIRED_BASE_EQU
2 11283	0000257A			 THROW_EXIT:
2 11284								 CEXIT
3 11285								 CW	 $EXIT
4 11286	0000257A  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 199
FKernel.asm



2 11287
2 11288
1 11289								 INCLUDE "file.inc"
2 11290					 ;******************************************************************************
2 11291					 ;
2 11292					 ;  file.inc
2 11293					 ;  IKForth
2 11294					 ;
2 11295					 ;  Copyright (C) 1999-2003 Illya Kysil
2 11296					 ;
2 11297					 ;******************************************************************************
2 11298					 ;  FILE access	words
2 11299					 ;******************************************************************************
2 11300
2 11301								 $CONST	 'R/O',$R_O
3 11302								 $DEF	 'R/O',$R_O,$DOCONST
4 11303	0000257E			 ??03AF:
4 11304		  =MAIN:257E		 LASTWORD		 =	 ??03AF
4 11305								 IFNB	 <>
4 11306								   DB
4 11307								 ELSE
4 11308	0000257E  00						   DB	 VEF_USUAL
4 11309								 ENDIF
4 11310	0000257F  03						 DB	 ??03B0	- $ - 1
4 11311	00002580  52 2F	4F					 DB	 'R/O'
4 11312	00002583			 ??03B0:
4 11313	00002583  05						 DB	 ??03B0	- ??03AF
4 11314	00002584  2000255A					 DD	 VOC_LINK
4 11315		  =MAIN:2000257E	 VOC_LINK		 =	 ??03AF	+ DESIRED_BASE_EQU
4 11316
4 11317								 IFNB	 <$R_O>
4 11318	00002588						   LABEL   $R_O	FAR
4 11319								 ENDIF
4 11320								 IFNB	 <$DOCONST>
4 11321	00002588  2000012F					   DD	   $DOCONST + DESIRED_BASE_EQU
4 11322								 ELSE
4 11323								   DD	   ??03B2 + DESIRED_BASE_EQU
4 11324								 ENDIF
4 11325	0000258C			 ??03B2:
2 11326								 CC	 0
3 11327	0000258C  00000000					 DD	 0
2 11328
2 11329					 ;  11.6.1.2090	READ-LINE
2 11330					 ;  (S c-addr u1 fileid	-- u2 flag ior )
2 11331								 $DEFER	 'READ-LINE',$READ_LINE
3 11332								 $DEF	 'READ-LINE',$READ_LINE,$DODEFER,
4 11333	00002590			 ??03B3:
4 11334		  =MAIN:2590		 LASTWORD		 =	 ??03B3
4 11335								 IFNB	 <>
4 11336								   DB
4 11337								 ELSE
4 11338	00002590  00						   DB	 VEF_USUAL
4 11339								 ENDIF
4 11340	00002591  09						 DB	 ??03B4	- $ - 1
4 11341	00002592  52 45	41 44 2D 4C 49+				 DB	 'READ-LINE'
  11342		  4E 45
4 11343	0000259B			 ??03B4:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 200
FKernel.asm



4 11344	0000259B  0B						 DB	 ??03B4	- ??03B3
4 11345	0000259C  2000257E					 DD	 VOC_LINK
4 11346		  =MAIN:20002590	 VOC_LINK		 =	 ??03B3	+ DESIRED_BASE_EQU
4 11347
4 11348								 IFNB	 <$READ_LINE>
4 11349	000025A0						   LABEL   $READ_LINE FAR
4 11350								 ENDIF
4 11351								 IFNB	 <$DODEFER>
4 11352	000025A0  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4 11353								 ELSE
4 11354								   DD	   ??03B6 + DESIRED_BASE_EQU
4 11355								 ENDIF
4 11356	000025A4			 ??03B6:
2 11357								 CW	 $PREAD_LINE
3 11358	000025A4  2000059F					 DD	 $PREAD_LINE + DESIRED_BASE_EQU
2 11359
2 11360
2 11361								 $COLON	 '(INCLUDED)',$PINCLUDED
3 11362								 $DEF	 '(INCLUDED)',$PINCLUDED,$ENTER,
4 11363	000025A8			 ??03B7:
4 11364		  =MAIN:25A8		 LASTWORD		 =	 ??03B7
4 11365								 IFNB	 <>
4 11366								   DB
4 11367								 ELSE
4 11368	000025A8  00						   DB	 VEF_USUAL
4 11369								 ENDIF
4 11370	000025A9  0A						 DB	 ??03B8	- $ - 1
4 11371	000025AA  28 49	4E 43 4C 55 44+				 DB	 '(INCLUDED)'
  11372		  45 44	29
4 11373	000025B4			 ??03B8:
4 11374	000025B4  0C						 DB	 ??03B8	- ??03B7
4 11375	000025B5  20002590					 DD	 VOC_LINK
4 11376		  =MAIN:200025A8	 VOC_LINK		 =	 ??03B7	+ DESIRED_BASE_EQU
4 11377
4 11378								 IFNB	 <$PINCLUDED>
4 11379	000025B9						   LABEL   $PINCLUDED FAR
4 11380								 ENDIF
4 11381								 IFNB	 <$ENTER>
4 11382	000025B9  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11383								 ELSE
4 11384								   DD	   ??03BA + DESIRED_BASE_EQU
4 11385								 ENDIF
4 11386	000025BD			 ??03BA:
2 11387								 CW	 $R_O
3 11388	000025BD  20002588					 DD	 $R_O +	DESIRED_BASE_EQU
2 11389								 CW	 $OPEN_FILE
3 11390	000025C1  20000530					 DD	 $OPEN_FILE + DESIRED_BASE_EQU
2 11391								 CW	 $THROW
3 11392	000025C5  20002566					 DD	 $THROW	+ DESIRED_BASE_EQU
2 11393								 CW	 $INCLUDE_FILE
3 11394	000025C9  200025FB					 DD	 $INCLUDE_FILE + DESIRED_BASE_EQU
2 11395								 CEXIT
3 11396								 CW	 $EXIT
4 11397	000025CD  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 11398
2 11399					 ;  11.6.1.1718	INCLUDED
2 11400					 ;  D: c-addr count --
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 201
FKernel.asm



2 11401								 $DEFER	 'INCLUDED',$INCLUDED
3 11402								 $DEF	 'INCLUDED',$INCLUDED,$DODEFER,
4 11403	000025D1			 ??03BB:
4 11404		  =MAIN:25D1		 LASTWORD		 =	 ??03BB
4 11405								 IFNB	 <>
4 11406								   DB
4 11407								 ELSE
4 11408	000025D1  00						   DB	 VEF_USUAL
4 11409								 ENDIF
4 11410	000025D2  08						 DB	 ??03BC	- $ - 1
4 11411	000025D3  49 4E	43 4C 55 44 45+				 DB	 'INCLUDED'
  11412		  44
4 11413	000025DB			 ??03BC:
4 11414	000025DB  0A						 DB	 ??03BC	- ??03BB
4 11415	000025DC  200025A8					 DD	 VOC_LINK
4 11416		  =MAIN:200025D1	 VOC_LINK		 =	 ??03BB	+ DESIRED_BASE_EQU
4 11417
4 11418								 IFNB	 <$INCLUDED>
4 11419	000025E0						   LABEL   $INCLUDED FAR
4 11420								 ENDIF
4 11421								 IFNB	 <$DODEFER>
4 11422	000025E0  2000016B					   DD	   $DODEFER + DESIRED_BASE_EQU
4 11423								 ELSE
4 11424								   DD	   ??03BE + DESIRED_BASE_EQU
4 11425								 ENDIF
4 11426	000025E4			 ??03BE:
2 11427								 CW	 $PINCLUDED
3 11428	000025E4  200025B9					 DD	 $PINCLUDED + DESIRED_BASE_EQU
2 11429
2 11430					 ;  11.6.1.1717	INCLUDE-FILE
2 11431					 ;  D: fileid --
2 11432								 $COLON	 'INCLUDE-FILE',$INCLUDE_FILE
3 11433								 $DEF	 'INCLUDE-FILE',$INCLUDE_FILE,$ENTER,
4 11434	000025E8			 ??03BF:
4 11435		  =MAIN:25E8		 LASTWORD		 =	 ??03BF
4 11436								 IFNB	 <>
4 11437								   DB
4 11438								 ELSE
4 11439	000025E8  00						   DB	 VEF_USUAL
4 11440								 ENDIF
4 11441	000025E9  0C						 DB	 ??03C0	- $ - 1
4 11442	000025EA  49 4E	43 4C 55 44 45+				 DB	 'INCLUDE-FILE'
  11443		  2D 46	49 4C 45
4 11444	000025F6			 ??03C0:
4 11445	000025F6  0E						 DB	 ??03C0	- ??03BF
4 11446	000025F7  200025D1					 DD	 VOC_LINK
4 11447		  =MAIN:200025E8	 VOC_LINK		 =	 ??03BF	+ DESIRED_BASE_EQU
4 11448
4 11449								 IFNB	 <$INCLUDE_FILE>
4 11450	000025FB						   LABEL   $INCLUDE_FILE FAR
4 11451								 ENDIF
4 11452								 IFNB	 <$ENTER>
4 11453	000025FB  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11454								 ELSE
4 11455								   DD	   ??03C2 + DESIRED_BASE_EQU
4 11456								 ENDIF
4 11457	000025FF			 ??03C2:
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 202
FKernel.asm



2 11458								 CW	 $INPUT_TO_R
3 11459	000025FF  200008A1					 DD	 $INPUT_TO_R + DESIRED_BASE_EQU
2 11460								 CW	 $RESET_INPUT
3 11461	00002603  20000887					 DD	 $RESET_INPUT +	DESIRED_BASE_EQU
2 11462								 CW	 $SOURCE_ID_STORE
3 11463	00002607  20000755					 DD	 $SOURCE_ID_STORE + DESIRED_BASE_EQU
2 11464	0000260B			 INCLUDE_FILE_LOOP:
2 11465								 CW	 $SOURCE_ID
3 11466	0000260B  20000738					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2 11467								 CW	 $FILE_POSITION
3 11468	0000260F  200004FB					 DD	 $FILE_POSITION	+ DESIRED_BASE_EQU
2 11469								 CW	 $DROP
3 11470	00002613  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2 11471								 CW	 $CURRENT_FILE_POSITION
3 11472	00002617  200001E8					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2 11473								 CW	 $2STORE
3 11474	0000261B  20001CA2					 DD	 $2STORE + DESIRED_BASE_EQU
2 11475
2 11476								 CW	 $ZERO			 ; FOR THROW
3 11477	0000261F  200001A7					 DD	 $ZERO + DESIRED_BASE_EQU
2 11478								 CW	 $REFILL
3 11479	00002623  200007ED					 DD	 $REFILL + DESIRED_BASE_EQU
2 11480								 CQBR	 INCLUDE_FILE_EXIT
3 11481								 CW	 $QBRANCH
4 11482	00002627  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3 11483								 CW	 INCLUDE_FILE_EXIT
4 11484	0000262B  2000264B					 DD	 INCLUDE_FILE_EXIT + DESIRED_BASE_EQU
2 11485								   CW	   $DROP
3 11486	0000262F  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2 11487								   CWLIT   $INTERPRET
3 11488								 CW	 $LIT
4 11489	00002633  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3 11490								 CW	 $INTERPRET
4 11491	00002637  20000F6D					 DD	 $INTERPRET + DESIRED_BASE_EQU
2 11492								   CW	   $CATCH
3 11493	0000263B  200024FC					 DD	 $CATCH	+ DESIRED_BASE_EQU
2 11494								   CW	   $QDUP
3 11495	0000263F  20001548					 DD	 $QDUP + DESIRED_BASE_EQU
2 11496								 CQBR	 INCLUDE_FILE_LOOP
3 11497								 CW	 $QBRANCH
4 11498	00002643  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3 11499								 CW	 INCLUDE_FILE_LOOP
4 11500	00002647  2000260B					 DD	 INCLUDE_FILE_LOOP + DESIRED_BASE_EQU
2 11501	0000264B			 INCLUDE_FILE_EXIT:
2 11502								 CW	 $SOURCE_ID
3 11503	0000264B  20000738					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2 11504								 CW	 $CLOSE_FILE
3 11505	0000264F  2000048E					 DD	 $CLOSE_FILE + DESIRED_BASE_EQU
2 11506								 CW	 $DROP
3 11507	00002653  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2 11508								 CW	 $R_TO_INPUT
3 11509	00002657  200008C7					 DD	 $R_TO_INPUT + DESIRED_BASE_EQU
2 11510								 CW	 $THROW
3 11511	0000265B  20002566					 DD	 $THROW	+ DESIRED_BASE_EQU
2 11512								 CEXIT
3 11513								 CW	 $EXIT
4 11514	0000265F  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 203
FKernel.asm



2 11515
2 11516								 $COLON	 'SAVE-INPUT-FILE',$SAVE_INPUT_FILE
3 11517								 $DEF	 'SAVE-INPUT-FILE',$SAVE_INPUT_FILE,$ENTER,
4 11518	00002663			 ??03C3:
4 11519		  =MAIN:2663		 LASTWORD		 =	 ??03C3
4 11520								 IFNB	 <>
4 11521								   DB
4 11522								 ELSE
4 11523	00002663  00						   DB	 VEF_USUAL
4 11524								 ENDIF
4 11525	00002664  0F						 DB	 ??03C4	- $ - 1
4 11526	00002665  53 41	56 45 2D 49 4E+				 DB	 'SAVE-INPUT-FILE'
  11527		  50 55	54 2D 46 49 4C+
  11528		  45
4 11529	00002674			 ??03C4:
4 11530	00002674  11						 DB	 ??03C4	- ??03C3
4 11531	00002675  200025E8					 DD	 VOC_LINK
4 11532		  =MAIN:20002663	 VOC_LINK		 =	 ??03C3	+ DESIRED_BASE_EQU
4 11533
4 11534								 IFNB	 <$SAVE_INPUT_FILE>
4 11535	00002679						   LABEL   $SAVE_INPUT_FILE FAR
4 11536								 ENDIF
4 11537								 IFNB	 <$ENTER>
4 11538	00002679  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11539								 ELSE
4 11540								   DD	   ??03C6 + DESIRED_BASE_EQU
4 11541								 ENDIF
4 11542	0000267D			 ??03C6:
2 11543								 CW	 $SOURCE_ID
3 11544	0000267D  20000738					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
2 11545								 CW	 $CURRENT_FILE_POSITION
3 11546	00002681  200001E8					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2 11547								 CW	 $2FETCH
3 11548	00002685  20001CBA					 DD	 $2FETCH + DESIRED_BASE_EQU
2 11549								 CFETCH	 $TOIN
3 11550								 CW	 $TOIN
4 11551	00002689  20001F76					 DD	 $TOIN + DESIRED_BASE_EQU
3 11552								 CW	 $FETCH
4 11553	0000268D  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
2 11554								 CWLIT	 $RESTORE_INPUT_FILE
3 11555								 CW	 $LIT
4 11556	00002691  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3 11557								 CW	 $RESTORE_INPUT_FILE
4 11558	00002695  200026BE					 DD	 $RESTORE_INPUT_FILE + DESIRED_BASE_EQU
2 11559								 CCLIT	 5
3 11560								 CW	 $LIT
4 11561	00002699  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
3 11562								 CC	 5
4 11563	0000269D  00000005					 DD	 5
2 11564								 CEXIT
3 11565								 CW	 $EXIT
4 11566	000026A1  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 11567
2 11568								 $COLON	 'RESTORE-INPUT-FILE',$RESTORE_INPUT_FILE
3 11569								 $DEF	 'RESTORE-INPUT-FILE',$RESTORE_INPUT_FILE,$ENTER,
4 11570	000026A5			 ??03C7:
4 11571		  =MAIN:26A5		 LASTWORD		 =	 ??03C7
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 204
FKernel.asm



4 11572								 IFNB	 <>
4 11573								   DB
4 11574								 ELSE
4 11575	000026A5  00						   DB	 VEF_USUAL
4 11576								 ENDIF
4 11577	000026A6  12						 DB	 ??03C8	- $ - 1
4 11578	000026A7  52 45	53 54 4F 52 45+				 DB	 'RESTORE-INPUT-FILE'
  11579		  2D 49	4E 50 55 54 2D+
  11580		  46 49	4C 45
4 11581	000026B9			 ??03C8:
4 11582	000026B9  14						 DB	 ??03C8	- ??03C7
4 11583	000026BA  20002663					 DD	 VOC_LINK
4 11584		  =MAIN:200026A5	 VOC_LINK		 =	 ??03C7	+ DESIRED_BASE_EQU
4 11585
4 11586								 IFNB	 <$RESTORE_INPUT_FILE>
4 11587	000026BE						   LABEL   $RESTORE_INPUT_FILE FAR
4 11588								 ENDIF
4 11589								 IFNB	 <$ENTER>
4 11590	000026BE  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11591								 ELSE
4 11592								   DD	   ??03CA + DESIRED_BASE_EQU
4 11593								 ENDIF
4 11594	000026C2			 ??03CA:
2 11595								 CW	 $DROP
3 11596	000026C2  200015D4					 DD	 $DROP + DESIRED_BASE_EQU
2 11597								 CW	 $DUP
3 11598	000026C6  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2 11599								 CSTORE	 $TOIN
3 11600								 CW	 $TOIN
4 11601	000026CA  20001F76					 DD	 $TOIN + DESIRED_BASE_EQU
3 11602								 CW	 $STORE
4 11603	000026CE  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2 11604								 CW	 $STOD
3 11605	000026D2  2000246D					 DD	 $STOD + DESIRED_BASE_EQU
2 11606								 CW	 $DADD
3 11607	000026D6  2000234E					 DD	 $DADD + DESIRED_BASE_EQU
2 11608								 CW	 $CURRENT_FILE_POSITION
3 11609	000026DA  200001E8					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2 11610								 CW	 $2STORE
3 11611	000026DE  20001CA2					 DD	 $2STORE + DESIRED_BASE_EQU
2 11612								 CW	 $DUP
3 11613	000026E2  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2 11614								 CW	 $SOURCE_ID_STORE
3 11615	000026E6  20000755					 DD	 $SOURCE_ID_STORE + DESIRED_BASE_EQU
2 11616								 CW	 $ZEROGR
3 11617	000026EA  20001C11					 DD	 $ZEROGR + DESIRED_BASE_EQU
2 11618								 CQBR	 @@PRESTORE_FILE_INPUT_EXIT
3 11619								 CW	 $QBRANCH
4 11620	000026EE  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
3 11621								 CW	 @@PRESTORE_FILE_INPUT_EXIT
4 11622	000026F2  2000270E					 DD	 @@PRESTORE_FILE_INPUT_EXIT + DESIRED_BASE_EQU
2 11623								   CW	   $CURRENT_FILE_POSITION
3 11624	000026F6  200001E8					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2 11625								   CW	   $2FETCH
3 11626	000026FA  20001CBA					 DD	 $2FETCH + DESIRED_BASE_EQU
2 11627								   CW	   $SOURCE_ID
3 11628	000026FE  20000738					 DD	 $SOURCE_ID + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 205
FKernel.asm



2 11629								   CW	   $REPOSITION_FILE
3 11630	00002702  2000056A					 DD	 $REPOSITION_FILE + DESIRED_BASE_EQU
2 11631								   CW	   $REFILL
3 11632	00002706  200007ED					 DD	 $REFILL + DESIRED_BASE_EQU
2 11633								   CW	   $2DROP
3 11634	0000270A  20001565					 DD	 $2DROP	+ DESIRED_BASE_EQU
2 11635	0000270E			 @@PRESTORE_FILE_INPUT_EXIT:
2 11636								 CEXIT
3 11637								 CW	 $EXIT
4 11638	0000270E  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 11639
2 11640								 $COLON	 'RESET-INPUT-FILE',$RESET_INPUT_FILE
3 11641								 $DEF	 'RESET-INPUT-FILE',$RESET_INPUT_FILE,$ENTER,
4 11642	00002712			 ??03CB:
4 11643		  =MAIN:2712		 LASTWORD		 =	 ??03CB
4 11644								 IFNB	 <>
4 11645								   DB
4 11646								 ELSE
4 11647	00002712  00						   DB	 VEF_USUAL
4 11648								 ENDIF
4 11649	00002713  10						 DB	 ??03CC	- $ - 1
4 11650	00002714  52 45	53 45 54 2D 49+				 DB	 'RESET-INPUT-FILE'
  11651		  4E 50	55 54 2D 46 49+
  11652		  4C 45
4 11653	00002724			 ??03CC:
4 11654	00002724  12						 DB	 ??03CC	- ??03CB
4 11655	00002725  200026A5					 DD	 VOC_LINK
4 11656		  =MAIN:20002712	 VOC_LINK		 =	 ??03CB	+ DESIRED_BASE_EQU
4 11657
4 11658								 IFNB	 <$RESET_INPUT_FILE>
4 11659	00002729						   LABEL   $RESET_INPUT_FILE FAR
4 11660								 ENDIF
4 11661								 IFNB	 <$ENTER>
4 11662	00002729  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
4 11663								 ELSE
4 11664								   DD	   ??03CE + DESIRED_BASE_EQU
4 11665								 ENDIF
4 11666	0000272D			 ??03CE:
2 11667								 CW	 $ZERO
3 11668	0000272D  200001A7					 DD	 $ZERO + DESIRED_BASE_EQU
2 11669								 CW	 $DUP
3 11670	00002731  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2 11671								 CSTORE	 $TOIN
3 11672								 CW	 $TOIN
4 11673	00002735  20001F76					 DD	 $TOIN + DESIRED_BASE_EQU
3 11674								 CW	 $STORE
4 11675	00002739  20001C78					 DD	 $STORE	+ DESIRED_BASE_EQU
2 11676								 CW	 $DUP
3 11677	0000273D  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
2 11678								 CW	 $SOURCE_ID_STORE
3 11679	00002741  20000755					 DD	 $SOURCE_ID_STORE + DESIRED_BASE_EQU
2 11680								 CW	 $STOD
3 11681	00002745  2000246D					 DD	 $STOD + DESIRED_BASE_EQU
2 11682								 CW	 $CURRENT_FILE_POSITION
3 11683	00002749  200001E8					 DD	 $CURRENT_FILE_POSITION	+ DESIRED_BASE_EQU
2 11684								 CW	 $2STORE
3 11685	0000274D  20001CA2					 DD	 $2STORE + DESIRED_BASE_EQU
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 206
FKernel.asm



2 11686								 CEXIT
3 11687								 CW	 $EXIT
4 11688	00002751  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
2 11689
2 11690
1 11691
  11692
  11693	00002755			 START:
  11694								 POPDS	 EAX
1 11695	00002755  58						 POP	 EAX
  11696								 POPDS	 <[DWORD PTR SF_VAR + DESIRED_BASE_EQU]>
1 11697	00002756  8F 05	200002E2				 POP	 [DWORD	PTR SF_VAR + DESIRED_BASE_EQU]
  11698								 POPDS	 <[DWORD PTR #SF_VAR + DESIRED_BASE_EQU]>
1 11699	0000275C  8F 05	200002D1				 POP	 [DWORD	PTR #SF_VAR + DESIRED_BASE_EQU]
  11700								 PUSHDS	 EAX
1 11701	00002762  50						 PUSH	 EAX
  11702								 PUSHDS	 <[DWORD PTR MAIN_PROC + DESIRED_BASE_EQU]>
1 11703	00002763  FF 35	20000378				 PUSH	 [DWORD	PTR MAIN_PROC +	DESIRED_BASE_EQU]
  11704								 PUSHDS	 F_FALSE
1 11705	00002769  6A 00						 PUSH	 F_FALSE
  11706								 PUSHDS	 0
1 11707	0000276B  6A 00						 PUSH	 0
  11708	0000276D  FF 15	2000005C				 CALL	 [DWORD	PTR FUNC_TABLE + DESIRED_BASE_EQU +		    +
  11709					 START_THREAD_FUNC * CELL_SIZE]
  11710	00002773  C3						 RET
  11711
  11712								 $COLON	 'DO-FORTH',$DO_FORTH,VEF_HIDDEN
1 11713								 $DEF	 'DO-FORTH',$DO_FORTH,$ENTER,VEF_HIDDEN
2 11714	00002774			 ??03CF:
2 11715		  =MAIN:2774		 LASTWORD		 =	 ??03CF
2 11716								 IFNB	 <VEF_HIDDEN>
2 11717	00002774  02						   DB	 VEF_HIDDEN
2 11718								 ELSE
2 11719								   DB	 VEF_USUAL
2 11720								 ENDIF
2 11721	00002775  08						 DB	 ??03D0	- $ - 1
2 11722	00002776  44 4F	2D 46 4F 52 54+				 DB	 'DO-FORTH'
  11723		  48
2 11724	0000277E			 ??03D0:
2 11725	0000277E  0A						 DB	 ??03D0	- ??03CF
2 11726	0000277F  20002712					 DD	 VOC_LINK
2 11727		  =MAIN:20002774	 VOC_LINK		 =	 ??03CF	+ DESIRED_BASE_EQU
2 11728
2 11729								 IFNB	 <$DO_FORTH>
2 11730	00002783						   LABEL   $DO_FORTH FAR
2 11731								 ENDIF
2 11732								 IFNB	 <$ENTER>
2 11733	00002783  20000107					   DD	   $ENTER + DESIRED_BASE_EQU
2 11734								 ELSE
2 11735								   DD	   ??03D2 + DESIRED_BASE_EQU
2 11736								 ENDIF
2 11737	00002787			 ??03D2:
  11738								 CW	 $INIT_USER
1 11739	00002787  200006DC					 DD	 $INIT_USER + DESIRED_BASE_EQU
  11740								 CW	 $SF
1 11741	0000278B  200002DE					 DD	 $SF + DESIRED_BASE_EQU
  11742								 CW	 $FETCH
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 207
FKernel.asm



1 11743	0000278F  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
  11744								 CW	 $#SF
1 11745	00002793  200002CD					 DD	 $#SF +	DESIRED_BASE_EQU
  11746								 CW	 $FETCH
1 11747	00002797  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
  11748								 CWLIT	 $INCLUDED
1 11749								 CW	 $LIT
2 11750	0000279B  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11751								 CW	 $INCLUDED
2 11752	0000279F  200025E0					 DD	 $INCLUDED + DESIRED_BASE_EQU
  11753								 CW	 $CATCH
1 11754	000027A3  200024FC					 DD	 $CATCH	+ DESIRED_BASE_EQU
  11755								 CQBR	 DO_FORTH_NO_EXCEPTIONS
1 11756								 CW	 $QBRANCH
2 11757	000027A7  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
1 11758								 CW	 DO_FORTH_NO_EXCEPTIONS
2 11759	000027AB  200028CF					 DD	 DO_FORTH_NO_EXCEPTIONS	+ DESIRED_BASE_EQU
  11760								 $CR
1 11761								 CW	 $LIT
2 11762	000027AF  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11763								 CC	 13
2 11764	000027B3  0000000D					 DD	 13
1 11765								 CW	 $EMIT
2 11766	000027B7  200005CF					 DD	 $EMIT + DESIRED_BASE_EQU
1 11767								 CW	 $LIT
2 11768	000027BB  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11769								 CC	 10
2 11770	000027BF  0000000A					 DD	 10
1 11771								 CW	 $EMIT
2 11772	000027C3  200005CF					 DD	 $EMIT + DESIRED_BASE_EQU
  11773								 $WRITE	 <Exception caught while INCLUDing [>
1 11774								 CW	 $PTYPE
2 11775	000027C7  20000704					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 11776	000027CB  22 45	78 63 65 70 74+				 DB	 @@03D3	- $ - 1,'Exception caught while	INCLUDing ['
  11777		  69 6F	6E 20 63 61 75+
  11778		  67 68	74 20 77 68 69+
  11779		  6C 65	20 49 4E 43 4C+
  11780		  55 44	69 6E 67 20 5B
1 11781	000027EE			 @@03D3:
  11782								 CW	 $SF
1 11783	000027EE  200002DE					 DD	 $SF + DESIRED_BASE_EQU
  11784								 CW	 $FETCH
1 11785	000027F2  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
  11786								 CW	 $#SF
1 11787	000027F6  200002CD					 DD	 $#SF +	DESIRED_BASE_EQU
  11788								 CW	 $FETCH
1 11789	000027FA  20001C8D					 DD	 $FETCH	+ DESIRED_BASE_EQU
  11790								 CW	 $TYPE
1 11791	000027FE  200005F5					 DD	 $TYPE + DESIRED_BASE_EQU
  11792								 $WRITE	 <]>
1 11793								 CW	 $PTYPE
2 11794	00002802  20000704					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 11795	00002806  01 5D						 DB	 @@03D4	- $ - 1,']'
1 11796	00002808			 @@03D4:
  11797								 CW	 $2DROP
1 11798	00002808  20001565					 DD	 $2DROP	+ DESIRED_BASE_EQU
  11799								 $CR
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 208
FKernel.asm



1 11800								 CW	 $LIT
2 11801	0000280C  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11802								 CC	 13
2 11803	00002810  0000000D					 DD	 13
1 11804								 CW	 $EMIT
2 11805	00002814  200005CF					 DD	 $EMIT + DESIRED_BASE_EQU
1 11806								 CW	 $LIT
2 11807	00002818  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11808								 CC	 10
2 11809	0000281C  0000000A					 DD	 10
1 11810								 CW	 $EMIT
2 11811	00002820  200005CF					 DD	 $EMIT + DESIRED_BASE_EQU
  11812								 $WRITE	 <Latest word searched:	>
1 11813								 CW	 $PTYPE
2 11814	00002824  20000704					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 11815	00002828  16 4C	61 74 65 73 74+				 DB	 @@03D5	- $ - 1,'Latest	word searched: '
  11816		  20 77	6F 72 64 20 73+
  11817		  65 61	72 63 68 65 64+
  11818		  3A 20
1 11819	0000283F			 @@03D5:
  11820								 CW	 $POCKET
1 11821	0000283F  200002A5					 DD	 $POCKET + DESIRED_BASE_EQU
  11822								 CW	 $COUNT
1 11823	00002843  20002306					 DD	 $COUNT	+ DESIRED_BASE_EQU
  11824								 CW	 $TYPE
1 11825	00002847  200005F5					 DD	 $TYPE + DESIRED_BASE_EQU
  11826								 $CR
1 11827								 CW	 $LIT
2 11828	0000284B  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11829								 CC	 13
2 11830	0000284F  0000000D					 DD	 13
1 11831								 CW	 $EMIT
2 11832	00002853  200005CF					 DD	 $EMIT + DESIRED_BASE_EQU
1 11833								 CW	 $LIT
2 11834	00002857  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11835								 CC	 10
2 11836	0000285B  0000000A					 DD	 10
1 11837								 CW	 $EMIT
2 11838	0000285F  200005CF					 DD	 $EMIT + DESIRED_BASE_EQU
  11839								 $WRITE	 <Latest vocabulary entry: >
1 11840								 CW	 $PTYPE
2 11841	00002863  20000704					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 11842	00002867  19 4C	61 74 65 73 74+				 DB	 @@03D6	- $ - 1,'Latest	vocabulary entry: '
  11843		  20 76	6F 63 61 62 75+
  11844		  6C 61	72 79 20 65 6E+
  11845		  74 72	79 3A 20
1 11846	00002881			 @@03D6:
  11847								 CW	 $LATEST_HEAD_FETCH
1 11848	00002881  2000109E					 DD	 $LATEST_HEAD_FETCH + DESIRED_BASE_EQU
  11849								 CW	 $H_TO_HASH_NAME
1 11850	00002885  20001521					 DD	 $H_TO_HASH_NAME + DESIRED_BASE_EQU
  11851								 CW	 $DUP
1 11852	00002889  200015E8					 DD	 $DUP +	DESIRED_BASE_EQU
  11853								 CW	 $ZERONOEQ
1 11854	0000288D  20001BEF					 DD	 $ZERONOEQ + DESIRED_BASE_EQU
  11855								 CQBR	 NO_TYPE
1 11856								 CW	 $QBRANCH
Turbo Assembler	 Version 5.2	    09-01-03 11:56:48	    Page 209
FKernel.asm



2 11857	00002891  2000007E					 DD	 $QBRANCH + DESIRED_BASE_EQU
1 11858								 CW	 NO_TYPE
2 11859	00002895  200028A5					 DD	 NO_TYPE + DESIRED_BASE_EQU
  11860								 CW	 $TYPE
1 11861	00002899  200005F5					 DD	 $TYPE + DESIRED_BASE_EQU
  11862								 CBR	 DO_CR
1 11863								 CW	 $BRANCH
2 11864	0000289D  2000009C					 DD	 $BRANCH + DESIRED_BASE_EQU
1 11865								 CW	 DO_CR
2 11866	000028A1  200028B7					 DD	 DO_CR + DESIRED_BASE_EQU
  11867	000028A5			 NO_TYPE:
  11868								 CW	 $2DROP
1 11869	000028A5  20001565					 DD	 $2DROP	+ DESIRED_BASE_EQU
  11870								 $WRITE	 <(nonamed)>
1 11871								 CW	 $PTYPE
2 11872	000028A9  20000704					 DD	 $PTYPE	+ DESIRED_BASE_EQU
1 11873	000028AD  09 28	6E 6F 6E 61 6D+				 DB	 @@03D7	- $ - 1,'(nonamed)'
  11874		  65 64	29
1 11875	000028B7			 @@03D7:
  11876	000028B7			 DO_CR:
  11877								 $CR
1 11878								 CW	 $LIT
2 11879	000028B7  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11880								 CC	 13
2 11881	000028BB  0000000D					 DD	 13
1 11882								 CW	 $EMIT
2 11883	000028BF  200005CF					 DD	 $EMIT + DESIRED_BASE_EQU
1 11884								 CW	 $LIT
2 11885	000028C3  200000B2					 DD	 $LIT +	DESIRED_BASE_EQU
1 11886								 CC	 10
2 11887	000028C7  0000000A					 DD	 10
1 11888								 CW	 $EMIT
2 11889	000028CB  200005CF					 DD	 $EMIT + DESIRED_BASE_EQU
  11890	000028CF			 DO_FORTH_NO_EXCEPTIONS:
  11891								 CW	 $PBYE
1 11892	000028CF  200003AE					 DD	 $PBYE + DESIRED_BASE_EQU
  11893								 CW	 $EXIT
1 11894	000028D3  20002234					 DD	 $EXIT + DESIRED_BASE_EQU
  11895
  11896		  =MAIN:20002774	 LATEST_WORD		 = VOC_LINK
  11897	000028D7			 HERE:
  11898
  11899	000028D7						 ENDS	 MAIN
  11900								 END	 START
