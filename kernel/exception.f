\
\  exception.f
\
\  Copyright (C) 1999-2001 Illya Kysil
\

CR .( Loading EXCEPTION definitions )

CREATE-REPORT @
CREATE-REPORT OFF

:NONAME (S exc-id -- TRUE )
  ." Exception 0x" H.8 TRUE ;
CHAIN EXCEPTION-CHAIN

: .THROW-WORD
  THROW-WORD @ ?DUP IF ."  at '" COUNT TYPE ." '" THEN ;

: .THROW-ADDRESS
  THROW-ADDRESS @ ?DUP IF ."  (0x" H.8 ." )" THEN ;

: (.EXC-ADDR)
  .THROW-WORD .THROW-ADDRESS ;

USER EXC-ID 1 CELLS USER-ALLOC

: (EXCEPTION-CHAIN-EXECUTE) (S chain-element-value -- continue-flag )
  EXC-ID @ SWAP EXECUTE ;

: .EXCEPTION (S exc-id -- )
  EXC-ID !
  SPACE EXCEPTION-CHAIN ['] (EXCEPTION-CHAIN-EXECUTE) CHAIN.FOR-EACH< (.EXC-ADDR) ;

: (DO-EXCEPTION) (S exc-id-check exc-id c-addr count -- continue-flag )
  2>R = INVERT DUP 2R> ROT IF 2DROP ELSE TYPE THEN ;

: (EXCEPTION) (S c-addr count exc-id -- )
  :NONAME
  >R
  POSTPONE LITERAL
  POSTPONE SLITERAL
  POSTPONE (DO-EXCEPTION)
  POSTPONE ;
  R>
  EXCEPTION-CHAIN CHAIN.ADD ;

: (DO-EXCEPTION-XT) (S exc-id-check exc-id xt -- continue-flag )
  >R = INVERT DUP R> SWAP IF DROP ELSE EXECUTE THEN ;

: (EXCEPTION-XT) (S xt exc-id -- )
  :NONAME
  >R
  POSTPONE LITERAL
  POSTPONE LITERAL
  POSTPONE (DO-EXCEPTION-XT)
  POSTPONE ;
  R>
  EXCEPTION-CHAIN CHAIN.ADD ;

VARIABLE FREE-EXCEPTION-ID
-256 FREE-EXCEPTION-ID !

: (GET-EXC-ID) (S -- exc-id )
  -1 FREE-EXCEPTION-ID DUP @ >R +! R> ;

: EXCEPTION (S c-addr count -- exc-id )
  (GET-EXC-ID) DUP >R (EXCEPTION) R> ;

: EXCEPTION-XT (S xt -- exc-id )
  (GET-EXC-ID) DUP >R (EXCEPTION-XT) R> ;

CREATE-REPORT !
